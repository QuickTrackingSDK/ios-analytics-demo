/*! 2021-04-09 16:05:26 */
!function(t) {
    function e(a) {
        if (n[a]) return n[a].exports;
        var o = n[a] = {
            exports: {},
            id: a,
            loaded: !1
        };
        return t[a].call(o.exports, o, o.exports, e), o.loaded = !0, o.exports;
    }
    var n = {};
    return e.m = t, e.c = n, e.p = "", e(0);
}([ function(t, e, n) {
    t.exports = n(1);
}, function(t, e, n) {
    "use strict";
    n(2).initGlobal(window), function() {
        var t = n(4);
        n(127)(t);
    }();
}, function(t, e, n) {
    "use strict";
    var a, o = n(3), r = o.APLUS, i = o.APLUS_QUEUE, s = o.GOLDLOG, u = o.GOLDLOG_QUEUE, c = !1;
    try {
        a = window, c = !0;
    } catch (t) {}
    e.getContext = function() {
        return a;
    }, e.initGlobal = function(t) {
        a = t ? t : {
            v: 1,
            aplus: {},
            aplus_queue: []
        };
        var e, n;
        if (c) try {
            e = a.aplus || (a.aplus = {});
            var o = a.goldlog_queue || (a.goldlog_queue = []);
            n = a.aplus_queue || (a.aplus_queue = []), n = o.concat(n);
        } catch (t) {} else e = a.aplus, n = a.aplus_queue;
        return a.aplus = a.goldlog = e, a.aplus_queue = a.goldlog_queue = n, a;
    };
    var l = function(t) {
        if (t === r || t === s) {
            var e = a[r] || a[s];
            return e || (e = a[r] = a[s] = {}), e;
        }
        var n = u, o = i;
        if (t === o || t === n) {
            var c = a[o] || a[n];
            return c || (c = a[o] = a[n] = []), c;
        }
    };
    e.getGlobalValue = l, e.setGlobalValue = function(t, e) {
        a[t] = e;
    };
    var p = function(t) {
        var e;
        try {
            var n = l(r);
            e = n[t];
        } catch (t) {
            e = "";
        } finally {
            return e;
        }
    };
    e.getGoldlogVal = p;
    var f = function(t, e) {
        var n = !1;
        try {
            var a = l(r);
            t && (a[t] = e, n = !0);
        } catch (t) {
            n = !1;
        } finally {
            return n;
        }
    };
    e.setGoldlogVal = f, e.getClientInfo = function() {
        return p("_aplus_client") || {};
    };
}, function(t, e) {
    var n = "aplus", a = "goldlog", o = n + "_queue", r = a + "_queue", i = "mw_change", s = "MetaInfo", u = "append" + s, c = "set" + s, l = "http", p = "_pubsub", f = "other", g = "2101", d = "2201", h = "2202", _ = "19999", v = "1023", m = "1010", y = 3e4, b = "ekvs", w = 1e4, E = 1, S = 3e3, A = "$$_page_start", T = "$$_app_start", x = "$$_app_end";
    t.exports = {
        PAGE_ENTER: "PAGE_ENTER",
        CURRENT_PAGE_CONFIG: "CURRENT_PAGE_CONFIG",
        _ANONY_ID: "_anony_id",
        _USER_ID: "_user_id",
        DEFAULT_CODE: f,
        OTHER: _,
        EVENT_MAP: {
            "2101": "click",
            "2201": "exposure",
            "2202": "exposure",
            "19999": f,
            "1023": "app_show",
            "1010": "app_hide_or_unload"
        },
        EVENT_ID_MAP: {
            EXP: d,
            IMPEXP: h,
            CLK: g,
            OTHER: _,
            SHOW: v,
            H_OR_U: m
        },
        APLUS: n,
        GOLDLOG: a,
        SUBSCRIBE: n + "." + n + p + ".subscribe",
        PUBLISH: n + "." + n + p + ".publish",
        CACHE_PUBS: n + "." + n + p + ".cachePubs",
        APLUS_UNIVERSAL: n + "_universal",
        APLUS_QUEUE: o,
        GOLDLOG_QUEUE: r,
        COMPLETE: "complete",
        PV_CODE: "2001",
        EXP_CODE: d,
        CLK_CODE: g,
        OTHER_CODE: _,
        CLK: "CLK",
        EXP: "EXP",
        SPM_CNT: "spm-cnt",
        SPM_URL: "spm-url",
        SPM_PRE: "spm-pre",
        MW_CHANGE_PV: i + "_pv",
        MW_CHANGE_HJLJ: i + "_hjlj",
        HTTP: l + ":",
        HTTPS: "https:",
        APPEND_META_INFO: u,
        SET_META_INFO: c,
        APLUS_APPEND_META_INFO: n + "." + u,
        APLUS_SET_META_INFO: n + "." + c,
        PVID: "pvid",
        APLUS_LOG_PIPE: "aplus-log-pipe",
        openAPIs: [ "send", "enter", "sendPV", "record", "combineRecord", "recordUdata", "setPageSPM", "setMetaInfo", "appendMetaInfo", "updatePageProperties", "updateNextPageProperties", "updatePageUtparam", "updateNextPageUtparam", "pageAppear", "pageDisappear", "skipPage", "updateSessionProperties", "getPageSpmUrl", "getPageSpmPre" ],
        SESSION_INTERVAL: y,
        SESSION_PAUSE_TIME: "session_pause_time",
        IMPRINT: "imprint",
        CURRENT_SESSION: "current_session",
        MAX_EVENTID_LENGTH: 128,
        MAX_PROPERTY_KEY_LENGTH: 256,
        MAX_PROPERTY_KEYS_COUNT: 100,
        REQUESTS: "requests",
        SHARES: "shares",
        APLUS_SSRC: "_aplus_ssrc",
        EKVS: b,
        EVENT_MAX_COUNT: w,
        MEMORY_MAX_COUNT: E,
        EVENT_SEND_DEFAULT_INTERVAL: S,
        PAGE_START: A,
        APP_START: T,
        APP_END: x
    };
}, function(t, e, n) {
    t.exports = {
        metaInfo: {
            "aplus-ifr-pv": "1",
            "aplus-rhost-v": "",
            "aplus-rhost-g": "",
            "aplus-channel": "",
            appId: "",
            sdkId: "aplus_cloud",
            "aplus-cpvdata": {},
            "aplus-exdata": {},
            "aplus-mmstat-timeout": "10000",
            "aplus-toUT": ""
        },
        globalConfig: {
            isAli: !1,
            APLUS_QUEUE: "aplus_queue",
            ETAG_STORAGE_KEY: "__ETAG__CNA__ID__",
            script_name: "aplus.js",
            lver: "1.2.0",
            NAME_STORAGE_KEYS: {
                REFERRER: "wm_referrer",
                REFERRER_PV_ID: "refer_pv_id",
                LOST_PV_PAGE_DURATION: "lost_pv_page_duration",
                LOST_PV_PAGE_SPMAB: "lost_pv_page_spmab",
                LOST_PV_PAGE: "lost_pv_page",
                LOST_PV_PAGE_MSG: "lost_pv_page_msg"
            }
        },
        plugins: [ {
            name: "aplus_track_debug",
            path: n(5)
        }, {
            name: "aplus_body_ready",
            path: n(6)
        }, {
            name: "pubsub",
            path: n(7)
        }, {
            name: "aplus_client",
            path: n(12)
        }, {
            name: "aplus_meta_inject",
            path: n(14)
        }, {
            name: "aplus_ac",
            path: n(31)
        }, {
            name: "aplus_ae",
            path: n(45)
        }, {
            name: "name_storage",
            path: n(54)
        }, {
            name: "aplus_web_http_um",
            path: n(57)
        }, {
            name: "aplus_web_ws",
            path: n(71)
        }, {
            name: "aplus_log_inject",
            path: n(78),
            deps: [ "aplus_meta_inject" ],
            config: {
                plugins: {
                    pv: [ {
                        name: "etag",
                        path: n(79)
                    }, {
                        name: "when_to_sendpv",
                        path: n(81),
                        config: {
                            aplusWaiting: ""
                        }
                    }, {
                        name: "where_to_send",
                        path: n(82)
                    }, {
                        name: "what_to_send",
                        path: n(84),
                        config: {
                            pvdataToUt: {}
                        }
                    }, {
                        name: "cookie_data",
                        path: n(87)
                    }, {
                        name: "what_to_sendpv_userdata",
                        path: n(88),
                        deps: [ "what_to_send" ]
                    }, {
                        name: "what_to_sendpv_userdata_web",
                        path: n(90),
                        deps: [ "what_to_send", "what_to_sendpv_userdata" ]
                    }, {
                        name: "what_to_sendpv_ut2",
                        path: n(94),
                        deps: [ "what_to_send" ]
                    }, {
                        name: "what_to_sendpv_um2native",
                        path: n(96),
                        deps: [ "what_to_send" ]
                    }, {
                        name: "can_to_sendpv",
                        path: n(97),
                        config: {
                            flag: "NO"
                        }
                    }, {
                        name: "after_pv",
                        path: n(98)
                    } ],
                    hjlj: [ {
                        name: "etag",
                        path: n(79)
                    }, {
                        name: "where_to_send",
                        path: n(82),
                        deps: []
                    }, {
                        name: "what_to_send",
                        path: n(84),
                        deps: []
                    }, {
                        name: "cookie_data",
                        path: n(87)
                    }, {
                        name: "what_to_hjlj_userdata",
                        path: n(100),
                        deps: [ "what_to_send" ]
                    }, {
                        name: "what_to_hjlj_userdata_web",
                        path: n(101),
                        deps: [ "what_to_send", "what_to_hjlj_userdata" ]
                    }, {
                        name: "what_to_hjlj_ut2",
                        path: n(102),
                        deps: [ "what_to_send" ]
                    }, {
                        name: "what_to_hjlj_um2native",
                        path: n(103),
                        deps: [ "what_to_send" ]
                    } ]
                }
            }
        }, {
            name: "aplus_spm_inject",
            path: n(104)
        }, {
            name: "aplus_api",
            path: n(107)
        }, {
            name: "meta_queue",
            path: n(115)
        }, {
            name: "etag",
            path: n(79)
        }, {
            name: "etag_web_sync",
            path: n(117)
        }, {
            name: "aplusUmBridge",
            path: n(118)
        }, {
            name: "aplus_web_pageconfig",
            path: n(119)
        }, {
            name: "aplus_queue",
            path: n(121)
        }, {
            name: "hot_loader",
            path: n(122),
            config: {
                urlRules: [ {
                    rule: "aplus_webvt_messager",
                    cdnPath: [ "https://d.alicdn.com/alilog/mlog/aplus_webvt_messager.js" ]
                } ]
            }
        }, {
            name: "aplus_analytics",
            path: n(123),
            config: {
                sessionKey: "__aplus__analytics__",
                JSPATH: "https://g.alicdn.com/alilog/aplus-design/1.4.4/analytics_index.bundle.js",
                CSSPATH: "https://g.alicdn.com/alilog/aplus-design/1.4.4/analytics_index.bundle.css"
            }
        }, {
            name: "aplus_apv",
            path: n(125),
            deps: [ "aplus_log_inject", "aplus_api" ]
        } ]
    };
}, function(t, e) {
    "use strict";
    t.exports = function() {
        return {
            run: function() {
                var t = document, e = window.aplus || (window.aplus = {});
                if (!e._aplus_cplugin_track_deb) {
                    e._aplus_cplugin_track_deb = {
                        status: "init"
                    };
                    var n = window, a = function() {
                        try {
                            var e = n.localStorage, a = "aplus_track_debug_id", o = new RegExp("[?|&]" + a + "=(\\w*)"), r = location.href.match(o);
                            if (r && r.length > 0) e.setItem(a, r[1]); else {
                                var i = t.referrer || "", s = i.match(o);
                                if (s && s.length > 0) e.setItem(a, s[1]); else {
                                    var u = n.name || "", c = u.match(o);
                                    c && c.length > 0 && e.setItem(a, c[1]);
                                }
                            }
                            var l = e.getItem(a) || "";
                            if (!(l && l.length > 50)) return !1;
                            var p, f = l.split("_");
                            if (f && f.length > 0) {
                                p = f[f.length - 1].replace(/log/, "");
                                var g = new Date(), d = g.getTime(), h = new Date(), _ = h.getTime();
                                g.setFullYear(parseInt(p.substr(0, 4))), g.setMonth(parseInt(p.substr(4, 2) - 1)),
                                g.setDate(parseInt(p.substr(6, 2))), g.setHours(parseInt(p.substr(8, 2))), g.setMinutes(parseInt(p.substr(10, 2))),
                                g.setSeconds(parseInt(p.substr(12, 2))), g.setMilliseconds(0), d = g.getTime(),
                                _ = h.getTime();
                                var v = _ - d;
                                return v <= 36e5 && (l || r[1]);
                            }
                        } catch (t) {
                            return !1;
                        }
                    }, o = a();
                    if (o) {
                        e._aplus_cplugin_track_deb.status = "start";
                        var r = {
                            aplus_track_debug_id: o
                        }, i = window.aplus_queue || (window.aplus_queue = []);
                        i.push({
                            action: "aplus.appendMetaInfo",
                            arguments: [ "aplus-exdata", r ]
                        }), i.push({
                            action: "aplus.appendMetaInfo",
                            arguments: [ "aplus-cpvdata", r ]
                        }), e._aplus_cplugin_track_deb.status = "complete";
                    }
                }
            }
        };
    };
}, function(t, e) {
    "use strict";
    t.exports = function() {
        return {
            run: function(t, e) {
                var n = setInterval(function() {
                    document.getElementsByTagName("body").length && (clearInterval(n), n = null, e());
                }, 50);
                return setTimeout(function() {
                    n && clearInterval(n);
                }, 1e3), 1e3;
            }
        };
    };
}, function(t, e, n) {
    var a = n(8), o = n(2);
    t.exports = function() {
        return {
            run: function() {
                var t = o.getGlobalValue("aplus");
                t.aplus_pubsub || (t.aplus_pubsub = a.create());
            }
        };
    };
}, function(t, e, n) {
    var a = n(9);
    t.exports = a.extend({
        subscribeOnce: function(t, e) {
            this.callable(e);
            var n, a = this;
            return this.subscribe.call(this, t, n = function() {
                a.unsubscribe.call(a, t, n);
                var o = Array.prototype.slice.call(arguments);
                e.apply(a, o);
            }), this;
        },
        unsubscribe: function(t, e) {
            this.callable(e);
            var n = this.handlers[t];
            if (!n) return this;
            if ("object" == typeof n && n.length > 0) {
                for (var a = 0; a < n.length; a++) {
                    var o = e.toString(), r = n[a].toString();
                    o === r && n.splice(a, 1);
                }
                this.handlers[t] = n;
            } else delete this.handlers[t];
            return this;
        }
    });
}, function(t, e, n) {
    "use strict";
    var a = n(10), o = n(11), r = function(t) {
        for (var e = t.length, n = new Array(e - 1), a = 1; a < e; a++) n[a - 1] = t[a];
        return n;
    }, i = o.extend({
        callable: function(t) {
            if (!a(t)) throw new TypeError(t + " is not a function");
            return t;
        },
        create: function(t) {
            var e = new this();
            for (var n in t) e[n] = t[n];
            return e.handlers = [], e.pubs = {}, e;
        },
        setHandlers: function(t) {
            this.handlers = t;
        },
        subscribe: function(t, e) {
            this.callable(e);
            var n = this, a = n.pubs || {}, o = a[t] || [];
            if (o) for (var r = 0; r < o.length; r++) {
                var i = o[r]();
                e.apply(n, i);
            }
            var s = n.handlers || [];
            return t in s || (s[t] = []), s[t].push(e), n.setHandlers(s), n;
        },
        publish: function(t) {
            var e = r(arguments), n = this.handlers || [], o = n[t] ? n[t].length : 0;
            if (o > 0) for (var i = 0; i < o; i++) {
                var s = n[t][i];
                a(s) && s.apply(this, e);
            }
            return this;
        },
        cachePubs: function(t) {
            var e = this.pubs || {}, n = r(arguments);
            e[t] || (e[t] = []), e[t].push(function() {
                return n;
            });
        }
    });
    t.exports = i;
}, function(t, e) {
    "use strict";
    t.exports = function(t) {
        return "function" == typeof t;
    };
}, function(t, e, n) {
    "use strict";
    function a() {}
    var o = n(10);
    a.prototype.extend = function() {}, a.prototype.create = function() {}, a.extend = function(t) {
        return this.prototype.extend.call(this, t);
    }, a.prototype.create = function(t) {
        var e = new this();
        for (var n in t) e[n] = t[n];
        return e;
    }, a.prototype.extend = function(t) {
        var e = function() {};
        try {
            o(Object.create) || (Object.create = function(t) {
                function e() {}
                return e.prototype = t, new e();
            }), e.prototype = Object.create(this.prototype);
            for (var n in t) e.prototype[n] = t[n];
            e.prototype.constructor = e, e.extend = e.prototype.extend, e.create = e.prototype.create;
        } catch (t) {
            console && console.log(t);
        } finally {
            return e;
        }
    }, t.exports = a;
}, function(t, e, n) {
    "use strict";
    t.exports = function() {
        return {
            run: function() {
                var t = window.aplus || (window.aplus = {});
                t._aplus_client = n(13)();
            }
        };
    };
}, function(t, e) {
    "use strict";
    function n(t) {
        for (var e = [ [ "Windows NT 5.1", "winXP" ], [ "Windows NT 6.1", "win7" ], [ "Windows NT 6.0", "winVista" ], [ "Windows NT 6.2", "win8" ], [ "Windows NT 6.3", "win8.1" ], [ "Windows NT 10.0", "win10" ], [ "Ubuntu", "ubuntu" ], [ "Linux", "linux" ], [ "Windows NT 5.2", "win2003" ], [ "Windows NT 5.0", "win2000" ], [ "Windows", "winOther" ], [ "rhino", "rhino" ] ], n = 0, a = e.length; n < a; ++n) {
            var o = e[n][0];
            if (t.indexOf(o) !== -1) {
                var r = o.split(" ")[0];
                return {
                    device_model: r,
                    os: r,
                    os_version: e[n][1]
                };
            }
        }
        var i = "other";
        return {
            os: i,
            os_version: i
        };
    }
    function a(t, e) {
        var n = t.substring(t.indexOf("(") + 1, t.indexOf(")")), a = {}, o = e.toLowerCase();
        switch (o) {
          case "ipad":
          case "iphone":
          case "ipod":
          case "macintosh":
            "macintosh" === o ? /Mac OS X/.test(n) ? a.os = "Mac OS X" : a.os = "Mac OS" : a.os = "IOS",
            a.os_version = n.match(/[0-9_.]+/)[0];
            break;

          case "android":
            a.os = "Android", a.os_version = n.match(/[0-9.]+/)[0];
        }
        return a.os_version = a.os_version.replace(/_/g, "."), a;
    }
    t.exports = function() {
        var t = navigator.userAgent, e = {}, o = t.match(/iphone|ipad|android|macintosh/i), r = t.match(/Darwin/i);
        if (o) e = a(t, o[0]); else if (r) {
            var i = t.split(" ")[2];
            e = {
                os: "Darwin",
                os_version: i.match(/[0-9.]+/)[0]
            };
        } else e = n(t);
        var s = screen || {};
        return e.screenWidth = s.width, e.screenHeight = s.height, navigator && (e.userAgent = navigator.userAgent || "-",
        e.language = navigator.language || navigator.userLanguage || "-"), e;
    };
}, function(t, e, n) {
    "use strict";
    t.exports = function() {
        return {
            run: function() {
                n(15)(this.options.context.aplus_config);
            }
        };
    };
}, function(t, e, n) {
    "use strict";
    function a() {
        var t = document, e = "//g.alicdn.com";
        if (t) {
            var n = t.getElementById("beacon-aplus") || t.getElementById("tb-beacon-aplus"), a = [ "//assets.alicdn.com/g", "//g-assets.daily.taobao.net", "//alidt.oss-cn-hangzhou.aliyuncs.com" ];
            if (n) for (var o = 0; o < a.length; o++) {
                var r = new RegExp(a[o]);
                if (r.test(n.src)) {
                    e = a[o];
                    break;
                }
            }
        }
        return e;
    }
    function o() {
        s || (s = a());
        var t = "//assets.alicdn.com/g" === s || "//laz-g-cdn.alicdn.com" === s;
        return t || "int" === f.getMetaInfo("aplus-env");
    }
    function r() {
        if (navigator && navigator.userAgent) {
            var t = /iphone|android/i.test(navigator.userAgent), e = t || /TB\-PD/i.test(navigator.userAgent);
            return e;
        }
        return !0;
    }
    function i() {
        var t, e = c.getParamFromUrl("utparamcnt", location.href);
        if (e) try {
            t = e = JSON.parse(decodeURIComponent(e));
        } catch (t) {}
        return t;
    }
    var s, u = n(2), c = n(16), l = n(17), p = n(18), f = n(19);
    t.exports = function(t) {
        var e = u.getGlobalValue("aplus"), s = t.globalConfig.NAME_STORAGE_KEYS, c = n(30).getRefer(s);
        e.nameStorage = p.nameStorage, l.haveNativeFlagInUA();
        var g = e._$ = e._$ || {};
        g.is_terminal = r(), g.send_pv_count = 0, g.page_referrer = c, g.spm = {
            data: {},
            page_referrer: c
        }, e.globalConfig = t.globalConfig;
        var d = i();
        g.meta_info = f.qGet() || {};
        for (var h in t.metaInfo) if (!g.meta_info.hasOwnProperty(h)) {
            var _ = t.metaInfo[h];
            "aplus-utparam" === h ? (d && f.appendMetaInfo(h, d), f.appendMetaInfo(h, _)) : f.setMetaInfo(h, _);
        }
        e._$ = g, e.isInternational = o, e.getCdnPath = a;
    };
}, function(t, e) {
    "use strict";
    function n(t, e) {
        if (!t || !e) return "";
        var n, a = "";
        try {
            var o = new RegExp(t + "=([^&|#|?|/]+)");
            if ("spm" === t || "scm" === t) {
                var r = new RegExp("\\?.*" + t + "=([\\w\\.\\-\\*/]+)"), i = e.match(o), s = e.match(r), u = i && 2 === i.length ? i[1] : "", c = s && 2 === s.length ? s[1] : "";
                a = u > c ? u : c, a = decodeURIComponent(a);
            } else n = e.match(o), a = n && 2 === n.length ? n[1] : "";
        } catch (t) {} finally {
            return a;
        }
    }
    e.getParamFromUrl = n, e.getSPMFromUrl = function(t) {
        return n("spm", t);
    };
}, function(t, e, n) {
    "use strict";
    var a = n(2), o = "UT4Aplus", r = "Umeng4Aplus";
    e.isNative4Aplus = function() {
        var t = a.getGlobalValue("aplus"), e = t.getMetaInfo("aplus-toUT"), n = t.aplusBridgeName;
        return n === o && e === o || n === r;
    }, e.haveNativeFlagInUA = function() {
        var t = a.getGlobalValue("aplus"), e = t.aplusBridgeName;
        if (!e && "boolean" != typeof e && navigator && navigator.userAgent) {
            var n = new RegExp([ o, r ].join("|"), "i"), i = navigator.userAgent.match(n);
            e = !!i && i[0], t.aplusBridgeName = e;
        }
        return !!e;
    };
}, function(t, e, n) {
    "use strict";
    var a = n(2), o = function() {
        function t() {
            var t, e = [], n = !0;
            for (var a in f) f.hasOwnProperty(a) && (n = !1, t = f[a] || "", e.push(l(a) + u + l(t)));
            window.name = n ? o : r + l(o) + s + e.join(c);
        }
        function e(t, e, n) {
            t && (t.addEventListener ? t.addEventListener(e, n, !1) : t.attachEvent && t.attachEvent("on" + e, function(e) {
                n.call(t, e);
            }));
        }
        var n = a.getGlobalValue("nameStorage");
        if (n) return n;
        var o, r = "nameStorage:", i = /^([^=]+)(?:=(.*))?$/, s = "?", u = "=", c = "&", l = encodeURIComponent, p = decodeURIComponent, f = {}, g = {};
        return function(t) {
            if (t && 0 === t.indexOf(r)) {
                var e = t.split(/[:?]/);
                e.shift(), o = p(e.shift()) || "";
                for (var n, a, s, u = e.join(""), l = u.split(c), g = 0, d = l.length; g < d; g++) n = l[g].match(i),
                n && n[1] && (a = p(n[1]), s = p(n[2]) || "", f[a] = s);
            } else o = t || "";
        }(window.name), g.setItem = function(e, n) {
            e && "undefined" != typeof n && (f[e] = String(n), t());
        }, g.getItem = function(t) {
            return f.hasOwnProperty(t) ? f[t] : null;
        }, g.removeItem = function(e) {
            f.hasOwnProperty(e) && (f[e] = null, delete f[e], t());
        }, g.clear = function() {
            f = {}, t();
        }, g.valueOf = function() {
            return f;
        }, g.toString = function() {
            var t = window.name;
            return 0 === t.indexOf(r) ? t : r + t;
        }, e(window, "beforeunload", function() {
            t();
        }), g;
    }();
    e.nameStorage = o;
}, function(t, e, n) {
    "use strict";
    function a(t) {
        var e, n, a, o = t.length, r = {};
        for (v._microscope_data = r, e = 0; e < o; e++) n = t[e], "microscope-data" === h.tryToGetAttribute(n, "name") && (a = h.tryToGetAttribute(n, "content"),
        f.parseSemicolonContent(a, r), v.is_head_has_meta_microscope_data = !0);
        v._microscope_data_params = l.obj2param(r), v.ms_data_page_id = r.pageId, v.ms_data_shop_id = r.shopId,
        v.ms_data_instance_id = r.siteInstanceId, v.ms_data_siteCategoryId = r.siteCategory,
        v.ms_prototype_id = r.prototypeId, v.site_instance_id_or_shop_id = v.ms_data_instance_id || v.ms_data_shop_id,
        v._atp_beacon_data = {}, v._atp_beacon_data_params = "";
    }
    function o(t) {
        var e, n = function() {
            var e;
            return document.querySelector && (e = document.querySelector("meta[name=data-spm]")),
            d(t, function(t) {
                "data-spm" === h.tryToGetAttribute(t, "name") && (e = t);
            }), e;
        }, a = n();
        return a && (e = h.tryToGetAttribute(a, "data-spm-protocol")), e;
    }
    function r(t) {
        var e = t.isonepage || "-1", n = e.split("|"), a = n[0], o = n[1] ? n[1] : "";
        t.isonepage_data = {
            isonepage: a,
            urlpagename: o
        };
    }
    function i() {
        if (document) {
            var t = _.getMetaTags();
            a(t), d(t, function(t) {
                var e = h.tryToGetAttribute(t, "name");
                if (/^aplus/.test(e) && (v[e] = _.getMetaCnt(e), e === m)) try {
                    u = v[e] = JSON.parse(_.getMetaCnt(e));
                } catch (t) {}
            }), d(y, function(t) {
                v[t] = _.getMetaCnt(t);
            }), v.spm_protocol = o(t), u && (v = p.assign(v, u));
            var e, n, i = [ "aplus-rate-ahot" ], s = i.length;
            for (e = 0; e < s; e++) n = i[e], v[n] = parseFloat(v[n]);
            r(v);
        }
        return c = v || {}, v;
    }
    function s(t) {
        g.logger({
            msg: "please do not repeat setPriorityMetaInfo " + t
        });
    }
    var u, c, l = n(20), p = n(21), f = n(23), g = n(26), d = n(27), h = n(28), _ = n(29), v = {}, m = "aplus-x-settings", y = [ "ahot-aplus", "isonepage", "spm-id", "data-spm", "microscope-data" ];
    e.getInfo = i, e.qGet = function() {
        return c || i();
    }, e.setMetaInfo = function(t, e) {
        if (c || (c = {}), "object" == typeof u && u[t]) return s(t), !0;
        if (t === m) {
            if (u) s(t); else try {
                u = "object" == typeof e ? e : JSON.parse(e), c = p.assign(c, u);
            } catch (t) {
                console && console.log(t);
            }
            return !0;
        }
        return "aplus-exinfo" === t ? c[t] = "object" == typeof e ? e : l.param2obj(e) : c[t] = e,
        !0;
    };
    var b = function(t) {
        return c || (c = {}), c[t] || "";
    };
    e.getMetaInfo = b, e.appendMetaInfo = function(t, e) {
        if (t && e) {
            var n, a = function(n) {
                try {
                    var a = "string" == typeof e ? JSON.parse(e) : e;
                    i(t, p.assign(n, a));
                } catch (t) {}
            }, o = function(n) {
                try {
                    var a = "string" == typeof e ? JSON.parse(e) : e;
                    i(t, n.concat(a));
                } catch (t) {}
            }, r = function(t) {
                t.constructor === Array ? o(t) : a(t);
            }, i = function(t, e) {
                aplus.setMetaInfo(t, e, {
                    from: "appendMetaInfo"
                });
            }, s = function(n) {
                var a = l.param2obj(e);
                i(t, p.assign(n, a));
            }, u = aplus.getMetaInfo(t);
            if ("aplus-exinfo" === t && (s(u), n = !0), u) if ("object" == typeof u) r(u), n = !0; else try {
                var c = JSON.parse(u);
                "object" == typeof c && (r(c), n = !0);
            } catch (t) {}
            n || i(t, e);
        }
    };
}, function(t, e) {
    "use strict";
    function n(t, e) {
        var n, o, r, i = [], s = t.length;
        for (r = 0; r < s; r++) {
            n = t[r][0], o = t[r][1];
            var u = 0 === n.indexOf(a), c = u || e ? o : encodeURIComponent(o);
            i.push(u ? c : n + "=" + c);
        }
        return i.join("&");
    }
    e.arr2obj = function(t) {
        var e, n, a, o = {}, r = t.length;
        for (a = 0; a < r; a++) e = t[a][0], n = t[a][1], o[e] = n;
        return o;
    }, e.param2obj = function(t) {
        if ("object" == typeof t) return t;
        t || (t = "");
        for (var e = {}, n = t.split("&"), a = 0; a < n.length; a++) {
            var o = n[a], r = o.indexOf("="), i = o.split("="), s = o.length;
            if (2 === i.length) e[i[0]] = i[1] || ""; else if (r > 0) {
                var u = o.slice(0, r), c = o.slice(r + 1, s) || "";
                e[u] = c;
            } else e[i[0]] = "";
        }
        return e;
    };
    var a = "::-plain-::";
    e.s_plain_obj = a, e.arr2param = n, e.obj2param = function(t, e) {
        var n, o, r, i = [];
        for (n in t) n && t.hasOwnProperty(n) && (o = "" + t[n], r = n + "=" + o, e ? i.push(r) : i.push(0 === n.indexOf(a) ? o : r));
        return i.join("&");
    }, e.encodeGokeyValue = function(t) {
        return t;
    };
}, function(t, e, n) {
    "use strict";
    e.assign = n(22), e.makeCacheNum = function() {
        return Math.floor(268435456 * Math.random()).toString(16);
    }, e.isStartWith = function(t, e) {
        return 0 === t.indexOf(e);
    }, e.isEndWith = function(t, e) {
        var n = t.length, a = e.length;
        return n >= a && t.indexOf(e) == n - a;
    }, e.any = function(t, e) {
        var n, a = t.length;
        for (n = 0; n < a; n++) if (e(t[n])) return !0;
        return !1;
    }, e.isNumber = function(t) {
        return "number" == typeof t;
    }, e.isContain = function(t, e) {
        return t.indexOf(e) > -1;
    };
    var a = function(t) {
        var e, n = t.constructor === Array ? [] : {};
        if ("object" == typeof t) {
            if (JSON && JSON.parse) e = JSON.stringify(t), n = JSON.parse(e); else for (var o in t) n[o] = "object" == typeof t[o] ? a(t[o]) : t[o];
            return n;
        }
    };
    e.cloneDeep = a;
}, function(t, e) {
    t.exports = function(t, e) {
        return "function" != typeof Object.assign ? function(t) {
            for (var e = Object(t), n = 1; n < arguments.length; n++) {
                var a = arguments[n];
                if (null !== a) for (var o in a) Object.prototype.hasOwnProperty.call(a, o) && (e[o] = a[o]);
            }
            return e;
        }(t, e) : Object.assign({}, t, e);
    };
}, function(t, e, n) {
    "use strict";
    var a = n(24), o = n(25);
    t.exports = {
        tryToDecodeURIComponent: function(t, e) {
            var n = e || "";
            if (t) try {
                n = decodeURIComponent(t);
            } catch (t) {}
            return n;
        },
        parseSemicolonContent: function(t, e, n) {
            e = e || {};
            var o, r, i = t.split(";"), s = i.length;
            for (o = 0; o < s; o++) {
                r = i[o].split("=");
                var u = a.trim(r.slice(1).join("="));
                e[a.trim(r[0]) || ""] = n ? u : this.tryToDecodeURIComponent(u);
            }
            return e;
        },
        nodeListToArray: function(t) {
            var e, n;
            try {
                return e = [].slice.call(t);
            } catch (o) {
                e = [], n = t.length;
                for (var a = 0; a < n; a++) e.push(t[a]);
                return e;
            }
        },
        getLsCna: function(t, e) {
            if (o.set && o.test()) {
                var n = "", a = o.get(t);
                if (a) {
                    var r = a.split("_") || [];
                    n = e ? r.length > 1 && e === r[0] ? r[1] : "" : r.length > 1 ? r[1] : "";
                }
                return decodeURIComponent(n);
            }
            return "";
        },
        setLsCna: function(t, e, n) {
            n && o.set && o.test() && o.set(t, e + "_" + encodeURIComponent(n));
        },
        getUrl: function(t) {
            var e = t || "//log.mmstat.com/eg.js";
            try {
                var n = aplus.getMetaInfo("aplus-rhost-v"), a = /[[a-z|\-|\_|0-9\.]+[a-z|\-|\_|0-9]/, o = n.match(a);
                o && o[0] && (e = "//" + o[0] + "/eg.js");
            } catch (t) {}
            return e;
        }
    };
}, function(t, e) {
    "use strict";
    function n(t) {
        return "string" == typeof t ? t.replace(/^\s+|\s+$/g, "") : "";
    }
    e.trim = n;
}, function(t, e) {
    "use strict";
    t.exports = {
        set: function(t, e) {
            try {
                return localStorage.setItem(t, e), !0;
            } catch (t) {
                return !1;
            }
        },
        get: function(t) {
            try {
                return localStorage.getItem(t);
            } catch (t) {
                return "";
            }
        },
        test: function() {
            var t = "grey_test_key";
            try {
                return localStorage.setItem(t, 1), localStorage.removeItem(t), !0;
            } catch (t) {
                return !1;
            }
        },
        remove: function(t) {
            localStorage.removeItem(t);
        }
    };
}, function(t, e) {
    "use strict";
    var n = "[aplus日志]: ";
    e.logger = function(t) {
        t || (t = {});
        var e = t.level || "warn";
        console && console[e] && console[e](n + t.msg);
    };
}, function(t, e) {
    "use strict";
    t.exports = function(t, e) {
        var n, a = t.length;
        for (n = 0; n < a; n++) {
            var o = e(t[n], n);
            if ("break" === o) break;
        }
    };
}, function(t, e) {
    "use strict";
    e.tryToGetAttribute = function(t, e) {
        return t && t.getAttribute ? t.getAttribute(e) || "" : "";
    };
    var n = function(t, e, n) {
        if (t && t.setAttribute) try {
            t.setAttribute(e, n);
        } catch (t) {}
    };
    e.tryToSetAttribute = n, e.tryToRemoveAttribute = function(t, e) {
        if (t && t.removeAttribute) try {
            t.removeAttribute(e);
        } catch (a) {
            n(t, e, "");
        }
    };
}, function(t, e, n) {
    "use strict";
    function a(t) {
        return i = i || document.getElementsByTagName("head")[0], s && !t ? s : i ? s = i.getElementsByTagName("meta") : [];
    }
    function o(t, e) {
        var n, o, r, i = a(), s = i.length;
        for (n = 0; n < s; n++) o = i[n], u.tryToGetAttribute(o, "name") === t && (r = u.tryToGetAttribute(o, e || "content"));
        return r || "";
    }
    function r(t) {
        var e = {
            isonepage: "-1",
            urlpagename: ""
        }, n = t.qGet();
        if (n && n.hasOwnProperty("isonepage_data")) e.isonepage = n.isonepage_data.isonepage,
        e.urlpagename = n.isonepage_data.urlpagename; else {
            var a = o("isonepage") || "-1", r = a.split("|");
            e.isonepage = r[0], e.urlpagename = r[1] ? r[1] : "";
        }
        return e;
    }
    var i, s, u = n(28);
    e.getMetaTags = a, e.getMetaCnt = o, e.getOnePageInfo = r;
}, function(t, e, n) {
    "use strict";
    var a = n(18).nameStorage;
    e.getRefer = function(t) {
        return document.referrer || a.getItem(t.REFERRER) || "";
    };
}, function(t, e, n) {
    "use strict";
    t.exports = function() {
        return {
            run: function() {
                n(32)();
            }
        };
    };
}, function(t, e, n) {
    "use strict";
    function a(t) {
        var e, n = window.aplus || (window.aplus = {}), a = !1, l = function() {
            a || (o.wrap(function() {
                e = c.getAutoClkConfig();
                var t;
                e && e.length > 0 && (t = u.create({
                    autoClkConfig: e
                }), t.init(), s.watch_clk()), n.aplus_pubsub.subscribe("setMetaInfo", function(n, a, o) {
                    if ("aplus-auto-clk" === n) {
                        var r = c.getAutoClkConfig(a);
                        if (JSON.stringify(r) === JSON.stringify(e)) return;
                        e = r, s.clear(), o || (o = {
                            from: "setMetaInfo"
                        }), t && t.clear(o), t && t.clearDom({
                            autoClkConfig: e
                        }, o), a && (t ? t.reset({
                            autoClkConfig: e
                        }, o) : (t = u.create({
                            autoClkConfig: e
                        }), t.init()), s.watch_clk());
                    }
                });
            }, "do_init"), a = !0);
        };
        setTimeout(function() {
            a || i.logger({
                msg: "aplus_ac_init failed! please check whether aplusJs is loaded correctly!"
            });
        }, 5e3);
        var p = n._$ || {}, f = window.g_SPM || {};
        "complete" === p.status && f.spm && l();
        var g = window.aplus_queue || (window.aplus_queue = []);
        g.push({
            action: r.SUBSCRIBE,
            arguments: [ "aplusReady", function(t) {
                "complete" === t && l("aplusReady");
            } ]
        }), "function" == typeof t && t();
    }
    var o = n(33), r = n(3), i = n(26), s = n(34), u = n(44), c = n(43);
    t.exports = function() {
        var t = window.aplus || (window.aplus = {});
        t._aplus_ac || (t._aplus_ac = {
            status: "init",
            elementSelectorSizeMap: {}
        }, a(function() {
            t._aplus_ac.status = "complete";
        }));
    };
}, function(t, e, n) {
    "use strict";
    var a = n(2), o = function(t, e) {
        var n = a.getGlobalValue("aplus_queue", []);
        n.push({
            action: "aplus._aplus_cplugin_track_deb.monitor",
            arguments: [ {
                key: "APLUS_PLUGIN_DEBUG",
                title: "aplus_core",
                msg: [ "_error_:methodName=" + e + ",params=" + JSON.stringify(t) ],
                type: "updateMsg",
                description: e || "aplus_core"
            } ]
        });
    }, r = function(t, e, n) {
        var o = a.getGlobalValue("aplus_queue", []);
        o.push({
            action: [ "aplus", "_aplus_cplugin_m", e ].join("."),
            arguments: [ t, n ]
        });
    };
    e.do_tracker_jserror = function(t, e) {
        var n = "do_tracker_jserror";
        r(t, n, e), o(t, n);
        var i = a.getGlobalValue("aplus");
        i && i.aplusDebug && console && console.warn(t);
    }, e.wrap = function(t) {
        if ("function" == typeof t) try {
            t();
        } catch (t) {
            o({
                msg: t.message || t
            }, "exception");
        } finally {}
    };
}, function(t, e, n) {
    "use strict";
    var a = n(35), o = n(28), r = n(36), i = n(2), s = n(21), u = n(37), c = n(27), l = n(38), p = n(40), f = n(43), g = window, d = [ "iframe", "html", "body", "head" ], h = f.DATA_APLUS_AC_KEY, _ = function(t) {
        var e = [], n = t ? o.tryToGetAttribute(t, h) : "";
        if (n) {
            var a = i.getGoldlogVal("_aplus_ac") || {}, r = a._acHashMap || {};
            u(r, function(t, a) {
                c(a, function(t) {
                    t.hash_value === n && e.push(t.clkConfig);
                });
            });
        }
        return {
            clkConfigs: e,
            el: t
        };
    }, v = function(t) {
        var e = _(t);
        if (e && e.clkConfigs && e.clkConfigs.length > 0) return e;
        for (;(t = t.parentNode) && a.indexof(d, t.tagName ? t.tagName.toLowerCase() : "html") === -1; ) if (e = _(t),
        e && e.clkConfigs && e.clkConfigs.length > 0) return e;
    }, m = function(t) {
        t = t || g.event;
        var e = t.target || t.srcElement, n = v(e) || {}, a = n.clkConfigs;
        n && a && n.el && c(a, function(a) {
            var o = a;
            e = n.el;
            var r = aplus.spm_ab ? aplus.spm_ab.join(".") : "0.0", i = r + ".0.0", u = "";
            g.g_SPM && "function" == typeof g.g_SPM.spm && (i = g.g_SPM.spm(e));
            var c = [], l = {}, d = p.fillPropsData(o, e, l);
            d = p.fillFilterData(o, e, l);
            var h = f.getAutoClkUserFn();
            if (h) {
                var _ = p.autoUserFnHandler(h, e, o.elementSelector, t);
                if ("object" == typeof _) "object" == typeof _.userdata && (d = s.assign(d, _.userdata)),
                _.spm && (i = _.spm), _.scm && (u = _.scm); else if (_ === !1) return;
            }
            if (aplus.globalConfig.isAli) c.push("clkdata=" + JSON.stringify([ {
                exargs: d,
                scm: u,
                spm: i,
                aplusContentId: ""
            } ])); else for (var v in d) c.push(v + "=" + d[v]);
            c.push("_is_auto_clk=1");
            var m = o.method || "POST";
            aplus.globalConfig.isAli || (m = "GET"), "$$_APLUS" !== o.logkey && aplus_queue.push({
                action: "aplus.record",
                arguments: [ o.logkey, "CLK", c.join("&"), m ]
            });
        });
    };
    e.watch_clk = function() {
        r.isTouch() ? l.on(document, "tap", m) : l.on(document, "mousedown", m);
    }, e.clear = function() {
        r.isTouch() ? l.un(document, "tap", m) : l.un(document, "mousedown", m);
    };
}, function(t, e) {
    "use strict";
    e.indexof = function(t, e) {
        var n = -1;
        try {
            n = t.indexOf(e);
        } catch (o) {
            for (var a = 0; a < t.length; a++) t[a] === e && (n = a);
        } finally {
            return n;
        }
    }, e.isArray = function(t) {
        return Array.isArray ? Array.isArray(t) : /Array/.test(Object.prototype.toString.call(t));
    };
}, function(t, e, n) {
    "use strict";
    function a() {
        return i || (i = document.getElementById("beacon-aplus") || document.getElementById("tb-beacon-aplus")),
        i;
    }
    function o(t) {
        var e = a(), n = s.tryToGetAttribute(e, "cspx");
        t && n && (t.nonce = n);
    }
    var r, i, s = n(28), u = n(3);
    e.getCurrentNode = a, e.addScript = function(t, e, n) {
        var i = "script", s = document.createElement(i);
        s.type = "text/javascript", s.async = !0;
        var c = a(), l = c && c.hasAttribute("crossorigin");
        l && (s.crossOrigin = "anonymous");
        var p = u.HTTPS === location.protocol ? e || t : t;
        0 === p.indexOf("//") && (p = u.HTTPS + p), s.src = p, n && (s.id = n), o(s);
        var f = document.getElementsByTagName(i)[0];
        r = r || document.getElementsByTagName("head")[0], f ? f.parentNode.insertBefore(s, f) : r && r.appendChild(s);
    }, e.loadScript = function(t, e) {
        function n(t) {
            a.onreadystatechange = a.onload = a.onerror = null, a = null, e(t);
        }
        var a = document.createElement("script");
        if (r = r || document.getElementsByTagName("head")[0], a.async = !0, "onload" in a) a.onload = n; else {
            var i = function() {
                /loaded|complete/.test(a.readyState) && n();
            };
            a.onreadystatechange = i, i();
        }
        a.onerror = function(t) {
            n(t);
        }, a.src = t, o(a), r.appendChild(a);
    }, e.isTouch = function() {
        return "ontouchend" in document.createElement("div");
    };
}, function(t, e) {
    "use strict";
    t.exports = function(t, e) {
        if (Object && Object.keys) for (var n = Object.keys(t), a = n.length, o = 0; o < a; o++) {
            var r = n[o];
            e(r, t[r]);
        } else for (var i in t) e(i, t[i]);
    };
}, function(t, e, n) {
    "use strict";
    function a() {
        var t = aplus._$ || {}, e = t.meta_info || {}, n = e.aplus_ctap || {};
        return n && "function" == typeof n.on ? n : null;
    }
    function o(t, e) {
        var n = a();
        n ? n.on(t, e) : s.on(t, e);
    }
    function r(t, e) {
        var n = a();
        n ? n.un(t, e) : s.un(t, e);
    }
    var i = !!document.attachEvent, s = n(39);
    e.on = function(t, e, n) {
        return "tap" === e ? void o(t, n) : void (i ? t.attachEvent(e, n) : t.addEventListener(e, n));
    }, e.un = function(t, e, n) {
        return "tap" === e ? void r(t, n) : void (i ? t.detachEvent(e, n) : t.removeEventListener(e, n));
    };
}, function(t, e) {
    "use strict";
    function n(t, e) {
        return t + Math.floor(Math.random() * (e - t + 1));
    }
    function a(t, e, n) {
        var a = document.createEvent("HTMLEvents");
        if (a.initEvent(e, !0, !0), "object" == typeof n) for (var o in n) a[o] = n[o];
        t.dispatchEvent(a);
    }
    function o(t) {
        var e = document.documentElement;
        0 === Object.keys(l).length && (e.addEventListener(g, r, !1), e.addEventListener(f, i, !1),
        e.addEventListener(h, i, !1));
        for (var n = 0; n < t.changedTouches.length; n++) {
            var a = t.changedTouches[n], o = {};
            for (var s in a) o[s] = a[s];
            var u = {
                startTouch: o,
                startTime: Date.now(),
                status: d,
                element: t.srcElement || t.target
            };
            l[a.identifier] = u;
        }
    }
    function r(t) {
        for (var e = 0; e < t.changedTouches.length; e++) {
            var n = t.changedTouches[e], a = l[n.identifier];
            if (!a) return;
            var o = n.clientX - a.startTouch.clientX, r = n.clientY - a.startTouch.clientY, i = Math.sqrt(Math.pow(o, 2) + Math.pow(r, 2));
            (a.status === d || "pressing" === a.status) && i > 10 && (a.status = "panning");
        }
    }
    function i(t) {
        for (var e = 0; e < t.changedTouches.length; e++) {
            var n = t.changedTouches[e], o = n.identifier, s = l[o];
            s && (s.status === d && t.type === f && (s.timestamp = Date.now(), a(s.element, _, {
                touch: n,
                touchEvent: t
            })), delete l[o]);
        }
        var u = document.documentElement;
        0 === Object.keys(l).length && (u.removeEventListener(g, r, !1), u.removeEventListener(f, i, !1),
        u.removeEventListener(h, i, !1));
    }
    function s(t) {
        t.__fixTouchEvent || (t.addEventListener(p, function() {}, !1), t.__fixTouchEvent = !0);
    }
    function u() {
        if (!c) {
            var t = document.documentElement;
            t.addEventListener(p, o, !1), c = !0;
        }
    }
    var c = !1, l = {}, p = "touchstart", f = "touchend", g = "touchmove", d = "tapping", h = "touchcancel", _ = "aplus_tap" + n(1, 1e5);
    t.exports = {
        on: function(t, e) {
            u(), t && t.addEventListener && e && (s(t), t.addEventListener(_, e._aplus_tap_callback = function(t) {
                e(t, t.target);
            }, !1));
        },
        un: function(t, e) {
            t && t.removeEventListener && e && e._aplus_tap_callback && t.removeEventListener(_, e._aplus_tap_callback, !1);
        }
    };
}, function(t, e, n) {
    "use strict";
    function a(t, e, n) {
        var a = e.hash_value, o = i.getGoldlogVal(n) || {};
        if (o.hash_value || (o.hash_value = {}), o.hash_value[t] || (o.hash_value[t] = r.Map ? new r.Map() : {}),
        r.Map) {
            var s = o.hash_value[t].get(a);
            s ? ++s : s = 1, o.hash_value[t].set(a, s);
        } else o.hash_value[t][a] ? ++o.hash_value[t][a] : o.hash_value[t][a] = 1;
        i.setGoldlogVal(n, o);
    }
    var o = document, r = window, i = n(2), s = n(26), u = n(41), c = n(27), l = n(37), p = n(42), f = n(43), g = function(t) {
        return "[object Array]" === Object.prototype.toString.call(t);
    };
    e.isArray = g, e.getXPath = function(t) {
        var e, n, a, r, i, s, u = o.getElementsByTagName("*");
        for (e = []; t && 1 == t.nodeType; t = t.parentNode) if (t.id) {
            for (s = t.id, r = 0, n = 0; n < u.length; n++) if (i = u[n], i.id && i.id == s) {
                r++;
                break;
            }
            if (e.unshift(t.tagName.toLowerCase() + '[@id="' + s + '"]'), 1 == r) return e.unshift("/"),
            e.join("/");
        } else {
            for (n = 1, a = t.previousSibling; a; a = a.previousSibling) a.tagName == t.tagName && n++;
            e.unshift(t.tagName.toLowerCase() + "[" + n + "]");
        }
        return e.length ? "/" + e.join("/") : null;
    };
    var d = function(t, e) {
        if (e && 0 !== e.length || (e = []), t && t.length > 0) for (var n = 0; n < t.length; n++) e.push(t[n]);
        return e;
    };
    e.nodelistToArray = d, e.getElements = function(t, e) {
        var n = e || o, a = [];
        if (n.querySelectorAll) a = d(n.querySelectorAll(t.elementSelector) || []); else for (var r = document.getElementsByTagName(t.tag), i = t.filter.split("="), s = i.length > 0 ? i[0].trim() : "", u = i.length > 1 ? i[1].trim() : "", c = 0; c < r.length; c++) {
            var l = r[c], p = l.getAttribute(s), f = l.hasAttribute(s);
            !f || u && u !== p || a.push(l);
        }
        return a;
    };
    var h = function() {
        return /aplusDebug=true/.test(location.search);
    }, _ = h();
    e.IS_DEBUG = _, e.fillPropsData = function(t, e, n) {
        n || (n = {});
        try {
            var a = t.props || [];
            if (a && g(a) && a.length > 0) for (var o = 0; o < a.length; o++) if (e && e.getAttribute) {
                var r = a[o], i = e.getAttribute(r);
                void 0 !== typeof i && null !== i && "" !== i && (n[r] = encodeURIComponent(i));
            }
        } catch (t) {
            s.logger({
                msg: t && t.message
            });
        }
        return n;
    }, e.fillFilterData = function(t, e, n) {
        n || (n = {});
        try {
            var a = t.filter || "", o = a.split("=");
            if (g(o) && o[1]) n[o[0]] = o[1]; else if (o[0] && e && e.getAttribute) {
                var r = e.getAttribute(o[0]) || "";
                void 0 !== typeof r && null !== r && "" !== r && (n[o[0]] = r);
            }
        } catch (t) {
            s.logger({
                msg: t && t.message
            });
        }
        return n;
    };
    var v = function(t) {
        return !!/^POST|GET$/i.test(t);
    };
    e.isMethod = v;
    var m = function(t) {
        var e = !!/^\d+$/.test(t);
        return !!(e && parseInt(t) > 0);
    };
    e.isPkgSize = m, e.filterExpConfigRequestCfg = function(t) {
        var e = f.getDefaultRequestCfg() || {};
        try {
            var n = t || {};
            v(n.method) && (e.method = n.method), m(n.pkgSize) && (e.pkgSize = parseInt(n.pkgSize));
        } catch (t) {
            s.logger({
                msg: t && t.message
            });
        }
        return e;
    };
    var y = function(t) {
        var e = t.split("&"), n = {};
        return e.length > 0 && c(e, function(t) {
            var e = t.split("=");
            2 === e.length && (n[e[0]] = p.tryToEncodeURIComponent(e[1]));
        }), n;
    };
    e.autoUserFnHandler = function(t, e, n, a) {
        var o = {
            userdata: {},
            spm: "",
            scm: ""
        };
        try {
            var r = t(e, n, a);
            r && ("string" == typeof r ? o.userdata = y(r) : "object" == typeof r && "object" == typeof r.userdata && (l(r.userdata, function(t, e) {
                o.userdata[t] = p.tryToEncodeURIComponent(e);
            }), o.spm = r.spm, o.scm = r.scm));
        } catch (t) {
            console.log(t);
        }
        return o;
    };
    var b = function(t, e) {
        var n = "";
        if (t && e) {
            var a = [ t.getAttribute(e.filter) ], o = e.props || [];
            if (o) for (var r = 0; r < o.length; r++) a.push(t.getAttribute(o[r]));
            n = a.join("_");
        }
        return n;
    }, w = function(t) {
        var e = t.getAttribute("data-spm-anchor-id");
        if (e) {
            var n = e.split(".");
            return {
                a: n[0],
                b: n[1],
                c: n[2],
                d: n[3],
                e: n[4]
            };
        }
    };
    e.getSpmObj = w, e.getElementHash = function(t, e) {
        var n = {};
        "aplus_webvt" !== t.source && (n = w(e.ele) || (window.g_SPM ? window.g_SPM.getParam(e.ele) : {}));
        var a = "", o = "x" + e.index;
        if (n.a && n.b && n.c && n.d) {
            var r = /^i/.test(n.d) ? o : n.d;
            a = n.a + "_" + n.b + "_" + n.c + "_" + r, n.e && (a += "_" + n.e);
        } else a = o, aplus.pvid && (a += aplus.pvid);
        e.ignore_attr || (a += t.logkey + "_", a += t.elementSelector + "_", a += b(e.ele, t));
        var i = o + "_" + u.hash(a);
        return i;
    }, e.filterUnloadAttr = function(t) {
        return t && (t = t.replace(/(href|style|data-spm-anchor-id)=[\'|\"][\w|\W|\.]+[\'|\"]/, ""),
        t = t.replace(/\s\>/g, ">"), t = t.replace(new RegExp(f.DATA_APLUS_AE_KEY + "=[\\'|\\\"]\\w+[\\'|\\\"]"), ""),
        t = t.replace(new RegExp(f.DATA_APLUS_AC_KEY + "=[\\'|\\\"]\\w+[\\'|\\\"]"), "")),
        t;
    };
    var E = function(t, e) {
        for (var n, a = 0, o = t.length; a < o; ) {
            var r = t[a] || {};
            if (r.hash_value === e.hash_value) return t[a] = e, n = !0, t;
            a++;
        }
        return n || t.push(e), t;
    }, S = function(t, e, n, o) {
        if (n || (n = "ADD"), t && "object" == typeof e) {
            var r = i.getGoldlogVal(o) || {}, s = r._acHashMap || {}, u = s[t] || [], c = function() {
                for (var t = 0, n = u.length; t < n; ) {
                    var a = u[t] || {};
                    if (a.hash_value === e.hash_value) return t;
                    t++;
                }
                return -1;
            }, l = c();
            "ADD" === n && l === -1 ? (u.push(e), a(t, e, o)) : "CLEAR" === n && l > -1 ? u.splice(l, 1) : "UPDATE" === n && (u = E(u, e)),
            s[t] = u, r._acHashMap = s, i.setGoldlogVal(o, r);
        }
    };
    e.updateExpHashMap = function(t, e, n) {
        S(t, e, n, "_aplus_auto_exp");
    }, e.updateClkHashMap = function(t, e, n) {
        S(t, e, n, "_aplus_ac");
    };
    var A = function() {
        return new Date().getTime();
    };
    e.throttle = function(t, e, n) {
        var a, o, r, i, s = 0;
        n || (n = {});
        var u = function() {
            s = n.leading === !1 ? 0 : A(), a = null, i = t.apply(o, r), a || (o = r = null);
        }, c = function() {
            var c = A();
            s || n.leading !== !1 || (s = c);
            var l = e - (c - s);
            return o = this, r = arguments, l <= 0 || l > e ? (a && (clearTimeout(a), a = null),
            s = c, i = t.apply(o, r), a || (o = r = null)) : a || n.trailing === !1 || (a = setTimeout(u, l)),
            i;
        };
        return c.cancel = function() {
            clearTimeout(a), s = 0, a = o = r = null;
        }, c;
    }, e.checkIsInHashMap = function(t) {
        var e = i.getGoldlogVal(t.aplusKey) || {}, n = e.hash_value || {}, a = n[t.logkey] || (r.Map ? new r.Map() : {}), o = a && a.get ? a.get(t.hash_value) : a[t.hash_value];
        if (o > 1) return !0;
        for (var s = e._acHashMap || {}, u = s[t.logkey] || [], c = u.length, l = 0; l < c; l++) if (u[l].hash_value === t.hash_value) return !0;
        return !1;
    }, e.setRecordSuccess = function(t, e) {
        try {
            var n = t ? t.element : {}, a = t.hash_value || "";
            n && n.setAttribute && n.setAttribute(e, a);
        } catch (t) {}
    };
}, function(t, e) {
    "use strict";
    e.hash = function(t, e) {
        var n, a, o = 1315423911, r = e || o;
        for (n = t.length - 1; n >= 0; n--) a = t.charCodeAt(n), r ^= (r << 5) + a + (r >> 2);
        var i = (2147483647 & r).toString(16);
        return i;
    };
}, function(t, e) {
    "use strict";
    e.tryToEncodeURIComponent = function(t) {
        var e = t || "";
        if (t) try {
            e = encodeURIComponent(decodeURIComponent(t));
        } catch (t) {}
        return e;
    };
}, function(t, e, n) {
    "use strict";
    function a(t) {
        return aplus && aplus.getMetaInfo ? aplus.getMetaInfo(t) : r.getMetaCnt(t);
    }
    var o = n(35), r = n(29), i = n(26);
    e.DATA_APLUS_AE_KEY = "data-aplus-ae", e.DATA_APLUS_AC_KEY = "data-aplus-clk", e.LOOP_TIME = 1e3,
    e.getDefaultRequestCfg = function() {
        return {
            method: "POST",
            pkgSize: 10
        };
    };
    var s = function(t) {
        var e = t;
        try {
            var n = a("aplus-auto-exp-visible");
            n && (e = parseFloat(n)), e <= 0 && (e = t);
        } catch (n) {
            e = t;
        } finally {
            return e;
        }
    };
    e.AUTO_AT_VIEW_RATE = s(.3);
    var u = function(t) {
        var e = t;
        try {
            var n = a("aplus-auto-exp-duration"), o = parseInt(n);
            o + "" != "NaN" && (e = o);
        } catch (t) {} finally {
            return e;
        }
    };
    e.EXP_DURATION = u(300);
    var c = function(t, e) {
        var n, r = [], s = [];
        try {
            n = e || a(t);
            var u = [];
            if (n && "string" == typeof n) try {
                u = JSON.parse(n);
            } catch (t) {
                u = JSON.parse(n.replace(/'/g, '"'));
            } else "object" == typeof n && n.constructor === Array && (u = n);
            if (u && u.constructor === Array) for (var c = 0; c < u.length; c++) {
                var l = u[c] || {}, p = l.logkey || "", f = l.tag ? l.tag : "", g = l.filter, d = l.cssSelector, h = d || f && g;
                if (!p || !h) throw new Error("meta " + t + " config error, " + JSON.stringify(l));
                g = "string" == typeof g ? g.split("=") : [];
                var _ = f;
                if (g.length >= 2 ? _ += "[" + g.shift() + '="' + decodeURIComponent(g.join("")) + '"]' : 1 == g.length && g[0] && (_ += "[" + decodeURIComponent(g[0]) + "]"),
                d && (_ += d), l.elementSelector = _, o.indexof(s, _) > -1) throw new Error("meta " + t + " config error, tag_filter_cssSelector " + _ + " repeated");
                s.push(_), r.push(l);
            }
        } catch (t) {
            i.logger({
                msg: t
            });
        } finally {
            return r;
        }
    };
    e.getAutoExpConfig = function(t) {
        return c("aplus-auto-exp", t) || [];
    }, e.getAutoExpUserFn = function() {
        var t = a("aplus-auto-exp-userfn");
        if (t) {
            var e = window[t] || t;
            if ("function" == typeof e) return e;
        }
        return null;
    }, e.isThrottleWatchDom = function() {
        var t = !1;
        try {
            t = "throttle" === a("aplus-auto-exp-watchdom");
        } catch (t) {}
        return t;
    }, e.getAutoClkConfig = function(t) {
        return c("aplus-auto-clk", t) || [];
    }, e.getAutoClkUserFn = function() {
        var t = a("aplus-auto-clk-userfn");
        if (t) {
            var e = window[t] || t;
            if ("function" == typeof e) return e;
        }
        return null;
    };
}, function(t, e, n) {
    "use strict";
    var a = n(11), o = n(33), r = n(26), i = n(38), s = n(40), u = n(43), c = window, l = document, p = a.extend({
        eachElements: function(t, e) {
            for (var n = e.logkey || "", a = 0; a < t.length; a++) {
                var o = t[a];
                e._pos_id && !o.getAttribute("data-aplus-pos-id") && o.setAttribute("data-aplus-pos-id", e._pos_id);
                var r = o.getAttribute(u.DATA_APLUS_AC_KEY);
                if (!(r && r.indexOf("_") > 0)) {
                    isNaN(parseInt(r)) && (r = aplus._aplus_ac.elementSelectorSizeMap[e.elementSelector]++,
                    o.setAttribute(u.DATA_APLUS_AC_KEY, r));
                    var i = s.getElementHash(e, {
                        ignore_attr: !1,
                        index: r,
                        ele: o
                    });
                    if (!s.checkIsInHashMap({
                        logkey: n,
                        hash_value: i,
                        aplusKey: "_aplus_ac"
                    })) {
                        var c = {
                            clkConfig: e,
                            hash_value: i,
                            element: o,
                            status: 0,
                            elementSelector: e.elementSelector
                        };
                        s.updateClkHashMap(n, c, "ADD"), s.setRecordSuccess(c, u.DATA_APLUS_AC_KEY);
                    }
                }
            }
        },
        handler_dom_change: function() {
            for (var t = this, e = t.autoClkConfig || [], n = 0; n < e.length; n++) {
                var a = e[n];
                aplus._aplus_ac.elementSelectorSizeMap[a.elementSelector] || (aplus._aplus_ac.elementSelectorSizeMap[a.elementSelector] = 1);
                var o = s.getElements(a, l);
                t.eachElements(o, a);
            }
        },
        throttle_handler_dom_change: s.throttle(function() {
            this.handler_dom_change();
        }, 200),
        init_observer: function(t, e) {
            var n = new t(function() {
                o.wrap(function() {
                    var t = aplus._aplus_ac || {};
                    ++t.observer_times, e();
                }, "init_observer_init_elements");
            }), a = {
                attributes: !0,
                childList: !0,
                characterData: !0,
                subtree: !0
            };
            n.observe(l.body, a), s.IS_DEBUG && r.logger({
                msg: "aplus_ac init MutationObserver success!"
            }), this._observer = n;
        },
        init_watch_dom: function() {
            var t = this, e = aplus._aplus_ac || {};
            t._loop_observer = setTimeout(function() {
                "blur" !== e.current_win_status ? (s.IS_DEBUG && r.logger({
                    msg: "watch_dom in ac LOOP_TIME is " + u.LOOP_TIME + "ms total: " + ++e.watch_times
                }), t.throttle_handler_dom_change(), t.init_watch_dom()) : e.watch_dom_running = !1;
            }, u.LOOP_TIME);
        },
        onFocusHandler: function() {
            var t = this, e = aplus._aplus_ac || {};
            e.current_win_status = "focus", e.watch_dom_running || t.init_watch_dom();
        },
        onBlurHandler: function() {
            var t = aplus._aplus_ac || {};
            t.current_win_status = "blur";
        },
        onVisibilityChange: function() {
            var t = this;
            "visible" === l.visibilityState ? t.onFocusHandler() : "hidden" === l.visibilityState && t.onBlurHandler();
        },
        addAllListener: function() {
            var t = this, e = aplus._aplus_ac || {};
            e.watch_times = 0, e.watch_dom_running = !0, t.init_watch_dom(), c.WindVane && l.addEventListener && (i.on(l, "WV.Event.APP.Active", t.onFocusHandler, !1),
            i.on(l, "WV.Event.APP.Background", t.onBlurHandler, !1)), "hidden" in l ? i.on(c, "visibilitychange", t.onVisibilityChange) : (i.on(c, "blur", t.onBlurHandler),
            i.on(c, "focus", t.onFocusHandler));
        },
        removeAllListener: function() {
            var t = this;
            c.WindVane && l.removeEventListener && (i.un(l, "WV.Event.APP.Active", t.onFocusHandler, !1),
            i.un(l, "WV.Event.APP.Background", t.onBlurHandler, !1)), "hidden" in l ? i.un(c, "visibilitychange", t.onVisibilityChange) : (i.un(c, "blur", t.onBlurHandler),
            i.un(c, "focus", t.onFocusHandler));
        },
        init: function() {
            var t = this, e = aplus._aplus_ac || {};
            t.throttle_handler_dom_change();
            var n = c.MutationObserver || c.WebKitMutationObserver || c.MozMutationObserver;
            n ? (e.observer_times = 0, t.init_observer(n, function() {
                t.throttle_handler_dom_change();
            })) : t.addAllListener();
        },
        clearDom: function(t, e) {
            var n = this.autoClkConfig || [];
            if (e && "appendMetaInfo" !== e.from) for (var a = 0; a < n.length; a++) try {
                for (var o = n[a].elementSelector, r = l.querySelectorAll(o), i = 0; i < r.length; i++) r[i].setAttribute(u.DATA_APLUS_AC_KEY, "");
            } catch (t) {}
            this.autoClkConfig = t && t.autoClkConfig;
        },
        clear: function(t) {
            if (!t || "appendMetaInfo" !== t.from) {
                var e = aplus._aplus_ac || {};
                e._acHashMap && (e._acHashMap = {}), e.hash_value && (e.hash_value = {}), aplus._aplus_ac = e,
                this._loop_observer && (clearTimeout(this._loop_observer), this._loop_observer = null),
                this._observer ? this._observer.disconnect() : this.removeAllListener();
            }
        },
        reset: function(t, e) {
            this.clearDom(t, e), this.init();
        }
    });
    t.exports = p;
}, function(t, e, n) {
    "use strict";
    t.exports = function() {
        return {
            run: function() {
                n(46)();
            }
        };
    };
}, function(t, e, n) {
    "use strict";
    function a() {
        r = n(48), i = n(window.IntersectionObserver ? 50 : 52), s = n(53), u = n(43);
    }
    function o(t) {
        var e, n = window.aplus || (window.aplus = {}), a = !1, o = !1, g = function(t) {
            o || (o = t, a || (c.wrap(function() {
                e = u.getAutoExpConfig() || [], p.isDebugAplus() && f.logger({
                    msg: "aplus-auto-exp metaVaue init: " + JSON.stringify(e)
                });
                var t;
                e && e.length > 0 && (s.watch_data_change(), i.watch_exposure_change(e), t = r.create({
                    isThrottleWatch: u.isThrottleWatchDom(),
                    autoExpConfig: e
                }), t.init({
                    type: "init"
                })), n.aplus_pubsub.subscribe("setMetaInfo", function(n, a, o) {
                    if ("aplus-auto-exp" === n) {
                        p.isDebugAplus() && f.logger({
                            msg: "aplus-auto-exp metaVaue change: " + JSON.stringify(a)
                        });
                        var c = u.getAutoExpConfig(a);
                        if (JSON.stringify(c) === JSON.stringify(e)) return;
                        if (e = c, s.clear(), o || (o = {
                            from: "setMetaInfo"
                        }), i.clear(e, o), t && t.clear(o), a && e && e.length > 0) {
                            s.watch_data_change(), i.watch_exposure_change(e);
                            var l = {
                                isThrottleWatch: u.isThrottleWatchDom(),
                                autoExpConfig: e
                            };
                            t ? t.reset(l, o) : (t = r.create(l), t.init({
                                type: "init"
                            }));
                        }
                    }
                });
            }, "do_init"), a = !0));
        };
        setTimeout(function() {
            a || f.logger({
                msg: "aplus_auto_exp_init failed! please check whether aplusJs is loaded correctly!"
            });
        }, 5e3);
        var d = n._$ || {}, h = window.g_SPM || {};
        "complete" === d.status && h.spm && g();
        var _ = window.aplus_queue || (window.aplus_queue = []);
        _.push({
            action: l.SUBSCRIBE,
            arguments: [ "aplusReady", function(t) {
                "complete" === t && g("aplusReady");
            } ]
        }), "function" == typeof t && t();
    }
    var r, i, s, u, c = n(33), l = n(3), p = n(47), f = n(26);
    t.exports = function() {
        var t = window.aplus || (window.aplus = {});
        t._aplus_auto_exp || (t._aplus_auto_exp = {
            tags: {},
            status: "init",
            exp_times: 0,
            elementSelectorSizeMap: {}
        }, a(), o(function() {
            t._aplus_auto_exp.status = "complete";
        }));
    };
}, function(t, e, n) {
    "use strict";
    var a, o = n(2);
    e.isDebugAplus = function(t) {
        if ("boolean" == typeof a) return a;
        if ("boolean" == typeof t && (a = t), localStorage && location) {
            var e = location.href.match(/aplusDebug=(true|false)/);
            e && e.length > 0 && localStorage.setItem("aplusDebug", e[1]), a = "true" === localStorage.getItem("aplusDebug");
        } else a = !1;
        return o.setGoldlogVal("aplusDebug", a), a;
    };
}, function(t, e, n) {
    "use strict";
    var a = n(11), o = n(33), r = n(26), i = n(38), s = n(49), u = n(40), c = n(43), l = window, p = document, f = a.extend({
        eachElements: function(t, e) {
            for (var n = e.logkey || "", a = 0; a < t.length; a++) {
                var o = t[a], r = o.getAttribute(c.DATA_APLUS_AE_KEY);
                if (!(r && r.indexOf("_") > 0)) {
                    isNaN(parseInt(r)) && (r = aplus._aplus_auto_exp.elementSelectorSizeMap[e.elementSelector]++,
                    o.setAttribute(c.DATA_APLUS_AE_KEY, r));
                    var i = u.getElementHash(e, {
                        ignore_attr: !1,
                        index: r,
                        ele: o
                    }), l = s.checkIsRecord(o, i, c.DATA_APLUS_AE_KEY), p = u.checkIsInHashMap({
                        logkey: n,
                        hash_value: i,
                        aplusKey: "_aplus_auto_exp"
                    });
                    if (!l && !p) {
                        var f = {
                            expConfig: e,
                            hash_value: i,
                            element: o,
                            status: 0,
                            elementSelector: e.elementSelector
                        };
                        u.updateExpHashMap(n, f, "ADD");
                    }
                }
            }
        },
        handler_dom_change: function(t, e) {
            try {
                for (var n = this.autoExpConfig || [], a = 0; a < n.length; a++) {
                    var o = n[a], i = u.getElements(o, p);
                    aplus._aplus_auto_exp.elementSelectorSizeMap[o.elementSelector] || (aplus._aplus_auto_exp.elementSelectorSizeMap[o.elementSelector] = 1),
                    this.eachElements(i, o);
                }
                aplus.aplus_pubsub.publish("APLUS_AE_DOM_CHANGE", e || {});
            } catch (t) {
                r.logger({
                    msg: t && t.message
                });
            }
        },
        throttle_handler_dom_change: u.throttle(function(t, e) {
            this.handler_dom_change(t, e);
        }, 200),
        init_watch_dom: function() {
            var t = this, e = aplus._aplus_auto_exp || {};
            t._loop_observer = setTimeout(function() {
                "blur" !== e.current_win_status ? (aplus.aplusDebug && r.logger({
                    msg: "watch_dom in ae LOOP_TIME is " + c.LOOP_TIME + "ms total: " + ++e.watch_times
                }), t.handler_dom_change(null, {
                    type: "polling"
                }), t.init_watch_dom()) : e.watch_dom_running = !1;
            }, c.LOOP_TIME);
        },
        onFocusHandler: function() {
            var t = this, e = aplus._aplus_auto_exp || {};
            e.current_win_status = "focus", e.watch_dom_running || t.init_watch_dom();
        },
        onBlurHandler: function() {
            var t = aplus._aplus_auto_exp || {};
            t.current_win_status = "blur";
        },
        onVisibilityChange: function() {
            var t = this;
            "visible" === p.visibilityState ? t.onFocusHandler() : "hidden" === p.visibilityState && t.onBlurHandler();
        },
        addAllListener: function() {
            var t = this, e = aplus._aplus_auto_exp || {};
            e.watch_times = 0, e.watch_dom_running = !0, t.init_watch_dom(), l.WindVane && p.addEventListener && (i.on(p, "WV.Event.APP.Active", t.onFocusHandler, !1),
            i.on(p, "WV.Event.APP.Background", t.onBlurHandler, !1)), "hidden" in p ? i.on(l, "visibilitychange", t.onVisibilityChange) : (i.on(l, "blur", t.onBlurHandler),
            i.on(l, "focus", t.onFocusHandler));
        },
        removeAllListener: function() {
            var t = this;
            l.WindVane && p.removeEventListener && (i.un(p, "WV.Event.APP.Active", t.onFocusHandler, !1),
            i.un(p, "WV.Event.APP.Background", t.onBlurHandler, !1)), "hidden" in p ? i.un(l, "visibilitychange", t.onVisibilityChange) : (i.un(l, "blur", t.onBlurHandler),
            i.un(l, "focus", t.onFocusHandler));
        },
        init_observer: function(t, e) {
            var n = [ "IFRAME", "BODY", "OBJECT", "SCRIPT", "NOSCRIPT", "LINK", "STYLE" ], a = [ "class", "style" ], i = function(t) {
                return "characterData" === t.type ? [ t.target ] : "attributes" === t.type && a.indexOf(t.attributeName) > -1 ? [ t.target ] : "childList" !== t.type ? [] : void 0;
            }, s = function(t, a) {
                if (t && t.length > 0) for (var r = 0; r < t.length; r++) {
                    var i = t[r] || {}, s = i.nodeName, u = aplus._aplus_auto_exp.tags || {};
                    u[s] || (u[s] = 0), u[s]++, aplus._aplus_auto_exp.tags = u, n.indexOf(s) === -1 && o.wrap(function() {
                        var t = aplus._aplus_auto_exp || {};
                        ++t.observer_times;
                        var n = a.attributeName;
                        e(i, {
                            type: a.type + (n ? "_" + n : "")
                        });
                    }, "init_observer_init_elements");
                }
            };
            this._observer || (this._observer = new t(function(t) {
                if (t && t.length > 0) for (var e = 0; e < t.length; e++) {
                    var n = t[e] || {}, a = u.nodelistToArray(n.addedNodes || []);
                    a = u.nodelistToArray(i(n), a), s(a, n);
                }
            }));
            var c = {
                attributes: !0,
                childList: !0,
                characterData: !0,
                subtree: !0
            };
            this._observer.observe(p.body, c), u.IS_DEBUG && r.logger({
                msg: "aplus_auto_exp init MutationObserver success!"
            });
        },
        init: function(t) {
            var e = this, n = aplus._aplus_auto_exp || {};
            t && "reset" !== t.type && !n.hash_value && (n.hash_value = {}), e.handler_dom_change(null, {
                type: "aplus_init"
            });
            var a = l.MutationObserver || l.WebKitMutationObserver || l.MozMutationObserver;
            a ? (n.observer_times = 0, e.init_observer(a, function(t, n) {
                var a = t && t.parentElement ? t.parentElement : t;
                e.throttle_handler_dom_change(a, n);
            })) : e.addAllListener();
        },
        clear: function(t) {
            if (!t || "appendMetaInfo" !== t.from) {
                var e = aplus._aplus_auto_exp || {};
                e._acHashMap && (e._acHashMap = {}), e.hash_value && (e.hash_value = {}), aplus._aplus_auto_exp = e,
                this._loop_observer && (clearTimeout(this._loop_observer), this._loop_observer = null),
                this._observer ? (this._observer.takeRecords(), this._observer.disconnect()) : this.removeAllListener();
            }
        },
        clearDom: function(t, e) {
            var n = this.autoExpConfig || [];
            if (e && "appendMetaInfo" !== e.from) for (var a = 0; a < n.length; a++) try {
                for (var o = n[a].elementSelector, r = p.querySelectorAll(o), i = 0; i < r.length; i++) r[i].setAttribute(c.DATA_APLUS_AE_KEY, "");
            } catch (t) {}
            this.autoExpConfig = t && t.autoExpConfig ? t.autoExpConfig : [];
        },
        reset: function(t, e) {
            this.clearDom(t, e), this.init({
                type: "reset"
            });
        }
    });
    t.exports = f;
}, function(t, e) {
    "use strict";
    var n = document, a = function(t, e) {
        return e.x >= t.pLeftTop[0] && e.x <= t.pRightBottom[0] && e.y >= t.pLeftTop[1] && e.y <= t.pRightBottom[1];
    }, o = function(t, e) {
        var n = 0, o = a(t, e), r = a(t, {
            x: e.x + e.width,
            y: e.y
        }), i = a(t, {
            x: e.x,
            y: e.y + e.height
        }), s = a(t, {
            x: e.x + e.width,
            y: e.y + e.height
        }), u = function() {
            var t = 0;
            return o && s && (t = e.size / e.size), t;
        }, c = function() {
            var n = 0, a = 0;
            return o && r && !i && !s ? (n = e.width, a = t.pLeftBottom[1] - e.y) : !o && r && !i && s ? (n = t.pLeftTop[0] - e.x,
            a = e.y) : !o && !r && i && s ? (n = e.width, a = e.height - Math.abs(t.pLeftTop[1] - e.y)) : o && !r && i && !s && (n = t.pRightTop[0] - e.x,
            a = e.height), e.size > 0 ? Math.abs(n * a) / e.size : 0;
        }, l = function() {
            var n = 0, a = 0;
            return !o || r || i || s ? o || !r || i || s ? o || r || !i || s ? o || r || i || !s || (n = t.pLeftTop[0] - e.x,
            a = t.pLeftTop[1] - e.y) : (n = t.pRightTop[0] - e.x, a = t.pRightTop[1] - e.y) : (n = t.pLeftBottom[0] - e.x,
            a = t.pLeftBottom[1] - e.y) : (n = t.pRightBottom[0] - e.x, a = t.pRightBottom[1] - e.y),
            e.size > 0 ? Math.abs(n * a) / e.size : 0;
        };
        return n = u(), n > 0 ? n : (n = c(), n > 0 ? n : (n = l(), n > 0 ? n : n));
    };
    e.wrapViewabilityRate = function(t, e, n) {
        var a = 0;
        if (t) for (var r = 0; r < t.length; r++) if (a = o(t[r], e), a < n) return !1;
        return a;
    };
    var r = function(t) {
        return "number" == typeof t && NaN !== t;
    }, i = function(t) {
        var e = {};
        return t && ("function" == typeof t.getBoundingClientRect && (e = t.getBoundingClientRect() || {}),
        r(e.x) || r(e.left) && (e.x = e.left), r(e.y) || r(e.top) && (e.y = e.top), r(e.width) || (e.width = t.offsetWidth),
        r(e.height) || (e.height = t.offsetHeight)), e;
    };
    e.getElementPosition = i, e.getWinPositions = function(t) {
        var e = [];
        if (t && "function" == typeof document.querySelector) {
            var a = document.querySelector(t);
            if (a) {
                var o = i(a) || {};
                r(o.x) && r(o.y) && r(o.width) && r(o.height) && e.push({
                    pLeftTop: [ o.x, o.y ],
                    pRightTop: [ o.x + o.width, o.y ],
                    pLeftBottom: [ o.x, o.y + o.height ],
                    pRightBottom: [ o.x + o.width, o.y + o.height ]
                });
            }
        }
        var s = n.documentElement, u = n.body, c = s.clientWidth || u.offsetWidth || 0, l = s.clientHeight || u.offsetHeight || 0;
        return e.push({
            pLeftTop: [ 0, 0 ],
            pRightTop: [ c, 0 ],
            pLeftBottom: [ 0, l ],
            pRightBottom: [ c, l ]
        }), e;
    }, e.checkIsRecord = function(t, e, n) {
        var a;
        try {
            if (t && t.getAttribute) {
                var o = t.getAttribute(n) || "";
                a = e ? o === e : !!o;
            }
        } catch (t) {}
        return a;
    }, e.getViewabilityRateInWindow = function(t, e, n) {
        var a = 0;
        if (t) for (var o = 0; o < t.length; o++) if (a = e / t[o].size, a >= n) return a;
        return a;
    };
}, function(t, e, n) {
    "use strict";
    function a(t, e, n) {
        var a = p.getWinPositions(), o = 0, r = u.getGoldlogVal("_aplus_auto_exp") || {}, i = r._acHashMap || {};
        for (var c in i) for (var l = i[c] || [], _ = 0; _ < l.length; _++) {
            var v = l[_] || {};
            v.eventType = "IObserver";
            var m = !!n || v.element === e.target;
            if (0 === v.status && v.expConfig && m) {
                var y = e.boundingClientRect || {};
                if (y.width || y.height || (y = e.target.getBoundingClientRect() || {}), y.width && y.height) {
                    v = s.assign(v, y), v.x = y.x || y.left, v.y = y.y || y.top, v.width = y.width,
                    v.height = y.height, v.size = y.width * y.height;
                    var b = p.checkIsRecord(v.element, v.hash_value, "_aplus_auto_exp"), w = v.width * v.height * e.intersectionRatio, E = p.getViewabilityRateInWindow(a, w, h);
                    if (!b) {
                        var S = e.intersectionRatio >= d;
                        if (S || E >= h) {
                            v.exposureTime = t, v.status = 1;
                            var A = f.getAutoExpUserFn();
                            A && (v.userParams = g.autoUserFnHandler(A, v.element, v.elementSelector)), v.viewabilityRate = S ? e.intersectionRatio : E,
                            v.viewability = S ? "intersection" : "fillwindow", f.EXP_DURATION || (v.status = 2),
                            g.updateExpHashMap(c, v, "UPDATE"), ++o;
                        } else E && g.updateExpHashMap(c, Object.assign({}, l[_], {
                            lastEventType: v.eventType
                        }), "UPDATE");
                    }
                }
            }
        }
        return o;
    }
    function o(t, e) {
        var n = "APLUS_AE_EXPOSURE_CHANGE", o = t && t.type ? t.type : "IObserver", r = new Date().getTime(), i = 0;
        i = e ? l.filterStartExposureSize(r, t) : a(r, t), i > 0 && (f.EXP_DURATION ? setTimeout(function() {
            i = l.filterEndExposureSize(r, o), i > 0 && aplus.aplus_pubsub.publish(n, {
                size: i,
                eventType: o
            });
        }, f.EXP_DURATION) : aplus.aplus_pubsub.publish(n, {
            size: i,
            eventType: o
        }));
    }
    function r(t) {
        var e = {
            root: null,
            rootMargin: "0px",
            threshold: d
        };
        return new v(function(t) {
            c(t, function(t) {
                t.intersectionRatio > 0 && o(t);
            });
        }, s.assign(e, t));
    }
    function i(t) {
        if (v) {
            m.io_base || (m.io_base = r());
            var e = u.getGoldlogVal("_aplus_auto_exp") || {}, n = e._acHashMap || {};
            for (var a in n) for (var o = n[a] || [], i = 0; i < o.length; i++) {
                var s = o[i] || {};
                if (!s.inObserver) {
                    var c, l = "io_v_" + encodeURIComponent(s.positionSelector);
                    s.positionSelector && !m[l] && (c = r({
                        root: document.querySelector(s.positionSelector),
                        expConfig: t
                    }), m[l] = c), c ? c.observe(s.element) : m.io_base.observe(s.element), s.inObserver = !0;
                }
            }
        }
        return !0;
    }
    var s = n(21), u = n(2), c = n(27), l = n(51), p = n(49), f = n(43), g = n(40), d = f.AUTO_AT_VIEW_RATE, h = f.AUTO_AT_VIEW_RATE_IN_WINDOW, _ = window, v = _.IntersectionObserver, m = {};
    aplus._aplus_auto_exp.iobserverMap = m, e.watch_exposure_change = function(t) {
        aplus.aplus_pubsub.subscribe("APLUS_AE_DOM_CHANGE", function() {
            i(t);
        }), i(t);
    }, e.clear = function(t, e) {
        if (e && "appendMetaInfo" !== e.from) for (var n in m) {
            var a = m[n];
            a.disconnect();
        }
    };
}, function(t, e, n) {
    "use strict";
    var a, o = n(2), r = n(49), i = n(43), s = n(40), u = i.AUTO_AT_VIEW_RATE, c = i.AUTO_AT_VIEW_RATE_IN_WINDOW, l = function(t) {
        for (var e; t && "HTML" !== t.tagName; ) {
            e = t.style.display;
            {
                if ("none" === e) break;
                t = t.parentNode;
            }
        }
        return "none" === e;
    };
    e.filterStartExposureSize = function(t, e) {
        var n = 0, a = r.getWinPositions(), p = o.getGoldlogVal("_aplus_auto_exp") || {}, f = p._acHashMap || {};
        for (var g in f) for (var d = f[g] || [], h = 0; h < d.length; h++) {
            var _ = d[h] || {};
            if (0 === _.status && _.expConfig && !l(_.element)) {
                var v = r.getElementPosition(_.element);
                if (v.width && v.height) {
                    _.x = v.x, _.y = v.y, _.eventType = e, _.width = v.width, _.height = v.height, _.size = v.width * v.height;
                    var m;
                    _.expConfig.positionSelector && (m = r.getWinPositions(_.expConfig.positionSelector));
                    var y = r.wrapViewabilityRate(m || a, _, u), b = y >= u, w = y;
                    m && (w = r.wrapViewabilityRate(a, _, u));
                    var E = _.width * _.height * w, S = r.getViewabilityRateInWindow(a, E, c), A = r.checkIsRecord(_.element, _.hash_value, "_aplus_auto_exp");
                    if ((b || S >= c) && !A) {
                        _.exposureTime = t, _.status = 1;
                        var T = i.getAutoExpUserFn();
                        T && (_.userParams = s.autoUserFnHandler(T, _.element, _.elementSelector)), i.EXP_DURATION || (_.viewabilityRate = b ? y : S,
                        _.viewability = b ? "intersection" : "fillwindow", _.status = 2), s.updateExpHashMap(g, _, "UPDATE"),
                        ++n;
                    }
                }
            }
        }
        return n;
    }, e.filterEndExposureSize = function(t, e) {
        var n = 0;
        a || (a = r.getWinPositions());
        var i = o.getGoldlogVal("_aplus_auto_exp") || {}, c = i._acHashMap || {};
        for (var l in c) for (var p = c[l] || [], f = 0; f < p.length; f++) {
            var g = p[f] || {};
            if (1 === g.status && g.exposureTime === t && g.expConfig) {
                g.eventType = e, g.expConfig.positionSelector && (a = r.getWinPositions(g.expConfig.positionSelector));
                var d = r.wrapViewabilityRate(a, g, u), h = r.checkIsRecord(g.element, g.hash_value, "_aplus_auto_exp");
                d && !h ? (g.viewabilityRate = d, g.status = 2, s.updateExpHashMap(l, g, "UPDATE"),
                ++n) : (g.status = 0, g.exposureTime = "", s.updateExpHashMap(l, g, "UPDATE"));
            }
        }
        return n;
    };
}, function(t, e, n) {
    "use strict";
    var a = n(38), o = n(51), r = n(40), i = n(43), s = function(t) {
        var e = "APLUS_AE_EXPOSURE_CHANGE", n = t && t.type ? t.type : "init", a = new Date().getTime(), r = o.filterStartExposureSize(a, n);
        r > 0 && (i.EXP_DURATION ? setTimeout(function() {
            r = o.filterEndExposureSize(a, n), r > 0 && aplus.aplus_pubsub.publish(e, {
                size: r,
                eventType: n
            });
        }, i.EXP_DURATION) : aplus.aplus_pubsub.publish(e, {
            size: r,
            eventType: n
        }));
    }, u = r.throttle(function(t) {
        s(t);
    }, 100), c = {}, l = function(t, e) {
        if (t && t.forEach && Object.keys && document.querySelector) {
            t.forEach(function(t) {
                t.positionSelector && document.querySelector(t.positionSelector) && (c[t.positionSelector] = !0);
            });
            var n = Object.keys(c);
            n.forEach(function(t) {
                a[e] && a[e](document.querySelector(t), "scroll", function(t) {
                    u(t);
                });
            });
        }
    };
    e.watch_exposure_change = function(t) {
        aplus.aplus_pubsub.subscribe("APLUS_AE_DOM_CHANGE", s), a.on(window, "touchmove", u),
        a.on(window, "scroll", u), a.on(window, "resize", s), l(t, "on");
    }, e.clear = function(t) {
        a.un(window, "touchmove", u), a.un(window, "scroll", u), a.un(window, "resize", s),
        l(t, "un");
    };
}, function(t, e, n) {
    "use strict";
    function a(t, e, n) {
        var a = "0";
        if (n) {
            if ("spmc" === t) {
                var o = n.split(".");
                a = o[2] ? o[2] : o[3], /^(\i|\d)[0-9]+$/.test(a) && (a = "0"), n = [ o[0], o[1], a ].join(".");
            }
        } else {
            n = "";
            var r = window.g_SPM || {};
            if ("function" == typeof r.getParam) {
                var i = r.getParam(e);
                "spmc" === t ? (a = e.getAttribute("data-spm") || "0", n = [ i.a, i.b, a ].join(".")) : n = [ i.a, i.b, i.c, i.d ].join(".");
            }
        }
        return n;
    }
    function o() {
        i || (i = !0, aplus.on(window, "beforeunload", function() {
            clearInterval(r);
            for (var t = 0; t < v.length; t++) aplus_queue.push(v[t]);
        }));
    }
    var r, i, s = n(33), u = n(21), c = n(2), l = n(26), p = n(37), f = n(40), g = n(43), d = function() {
        var t = aplus.aplusDebug, e = {}, n = g.getDefaultRequestCfg(), o = c.getGoldlogVal("_aplus_auto_exp") || {}, r = o._acHashMap || {};
        return p(r, function(r, i) {
            for (var s = i || [], c = 0, p = s.length; c < p; c++) {
                var g = s[c] || {};
                if (2 === g.status) {
                    g.status = 3, f.updateExpHashMap(r, g, "UPDATE"), o.exp_times++;
                    var d, h = g.expConfig || {}, _ = goldlog.spm_ab ? goldlog.spm_ab.join(".") : "0.0.0.0", v = a(h.eltype, g.element) || _, m = "";
                    try {
                        var y = new Number(g.viewabilityRate);
                        d = y.toFixed(2);
                    } catch (t) {
                        d = g.viewabilityRate;
                    }
                    var b = {
                        _w: g.width,
                        _h: g.height,
                        _x: g.x,
                        _y: g.y,
                        _rate: d,
                        _viewability: g.viewability
                    };
                    "object" == typeof g.userParams && ("object" == typeof g.userParams.userdata && (b = u.assign(b, g.userParams.userdata)),
                    g.userParams.spm && (v = a(h.eltype, "", g.userParams.spm)), g.userParams.scm && (m = g.userParams.scm)),
                    (f.isMethod(h.method) || f.isPkgSize(h.pkgSize)) && (n = f.filterExpConfigRequestCfg(h));
                    var w = {
                        scm: m,
                        spm: v,
                        aplusContentId: ""
                    }, E = f.fillPropsData(h, g.element, b);
                    E = f.fillFilterData(h, g.element, b), aplus.globalConfig.isAli ? w.exargs = E : w = E,
                    e[r] || (e[r] = []), e[r].push(w), t && l.logger({
                        msg: "logkey = " + r + ", params = " + decodeURIComponent(JSON.stringify(w))
                    });
                }
            }
        }), {
            logkeyContainer: e,
            request_cfg: n
        };
    }, h = function(t) {
        for (var e = [], n = 0, a = t.length; n < a; n++) {
            var o = t[n] || {}, r = {};
            p(o, function(t, e) {
                "element" !== t && (r[t] = e);
            });
            var i = u.cloneDeep(r);
            i.element = o.element, e.push(i);
        }
        return e;
    }, _ = function(t) {
        var e = c.getGoldlogVal("_aplus_auto_exp") || {}, n = e._acHashMap || {}, a = [];
        p(n, function(e, n) {
            for (var o = h(n) || [], r = 0, i = o.length; r < i; r++) {
                var s = o[r] || {}, u = n[r] || {};
                if (3 === s.status) try {
                    f.setRecordSuccess(u, g.DATA_APLUS_AE_KEY), aplus.aplus_pubsub.publish("APLUS_ELEMENT_EXPOSURE", {
                        logkey: e,
                        v_origin: u,
                        options: t
                    }), a.push(u);
                } catch (t) {
                    l.logger({
                        msg: t && t.message
                    });
                }
            }
            for (;a.length > 0; ) f.updateExpHashMap(e, a.pop(), "CLEAR");
        });
    }, v = [], m = function() {
        r = setInterval(function() {
            v.length > 0 ? aplus_queue.push(v.pop()) : (clearInterval(r), r = null);
        }, 200);
    }, y = function(t, e, n) {
        var a = t.logkeyContainer || [], o = t.request_cfg || {};
        s.wrap(function() {
            p(a, function(t, a) {
                if (a && a.length > 0) {
                    for (var r = 0; r < a.length; ) {
                        var i = [], s = JSON.stringify(a.slice(r, r + o.pkgSize));
                        i.push("expdata=" + s), i.push("_is_auto_exp=1"), i.push("_eventType=" + e.eventType),
                        i.push("_method=" + o.method), i.push("_pkgSize=" + o.pkgSize);
                        var u = o.method || "POST";
                        aplus.globalConfig.isAli && "POST" === u && navigator && navigator.sendBeacon && v.length < 10 ? v.push({
                            action: "aplus.record",
                            arguments: [ t, "EXP", i.join("&"), u ]
                        }) : aplus_queue.push({
                            action: "aplus.record",
                            arguments: [ t, "EXP", i.join("&"), "GET" ]
                        }), r += o.pkgSize;
                    }
                    n(e);
                }
            });
        }, "recordAplusAt");
    }, b = function(t, e, n) {
        var a = t.logkeyContainer || [], o = t.request_cfg || {};
        s.wrap(function() {
            p(a, function(t, a) {
                if (a && a.length > 0) {
                    for (var r = 0; r < a.length; ) {
                        var i = [], s = a[r];
                        for (var u in s) i.push(u + "=" + s[u]);
                        i.push("_is_auto_exp=1"), i.push("_eventType=" + e.eventType), i.push("_method=" + o.method);
                        var c = o.method || "POST";
                        aplus.globalConfig.isAli && "POST" === c && navigator && navigator.sendBeacon && v.length < 10 ? v.push({
                            action: "aplus.record",
                            arguments: [ t, "EXP", i.join("&"), c ]
                        }) : aplus_queue.push({
                            action: "aplus.record",
                            arguments: [ t, "EXP", i.join("&"), "GET" ]
                        }), r += 1;
                    }
                    n(e);
                }
            });
        }, "recordAplusAt");
    }, w = function(t) {
        if (t.size > 0) {
            r || m();
            var e = d() || {};
            aplus.globalConfig.isAli ? y(e, t, _) : b(e, t, _);
        }
    };
    e.watch_data_change = function() {
        aplus.aplus_pubsub.subscribe("APLUS_AE_EXPOSURE_CHANGE", w), o();
    }, e.clear = function() {
        aplus.aplus_pubsub.unsubscribe("APLUS_AE_EXPOSURE_CHANGE", w);
    };
}, function(t, e, n) {
    "use strict";
    var a = n(55), o = n(3), r = n(18).nameStorage, i = n(30);
    t.exports = function() {
        return {
            recordValInWindowName: function() {
                var t, e, n = o.HTTPS == location.protocol, a = aplus.globalConfig.NAMESTORAGE_KEYS || {}, s = parent !== self;
                if (!s && n) {
                    var u = location.href, c = n && (u.indexOf("login.taobao.com") >= 0 || u.indexOf("login.tmall.com") >= 0), l = i.getRefer(a);
                    c && l ? (t = l, e = r.getItem(a.REFERRER_PV_ID)) : (t = u, e = aplus.pvid), r.setItem(a.REFERRER, t),
                    r.setItem(a.REFERRER_PV_ID, e);
                }
            },
            run: function() {
                var t = this;
                a.on(window, "beforeunload", function() {
                    t.recordValInWindowName();
                });
            }
        };
    };
}, function(t, e, n) {
    "use strict";
    function a(t, e, n) {
        var a = aplus._$ || {}, o = a.meta_info || {}, r = o.aplus_ctap || {}, i = o["aplus-touch"];
        if (r && "function" == typeof r.on) r.on(t, e); else {
            var u = "ontouchend" in document.createElement("div");
            !u || "tap" !== i && "tapSpm" !== n && "tap" !== n ? s(t, u ? "touchstart" : "mousedown", e) : c.on(t, e);
        }
    }
    function o(t) {
        try {
            document.documentElement.doScroll("left");
        } catch (e) {
            return void setTimeout(function() {
                o(t);
            }, 1);
        }
        t();
    }
    function r(t) {
        var e = 0, n = function() {
            0 === e && t(), e++;
        };
        "complete" === document.readyState && n();
        var a;
        if (document.addEventListener) a = function() {
            document.removeEventListener("DOMContentLoaded", a, !1), n();
        }, document.addEventListener("DOMContentLoaded", a, !1), window.addEventListener("load", n, !1); else if (document.attachEvent) {
            a = function() {
                "complete" === document.readyState && (document.detachEvent("onreadystatechange", a),
                n());
            }, document.attachEvent("onreadystatechange", a), window.attachEvent("onload", n);
            var r = !1;
            try {
                r = null === window.frameElement;
            } catch (t) {}
            document.documentElement.doScroll && r && o(n);
        }
    }
    function i(t) {
        "complete" === document.readyState ? t() : s(window, "load", t);
    }
    function s() {
        var t = window, e = arguments;
        if (2 === e.length) "DOMReady" === e[0] && r(e[1]), "onload" === e[0] && i(e[1]); else if (3 === e.length) {
            var n = e[0], o = e[1], s = e[2];
            if ("tap" === o || "tapSpm" === o) a(n, s, o); else {
                var c = document.attachEvent ? "attachEvent" : "addEventListener", l = !!document.attachEvent;
                n[c]((l ? "on" : "") + o, function(e) {
                    e = e || t.event;
                    var n = e.target || e.srcElement;
                    "function" == typeof s && s(e, n);
                }, !!u(o) && {
                    passive: !0
                });
            }
        }
    }
    var u = n(56), c = n(39);
    e.DOMReady = r, e.onload = i, e.on = s;
}, function(t, e) {
    var n;
    t.exports = function(t) {
        if ("boolean" == typeof n) return n;
        if (!/touch|mouse|scroll|wheel/i.test(t)) return !1;
        n = !1;
        try {
            var e = Object.defineProperty({}, "passive", {
                get: function() {
                    n = !0;
                }
            });
            window.addEventListener("test", null, e);
        } catch (t) {}
        return n;
    };
}, function(t, e, n) {
    "use strict";
    t.exports = function() {
        return {
            run: function() {
                var t = n(58), e = t.create({
                    WS: null,
                    CTX: window,
                    CTX_TYPE: "WEB"
                });
                e.run(this.options);
            }
        };
    };
}, function(t, e, n) {
    "use strict";
    var a = n(59), o = n(2), r = o.getGlobalValue("aplus"), i = n(60), s = n(62);
    t.exports = i.extend({
        handlerMiddleware: function(t) {
            var e = a.changeToObj(t.what_to_send.logdata), n = t.where_to_send.method, o = s(e, t.userdata);
            "POST" === n && navigator && navigator.sendBeacon || (o = "d=" + encodeURIComponent(o)),
            r.send(t.where_to_send.url, o, n, function() {}, function() {});
        }
    });
}, function(t, e, n) {
    "use strict";
    var a = n(2), o = a.getGlobalValue("aplus");
    e.getKeyIndex = function(t) {
        var e = {
            protocol: 1,
            event_args: 25
        };
        return e[t];
    };
    var r = "-";
    e.changeToArray = function(t, e) {
        var n = e.event_timestamp.getTime().toString(), a = e.client || {}, i = a.screenWidth || "", s = a.screenHeight || "", u = i + "*" + s, c = i && s ? u : r, l = a.userAgent || r, p = a.language || r, f = e.gokey || {}, g = JSON.stringify(f), d = JSON.stringify({
            customSdkId: e.sdk_info.customSdkId || "",
            platform_type: e.sdk_info.platformType || ""
        }), h = e.appKey || e.appId || r, _ = JSON.stringify({
            appId: a.appId || o.getMetaInfo("miniAppId") || ""
        }), v = JSON.stringify(e.sessionArgs || {}), m = JSON.stringify(e.globalArgs || {}), y = e.arg1 || e.logkey || r;
        0 === y.indexOf("/$$_") && (y = y.substring(1, y.length)), "2001" === e.event_code && e.trackerEventCode && (y = e.trackerEventCode);
        var b = [ e.cache, e.method || "GET", l, c, h, _, e._dev_id || r, "{}", e._user_nick || r, e._user_id || r, e._anony_id || r, "{}", p, e.timeZone || r, a.os || r, a.os_version || r, d, e._session_id || r, e.cna || r, n, encodeURIComponent(e.url) || r, e.event_code || r, encodeURIComponent(e.pre) || r, m, v, g, y, e.sdk_info.jsver, e.sdk_info.lver, a.appVersion || "devtools" || r, a.brand || r, r, a.networkType || r ];
        return b;
    }, e.changeToObj = function(t) {
        var e = t.event_timestamp.getTime().toString(), n = t.client || {}, a = n.userAgent || r, i = n.language || r, s = t.gokey || {}, u = JSON.stringify(s), c = JSON.stringify({
            customSdkId: t.sdk_info.customSdkId || "",
            platform_type: t.sdk_info.platformType || ""
        }), l = t.appKey || t.appId || r, p = JSON.stringify({
            appId: n.appId || o.getMetaInfo("miniAppId") || ""
        }), f = JSON.stringify(t.sessionArgs || {}), g = JSON.stringify(t.globalArgs || {}), d = t.arg1 || t.logkey || r;
        0 === d.indexOf("/$$_") && (d = d.substring(1, d.length)), "2001" === t.event_code && t.trackerEventCode && (d = t.trackerEventCode);
        var h = {};
        h.platform = t.sdk_info.platformType || "", h.sdk_type = h.platform ? h.platform + "mp" : "",
        h.appkey = l, h.sdk_version = t.sdk_info.lver;
        var _ = a.match(/iphone|ipad|android|macintosh/i);
        h.device_type = _[0] || "", h.os = n.os || "", h.os_version = n.os_version || "",
        h.jsver = t.sdk_info.jsver, h.pixel_ratio = window.devicePixelRatio || "";
        var v = Math.round(n.screenWidth * (window.devicePixelRatio || 1)), m = Math.round(n.screenHeight * (window.devicePixelRatio || 1));
        h.resolution = v > m ? v + "*" + m : m + "*" + v, h.language = i, h.app_version = o.getMetaInfo("appVersion") || "devtools",
        h.arg1 = d, h.event_args = u, h.event_code = t.event_code || "", h.sessionArgs = f,
        h.global_args = g, h.app_ext_info = p, h.time = e, h.cna = t.cna || "", h.url = t.url || "",
        h.pre = t.pre || "", h.method = t.method || "GET", h.log_id = t.cache || "", h.sdk_info = c;
        var y = o.getMetaInfo("aplus-exdata");
        return y && y.aplus_track_debug_id && (h.track_debug_id = y.aplus_track_debug_id),
        h;
    };
}, function(t, e, n) {
    "use strict";
    var a = n(11), o = n(61), r = n(3);
    t.exports = a.extend({
        subscribeLogs: function(t, e) {
            o.pushIntoGoldlogQueue(r.SUBSCRIBE, [ t, function(t) {
                t.status === r.COMPLETE && e(t);
            } ]);
        },
        getLogicSymbol: function() {
            return "ALI" === this.format ? "&" : "||";
        },
        handlerMiddleware: function() {},
        watchLOG: function() {
            var t = this;
            t.subscribeLogs(r.MW_CHANGE_PV, function(e) {
                t.handlerMiddleware(e, "pv");
            }), t.subscribeLogs(r.MW_CHANGE_HJLJ, function(e) {
                t.handlerMiddleware(e, r.APLUS);
            });
        },
        run: function() {
            this.watchLOG();
        }
    });
}, function(t, e, n) {
    "use strict";
    var a = n(2);
    e.pushIntoGoldlogQueue = function(t, e) {
        var n = a.getGlobalValue("aplus_queue"), o = a.getGlobalValue("aplus"), r = t.split("."), i = o[r[1]], s = i ? i[r[2]] : null;
        o && 2 === r.length && i ? i.apply(o, e) : 3 === r.length && s ? s.apply(i, e) : n.push({
            action: t,
            arguments: e
        });
    };
}, function(t, e, n) {
    function a(t, e) {
        try {
            var n = {}, a = f.getMetaInfo("globalproperty");
            if (a && (n.gp = a), t.url && t.url.length > 0) {
                var o = t.url.split("?");
                n.page_name = o[0] || "-", n.url_p = o[1] || "-";
            }
            if (t.pre && t.pre.length > 0) {
                var r = t.pre.split("?");
                n.ref_page_name = r[0] || "-", n.refer_p = r[1] || "-";
            }
            n.is_auto = t.is_auto ? 1 : 0;
            var i, s = e.gokey;
            i = "string" == typeof s ? JSON.parse('{"' + s.replace(/\&/g, '","').replace(/\=/g, '":"') + '"}', function(t, e) {
                return "" === t ? e : decodeURIComponent(e);
            }) : "object" == typeof s ? s : {};
            var u = d(e.logkey, Object.assign({}, n, {
                cusp: i
            }));
            return u;
        } catch (t) {
            return console.warn("JSON parse failed", t), {};
        }
    }
    function o(t, e) {
        var n = f.getMetaInfo("globalproperty"), a = {};
        if (a.r = t.arg1, n && (a.gp = n), t.url && t.url.length > 0) {
            var o = t.url.split("?");
            a.page_name = o[0] || "-", a.url_p = o[1] || "-";
        }
        if (t.pre && t.pre.length > 0) {
            var r = t.pre.split("?");
            a.ref_page_name = r[0] || "-", a.refer_p = r[1] || "-";
        }
        a.is_auto = t.is_auto ? 1 : 0;
        var i = e, s = u.deleteInfo(i, [ "_anony_id", "_dev_id", "_session_id", "_user_id", "_user_nick", "_src_pos_id" ]);
        return d(p.PAGE_START, Object.assign({}, a, {
            cusp: s
        }));
    }
    var r = n(63), i = n(64), s = n(2), u = n(65), c = n(67), l = n(68), p = n(3), f = s.getGlobalValue("aplus"), g = n(69), d = n(70);
    t.exports = function(t, e) {
        if (!t || !e || u.checkEmptyObj(t) || u.checkEmptyObj(e)) return {};
        var n = {}, s = r(i(t)), d = f.getMetaInfo(p._ANONY_ID) || t.cna;
        d && (s.anony_id = d, s.id_tracking.anony_id = d);
        var h = f.getMetaInfo("_dev_id") || t.cna;
        h && (s.dev_id = h, s.id_tracking.dev_id = h);
        var _ = null;
        _ = "2001" === t.event_code ? o(t, e) : a(t, e), _ && (n = {
            analytics: {
                ekvs: {
                    sessionid: [ r(_) ]
                }
            }
        });
        var v = f.getMetaInfo(p._USER_ID);
        v && n.analytics && (n.analytics.active_user = {
            puid: v,
            provider: f.getMetaInfo("_user_nick")
        }), n.header = u.assign(s, n.header, {
            ts: Date.now(),
            traceId: u.getRandomStr(10) + Date.now() + u.getRandomStr(9)
        });
        var m = c(n), y = g.stringfy(m);
        return l.encode(y);
    };
}, function(t, e) {
    function n(t) {
        var e, a = Array.isArray(t) ? [] : {};
        if ("object" == typeof t) {
            if (JSON && JSON.parse) e = JSON.stringify(t), a = JSON.parse(e); else for (var o in t) a[o] = "object" == typeof t[o] ? n(t[o]) : t[o];
            return a;
        }
    }
    t.exports = n;
}, function(t, e) {
    t.exports = function(t) {
        var e = {};
        return e.sdk_type = t.sdk_type, e.appkey = t.appkey, e.sdk_version = t.sdk_version,
        e.device_type = t.device_type, e.os = t.os, e.os_version = t.os_version, e.platform = t.platform,
        e.pixel_ratio = t.pixel_ratio, e.resolution = t.resolution, e.language = t.language,
        e.app_version = t.app_version, e.jsver = t.jsver, e.pre = t.pre, e.url = t.url,
        e.debugId = t.track_debug_id, e.id_tracking = {}, e;
    };
}, function(t, e, n) {
    e.getRandomStr = function(t) {
        for (var e = "", n = [ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z" ], a = 0; a < Number(t); a++) {
            var o = Math.round(Math.random() * (n.length - 1));
            e += n[o];
        }
        return e;
    }, e.startsWith = function(t, e) {
        return !(!t || !e || 0 === e.length || e.length > t.length) && t.substr(0, e.length) === e;
    }, e.assign = function(t) {
        if (void 0 === t || null === t) throw new TypeError("Cannot convert undefined or null to object");
        for (var e = Object(t), n = 1; n < arguments.length; n++) {
            var a = arguments[n];
            if (a) for (var o in a) Object.prototype.hasOwnProperty.call(a, o) && (e[o] = a[o]);
        }
        return e;
    }, e.shouldSendEvents = function(t, e, n) {
        return "number" != typeof n || "number" != typeof e || (n <= 0 || t - n > e);
    }, e.checkEvent = function(t, e) {
        var a = n(3), o = n(66);
        if (!t || "string" != typeof t) return o().e('please check trackEvent id. id should be "string" and not null'),
        !1;
        var r = [ "id", "du" ], i = {};
        if (r.forEach(function(t) {
            i[t] = 1;
        }), i[t]) return o().e("eventId不能与以下保留字冲突: " + r.join(",")), !1;
        if (t.length > a.MAX_EVENTID_LENGTH) return o().e("The maximum length of event id shall not exceed " + a.MAX_EVENTID_LENGTH),
        !1;
        if (e && ("object" != typeof e || Array.isArray(e)) && "string" != typeof e) return o().e("please check trackEvent properties. properties should be string or object(not include Array)"),
        !1;
        if ("object" == typeof e) {
            var s = 0;
            for (var u in e) if ({}.hasOwnProperty.call(e, u)) {
                if (u.length > a.MAX_PROPERTY_KEY_LENGTH) return o().e("The maximum length of property key shall not exceed " + a.MAX_PROPERTY_KEY_LENGTH),
                !1;
                if (s >= a.MAX_PROPERTY_KEYS_COUNT) return o().e("The maximum count of properties shall not exceed " + a.MAX_PROPERTY_KEYS_COUNT),
                !1;
                if (i[u]) return o().e("属性中的key不能与以下保留字冲突: " + r.join(",")), !1;
                s += 1;
            }
        }
        return !0;
    };
    var a = n(27);
    e.deleteInfo = function(t, e) {
        return a(e, function(e) {
            delete t[e];
        }), t;
    }, e.checkEmptyObj = function(t) {
        return "object" != typeof t || 0 === Object.keys(t).length;
    }, e.DataType = {
        HALF_SESSION: "half_session",
        CLOSE_SESSION: "close_session",
        EKV: "ekv",
        ENTER_PAGE: "enter_page",
        LEAVE_PAGE: "leave_page"
    }, e.AccessType = {
        MOBILE_NETWORK_2G: "2g",
        MOBILE_NETWORK_3G: "3g",
        MOBILE_NETWORK_4G: "4g",
        MOBILE_NETWORK_NONE: "none"
    };
}, function(t, e) {
    var n = "[APLUS] -- ";
    t.exports = function() {
        function t() {
            this.setDebug = function(t) {
                a = t;
            }, this.d = function() {
                if (a) try {
                    "string" == typeof arguments[0] && (arguments[0] = n + arguments[0]), console.debug.apply(console, arguments);
                } catch (t) {}
            }, this.i = function() {
                try {
                    if (a) try {
                        "string" == typeof arguments[0] && (arguments[0] = n + arguments[0]), console.info.apply(console, arguments);
                    } catch (t) {}
                } catch (t) {}
            }, this.e = function() {
                if (a) try {
                    "string" == typeof arguments[0] && (arguments[0] = n + arguments[0]), console.error.apply(console, arguments);
                } catch (t) {}
            }, this.w = function() {
                if (a) try {
                    "string" == typeof arguments[0] && (arguments[0] = n + arguments[0]), console.warn.apply(console, arguments);
                } catch (t) {}
            }, this.v = function() {
                if (a) try {
                    "string" == typeof arguments[0] && (arguments[0] = n + arguments[0]), console.log.apply(console, arguments);
                } catch (t) {}
            }, this.t = function() {
                if (a) try {
                    console.table.apply(console, arguments);
                } catch (t) {}
            }, this.tip = function() {
                try {
                    "string" == typeof arguments[0] && (arguments[0] = n + arguments[0]), console.log.apply(console, arguments);
                } catch (t) {}
            }, this.tip_w = function(t) {
                try {
                    console.log("%c " + n + t, "background:red; padding: 4px; padding-right: 8px; border-radius: 4px; color: #fff;");
                } catch (t) {}
            }, this.err = function() {
                try {
                    "string" == typeof arguments[0] && (arguments[0] = n + arguments[0]), console.error.apply(console, arguments);
                } catch (t) {}
            }, this.repeat = function(t) {
                for (var e = t; e.length < 86; ) e += t;
                return e;
            };
        }
        var e = null, a = !1;
        return function() {
            return null === e && (e = new t()), e;
        };
    }();
}, function(t, e) {
    function n(t, e) {
        var n = a(t, e);
        return t && t.id_tracking && (n[e.id_tracking || "id_tracking"] = a(t.id_tracking, s)),
        n;
    }
    function a(t, e) {
        var n = {};
        for (var a in t) e[a] ? n[e[a]] = t[a] : n[a] = t[a];
        return n;
    }
    function o(t, e) {
        var n = {};
        if (t) for (var a in t) t[a] && (n[e[a]] = t[a]);
        return n;
    }
    var r = {
        ekvs: "e",
        active_user: "active_user"
    }, i = {
        sdk_type: "sdt",
        device_model: "dm",
        language: "lang",
        device_type: "dt",
        os_version: "ov",
        appkey: "ak",
        sdk_version: "sv",
        resolution: "rl",
        testToken: "ttn",
        pixel_ratio: "pr",
        _id: "id",
        id_type: "it",
        id_tracking: "itr",
        imprint: "imp",
        debugId: "dk"
    }, s = {
        uuid: "ud",
        unionid: "und",
        openid: "od",
        anonymousid: "nd",
        alipay_id: "ad",
        device_id: "dd",
        userid: "puid"
    };
    t.exports = function(t) {
        return {
            h: n(t.header, i),
            a: o(t.analytics, r)
        };
    };
}, function(t, e) {
    var n = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", a = function(t) {
        for (var e = {}, n = 0, a = t.length; n < a; n++) e[t.charAt(n)] = n;
        return e;
    }(n), o = String.fromCharCode, r = function(t) {
        var e;
        return t.length < 2 ? (e = t.charCodeAt(0), e < 128 ? t : e < 2048 ? o(192 | e >>> 6) + o(128 | 63 & e) : o(224 | e >>> 12 & 15) + o(128 | e >>> 6 & 63) + o(128 | 63 & e)) : (e = 65536 + 1024 * (t.charCodeAt(0) - 55296) + (t.charCodeAt(1) - 56320),
        o(240 | e >>> 18 & 7) + o(128 | e >>> 12 & 63) + o(128 | e >>> 6 & 63) + o(128 | 63 & e));
    }, i = /[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g, s = function(t) {
        return t.replace(i, r);
    }, u = function(t) {
        var e = [ 0, 2, 1 ][t.length % 3], a = t.charCodeAt(0) << 16 | (t.length > 1 ? t.charCodeAt(1) : 0) << 8 | (t.length > 2 ? t.charCodeAt(2) : 0), o = [ n.charAt(a >>> 18), n.charAt(a >>> 12 & 63), e >= 2 ? "=" : n.charAt(a >>> 6 & 63), e >= 1 ? "=" : n.charAt(63 & a) ];
        return o.join("");
    }, c = function(t) {
        return t.replace(/[\s\S]{1,3}/g, u);
    }, l = function(t) {
        return c(s(t));
    }, p = function(t, e) {
        return e ? l(String(t)).replace(/[+\/]/g, function(t) {
            return "+" == t ? "-" : "_";
        }).replace(/\=/g, "") : l(String(t));
    }, f = new RegExp([ "[À-ß][-¿]", "[à-ï][-¿]{2}", "[ð-÷][-¿]{3}" ].join("|"), "g"), g = function(t) {
        switch (t.length) {
          case 4:
            var e = (7 & t.charCodeAt(0)) << 18 | (63 & t.charCodeAt(1)) << 12 | (63 & t.charCodeAt(2)) << 6 | 63 & t.charCodeAt(3), n = e - 65536;
            return o((n >>> 10) + 55296) + o((1023 & n) + 56320);

          case 3:
            return o((15 & t.charCodeAt(0)) << 12 | (63 & t.charCodeAt(1)) << 6 | 63 & t.charCodeAt(2));

          default:
            return o((31 & t.charCodeAt(0)) << 6 | 63 & t.charCodeAt(1));
        }
    }, d = function(t) {
        return t.replace(f, g);
    }, h = function(t) {
        var e = t.length, n = e % 4, r = (e > 0 ? a[t.charAt(0)] << 18 : 0) | (e > 1 ? a[t.charAt(1)] << 12 : 0) | (e > 2 ? a[t.charAt(2)] << 6 : 0) | (e > 3 ? a[t.charAt(3)] : 0), i = [ o(r >>> 16), o(r >>> 8 & 255), o(255 & r) ];
        return i.length -= [ 0, 0, 2, 1 ][n], i.join("");
    }, _ = function(t) {
        return t.replace(/[\s\S]{1,4}/g, h);
    }, v = function(t) {
        return d(_(t));
    }, m = function(t) {
        return v(String(t).replace(/[-_]/g, function(t) {
            return "-" == t ? "+" : "/";
        }).replace(/[^A-Za-z0-9\+\/]/g, ""));
    };
    e.encode = p, e.decode = m;
}, function(t, e) {
    e.stringfy = function(t) {
        if (t) try {
            return JSON.stringify(t);
        } catch (t) {}
        return "";
    }, e.parse = function(t) {
        if (t) try {
            return JSON.parse(t);
        } catch (t) {}
        return null;
    }, e.parseToArray = function(t) {
        if (t) try {
            return JSON.parse(t);
        } catch (t) {}
        return [];
    };
}, function(t, e, n) {
    var a = n(2);
    t.exports = function(t, e) {
        if ("string" != typeof t) return null;
        var n = Object.create(null);
        n.id = t, e.ts || (n.ts = Date.now());
        var o = typeof e;
        if ("string" === o && e) n[t] = e; else if ("object" === o) for (var r in e) ({}).hasOwnProperty.call(e, r) && (n[r] = e[r]);
        var i = a.getGlobalValue("aplus"), s = i.getMetaInfo("globalproperty");
        return s && (n.gp = s), n;
    };
}, function(t, e, n) {
    "use strict";
    t.exports = function() {
        return {
            run: function() {
                var t, e = window;
                try {
                    var a = "function";
                    t = typeof e.WebSocket === a && typeof e.WebSocket.prototype.send === a;
                } catch (t) {}
                var o = n(2), r = o.getGlobalValue("aplus");
                if (!r._aplus_cplugin_ws) {
                    r._aplus_cplugin_ws = !0;
                    var i = n(72), s = i.create({
                        WS: n(76),
                        CTX: window,
                        CTX_TYPE: "WEB"
                    });
                    s.run(this.options, t);
                }
            }
        };
    };
}, function(t, e, n) {
    "use strict";
    var a = window, o = n(11), r = n(3), i = n(55), s = n(37), u = n(23), c = n(25), l = n(73), p = n(74), f = n(61), g = n(59), d = [ "WS", "WS-ONLY" ];
    t.exports = o.extend({
        wsHandler: "",
        lsCnaKey: "APLUS_CNA",
        timeoutToHttp: 3e3,
        domain: "log.mmstat.com",
        retryTimesKey: "aplusx_retry_times",
        maxRetryTimesPerHour: 0,
        retryTimes: 0,
        pageLoadDateHour: "",
        getDateHour: function() {
            return l.getFormatDate() + new Date().getHours();
        },
        getRandom: function(t, e) {
            return t + Math.floor(Math.random() * (e - t + 1));
        },
        getRetryTimes: function() {
            var t = 0, e = c.get(this.retryTimesKey);
            if (e) {
                var n = e.split("-");
                2 === n.length && n[0] === this.getDateHour() && (t = parseInt(n[1]));
            }
            return t;
        },
        setRetryTimes: function(t) {
            c.set(this.retryTimesKey, this.getDateHour() + "-" + t);
        },
        doSetRetryTimes: function() {
            this.retryTimes < this.maxRetryTimesPerHour ? this.setRetryTimes(++this.retryTimes) : this.retryTimes >= this.maxRetryTimesPerHour && this.pageLoadDateHour !== this.getDateHour() && (this.retryTimes = 0,
            this.setRetryTimes(++this.retryTimes));
        },
        cheatCallback: function(t, e) {
            c.set(t.toUpperCase(), e);
        },
        newSend: function(t, e, n, a) {
            var o = this;
            s(t, function(e, n) {
                "number" != typeof n && "boolean" != typeof n || (t[e] = n + "");
            });
            var r = c.get("APLUS_SN"), i = c.get("APLUS_SY");
            try {
                r && (t.aplus_sn = r), i && (t.aplus_sy = i), t.ua = navigator.userAgent, t.lang = navigator.language;
            } catch (t) {}
            this.wsHandler.send({
                id: "id" + o.getRandom(1, 1e8),
                startTime: new Date().getTime(),
                type: e,
                msg: {
                    postData: t,
                    url: n
                },
                method: a
            });
        },
        getPvPostData: function(t) {
            var e = t.what_to_send.logdata, n = t.where_to_send.url;
            return {
                postData: e,
                mmurl: n
            };
        },
        getPostData: function(t) {
            var e = t.what_to_send.url, n = t.what_to_send.logdata;
            return n.gokey && (n.gokey.aws = 1), {
                postData: n,
                mmurl: e
            };
        },
        log_callback: function(t, e) {
            var n = this.getPostData(t);
            n && this.newSend(g.changeToArray(this.format, n.postData).join(this.getLogicSymbol()), e, n.mmurl, t.method);
        },
        getCnaData: function() {
            var t = u.getLsCna(this.lsCnaKey), e = p.getCookieCna("cna"), n = {
                cna: t || e,
                params: []
            };
            return t && !e && n.params.push("lstag=1"), n;
        },
        cnaCallback: function(t, e) {
            var n = u.getLsCna(this.lsCnaKey), a = p.getCookieCna("cna");
            n === a && n === e && a === e || (u.setLsCna(this.lsCnaKey, l.getFormatDate(), e),
            p.setCookieCna(t, e, {
                SameSite: "none"
            }));
        },
        watchWSStatus: function(t) {
            var e = this;
            this.wsHandler.subscribe("APLUS_WS_OPEN", function() {
                t === e.maxRetryTimesPerHour && (e.retryTimes = 0, e.setRetryTimes(e.retryTimes));
            }), this.wsHandler.subscribe("APLUS_WS_ERROR", function() {
                e.doSetRetryTimes(), e.msgQueueToHttpRequest();
            }), this.wsHandler.subscribe("APLUS_WS_EXCEPTION", function() {
                e.doSetRetryTimes(), e.msgQueueToHttpRequest();
            }), this.wsHandler.subscribe("APLUS_WS_CLOSE", function() {
                e.msgQueueToHttpRequest();
            });
        },
        startWebSocket: function() {
            var t = this, e = this.getCnaData();
            this.wsHandler = this.WS.create({
                cna: e.cna,
                params: e.params,
                createTime: new Date().getTime(),
                ctx: this.CTX
            }), this.wsHandler.startWS(), this.watchWSStatus(this.getRetryTimes()), this.wsHandler.subscribe("APLUS_WS_SERVER_MSG", function(e) {
                if (e) {
                    var n = e.indexOf(":"), a = e.substr(0, n), o = e.substr(n + 1);
                    switch (a) {
                      case "cna":
                        t.cnaCallback(a, o);
                        break;

                      case "aplus_sn":
                      case "aplus_sy":
                        t.cheatCallback(a, o);
                        break;

                      default:
                        var r = {};
                        r[a] = o, aplus.send(t.domain + "/s", r);
                    }
                }
            });
        },
        subscribeLogs: function(t, e) {
            f.pushIntoGoldlogQueue(r.SUBSCRIBE, [ t, function(t) {
                t.status === r.COMPLETE && e(t);
            } ]);
        },
        getLogicSymbol: function() {
            return "ALI" === this.format ? "&" : "||";
        },
        httpRequestBeacon: function(t, e, n, a) {
            var o = g.getKeyIndex("protocol"), r = g.getKeyIndex("event_args"), i = JSON.parse(t[r]);
            a && (i._j = 1), delete i.aplus_sn, delete i.aplus_sy, delete i.ua, delete i.lang,
            delete i.aws, t[r] = JSON.stringify(i), this.isPersistentLink(n) && (n = navigator && navigator.sendBeacon ? "POST" : "GET"),
            t[o] = n, aplus.send(e, t.join(this.getLogicSymbol()), n);
        },
        watchLOG: function(t) {
            var e = this, n = function(n, a) {
                var o = n.where_to_send.method, r = g.changeToArray(e.format, n.what_to_send.logdata);
                t && e.isPersistentLink(o) ? e.retryTimes >= e.maxRetryTimesPerHour ? e.httpRequestBeacon(r, n.where_to_send.url, o, !0) : e.log_callback(n, a) : e.httpRequestBeacon(r, n.where_to_send.url, o);
            };
            e.subscribeLogs("mw_change_pv", function(t) {
                n(t, "pv");
            }), e.subscribeLogs("mw_change_hjlj", function(t) {
                n(t, "aplus");
            });
        },
        changeToHttpRequest: function(t) {
            var e = this;
            if (t && t.length > 0) for (var n = 0; n < t.length; n++) {
                var a = t[n], o = a.msg, r = o.postData.split("||"), i = navigator && navigator.sendBeacon ? "POST" : "GET";
                e.httpRequestBeacon(r, o.url, i, !0);
            }
        },
        dataInArray: function(t, e) {
            for (var n, a = 0; a < t.length; a++) t[a].id === e.id && (n = !0);
            return n;
        },
        reduceDataInArray: function(t, e) {
            for (var n = [], a = 0; a < t.length; a++) t[a].id !== e.id && n.push(t[a]);
            return n;
        },
        msgQueueToHttpRequest: function() {
            var t = this.wsHandler.getMsgQueue();
            this.changeToHttpRequest(t), this.wsHandler.clearMsgQueue();
        },
        watchQueue: function() {
            var t = this;
            i.on(a, "beforeunload", function() {
                t.msgQueueToHttpRequest();
            }), this.wsHandler.subscribe("APLUS_WS_MSG_QUEUE_CHANGE", function(e) {
                a.setTimeout(function() {
                    var n = t.wsHandler.getMsgQueue();
                    if (t.dataInArray(n, e)) {
                        t.doSetRetryTimes(), t.changeToHttpRequest([ e ]);
                        var a = t.reduceDataInArray(n, e);
                        t.wsHandler.setMsgQueue(a);
                    }
                }, t.timeoutToHttp);
            });
        },
        watchDomain: function() {
            var t = this;
            f.pushIntoGoldlogQueue(r.SUBSCRIBE, [ "aplusInitContext", function(e) {
                var n = e ? e.where_to_send : {}, a = n.url.match(/(\w|-)+\.(\w|-)+\.(\w|-)+/);
                a && a.length > 0 && (t.domain = a[0]);
            } ]);
        },
        isPersistentLink: function(t) {
            return d.indexOf(t) > -1;
        },
        run: function(t, e) {
            var n = {
                aws: 1
            };
            e || (n._j = 1), f.pushIntoGoldlogQueue("aplus.appendMetaInfo", [ "aplus-exdata", n ]),
            f.pushIntoGoldlogQueue("aplus.appendMetaInfo", [ "aplus-cpvdata", n ]), this.retryTimes = this.getRetryTimes(),
            this.pageLoadDateHour = this.getDateHour(), e && this.isPersistentLink(t.context.where_to_send.method) ? (this.startWebSocket(),
            this.watchLOG(e), this.watchQueue(), this.watchDomain()) : this.watchLOG(e);
        }
    });
}, function(t, e) {
    "use strict";
    function n(t, e, n) {
        var a = "" + Math.abs(t), o = e - a.length, r = t >= 0;
        return (r ? n ? "+" : "" : "-") + Math.pow(10, Math.max(0, o)).toString().substr(1) + a;
    }
    e.getFormatDate = function(t) {
        var e = new Date();
        try {
            return [ e.getFullYear(), n(e.getMonth() + 1, 2, 0), n(e.getDate(), 2, 0) ].join(t || "");
        } catch (t) {
            return "";
        }
    };
}, function(t, e, n) {
    "use strict";
    function a(t) {
        if (!document) return "";
        var e = document.cookie.match(new RegExp("(?:^|;)\\s*" + t + "=([^;]+)"));
        return e ? e[1] : "";
    }
    function o(t) {
        var e = new Date(), n = "";
        return "session" === t.expires || (t.expires && ("number" == typeof t.expires || t.expires.toUTCString) ? ("number" == typeof t.expires ? e.setTime(e.getTime() + 24 * t.expires * 60 * 60 * 1e3) : e = t.expires,
        n = "expires=" + e.toUTCString()) : (e.setTime(e.getTime() + 63072e7), n = "expires=" + e.toUTCString())),
        n;
    }
    function r(t, e, n) {
        if (document) return n || (n = {}), e += ";" + (n.expires || o(n)), e += "; path=" + (n.path ? n.path : "/"),
        e += "; domain=" + n.domain, document.cookie = t + "=" + e, n.SameSite && /Chrome\/8\d+/.test(navigator.userAgent) && (e += "; SameSite=" + n.SameSite,
        e += "; Secure", document.cookie = t + "=" + e), a(t);
    }
    function i(t, e, n) {
        try {
            if (!document) return "";
            if (n || (n = {}), n.domain) r(t, e, n); else for (var a = u.getDomains(), o = 0; o < a.length; ) n.domain = a[o],
            r(t, e, n) ? o = a.length : o++;
        } catch (t) {}
    }
    var s = n(27), u = n(75);
    e.getCookie = a, e.trySetCookie = r, e.setCookie = i;
    var c = [ "tracknick", "thw", "cna" ];
    e.getData = function() {
        var t = {};
        if (s(c, function(e) {
            t[e] = a(e);
        }), location) {
            var e = location.hostname;
            t.cnaui = /\btanx\.com$/.test(e) ? a("cnaui") : "";
        }
        return t;
    }, e.getHng = function() {
        return encodeURIComponent(a("hng") || "");
    }, e.getCookieCna = function(t) {
        return a(t) || a("_" + t);
    }, e.setCookieCna = function(t, e, n) {
        for (var a = u.getDomains(), i = 0; i < a.length; ) if (n.domain = a[i], r(t, e, n)) i = a.length; else {
            if (i === a.length - 1) {
                var s = e + ";" + o(n);
                s += "; path=/", document.cookie = "_" + t + "=" + s;
            }
            i++;
        }
    };
}, function(t, e) {
    "use strict";
    e.getDomains = function() {
        var t = [];
        try {
            for (var e = location.hostname, n = e.split("."), a = 2; a <= n.length; ) t.push(n.slice(n.length - a).join(".")),
            a++;
        } catch (t) {}
        return t;
    };
}, function(t, e, n) {
    "use strict";
    var a = "ws.mmstat.com", o = n(3), r = n(8), i = n(61), s = n(77);
    t.exports = r.extend({
        status: "inactive",
        websocket: {},
        wsindexPre: "wss",
        wsindex: 0,
        msg_queue: [],
        setWsHandler: function(t) {
            return this.websocket[this.wsindexPre + ++this.wsindex] = new this.ctx.WebSocket(t);
        },
        getWsHandler: function() {
            return this.websocket[this.wsindexPre + this.wsindex];
        },
        getMsgQueue: function() {
            return this.msg_queue;
        },
        clearMsgQueue: function() {
            this.msg_queue = [];
        },
        setMsgQueue: function(t) {
            this.msg_queue = t;
        },
        proessMsgQueue: function(t) {
            var e, n = this, a = 0;
            if (t && t.length > 0) for (e = t.length; a < e; ) n.send(t.shift()), a++; else for (e = n.msg_queue.length; a < e; ) n.send(n.msg_queue.shift()),
            a++;
        },
        initWebSocket: function(t) {
            var e = this, n = location.protocol === o.HTTPS ? "wss://" : "ws://", a = n + t + "/ws", r = "initWebSocket";
            try {
                e.cna && (a += "/" + e.cna), e.params && e.params.length > 0 && (a += "?" + e.params.join("&"));
                var i = e.setWsHandler(a), u = new Date().getTime();
                i.onopen = function() {
                    e.status = "active";
                    var t = e.getMsgQueue();
                    t.length > 0 && e.proessMsgQueue(t);
                    var n = "connTime=" + (new Date().getTime() - u);
                    s.catchException(r + "_onopen", {
                        message: n
                    }), e.publish("APLUS_WS_OPEN");
                }, i.onerror = function(t) {
                    e.status = "inactive";
                    var n = t ? t.target : {}, a = t ? t.timeStamp : "";
                    s.catchException(r + "_onerror", {
                        message: "targetUrl=" + n.url + "&readyState=" + n.readyState + "&timeStamp=" + a
                    }), e.publish("APLUS_WS_ERROR");
                }, i.onclose = function() {
                    e.status = "inactive", e.publish("APLUS_WS_CLOSE");
                }, i.onmessage = function(t) {
                    e.publish("APLUS_WS_SERVER_MSG", t.data);
                };
            } catch (t) {
                console.log(t), s.catchException(r + "_exception", t), e.publish("APLUS_WS_EXCEPTION");
            }
        },
        readyInitWebSocket: function() {
            var t = this;
            i.pushIntoGoldlogQueue(o.SUBSCRIBE, [ "aplusInitContext", function() {
                var e = t.getWsHandler();
                (!e || e && e.readyState > 1) && t.initWebSocket(a);
            } ]);
        },
        start: function() {
            var t = this.getWsHandler();
            (!t || t && t.readyState > 1) && (this.status = "active", this.readyInitWebSocket());
        },
        stop: function() {
            var t = this.getWsHandler();
            t && t.readyState <= 1 && (this.status = "inactive", t.close());
        },
        sendMsg: function(t) {
            var e = this.getWsHandler();
            return !(!e || 1 !== e.readyState) && (e.send(t), !0);
        },
        processSysEvent: function(t) {
            "active" === t.msg ? this.start() : "inactive" === t.msg && this.stop();
        },
        processLogEvent: function(t) {
            if ("active" === this.status) {
                var e = this.sendMsg(t.msg.postData);
                e || (this.msg_queue.push(t), this.publish("APLUS_WS_MSG_QUEUE_CHANGE", t));
            } else this.msg_queue.push(t), this.publish("APLUS_WS_MSG_QUEUE_CHANGE", t);
        },
        send: function(t) {
            var e = this.getWsHandler();
            switch ((!e || e.readyState > 1) && this.start(), t.type) {
              case "sys":
                this.processSysEvent(t);
                break;

              case "pv":
              case "aplus":
                this.processLogEvent(t);
            }
        },
        startWS: function() {
            var t = this;
            t.start();
        }
    });
}, function(t, e, n) {
    "use strict";
    var a = n(61);
    e.catchException = function(t, e) {
        var n = t;
        "object" == typeof e && e.message && (n = n + "_" + e.message), a.pushIntoGoldlogQueue("aplus._aplus_cplugin_m.do_tracker_jserror", [ {
            message: n,
            error: JSON.stringify(e),
            filename: t
        } ]);
    };
}, function(t, e, n) {
    "use strict";
    var a = n(27);
    t.exports = function() {
        return {
            getLogConfig: function() {
                var t = {}, e = this.options.config.plugins;
                for (var n in e) t[n] = {
                    plugins: e[n],
                    context: {}
                }, a(e[n], function(e) {
                    t[n].context[e.name] = e.config || {};
                });
                return t;
            },
            run: function() {
                this.options.context.logConfig = this.getLogConfig(), this.options.context.logConfig.pageLoadTime = this.options.context.PAGE_LOAD_TIME;
            }
        };
    };
}, function(t, e, n) {
    "use strict";
    var a = n(74), o = n(36), r = n(23), i = n(73), s = n(80), u = n(2);
    t.exports = function() {
        return {
            init: function(t) {
                this.options = t;
                var e = this.options.context.etag || {};
                this.cna = e.cna || a.getCookieCna("cna"), this.setTag(0), this.setStag(-1), this.setLsTag("-1"),
                this.setEtag(this.cna || ""), this.requesting = !1, this.today = i.getFormatDate();
            },
            setLsTag: function(t) {
                this.lstag = t, this.options.context.etag.lstag = t;
            },
            setTag: function(t) {
                this.tag = t, this.options.context.etag.tag = t;
            },
            setStag: function(t) {
                this.stag = t, this.options.context.etag.stag = t;
            },
            setEtag: function(t) {
                this.etag = t, this.options.context.etag.cna = t, a.getCookieCna("cna") !== t && a.setCookieCna("cna", t, {
                    SameSite: "none"
                });
            },
            setLscnaStatus: function(t) {
                this.options.context.etag.lscnastatus = t;
            },
            run: function(t, e) {
                var n = this;
                if (n.cna) return void n.setTag(1);
                var a = null, i = aplus._$.meta_info["aplus-rhost-v"];
                if (i) {
                    this.options.context.etag.egUrl = i + "/eg.js";
                    var c = s.getUrl(this.options.context.etag || {});
                    n.requesting = !0;
                    var l = function() {
                        setTimeout(function() {
                            e();
                        }, 20), clearTimeout(a);
                    };
                    return o.loadScript(c, function(t) {
                        var e, a;
                        if (t && "error" === t.type ? n.setStag(-3) : (e = u.getGoldlogVal("Etag"), e && n.setEtag(e),
                        a = u.getGoldlogVal("stag"), "undefined" != typeof a && n.setStag(a)), n.requesting) {
                            var o = aplus.globalConfig || {};
                            if (2 === a || 4 === a) {
                                var i = r.getLsCna(o.ETAG_STORAGE_KEY);
                                i ? (n.setLsTag(1), n.setEtag(i)) : (n.setLsTag(0), r.setLsCna(o.ETAG_STORAGE_KEY, n.today, e));
                            }
                            l();
                        }
                    }), a = setTimeout(function() {
                        n.requesting = !1, n.setStag(-2), e();
                    }, 1500), 200;
                }
            }
        };
    };
}, function(t, e, n) {
    "use strict";
    var a = n(23);
    e.getUrl = function(t) {
        var e = a.getUrl(t && t.egUrl);
        if (0 !== e.indexOf("http")) {
            var n = "https:";
            /(\d+\.){3,}\d+/.test(e) && (n = "http:"), e = n + e;
        }
        return e;
    };
}, function(t, e, n) {
    "use strict";
    var a = n(2), o = n(3);
    t.exports = function() {
        return {
            getMetaInfo: function() {
                var t = a.getGoldlogVal("_$") || {}, e = t.meta_info;
                return e;
            },
            getAplusWaiting: function() {
                var t = this.getMetaInfo() || {};
                return t["aplus-waiting"];
            },
            run: function(t, e) {
                var n = this.options.config || {}, a = this.getAplusWaiting();
                if (a && n.is_auto) switch (a = this.getAplusWaiting() + "", this.options.context.when_to_sendpv = {
                    aplusWaiting: a
                }, a) {
                  case o._USER_ID:
                  case o._ANONY_ID:
                  case "MAN":
                    return "done";

                  case "1":
                    return this.options.context.when_to_sendpv.isWait = !0, setTimeout(function() {
                        e();
                    }, 6e3), 6e3;

                  default:
                    var r = 1 * a;
                    if (r + "" != "NaN") return this.options.context.when_to_sendpv.isWait = !0, setTimeout(function() {
                        e();
                    }, r), r;
                }
            }
        };
    };
}, function(t, e, n) {
    "use strict";
    var a = n(83), o = n(2), r = n(26), i = "POST", s = "GET";
    t.exports = function() {
        return {
            getMetaInfo: function() {
                var t = o.getGoldlogVal("_$") || {}, e = t.meta_info;
                return e;
            },
            getAplusMetaByKey: function(t) {
                var e = this.getMetaInfo() || {};
                return e[t];
            },
            getRhost: function() {
                var t = this.getAplusMetaByKey("aplus-rhost-v");
                return t;
            },
            getHjljHostUrl: function(t) {
                var e = /^\/\//.test(t) ? "" : "//", n = "/web_logs", a = e + t + n;
                return a;
            },
            getPvHostUrl: function(t) {
                var e = /^\/\//.test(t) ? "" : "//", n = /\/$/.test(t) ? "" : "/", o = "v.gif";
                return a.isMobile() && (o = "m.gif"), e + t + n + o;
            },
            getHostUrl: function(t) {
                var e = /^\/\//.test(t) ? "" : "//", n = "/web_logs", a = e + t + n;
                return a;
            },
            getChannel: function(t) {
                var e, n = this.getAplusMetaByKey("aplus-channel"), a = [ "WS", "WS-ONLY", s, i ];
                return a.indexOf(t) > -1 && (e = t), !e && a.indexOf(n) > -1 && (e = n), e;
            },
            run: function() {
                var t = !!this.options.context.is_single;
                if (!t) {
                    var e = this.options.config.recordType, n = this.getRhost(e);
                    if (!n) return r.logger({
                        msg: "current request domain invalid, please check your aplus-rhost-v value inside metainfo!"
                    }), "done";
                    var a;
                    a = "PV" === e ? this.getPvHostUrl(n) : this.getHjljHostUrl(n);
                    var o = this.options.config || {}, u = this.getChannel(o.method) || i;
                    u !== i || navigator && navigator.sendBeacon || (u = s), this.options.context.where_to_send.method = o.method,
                    this.options.context.where_to_send.url = a;
                }
            }
        };
    };
}, function(t, e) {
    "use strict";
    e.isMobile = function() {
        var t = navigator ? navigator.userAgent : "", e = /AliApp|Yunos|cyclone/i.test(t), n = /iPhone|iPad|iPod/i.test(t), a = /Android/i.test(t), o = /Windows Phone/i.test(t) || /IEMobile/i.test(t) || /WPDesktop/i.test(t), r = /BlackBerry/i.test(t), i = /Opera Mini/i.test(t);
        return e || n || a || o || r || i;
    };
}, function(t, e, n) {
    "use strict";
    var a = n(74), o = n(85), r = n(21), i = n(83), s = n(2), u = n(3), c = s.getGlobalValue("aplus"), l = n(86);
    t.exports = function() {
        return {
            getCommonParams: function() {
                var t = this.options.context || {}, e = t.etag || {}, n = t.userdata || {}, p = s.getGoldlogVal("_$") || {}, f = this.options.config || {}, g = i.isMobile() ? "WAP" : "PC", d = {
                    _dev_id: c.getMetaInfo("_dev_id"),
                    _anony_id: c.getMetaInfo(u._ANONY_ID),
                    _user_id: c.getMetaInfo(u._USER_ID),
                    _user_nick: c.getMetaInfo("_user_nick") || a.getCookie("tracknick"),
                    _session_id: c.getMetaInfo("_session_id")
                }, h = f.pageUrl || (location ? location.href : "-"), _ = f.title || document && document.title, v = r.assign({
                    appId: c.getMetaInfo("appKey") || c.getMetaInfo("appId"),
                    cache: o.getLogId(h, _),
                    cna: e.cna,
                    etag: e,
                    pre: p.page_referrer || "-",
                    sdk_info: {
                        jsver: c.globalConfig.script_name,
                        lver: c.globalConfig.lver,
                        customSdkId: c.getMetaInfo("customSdkId") || "",
                        platformType: g.toLowerCase()
                    },
                    trackerEventCode: f.trackerEventCode,
                    title: _,
                    url: h,
                    client: c._aplus_client || {},
                    timeZone: l.getTimeZone(),
                    gokey: d,
                    gmkey: n.gmkey || "",
                    method: this.options.context.where_to_send.method
                }, d);
                return v;
            },
            getPvParams: function() {
                var t = this.getCommonParams();
                return this.options.config.is_auto || (t.sdk_info.mansndlog = 1), r.assign(t, {
                    event_code: "2001",
                    logtype: "1",
                    logkey: i.isMobile() ? "/m.gif" : "/v.gif",
                    event_timestamp: c._$.send_pv_count > 0 ? new Date() : c.logConfig.pageLoadTime
                });
            },
            getHjljParams: function() {
                var t = this.options.context || {}, e = t.userdata || {}, n = {
                    event_code: u.EVENT_ID_MAP[e.gmkey] || u.OTHER,
                    logtype: "2",
                    logkey: e.logkey,
                    event_timestamp: new Date()
                };
                return r.assign(this.getCommonParams(), n);
            },
            run: function() {
                var t = {};
                t = "PV" === this.options.config.recordType ? this.getPvParams() : this.getHjljParams(),
                this.options.context.what_to_send.logdata = t;
            }
        };
    };
}, function(t, e, n) {
    "use strict";
    function a(t, e, n) {
        return t ? o.hash(encodeURIComponent(t)).substr(0, e) : n;
    }
    var o = n(41), r = function(t) {
        function e(t) {
            var e = "0123456789abcdefhijklmnopqrstuvwxyzABCDEFHIJKLMNOPQRSTUVWXYZ", n = "0123456789abcdefghijkmnopqrstuvwxyzABCDEFGHIJKMNOPQRSTUVWXYZ";
            return 1 == t ? e.substr(Math.floor(60 * Math.random()), 1) : 2 == t ? n.substr(Math.floor(60 * Math.random()), 1) : "0";
        }
        for (var n, a = "", o = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", r = !1; a.length < t; ) n = o.substr(Math.floor(62 * Math.random()), 1),
        !r && a.length <= 2 && ("g" == n.toLowerCase() || "l" == n.toLowerCase()) && (0 === a.length && "g" == n.toLowerCase() ? Math.random() < .5 && (n = e(1),
        r = !0) : 1 == a.length && "l" == n.toLowerCase() && "g" == a.charAt(0).toLowerCase() && (n = e(2),
        r = !0)), a += n;
        return a;
    };
    e.getLogId = function(t, e) {
        var n = r(8), o = n.substr(0, 4), i = n.substr(0, 6);
        return [ a(t, 4, o), a(e, 4, o), i ].join("");
    };
}, function(t, e) {
    e.getTimeZone = function() {
        var t = -new Date().getTimezoneOffset() / 60, e = "+";
        t < 0 && (e = "-");
        var n = Math.abs(parseInt(t)), a = Math.abs(parseInt(t) - t), o = "00";
        return a > 0 && (o = 60 * a), "GMT" + e + (n > 9 ? n : "0" + n) + ":" + o;
    };
}, function(t, e, n) {
    "use strict";
    var a = n(21), o = n(74);
    t.exports = function() {
        return {
            run: function() {
                var t = {}, e = o.getCookie("workno") || o.getCookie("emplId");
                e && (t.workno = e);
                var n = o.getHng();
                n && (t._hng = o.getHng());
                var r;
                r = this.options.context.what_to_send.logdata, r.gokey = a.assign(r.gokey, t);
            }
        };
    };
}, function(t, e, n) {
    "use strict";
    var a = n(20), o = n(89), r = n(21), i = n(2), s = i.getGlobalValue("aplus");
    t.exports = function() {
        return {
            getUserdata: function() {
                var t = this.options.config || {}, e = {};
                t && !t.is_auto && t.gokey && ("string" == typeof t.gokey ? e = a.param2obj(t.gokey) : "object" == typeof t.gokey && (e = t.gokey));
                var n = function(t) {
                    o(t) ? t.forEach(function(t) {
                        e = r.assign(e, t);
                    }) : e = r.assign(e, t);
                };
                n(s.getMetaInfo("aplus-cpvdata"));
                var i = this.options.context || {}, u = i.userdata || {};
                return n(u), e;
            },
            processLodashDollar: function() {
                var t = this.options.config || {}, e = i.getGoldlogVal("_$") || {};
                t && t.referrer && (e.page_referrer = t.referrer), i.setGoldlogVal("_$", e);
            },
            updatePre: function(t) {
                var e = i.getGoldlogVal("_$") || {};
                return e.page_referrer && (t.pre = e.page_referrer), t;
            },
            run: function() {
                var t = this.options.context.what_to_send.logdata, e = r.assign(this.getUserdata(), t.userdata || {});
                this.processLodashDollar(), t.gokey = r.assign(t.gokey, e), t = this.updatePre(t),
                this.options.context.what_to_send.logdata = t, this.options.context.userdata = t.gokey;
            }
        };
    };
}, function(t, e) {
    "use strict";
    t.exports = function(t) {
        return Array.isArray ? Array.isArray(t) : /Array/.test(Object.prototype.toString.call(t));
    };
}, function(t, e, n) {
    "use strict";
    var a = n(91), o = n(92), r = n(93), i = n(2), s = n(22);
    t.exports = function() {
        return {
            getPageId: function() {
                var t = this.options.config || {}, e = this.options.context || {}, n = e.userdata || {};
                return t.page_id || t.pageid || t.pageId || n.page_id;
            },
            resetSpmB: function() {
                if (aplus.spmAPI) {
                    var t = i.getGoldlogVal("_$") || {}, e = t.spm || {}, n = e.data.b;
                    if (n) {
                        var a = this.getPageId();
                        n = a ? n.split("/")[0] + "/" + a : n.split("/")[0], aplus.spmAPI && aplus.spmAPI.setB(n);
                        var o = e.spm_cnt.split(".");
                        o && o.length > 2 && (o[1] = n, e.spm_cnt = o.join("."));
                    }
                }
            },
            getExParamsInfo: function() {
                var t = a.getExParams();
                return this.options.context.what_to_send.logdata.exparams = t, o(t);
            },
            run: function() {
                this.resetSpmB();
                var t = this.options.context.what_to_send.logdata.gokey;
                t = s(t, r()), t = s(this.getExParamsInfo(), t), this.options.context.what_to_send.logdata.gokey = t;
            }
        };
    };
}, function(t, e, n) {
    "use strict";
    function a(t) {
        for (var e, n = t.split("&"), a = 0, o = n.length, r = []; a < o; a++) e = n[a].split("="),
        r.push([ e.shift(), e.join("=") ]);
        return r;
    }
    function o(t, e) {
        var n = "aplus&sidx=aplusSidex&ckx=aplusCkx", a = t || n;
        try {
            if (e) {
                var o = u.param2obj(e), r = [ d.APLUS, "cna", d.SPM_CNT, d.SPM_URL, d.SPM_PRE, "logtype", "pre", "uidaplus", "asid", "sidx", "trid", "gokey" ];
                s(r, function(t) {
                    o.hasOwnProperty(t) && (g.logger({
                        msg: "Can not inject keywords: " + t
                    }), delete o[t]);
                }), delete o[""];
                var i = "";
                if (t) {
                    var l = t.match(/aplus&/).index, p = l > 0 ? u.param2obj(t.substring(0, l)) : {};
                    delete p[""], i = u.obj2param(c.assign(p, o)) + "&" + t.substring(l, t.length);
                } else i = u.obj2param(o) + "&" + n;
                return i;
            }
            return a;
        } catch (t) {
            return a;
        }
    }
    function r() {
        var t = aplus && aplus._$ ? aplus._$ : {}, e = t.meta_info || {};
        return e["aplus-exparams"] || "";
    }
    function i() {
        var t = l.getCurrentNode(), e = p.tryToGetAttribute(t, "exparams"), n = o(e, r()) || "";
        return n && n.replace(/&amp;/g, "&").replace(/\buser(i|I)d=/, "uidaplus=");
    }
    var s = n(27), u = n(20), c = n(21), l = n(36), p = n(28), f = n(35), g = n(26), d = n(3);
    e.mergeExparams = o, e.getExParams = i, e.getExparamsInfos = function(t, e) {
        var n = {}, o = t || [ "uidaplus", "pc_i", "pu_i" ], r = i() || "";
        r = r.replace(/&aplus&/, "&");
        for (var s = a(r) || [], u = function(t) {
            return f.indexof(o, t) > -1;
        }, c = 0; c < s.length; c++) {
            var l = s[c], p = l[0] || "", g = l[1] || "";
            p && g && ("EXPARAMS" === e || u(p)) && (n[p] = g);
        }
        return n;
    };
}, function(t, e, n) {
    var a = n(20);
    t.exports = function(t) {
        var e = {};
        try {
            var n = a.param2obj(t.replace(/&amp;/g, "&").replace(/\buser(i|I)d=/, "uidaplus=").replace(/&aplus&/, "&"));
            n.uidaplus && (e.uidaplus = n.uidaplus), e.pc_i = n.pc_i, e.pu_i = n.pu_i;
        } catch (t) {
            console && console.log(t);
        }
        return e;
    };
}, function(t, e, n) {
    var a = n(74);
    t.exports = function() {
        var t = {}, e = a.getCookie("workno") || a.getCookie("emplId");
        e && (t.workno = e);
        var n = a.getHng();
        return n && (t._hng = a.getHng()), t;
    };
}, function(t, e, n) {
    "use strict";
    function a(t) {
        var e, n, a, o, i = [], s = {};
        for (e = t.length - 1; e >= 0; e--) n = t[e], a = n[0], a && a.indexOf(r.s_plain_obj) == -1 && s.hasOwnProperty(a) || (o = n[1],
        ("aplus" == a || o) && (i.unshift([ a, o ]), s[a] = 1));
        return i;
    }
    function o(t) {
        var e, n, a, o, i = [], u = {
            logtype: !0,
            cache: !0,
            scr: !0,
            "spm-cnt": !0
        };
        for (e = t.length - 1; e >= 0; e--) if (n = t[e], a = n[0], o = n[1], !(s.isStartWith(a, r.s_plain_obj) && !s.isStartWith(a, r.mkPlainKeyForExparams()) || u[a])) if (s.isStartWith(a, r.mkPlainKeyForExparams())) {
            var c = r.param2arr(o);
            if ("object" == typeof c && c.length > 0) for (var l = c.length - 1; l >= 0; l--) {
                var p = c[l];
                p && p[1] && i.unshift([ p[0], p[1] ]);
            }
        } else i.unshift([ a, o ]);
        return i;
    }
    var r = n(95), i = n(35), s = n(21), u = n(2), c = n(74), l = n(16), p = n(3);
    t.exports = function() {
        return {
            keyIsAvailable: function(t) {
                var e = [ "functype", "funcId", "spm-cnt", "spm-url", "spm-pre", "_ish5", "_is_g2u", "_h5url", "cna", "isonepage", "lver", "jsver" ];
                return i.indexof(e, t) === -1;
            },
            valIsAvailable: function(t) {
                return "object" != typeof t && "function" != typeof t;
            },
            upUtData: function(t, e) {
                var n = this;
                if (t = t ? t : {}, e && "object" == typeof e) for (var a in e) {
                    var o = e[a];
                    a && n.valIsAvailable(o) && n.keyIsAvailable(a) && (t[a] = o);
                }
                return t;
            },
            getToUtData: function() {
                var t = u.getGoldlogVal("_$") || {}, e = t.spm || {}, n = this.options.context || {}, i = n.what_to_send || {}, s = i.logdata || {}, f = s.sdk_info || {}, g = this.options.context.etag || {}, d = o(a(s.exparams || []));
                d = r.arr2obj(d);
                var h = n.userdata, _ = location.href, v = {}, m = l.getParamFromUrl("scm", _) || "";
                m && (v.scm = m);
                var y = l.getParamFromUrl("pg1stepk", _) || "";
                y && (v.pg1stepk = y);
                var b = l.getParamFromUrl("point", _) || "";
                b && (v.issb = 1), f && f.mansndlog && (v.mansndlog = f.mansndlog), v = this.upUtData(v, d),
                v = this.upUtData(v, s.gokey), v = this.upUtData(v, h), v.functype = "page", v.funcId = "2001",
                v.url = (location.protocol || "https:") + "//" + location.host + location.pathname,
                v._ish5 = "1", v._h5url = _, v._toUT = 2, v._bridgeName = "WindVane", v._bridgeVersion = "3.0.4",
                e.spm_cnt && (v[p.SPM_CNT] = e.spm_cnt || ""), e.spm_url && (v[p.SPM_URL] = e.spm_url || ""),
                e.spm_pre && (v[p.SPM_PRE] = e.spm_pre || ""), v.cna = g.cna || c.getCookieCna("cna"),
                v.lver = f.lver, v.jsver = f.jsver, v.pver = "1.0.0", v.isonepage = -1;
                var w = aplus.getMetaInfo("aplus-utparam");
                return w && (v["utparam-cnt"] = JSON.stringify(w)), v._is_g2u_ = 1, v._slog = 1,
                v;
            },
            run: function() {
                var t = this.options.context || {}, e = t.what_to_send || {};
                e.pvdataToUt = this.getToUtData(), this.options.context.what_to_send = e;
            }
        };
    };
}, function(t, e, n) {
    "use strict";
    function a(t) {
        var e, n, a, o = [], r = t.length;
        for (a = 0; a < r; a++) e = t[a][0], n = t[a][1], o.push(0 === e.indexOf(i) ? n : e + "=" + encodeURIComponent(n));
        return o.join("&");
    }
    var o = n(35), r = n(20), i = "::-plain-::";
    e.mkPlainKey = function() {
        return i + Math.random();
    }, e.s_plain_obj = i, e.mkPlainKeyForExparams = function(t) {
        var e = t || i;
        return e + "exparams";
    }, e.arr2param = a, e.param2arr = function(t) {
        for (var e, n = t.split("&"), a = 0, o = n.length, r = []; a < o; a++) e = n[a].split("="),
        r.push([ e.shift(), e.join("=") ]);
        return r;
    }, e.arr2obj = function(t) {
        var e, n, a, o = {}, r = t.length;
        for (a = 0; a < r; a++) e = t[a][0], n = t[a][1], o[e] = n;
        return o;
    }, e.makeUrl = function(t, e) {
        var n = t.indexOf("?") == -1 ? "?" : "&", i = e ? o.isArray(e) ? a(e) : r.obj2param(e) : "";
        return i ? t + n + i : t;
    };
}, function(t, e, n) {
    "use strict";
    var a = n(21), o = n(65), r = n(3);
    t.exports = function() {
        return {
            getToNativeData: function() {
                var t = this.options.context || {}, e = a.cloneDeep(t.userdata) || {}, n = t.what_to_send || {}, i = n.logdata || {}, s = i.sdk_info || {}, u = this.options.context.etag || {}, c = {}, l = {};
                if (l.cna = u.cna, l.lver = s.lver, l.jsver = s.jsver, l.id = r.PAGE_START, l.ts = Date.now(),
                l.r = i.arg1 || i.logkey || "-", l.is_h5 = "1", i.url && i.url.length > 0) {
                    var p = i.url.split("?");
                    l.page_name = p[0] || "-", l.url_p = p[1] || "-";
                }
                if (i.pre && i.pre.length > 0) {
                    var f = i.pre.split("?");
                    l.ref_page_name = f[0] || "-", l.refer_p = f[1] || "-";
                }
                return e.hasOwnProperty("autosend") ? l.is_auto = 1 : l.is_auto = 0, c.sdkArgs = a.cloneDeep(l),
                c.cusp = o.deleteInfo(e, [ "_anony_id", "_dev_id", "_session_id", "_src_pos_id", "_user_id", "_user_nick" ]),
                c;
            },
            run: function() {
                var t = this.options.context || {}, e = t.what_to_send || {};
                e.pvdataToUmNative = this.getToNativeData(), this.options.context.what_to_send = e;
            }
        };
    };
}, function(t, e, n) {
    "use strict";
    var a = n(2);
    t.exports = function() {
        return {
            run: function() {
                var t = a.getGoldlogVal("_$") || {}, e = this.options.context.can_to_sendpv || {}, n = t.send_pv_count || 0, o = this.options.config || {};
                return o.is_auto && n > 0 ? "done" : (e.flag = "YES", this.options.context.can_to_sendpv = e,
                t.send_pv_count = ++n, void a.setGoldlogVal("_$", t));
            }
        };
    };
}, function(t, e, n) {
    "use strict";
    var a = n(99), o = n(2);
    t.exports = function() {
        return {
            run: function() {
                var t = aplus._$ || {}, e = this.options.context || {};
                o.setGoldlogVal("pv_context", e);
                var n = aplus.spm_ab || [], r = n.join("."), i = t.send_pv_count, s = {
                    cna: e.etag.cna,
                    count: i,
                    spmab_pre: aplus.spmab_pre
                };
                a.doPubMsg([ "sendPV", "complete", r, s ]), a.doCachePubs([ "sendPV", "complete", r, s ]);
            }
        };
    };
}, function(t, e, n) {
    "use strict";
    var a = n(2), o = "function", r = function() {
        var t = a.getGlobalValue("aplus"), e = t.aplus_pubsub || {}, n = typeof e.publish === o;
        return n ? e : "";
    };
    e.doPubMsg = function(t) {
        var e = r();
        e && typeof e.publish === o && e.publish.apply(e, t);
    }, e.doCachePubs = function(t) {
        var e = r();
        e && typeof e.cachePubs === o && e.cachePubs.apply(e, t);
    }, e.doSubMsg = function(t, e) {
        var n = r();
        n && typeof n.subscribe === o && n.subscribe(t, e);
    };
}, function(t, e, n) {
    "use strict";
    var a = n(20), o = n(89), r = n(21), i = n(2), s = i.getGlobalValue("aplus");
    t.exports = function() {
        return {
            getUserData: function() {
                var t = this.options.context || {}, e = t.userdata || {}, n = t.what_to_send.logdata.gokey;
                n = r.assign(n, a.param2obj(e.gokey));
                var i = s.getMetaInfo("aplus-exinfo");
                i && (n = r.assign(n, a.param2obj(i)));
                var u = s.getMetaInfo("aplus-exdata");
                return o(u) ? u.forEach(function(t) {
                    n = r.assign(n, t);
                }) : n = r.assign(n, s.getMetaInfo("aplus-exdata")), n;
            },
            run: function() {
                this.options.context.what_to_send.logdata.gokey = this.getUserData();
            }
        };
    };
}, function(t, e, n) {
    "use strict";
    var a = n(91), o = n(92), r = n(93), i = n(21);
    t.exports = function() {
        return {
            getExParamsInfo: function() {
                var t = a.getExParams();
                return this.options.context.what_to_send.logdata.exparams = t, o(t);
            },
            run: function() {
                var t = this.options.context.what_to_send.logdata.gokey;
                t = i.assign(t, r()), t = i.assign(this.getExParamsInfo(), t), this.options.context.what_to_send.logdata.gokey = t;
            }
        };
    };
}, function(t, e, n) {
    "use strict";
    var a = n(2), o = n(3);
    t.exports = function() {
        return {
            getToUtData: function() {
                var t = a.getGoldlogVal("_$") || {}, e = t.spm || {}, n = this.options.context || {}, r = n.userdata || {}, i = n.etag || {}, s = n.what_to_send || {}, u = s.logdata || {}, c = u.sdk_info || {}, l = u.gokey || {}, p = [], f = "";
                for (var g in l) if ([ o.SPM_CNT, o.SPM_URL, o.SPM_PRE ].indexOf(g) === -1) {
                    var d = l[g];
                    "undefined" !== l[g] && void 0 !== l[g] || (d = ""), p.push(g + "=" + d);
                }
                p.length > 0 && (f = p.join("&"));
                var h = location.href, _ = {};
                _.functype = "ctrl", _.funcId = u.event_code, _.url = (location.protocol || "https:") + "//" + location.host + location.pathname,
                _.logkey = u.logkey, _.gokey = encodeURIComponent(f), _.gmkey = u.gmkey, _._ish5 = "1",
                _._h5url = h, _._is_g2u_ = 1, _._slog = 1, _._toUT = 2, _._bridgeName = "WindVane",
                _._bridgeVersion = "3.0.4", e.spm_cnt && (_[o.SPM_CNT] = e.spm_cnt || ""), e.spm_url && (_[o.SPM_URL] = e.spm_url || ""),
                e.spm_pre && (_[o.SPM_PRE] = e.spm_pre || ""), _.cna = i.cna, _.lver = c.lver, _.jsver = c.jsver,
                r.hasOwnProperty("autosend") && (_.autosend = r.autosend);
                var v = aplus.getMetaInfo("aplus-utparam");
                return v && (_["utparam-cnt"] = JSON.stringify(v)), _;
            },
            run: function() {
                var t = this.options.context || {}, e = t.what_to_send || {};
                e.pvdataToUt = this.getToUtData(), this.options.context.what_to_send = e;
            }
        };
    };
}, function(t, e, n) {
    "use strict";
    var a = n(21), o = n(65);
    t.exports = function() {
        return {
            getToNativeData: function() {
                var t = this.options.context || {}, e = t.userdata || {}, n = t.etag || {}, r = t.what_to_send || {}, i = r.logdata || {}, s = i.sdk_info || {}, u = {}, c = {};
                if (c.cna = n.cna, c.lver = s.lver, c.jsver = s.jsver, c.id = e.logkey || "-", c.ts = Date.now(),
                c.is_h5 = "1", i.url && i.url.length > 0) {
                    var l = i.url.split("?");
                    c.page_name = l[0] || "-", c.url_p = l[1] || "-";
                }
                if (i.pre && i.pre.length > 0) {
                    var p = i.pre.split("?");
                    c.ref_page_name = p[0] || "-", c.refer_p = p[1] || "-";
                }
                return c.funcId = i.event_code, e.hasOwnProperty("autosend") ? c.is_auto = 1 : c.is_auto = 0,
                u.sdkArgs = a.cloneDeep(c), u.cusp = o.deleteInfo(e.gokey, [ "_anony_id", "_dev_id", "_session_id", "_src_pos_id", "_user_id", "_user_nick" ]),
                u;
            },
            run: function() {
                var t = this.options.context || {}, e = t.what_to_send || {};
                e.hjljdataToUmNative = this.getToNativeData(), this.options.context.what_to_send = e;
            }
        };
    };
}, function(t, e, n) {
    "use strict";
    t.exports = function() {
        return {
            run: function() {
                n(105)();
            }
        };
    };
}, function(t, e, n) {
    "use strict";
    var a = n(36), o = n(106);
    t.exports = function() {
        var t = {
            isTouchEnabled: a.isTouch()
        };
        o.run(t);
    };
}, function(t, e, n) {
    "use strict";
    function a(t, e) {
        for (var n, a; t && (n = t.tagName); ) {
            if ("A" === n) {
                a = !0;
                break;
            }
            if ("BODY" == n || "HTML" == n) break;
            t = t.parentNode;
        }
        e(a ? t : "");
    }
    function o(t, e, n) {
        try {
            for (var a; t && (a = t.tagName); ) {
                var o = t && t.getAttribute ? t.getAttribute("data-aplus-pos-id") : "";
                if (o) {
                    m(e) && e(t, o);
                    break;
                }
                if ("BODY" == a || "HTML" == a) {
                    m(e) && e(t, "PAGE");
                    break;
                }
                t = t.parentNode;
            }
        } catch (t) {
            m(n) && n();
        }
    }
    function r(t) {
        var e = aplus.getMetaInfo("aplus-auto-clk") || [], n = {};
        return "PAGE" === t ? e[0] || {} : (f(e, function(e) {
            if (e._pos_id === t) return n = e, "break";
        }), n);
    }
    function i(t, e) {
        if (t && /&?\b_src_pos_id=[^&#]*/.test(t) && (t = t.replace(/&?\b_src_pos_id=[^&#]*/g, "").replace(/&{2,}/g, "&").replace(/\?&/, "?").replace(/\?$/, "")),
        !e) return t;
        var n, a, o, r, i, s, u, c = "&";
        t.indexOf("#") !== -1 && (o = t.split("#"), t = o.shift(), a = o.join("#")), r = t.split("?"),
        i = r.length - 1, o = r[0].split("//"), o = o[o.length - 1].split("/"), s = o.length > 1 ? o.pop() : "",
        i > 0 && (n = r.pop(), t = r.join("?")), n && i > 1 && n.indexOf("&") == -1 && n.indexOf("%") !== -1 && (c = "%26");
        var l = "";
        if (t = t + "?_src_pos_id=" + l + e + (n ? c + n : "") + (a ? "#" + a : ""), u = d.isContain(s, ".") ? s.split(".").pop().toLowerCase() : "") {
            if ({
                png: 1,
                jpg: 1,
                jpeg: 1,
                gif: 1,
                bmp: 1,
                swf: 1
            }.hasOwnProperty(u)) return 0;
            !n && i <= 1 && (a || {
                htm: 1,
                html: 1,
                php: 1,
                aspx: 1,
                shtml: 1,
                xhtml: 1
            }.hasOwnProperty(u) || (t += "&file=" + s));
        }
        return t;
    }
    function s(t, e) {
        var n = t.getElementsByTagName("a"), a = r(e) || {}, s = y.page || {}, u = a.spmB || s.spmB;
        if (u) {
            var c = 1;
            f(n, function(t) {
                o(t, function(n, a) {
                    if (e === a) {
                        var o = "PAGE" === e ? [ u, c++ ].join(".") : [ u, e, c++ ].join(".");
                        aplus._current_spm = o;
                        var r = window.aplus_queue || (window.aplus_queue = []);
                        r.push({
                            action: "aplus.appendMetaInfo",
                            arguments: [ "aplus-cpvdata", {
                                _src_pos_id: o
                            } ]
                        });
                        try {
                            t && t.setAttribute && (t.getAttribute("aplus-anchor-id") || (t.setAttribute("aplus-anchor-id", o),
                            t.href && "#" !== t.href && t.setAttribute("href", i(t.href, o))));
                        } catch (t) {
                            console.log(t);
                        }
                    }
                });
            });
        }
    }
    function u(t, e) {
        a(e, function(t) {
            t && !t.getAttribute("aplus-anchor-id") && o(t, s, function() {
                console.log("findAplusAnchorByAlinkEl failure...");
            });
        });
    }
    function c(t) {
        var e = window.aplus_queue || (window.aplus_queue = []), n = t || h.getParamFromUrl("_src_pos_id", location.href);
        e.push({
            action: "aplus.appendMetaInfo",
            arguments: [ "aplus-cpvdata", {
                _src_pos_id: n
            } ]
        }), e.push({
            action: "aplus.appendMetaInfo",
            arguments: [ "aplus-exdata", {
                _src_pos_id: n
            } ]
        }), e.push({
            action: "aplus.aplus_pubsub.subscribe",
            arguments: [ v.MW_CHANGE_PV, function(t) {
                "complete" === t.status && aplus.appendMetaInfo("aplus-cpvdata", {
                    _src_pos_id: ""
                });
            } ]
        });
    }
    function l() {
        _.pushIntoGoldlogQueue(v.SUBSCRIBE, [ v.CURRENT_PAGE_CONFIG, function(t) {
            y = t || {};
        } ]);
    }
    function p() {
        var t = window.aplus_queue || (window.aplus_queue = []);
        t.push({
            action: "aplus.setMetaInfo",
            arguments: [ "aplus-auto-clk-userfn", function(t) {
                var e = t ? t.getAttribute("aplus-anchor-id") : "";
                if (e) return "_pos_id=" + e;
                var n = t ? t.getAttribute("data-aplus-pos-id") : "", a = n ? r(n) : {};
                if (a.spmB && a._pos_id) {
                    var o = [ a.spmB, n ].join(".");
                    return "_pos_id=" + o;
                }
                return "";
            } ]
        });
    }
    var f = n(27), g = n(55), d = n(21), h = n(16), _ = n(61), v = n(3), m = n(10), y = {};
    e.run = function(t) {
        var e = document;
        c(), l(), p(), window.aplus.doTrace = u, t && t.isTouchEnabled ? g.on(e, "tapSpm", u) : (g.on(e, "mousedown", u),
        g.on(e, "keydown", u));
    };
}, function(t, e, n) {
    "use strict";
    t.exports = function() {
        return {
            run: function() {
                n(108)(this.options.context.logConfig);
            }
        };
    };
}, function(t, e, n) {
    "use strict";
    var a = n(99), o = n(2);
    t.exports = function(t) {
        var e = o.getGlobalValue("aplus");
        if (!e._aplus_api) {
            e._aplus_api = {
                status: "complete"
            };
            var r = n(109).run.create({
                logConfig: t
            });
            for (var i in r) e[i] = r[i];
            n(114).makePVId();
            var s = [ "aplusReady", "complete" ];
            a.doPubMsg(s), a.doCachePubs(s);
        }
    };
}, function(t, e, n) {
    "use strict";
    function a() {
        var t = 5e3;
        try {
            var e = w.getMetaInfo("aplus-mmstat-timeout");
            if (e) {
                var n = parseInt(e);
                n >= 1e3 && n <= 1e4 && (t = n);
            }
        } catch (t) {}
        return t;
    }
    var o = n(11), r = n(74), i = n(55), s = n(26), u = n(99), c = n(21), l = n(2), p = n(10), f = n(3), g = n(61), d = n(110), h = n(19), _ = n(113), v = [], m = [], y = [], b = [], w = l.getGlobalValue("aplus"), E = function() {};
    e.run = o.extend({
        beforeSendPV: function(t) {
            v.push(t);
        },
        afterSendPV: function(t) {
            m.push(t);
        },
        send: function(t, e, n) {
            var o;
            if (0 === t.indexOf("//")) {
                var r = f.HTTPS;
                /(\d+\.){3,}\d+/.test(t) && (r = "http:"), t = r + t;
            }
            return o = "POST" === n && navigator && navigator.sendBeacon ? _.postData(t, e) : _.sendImg(t + "?" + e, a()),
            w.req = o, o;
        },
        sendPV: function(t, e) {
            if (t = t || {}, c.any(v, function(e) {
                return e(w, t) === !1;
            })) return !1;
            var n = new d();
            t.recordType = "PV";
            var a = w.logConfig.pv;
            return n.run({
                plugins: a.plugins,
                context: c.cloneDeep(a.context)
            }, {
                config: t,
                userdata: e,
                pubsubType: "pv",
                messageFnQueue: m,
                middlewareMessageKey: "mw_change_pv"
            }), !0;
        },
        pageEnter: function(t) {
            g.pushIntoGoldlogQueue(f.PUBLISH, [ f.PAGE_ENTER, t ]), g.pushIntoGoldlogQueue(f.CACHE_PUBS, [ f.PAGE_ENTER, t ]);
        },
        getParam: function(t) {
            var e = window.WindVane || {}, n = e && "function" == typeof e.getParam ? e.getParam(t) : "";
            return n;
        },
        beforeRecord: function(t) {
            y.push(t);
        },
        afterRecord: function(t) {
            b.push(t);
        },
        record: function(t, e, n, a, o) {
            if (t && 0 !== t.indexOf("/") && w.globalConfig.isAli && (t = "/" + t), !c.any(y, function(t) {
                return t(w) === !1;
            })) {
                var r = new d(), i = w.logConfig.hjlj;
                return r.run({
                    plugins: i.plugins,
                    context: c.cloneDeep(i.context)
                }, {
                    config: {
                        recordType: "COMMON_HJLJ",
                        method: a
                    },
                    userdata: {
                        logkey: t,
                        gmkey: e,
                        gokey: n
                    },
                    pubsubType: "hjlj",
                    messageFnQueue: b,
                    middlewareMessageKey: "mw_change_hjlj"
                }, function() {
                    p(o) && o();
                }), !0;
            }
        },
        recordUdata: function(t, e, n, a, o) {
            var r = new d(), i = w.logConfig.hjlj;
            r.run({
                plugins: i.plugins,
                context: c.cloneDeep(i.context)
            }, {
                config: {
                    recordType: "DATACLICK_HJLJ",
                    method: a
                },
                userdata: {
                    logkey: t,
                    gmkey: e,
                    gokey: n
                },
                pubsubType: "hjlj",
                messageFnQueue: b,
                middlewareMessageKey: "mw_change_hjlj"
            }, function() {
                p(o) && o();
            });
        },
        setPageSPM: function(t, e, n) {
            var a = w.getMetaInfo("aplus-spm-fixed"), o = "function" == typeof n ? n : function() {};
            w.spm_ab = w.spm_ab || [];
            var r = c.cloneDeep(w.spm_ab);
            t && (w.spm_ab[0] = "" + t, w._$.spm.data.a = "" + t), e && (w.spm_ab[1] = "" + e,
            w._$.spm.data.b = "" + e);
            var i = h.qGet();
            if (w.spmAPI && w.spmAPI.spaInit(w, i, r), "1" !== a) {
                var s = r.join(".");
                w.spmab_pre = s;
            }
            var l = [ "setPageSPM", {
                spmab_pre: w.spmab_pre,
                spmab: w.spm_ab.join(".")
            } ];
            u.doPubMsg(l), u.doCachePubs(l), o();
        },
        setMetaInfo: function(t, e, n) {
            var a, o, r = "OVERWRITE", i = r;
            if ("object" == typeof t ? (a = t.metaName, o = t.metaValue, i = t.mode || r) : (a = t,
            o = e), i !== r) return this.appendMetaInfo(a, o);
            if (h.setMetaInfo(a, o, n)) {
                var s = l.getGoldlogVal("_$") || {};
                s.meta_info = h.qGet();
                var c = l.setGoldlogVal("_$", s), p = [ "setMetaInfo", a, o, n ];
                return u.doPubMsg(p), u.doCachePubs(p), c;
            }
        },
        appendMetaInfo: h.appendMetaInfo,
        updatePageProperties: function(t) {
            t && "object" == typeof t ? (t._page && (t.pageName = t._page, w.setMetaInfo("aplus-pagename", t.pageName),
            delete t._page), w.appendMetaInfo("aplus-cpvdata", t)) : s.logger({
                msg: "warning: typeof updatePageProperties's params must be object"
            });
        },
        updateNextPageProperties: function(t) {
            "object" == typeof t ? w.appendMetaInfo("aplus-nextpage-properties", t) : s.logger({
                msg: "warning: typeof updateNextPageProperties's params must be object"
            });
        },
        getMetaInfo: function(t) {
            return h.getMetaInfo(t);
        },
        on: i.on,
        cloneDeep: c.cloneDeep,
        setCookie: r.setCookie,
        getCookie: r.getCookie,
        pageAppear: E,
        pageDisappear: E,
        updatePageUtparam: E,
        updateNextPageUtparam: E,
        updateSessionProperties: function(t) {
            "object" == typeof t && w.setMetaInfo("_session_args", t);
        }
    });
}, function(t, e, n) {
    "use strict";
    var a = n(27), o = n(2), r = n(10), i = n(99), s = n(26), u = n(3), c = n(111), l = n(112), p = function() {};
    p.prototype.run = function(t, e, n) {
        var p = new l();
        p.init({
            middleware: [],
            config: e.config,
            plugins: t.plugins
        });
        var f = p.run(), g = r(t.context) ? new t.context() : t.context;
        g.userdata = e.userdata, g.logger = s.logger;
        var d = {
            context: g,
            pubsub: o.getGoldlogVal("aplus_pubsub"),
            pubsubType: e && e.pubsubType
        }, h = new c();
        h.create(d), h.wrap(f, function() {
            d.context.status = u.COMPLETE, e && (e.middlewareMessageKey && i.doPubMsg([ e.middlewareMessageKey, d.context ]),
            e.messageFnQueue && a(e.messageFnQueue, function(e) {
                e(o.getGlobalValue(u.APLUS), t);
            })), r(n) && n(d.context);
        })();
    }, t.exports = p;
}, function(t, e, n) {
    "use strict";
    function a() {}
    var o = n(10), r = n(35), i = n(26);
    a.prototype.create = function(t) {
        for (var e in t) "undefined" == typeof this[e] && (this[e] = t[e]);
        return this;
    }, a.prototype.calledList = [], a.prototype.setCalledList = function(t) {
        r.indexof(this.calledList, t) === -1 && this.calledList.push(t);
    }, a.prototype.resetCalledList = function() {
        this.calledList = [];
    }, a.prototype.wrap = function(t, e) {
        var n = this, a = this.context || {}, s = a.compose || {}, u = s.maxTimeout || 1e4;
        return function(a) {
            var s, c = t.length, l = 0, p = 0, f = function(g, d) {
                if (l === c) return a = "done", n.resetCalledList(), o(e) && d !== a && e.call(n, a),
                void clearTimeout(s);
                if (r.indexof(n.calledList, l) === -1) {
                    if (n.setCalledList(l), !t[l] || !o(t[l][0])) return;
                    try {
                        a = t[l][0].call(n, a, function() {
                            l++, p = 1, f(l);
                        });
                    } catch (t) {
                        i.logger({
                            msg: t
                        });
                    }
                }
                var h = "number" == typeof a;
                if ("pause" === a || h) {
                    p = 0;
                    var _ = h ? a : u, v = t[l] ? t[l][1] : "";
                    s = setTimeout(function() {
                        0 === p && (i.logger({
                            msg: "jump the middleware about " + v + ", because waiting timeout maxTimeout = " + _
                        }), a = null, l++, f(l));
                    }, _);
                } else "done" === a ? (l = c, f(l, a)) : (l++, f(l));
            };
            return n.calledList && n.calledList.length > 0 && n.resetCalledList(), f(l);
        };
    }, t.exports = a;
}, function(t, e, n) {
    "use strict";
    var a = n(22), o = n(26);
    t.exports = function() {
        return {
            init: function(t) {
                this.opts = t, t && "object" == typeof t.middleware && t.middleware.length > 0 ? this.middleware = t.middleware : this.middleware = [],
                this.plugins_name = [];
            },
            pubsubInfo: function(t, e) {
                try {
                    var n = t.pubsub;
                    n && n.publish("plugins_change_" + t.pubsubType, e);
                } catch (t) {
                    o.logger({
                        msg: t
                    });
                }
            },
            run: function(t) {
                t || (t = 0);
                var e = this, n = this.middleware, o = this.opts || {}, r = o.plugins;
                if (r && "object" == typeof r && r.length > 0) {
                    var i = r[t];
                    if (this.plugins_name.push(i.name), n.push([ function(t, n) {
                        e.pubsubInfo(this, i);
                        var r = new i.path();
                        return r.init || (r.init = function(t) {
                            this.options = t;
                        }), r.init({
                            context: this.context,
                            config: a(i.config || {}, o.config)
                        }), r.run(t, function(t) {
                            setTimeout(function() {
                                n(i, t);
                            }, 1);
                        });
                    }, i.name ]), t++, r[t]) return this.run(t);
                }
                return n;
            }
        };
    };
}, function(t, e) {
    "use strict";
    e.sendImg = function(t, e) {
        var n = window || {}, a = new Image(), o = "_img_" + Math.random();
        n[o] = a;
        var r = function() {
            if (n[o]) try {
                delete n[o];
            } catch (t) {
                n[o] = void 0;
            }
        };
        return a.onload = function() {
            r();
        }, a.onerror = function() {
            r();
        }, setTimeout(function() {
            window[o] && (window[o].src = "", r());
        }, e || 5e3), a.src = t, a = null, t;
    }, e.postData = function(t, e) {
        return navigator.sendBeacon(t, e), t;
    };
}, function(t, e, n) {
    "use strict";
    function a() {
        var t, e = r.getGlobalValue("aplus");
        try {
            var n = e.getMetaInfo("aplus-disable-pvid") + "";
            "true" === n ? t = !0 : "false" === n && (t = !1);
        } catch (t) {}
        return t;
    }
    var o = n(99), r = n(2), i = n(85);
    e.isDisablePvid = a, e.makePVId = function() {
        var t = r.getGlobalValue("aplus"), e = t.pvid, n = location && location.href, s = document && document.title;
        t.pvid = i.getLogId(n, s);
        var u = [ "pvidChange", {
            pre_pvid: e,
            pvid: t.pvid
        } ];
        return o.doPubMsg(u), o.doCachePubs(u), a() ? "" : t.pvid;
    }, e.getPvId = function() {
        var t = r.getGlobalValue("aplus");
        return a() ? "" : t.pvid;
    };
}, function(t, e, n) {
    "use strict";
    var a = n(116), o = n(2);
    t.exports = function() {
        return {
            run: function() {
                var t = this.options.context.aplus_config, e = t.globalConfig.APLUS_QUEUE, n = o.getContext(), r = n[e] || [], i = a.getFormatQueue(r, "metaQueue");
                n[e] = i.queue, a.processGoldlogQueue(i.formatQueue, this.options.config);
            }
        };
    };
}, function(t, e, n) {
    function a() {
        var t = u.getGoldlogVal("_$") || {}, e = t.meta_info;
        return e;
    }
    function o() {
        var t = a() || {}, e = t.uaid;
        return e && !t._anony_id ? "BLOCK" : t._hold || t["aplus-waiting"];
    }
    function r(t) {
        var e = o(), n = a() || {}, r = !0, i = t.arguments || [], s = i[0], u = i[1], c = "START";
        if ("_hold" === s && u === c) return c;
        if ("_anony_id" === s && u) return c;
        if (t && /sendPV|record|setPageSPM|setMetaInfo|appendMetaInfo$/.test(t.action)) switch (e) {
          case "BLOCK":
            n[e] || (_.push(t), r = !1);
        }
        return r;
    }
    function i(t) {
        g(d, t), g(h, t), g(_, t);
    }
    function s(t, e) {
        return e && f.openAPIs.indexOf(t) > -1 && (t = "_" + t), t;
    }
    var u = n(2), c = n(35), l = n(10), p = n(26), f = n(3), g = function(t, e) {
        function n() {
            if (t && c.isArray(t) && t.length) {
                for (var n = m(t).queue, a = {}, o = []; a = n.shift(); ) v(a, e, function(t) {
                    o.push(t);
                });
                o.length > 0 && setTimeout(function() {
                    for (;a = o.shift(); ) v(a, e);
                }, 100);
            }
        }
        try {
            n();
        } catch (t) {
            p.logger({
                msg: t
            });
        }
    };
    e.processGoldlogQueue = g;
    var d = [], h = [], _ = [];
    e.subscribeAndProcessQueue = function(t, e) {
        var n = u.getGlobalValue(t);
        n.push({
            action: f.SUBSCRIBE,
            arguments: [ f.SET_META_INFO, function(t, n) {
                t === f._USER_ID && n ? g(d, e) : t === f._ANONY_ID && n ? g(h, e) : "_hold" === t && "START" === n && i(e);
            } ]
        });
    };
    var v = function(t, e, n) {
        var a = !!e.isOpenApi, o = t ? t.action : "", f = t ? t.arguments : "", g = r(t);
        if (g) {
            var d = u.getContext();
            try {
                if (o && f && c.isArray(f)) {
                    var h, _ = o.split("."), v = d, m = d;
                    if (3 === _.length) v = d[_[0]][_[1]] || {}, h = s(_[2], a), m = v[h] ? v[h] : ""; else for (;_.length; ) if (h = s(_.shift(), a),
                    m = v = v[h], !v) return void (l(n) && n(t));
                    l(m) && m.apply(v, f), "START" === g && i(e);
                }
            } catch (t) {
                p.logger({
                    msg: t
                });
            }
        }
    };
    e.processTask = v;
    var m = function(t, e) {
        for (var n = {
            subscribeMwChangeQueue: [],
            subscribeMetaQueue: [],
            subscribeQueue: [],
            metaQueue: [],
            othersQueue: []
        }, a = [], o = {}; o = t.shift(); ) try {
            var r = o.action, i = o.arguments[0];
            /subscribe/.test(r) ? "setMetaInfo" === i ? n.subscribeMetaQueue.push(o) : i === f.MW_CHANGE_PV || i === f.MW_CHANGE_HJLJ ? n.subscribeMwChangeQueue.push(o) : n.subscribeQueue.push(o) : /MetaInfo/.test(r) ? n.metaQueue.push(o) : n.othersQueue.push(o);
        } catch (t) {
            p.logger({
                msg: t
            }), n.othersQueue.push(o);
        }
        var s;
        return e && n[e] && (s = n[e], n[e] = []), a = n.subscribeMwChangeQueue.concat(n.metaQueue),
        a = a.concat(n.subscribeQueue), a = a.concat(n.subscribeMetaQueue, n.othersQueue),
        {
            queue: a,
            formatQueue: s
        };
    };
    e.getFormatQueue = m;
}, function(t, e, n) {
    "use strict";
    var a = n(23), o = n(36), r = n(80), i = n(25);
    t.exports = function() {
        return {
            run: function() {
                var t = this, e = this.options.context.aplus_config;
                if (i.test()) {
                    var n = a.getLsCna(e.globalConfig.ETAG_STORAGE_KEY, t.today);
                    n || setTimeout(function() {
                        var n = aplus._$.meta_info["aplus-rhost-v"];
                        if (n) {
                            t.options.context.etag.egUrl = n + "/eg.js";
                            var i = r.getUrl(t.options.context.etag || {});
                            o.loadScript(i, function(n) {
                                n && "error" !== n.type && a.setLsCna(e.globalConfig.ETAG_STORAGE_KEY, t.today, aplus.Etag);
                            });
                        }
                    }, 1e3);
                }
            }
        };
    };
}, function(t, e, n) {
    "use strict";
    function a(t) {
        var e = t.Promise, n = t.document, a = t.navigator.userAgent, o = /Windows\sPhone\s(?:OS\s)?[\d\.]+/i.test(a) || /Windows\sNT\s[\d\.]+/i.test(a), r = /iPhone|iPad|iPod/i.test(a), i = /Android/i.test(a), s = Math.floor(65536 * Math.random()), u = 1, c = [], l = 3, p = "iframe_", f = "param_", g = 6e5, d = 6e4, h = {
            trace: function(t, e, n, a, o) {
                return h.call(t, e, n, a, o);
            },
            call: function(t, n, a, o, r) {
                var i, s;
                "number" == typeof arguments[arguments.length - 1] && (r = arguments[arguments.length - 1]),
                "function" != typeof a && (a = null), !e || a || o || (s = new e(function(t, e) {
                    a = t, o = e;
                })), i = _.getSid();
                var u = {
                    success: a,
                    failure: o
                };
                return r > 0 && (u.timeout = setTimeout(function() {
                    h.onFailure(i, {
                        ret: "HY_TIMEOUT"
                    });
                }, r)), _.registerCall(i, u), _.registerGC(i, r), _.evokeNative(t, n, i), s;
            },
            fireEvent: function(t, e) {
                var a = n.createElement("HTMLEvents");
                a.initEvent(t, !1, !0), a.param = _.parseData(e), n.dispatchEvent(a);
            },
            getParam: function(t) {
                return _.getParam(t);
            },
            setData: function() {},
            find: function(t, e) {
                e || _.unregisterCall(t, !1);
            },
            onSuccess: function(t, e, n) {
                _.onComplete(t, e, "success", n);
            },
            onFailure: function(t, e) {
                _.onComplete(t, e, "failure");
            }
        }, _ = {
            params: {},
            calls: {},
            getSid: function() {
                return (s + u++) % 65536 + "";
            },
            buildParam: function(t) {
                return t && "object" == typeof t ? JSON.stringify(t) : t || "";
            },
            getParam: function(t) {
                return this.params[f + t] || "";
            },
            setParam: function(t, e) {
                this.params[f + t] = e;
            },
            parseData: function(t) {
                var e;
                if (t && "string" == typeof t) try {
                    e = JSON.parse(t);
                } catch (n) {
                    e = {
                        ret: "HY_RESULT_PARSE_ERROR",
                        originValue: t
                    };
                } else e = t || {};
                return e;
            },
            registerCall: function(t, e) {
                this.calls[t] = e;
            },
            unregisterCall: function(t, e) {
                var n = this.calls[t] || {}, a = n.timeout;
                return a && clearTimeout(a), e || delete this.calls[t], n;
            },
            useIframe: function(t, e) {
                var a = p + t, o = c.pop();
                o || (o = n.createElement("iframe"), o.setAttribute("frameborder", "0"), o.style.cssText = "width:0;height:0;border:0;display:none;"),
                o.setAttribute("id", a), o.setAttribute("src", e), o.parentNode || setTimeout(function() {
                    n.body.appendChild(o);
                }, 5);
            },
            retrieveIframe: function(t) {
                var e = p + t, a = n.querySelector("#" + e);
                if (a) if (c.length >= l) try {
                    n.body.removeChild(a);
                } catch (t) {} else c.indexOf(a) < 0 && c.push(a);
            },
            evokeNative: function(t, e, n) {
                var a = {
                    className: "Umeng4Aplus",
                    methodName: t,
                    sid: n,
                    callback: "",
                    params: e
                }, s = JSON.stringify(a);
                console.log("yz-----method: ", t, s), o ? this.onComplete(n, {
                    ret: "HY_NO_HANDLER_ON_WP"
                }, "failure") : r ? window.webkit.messageHandlers.Umeng4Aplus.postMessage(s) : i ? window.Umeng4Aplus.CALL(s) : this.onComplete(n, {
                    ret: "HY_NOT_SUPPORT_DEVICE"
                }, "failure");
            },
            registerGC: function(t, e) {
                var n = this, a = Math.max(e || 0, g), o = Math.max(e || 0, d);
                setTimeout(function() {
                    n.unregisterCall(t);
                }, a), r && setTimeout(function() {
                    n.params[f + t] && delete n.params[f + t];
                }, o);
            },
            onComplete: function(t, e, n, a) {
                var o = this.unregisterCall(t, a), i = o.success, s = o.failure;
                e = this.parseData(e);
                var u = e.ret;
                "string" == typeof u && (e = e.value || e, e.ret || (e.ret = [ u ])), "success" === n ? i && i(e) : "failure" === n && s && s(e),
                r && (this.retrieveIframe(t), this.params[f + t] && delete this.params[f + t]);
            }
        };
        return h;
    }
    var o = n(26);
    t.exports = function() {
        return {
            subscribeLogs: function(t, e) {
                aplus.aplus_pubsub.subscribe(t, function(t) {
                    "complete" === t.status && e(t);
                });
            },
            callUT: function(t, e) {
                e._bridgeName = this.options.bridgeName || "AtmBridge", e._bridgeVersion = this.options.bridgeVersion || "1.0.0",
                console.log("yz----params", t, JSON.stringify(e)), aplus && aplus.aplusDebug && console && o.logger({
                    msg: "当前透传消息体: " + JSON.stringify(e)
                });
                try {
                    window.AtmBridge.trace(t, e, function(t) {
                        console.log("SUCCESS:", t);
                    }, function(t) {
                        console.log("FAILURE:", t);
                    });
                } catch (t) {
                    console.log(t);
                }
            },
            callMergeToNativeGP: function(t, e) {
                aplus && aplus.aplusDebug && console && o.logger({
                    msg: "当前透传全局属性: " + JSON.stringify(e)
                });
                try {
                    window.AtmBridge.trace(t, e, function(t) {
                        console.log("SUCCESS: ", t);
                    }, function(t) {
                        console.log("FAILURE:", t);
                    });
                } catch (t) {
                    console.log(t);
                }
            },
            watchLOG: function() {
                var t = this;
                t.subscribeLogs("mw_change_pv", function(e) {
                    var n = e.what_to_send || {}, a = n.pvdataToUmNative || {};
                    t.callUT("sendPV", a);
                }), t.subscribeLogs("mw_change_hjlj", function(e) {
                    var n = e.what_to_send || {}, a = n.hjljdataToUmNative || {};
                    t.callUT("sendEvent", a);
                });
            },
            watchMetaInfo: function() {
                var t = this;
                aplus.aplus_pubsub.subscribe("setMetaInfo", function(e, n) {
                    "globalProperty" === e && "object" == typeof n && t.callMergeToNativeGP("registerGlobalProperties", /Android/.test(navigator.userAgent) ? JSON.stringify(n) : n);
                });
            },
            run: function() {
                var t = window.navigator.userAgent, e = /Umeng4Aplus/i.test(t);
                if (e && !window.AtmBridge) {
                    var n = a(window);
                    window.AtmBridge = n;
                }
                window.AtmBridge && (this.watchLOG(), this.watchMetaInfo());
            }
        };
    };
}, function(t, e, n) {
    "use strict";
    var a = n(11), o = n(25), r = n(61), i = n(27), s = n(3), u = n(120);
    t.exports = a.extend({
        init: function(t) {
            this.options = t, this.PAGE_CONFIG_KEY = "APLUS_PAGE_CONFIG", this.cdnpath, this.isStartTracker = !1,
            this.latestComponentId, this.latestPageId, this.aplus_web_pageconfig;
        },
        getCdnPath: function(t) {
            if (!this.cdnpath) {
                var e = aplus && aplus.aplusDebug ? "/daily" : "";
                this.cdnpath = t.cdnPath + e + "/" + t.componentId + ".json";
            }
            return this.cdnpath;
        },
        fetchFromLS: function(t) {
            try {
                return JSON.parse(decodeURIComponent(o.get(this.PAGE_CONFIG_KEY + "-" + this.getCdnPath(t))) || {});
            } catch (t) {
                return null;
            }
        },
        setConfigIntoLS: function(t) {
            o.set(this.PAGE_CONFIG_KEY + "-" + this.getCdnPath(t), encodeURIComponent(JSON.stringify(t)));
        },
        fetchFromCdn: function(t, e) {
            var n = aplus && aplus.aplusDebug ? "/daily" : "", a = t.cdnPath + n + "/" + t.componentId + ".json";
            u.request(a, function(t) {
                e(t);
            }, function(t) {
                aplus && aplus.aplusDebug && window.console.log(t), e(null);
            }, {
                timeout: 5e3
            });
        },
        getCurrentPageConfig: function(t) {
            var e = this, n = {};
            return e.aplus_web_pageconfig && e.aplus_web_pageconfig.pages && i(e.aplus_web_pageconfig.pages, function(a) {
                if (a.spmB === t.pageId + "") {
                    n.page = a;
                    var o = [];
                    return i(e.aplus_web_pageconfig.points, function(t) {
                        t.spmB === a.spmB && o.push(t);
                    }), n.points = o, "break";
                }
            }), n;
        },
        getPageConfig: function(t, e) {
            var n = this, a = this.fetchFromLS(t);
            a && (n.latestComponentId = t.componentId, n.aplus_web_pageconfig = a, e("LS")),
            n.fetchFromCdn(t, function(a) {
                a && (n.setConfigIntoLS(a), n.latestComponentId = t.componentId, n.isStartTracker || (n.aplus_web_pageconfig = a,
                e("CNA")));
            });
        },
        trackerPageViewEvent: function(t) {
            aplus.sendPV({
                isAuto: !1,
                trackerEventCode: t.eventCode
            }, {
                _pos_id: t.spmB
            });
        },
        trackerCommonEvent: function(t) {
            var e = [];
            i(t, function(t) {
                var n;
                switch (t.selectorType) {
                  case "ID":
                    n = "#" + t.selector;
                    break;

                  case "CLASS":
                    n = "." + t.selector;
                    break;

                  case "DATA_TRACKER":
                    n = '[data-tracker="' + t.selector + '"]';
                }
                n && e.push({
                    cssSelector: n,
                    logkey: t.logkey || "$$_APLUS",
                    spmB: t.spmB,
                    _pos_id: t.spmC,
                    props: []
                });
            }), e.length > 0 && aplus.setMetaInfo("aplus-auto-clk", e);
        },
        startTracker: function(t, e) {
            aplus.aplusDebug && console.log("options === ", e), t.componentId = this.latestComponentId,
            r.pushIntoGoldlogQueue(s.PUBLISH, [ s.CURRENT_PAGE_CONFIG, t ]), r.pushIntoGoldlogQueue(s.CACHE_PUBS, [ s.CURRENT_PAGE_CONFIG, t ]);
            var n = t.page || {};
            n.spmB && this.latestPageId !== n.spmB && (this.latestPageId = n.spmB, this.isStartTracker = !0,
            this.trackerPageViewEvent(n), this.trackerCommonEvent(t.points || []));
        },
        run: function() {
            var t = this;
            r.pushIntoGoldlogQueue(s.SUBSCRIBE, [ s.PAGE_ENTER, function(e) {
                t.latestComponentId === e.componentId && t.aplus_web_pageconfig ? t.startTracker(t.getCurrentPageConfig(e), {
                    source: "LOCAL"
                }) : t.getPageConfig(e, function(n) {
                    t.startTracker(t.getCurrentPageConfig(e), {
                        source: n
                    });
                });
            } ]);
        }
    });
}, function(t, e, n) {
    "use strict";
    var a = n(3), o = {
        base: 1e4,
        timeout: 1e4
    }, r = function(t, e, n, r) {
        /^\/\//.test(t) && (t = a.HTTPS + t);
        var i = !0, s = r && r.timeout ? r.timeout : o.timeout;
        setTimeout(function() {
            i && (i = !1, n({
                timeout: s
            }));
        }, s), window.fetch(t).then(function(t) {
            return /application\/json/.test(t.headers.get("content-type")) ? t.json() : t.text();
        }).then(function(t) {
            i && (e(t), i = !1);
        }).catch(function(t) {
            i && n(t);
        });
    }, i = function(t, e, n, a) {
        var r, i = "GET", s = function() {
            r.responseText ? e(r.responseText) : n();
        }, u = window.XMLHttpRequest && "withCredentials" in new XMLHttpRequest();
        u ? (r = new XMLHttpRequest(), r.open(i, t, !0)) : (r = new window.XDomainRequest(),
        r.open(i, t));
        var c = a && a.timeout ? a.timeout : o.timeout;
        r.timeout = c, r.onload = s, r.onerror = n, r.ontimeout = n, r.send();
    }, s = function(t, e, n, a) {
        window.fetch ? r(t, e, n, a) : i(t, e, n, a);
    };
    e.request = s;
}, function(t, e, n) {
    "use strict";
    var a = n(11), o = n(2), r = n(116), i = a.extend({
        push: function(t) {
            this.length++, r.processTask(t, this.opts);
        }
    });
    t.exports = function() {
        return {
            processAplusQueue: function(t) {
                var e = this.options.config || {}, n = o.getGlobalValue(t);
                r.processGoldlogQueue(n, e), o.setGlobalValue(t, i.create({
                    opts: e,
                    startLength: n.length,
                    length: 0
                }));
            },
            run: function() {
                var t = this.options.context.aplus_config, e = t.globalConfig.APLUS_QUEUE;
                this.processAplusQueue(e), "aplus_queue" === e && this.processAplusQueue("goldlog_queue"),
                r.subscribeAndProcessQueue(e, this.options.config);
            }
        };
    };
}, function(t, e, n) {
    "use strict";
    var a = n(27), o = n(36), r = n(35);
    t.exports = function() {
        return {
            init: function(t) {
                this.options = t;
            },
            addStyle: function(t, e) {
                var n = t + "_style", a = document.getElementById(n);
                a || (a = document.createElement("link"), a.id = n, a.href = e, a.rel = "stylesheet",
                a.type = "text/css", document.getElementsByTagName("head").item(0).appendChild(a));
            },
            run: function() {
                var t = this, e = parent !== self, n = this.options.config || {};
                !e && n.urlRules && a(n.urlRules, function(e) {
                    var n, i = new RegExp(e.rule);
                    try {
                        n = e.id ? window.sessionStorage.getItem(e.id) : "";
                    } catch (t) {}
                    if (i.test(location.href) || n) {
                        try {
                            window.sessionStorage.setItem(e.id, !0);
                        } catch (t) {}
                        r.isArray(e.cdnPath) ? a(e.cdnPath, function(n) {
                            /\.css$/.test(n) ? t.addStyle(e.id, n) : /\.js/.test(n) && o.addScript(n);
                        }) : o.addScript(e.cdnPath);
                    }
                });
            }
        };
    };
}, function(t, e, n) {
    "use strict";
    var a = n(36), o = n(16), r = n(124);
    t.exports = function() {
        return {
            init: function(t) {
                this.options = t;
            },
            run: function() {
                var t = parent !== self, e = this.options.config || {}, n = e.sessionKey, i = o.getParamFromUrl(n, location.href);
                if (!t && ("pre" === i || "true" === i)) {
                    var s = e.JSPATH, u = e.CSSPATH;
                    if ("pre" === i) {
                        var c = "dev.g.alicdn.com";
                        s = s.replace(/g\.alicdn\.com/, c), u = u.replace(/g\.alicdn\.com/, c);
                    }
                    var l, p = n + "JS";
                    try {
                        l = window.sessionStorage.getItem(p);
                    } catch (t) {}
                    if (l || s) {
                        try {
                            window.sessionStorage.setItem(p, !0);
                        } catch (t) {}
                        if (a.addScript(s), u) {
                            var f = n + "CSS";
                            r.addStyle(f, u);
                        }
                    }
                }
            }
        };
    };
}, function(t, e) {
    e.addStyle = function(t, e) {
        var n = t + "_style", a = document.getElementById(n);
        a || (a = document.createElement("link"), a.id = n, a.href = e, a.rel = "stylesheet",
        a.type = "text/css", document.getElementsByTagName("head").item(0).appendChild(a));
    };
}, function(t, e, n) {
    "use strict";
    var a = n(26);
    t.exports = function() {
        return {
            run: function() {
                return aplus._aplus_cplugin_webvt ? void a.logger({
                    msg: "当前集成了可视化埋点分析插件，需要您做可视化埋点配置，才会有自动pv功能"
                }) : void n(126)();
            }
        };
    };
}, function(t, e, n) {
    "use strict";
    var a = n(2);
    t.exports = function() {
        var t = a.getGlobalValue("aplus"), e = a.getGlobalValue("aplus_queue");
        t._aplus_apv || (t._aplus_apv = {
            status: "complete"
        }, e.push({
            action: "aplus.sendPV",
            arguments: [ {
                is_auto: !0
            } ]
        }));
    };
}, function(t, e, n) {
    "use strict";
    t.exports = function(t) {
        var e = window, a = "g_tb_aplus_loaded";
        if (!e[a]) {
            e[a] = 1, n(47).isDebugAplus();
            var o = n(26), r = n(99), i = n(21), s = n(27), u = n(128), c = "running", l = [ "aplusReady", c ];
            r.doPubMsg(l), u.run({
                plugins: t.plugins,
                context: function() {
                    var e = {
                        PAGE_LOAD_TIME: new Date()
                    }, n = [];
                    return s(t.plugins, function(t) {
                        e[t.name] = t.config || {}, "aplus_log_inject" === t.name && t.config && t.config.plugins && (n = t.config.plugins.pv,
                        s(n, function(t) {
                            e[t.name] = t.config;
                        }));
                    }), i.assign(e, {
                        aplus_config: t
                    });
                }
            }, function() {
                o.logger({
                    msg: "APLUS初始化完成"
                });
            });
        }
    };
}, function(t, e, n) {
    "use strict";
    var a = n(110), o = n(10), r = n(99);
    e.run = function(t, e) {
        var n = new a();
        n.run({
            plugins: t.plugins,
            context: t.context
        }, {
            config: {},
            userdata: {},
            pubsubType: "aplusinit",
            messageFnQueue: [],
            middlewareMessageKey: "mw_change_aplusinit"
        }, function(t) {
            var n = [ "aplusInitContext", t ];
            r.doPubMsg(n), r.doCachePubs(n), o(e) && e();
        });
    };
} ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vYXBsdXNfY2xvdWQuanMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIDBiOGYwOWFjYmE2ODA3OTY0MGY5Iiwid2VicGFjazovLy8uL3NyYy9hcGx1c19jbG91ZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbGliX3UvdXRpbHMvdXRpbEdvbGRsb2cuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYl91L3V0aWxzL2FwbHVzU3RhdGljLmpzIiwid2VicGFjazovLy8uL3NyYy9hcGx1c19jbG91ZF9jb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsdWdpbnNfd2ViL2FwbHVzX3RyYWNrX2RlYnVnX2Nsb3VkLmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zX3dlYi9hcGx1c19ib2R5X3JlYWR5LmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zL2xpYl9tZXNzYWdlci9wdWJzdWJfd2ViLmpzIiwid2VicGFjazovLy8uL3NyYy9saWJfdS9jb3JlL1B1YlN1YldlYi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbGliX3UvY29yZS9QdWJTdWIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYl91L3V0aWxzL2lzRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYl91L2NvcmUvQmFzZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2lucy9hcGx1c19jbGllbnRfd2ViLmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zL2xpYl9jbGllbnQvbWFpbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2lucy9hcGx1c19tZXRhX2luamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2lucy9saWJfbWV0YS9tYWluLmpzIiwid2VicGFjazovLy8uL3NyYy9saWJfdS91dGlscy91dGlsVXJsLmpzIiwid2VicGFjazovLy8uL3NyYy9saWJfdS91dGlscy91dGlsTmF0aXZlNEFwbHVzLmpzIiwid2VicGFjazovLy8uL3NyYy9saWJfdS91dGlscy91dGlsTmFtZVN0b3JhZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsdWdpbnMvbGliX21ldGEvbWV0YUluZm9BbGkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYl91L3V0aWxzL2Zvcm1hdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbGliX3UvdXRpbHMvdXRpbERhc2guanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYl91L3V0aWxzL2Fzc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbGliX3UvdXRpbHMvdXRpbERhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYl91L3V0aWxzL3V0aWxUcmltLmpzIiwid2VicGFjazovLy8uL3NyYy9saWJfdS91dGlscy91dGlsU3RvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYl91L3V0aWxzL3V0aWxMb2dnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYl91L3V0aWxzL2VhY2guanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYl91L3V0aWxzL3V0aWxBdHRyaWJ1dGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYl91L3V0aWxzL3V0aWxNZXRhLmpzIiwid2VicGFjazovLy8uL3NyYy9saWJfdS91dGlscy91dGlsUmVmZXJyZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsdWdpbnNfd2ViL2FwbHVzX2FjX2luamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2luc193ZWIvbGliX2FjL21haW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYl91L3V0aWxzL3RyYWNrZXJVdGlsLmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zX3dlYi9saWJfYWMvd2F0Y2hDTEsuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYl91L3V0aWxzL3V0aWxBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbGliX3UvdXRpbHMvdXRpbERvbS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbGliX3UvdXRpbHMvZWFjaE1hcC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2luc193ZWIvbGliX2FlL3V0aWwvZXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYl91L3V0aWxzL2FwbHVzVGFwLmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zX3dlYi9saWJfY29tbW9uL3V0aWxfYWNfYWUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYl91L3V0aWxzL3V0aWxIYXNoLmpzIiwid2VicGFjazovLy8uL3NyYy9saWJfdS91dGlscy91dGlsRW5jb2RlLmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zX3dlYi9saWJfY29tbW9uL2NvbmZpZy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2luc193ZWIvbGliX2FjL3dhdGNoRE9NLmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zX3dlYi9hcGx1c19hZV9pbmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsdWdpbnNfd2ViL2xpYl9hZS9tYWluLmpzIiwid2VicGFjazovLy8uL3NyYy9saWJfdS91dGlscy9kZWJ1Zy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2luc193ZWIvbGliX2FlL3dhdGNoRE9NLmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zX3dlYi9saWJfYWUvdXRpbC91dGlsRWxlbWVudEFjLmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zX3dlYi9saWJfYWUvd2F0Y2hFeHBvc3VyZUlPYnNlcnZlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2luc193ZWIvbGliX2FlL3V0aWwvdXRpbEV4cG9zdXJlLmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zX3dlYi9saWJfYWUvd2F0Y2hFeHBvc3VyZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2luc193ZWIvbGliX2FlL3dhdGNoUmVjb3JkLmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zL2xpYl9tb25pdG9yL25hbWVfc3RvcmFnZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbGliX3UvdXRpbHMvdXRpbEV2ZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9saWJfdS91dGlscy9wYXNzaXZlU3VwcG9ydGVkLmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zL2FwbHVzX3dlYl9odHRwX3VtLmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zL2xpYl9jb25uZWN0aW9uL21haW5fd2ViX2h0dHBfdW0uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsdWdpbnMvbGliX2Nvbm5lY3Rpb24vbG9nX2Nsb3VkLmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zL2xpYl9jb25uZWN0aW9uL21haW5fYmFzZV9odHRwLmpzIiwid2VicGFjazovLy8uL3NyYy9saWJfdS91dGlscy91dGlsR1EuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsdWdpbnMvbGliX3VtL2JvZHlfYnVpbGRlcl93ZWJfdW0uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYl91L3V0aWxzL2Nsb25lRGVlcC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2lucy9saWJfdW0vaGVhZGVyX2J1aWxkZXJfd2ViX3VtLmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zL2xpYl91bS91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2lucy9saWJfdW0vdWxvZy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2lucy9saWJfdW0vbWFuZ2xlX3dlYi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2lucy9saWJfdW0vYmFzZTY0LmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zL2xpYl91bS9qc29uVXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2lucy9saWJfdW0vZXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsdWdpbnMvYXBsdXNfd2ViX3dzLmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zL2xpYl9jb25uZWN0aW9uL21haW5fd2ViX3dzLmpzIiwid2VicGFjazovLy8uL3NyYy9saWJfdS91dGlscy9kYXRlLmpzIiwid2VicGFjazovLy8uL3NyYy9saWJfdS91dGlscy9jb29raWUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYl91L3V0aWxzL3RsZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2lucy9saWJfY29ubmVjdGlvbi93cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbGliX3UvdXRpbHMvdXRpbENhdGNoLmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zL2FwbHVzX2xvZ19pbmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsdWdpbnMvbGliX2xvZy9taWRkbGV3YXJlL2NvbW1vbi9ldGFnX3dlYi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbGliX3UvdXRpbHMvdXRpbEV0YWcuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsdWdpbnMvbGliX2xvZy9taWRkbGV3YXJlL3B2L3doZW5fdG9fc2VuZHB2LmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zL2xpYl9sb2cvbWlkZGxld2FyZS9jb21tb24vd2hlcmVfdG9fc2VuZF93ZWJfY2xvdWRfdW0uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYl91L3V0aWxzL3V0aWxVQS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2lucy9saWJfbG9nL21pZGRsZXdhcmUvY29tbW9uL3doYXRfdG9fc2VuZF93ZWJfY2xvdWQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYl91L3V0aWxzL2xvZ0lkLmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zL2xpYl9sb2cvbWlkZGxld2FyZS9jb21tb24vdXRpbFBhcmFtcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2lucy9saWJfbG9nL21pZGRsZXdhcmUvY29tbW9uL2Nvb2tpZV9kYXRhLmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zL2xpYl9sb2cvbWlkZGxld2FyZS9wdi93aGF0X3RvX3NlbmRwdl91c2VyZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbGliX3UvdXRpbHMvaXNBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2lucy9saWJfbG9nL21pZGRsZXdhcmUvcHYvd2hhdF90b19zZW5kcHZfdXNlcmRhdGFfd2ViLmpzIiwid2VicGFjazovLy8uL3NyYy9saWJfdS91dGlscy91dGlsRXhpbmZvLmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zL2xpYl9sb2cvbWlkZGxld2FyZS9nZXRFeHBhcmFtc09iai5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2lucy9saWJfbG9nL21pZGRsZXdhcmUvZ2V0Q29va2llVXNlckluZm8uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsdWdpbnMvbGliX2xvZy9taWRkbGV3YXJlL3B2L3doYXRfdG9fc2VuZHB2X3V0Mi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbGliX3UvdXRpbHMvdXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2lucy9saWJfbG9nL21pZGRsZXdhcmUvcHYvd2hhdF90b19zZW5kcHZfdW0ybmF0aXZlLmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zL2xpYl9sb2cvbWlkZGxld2FyZS9wdi9jYW5fdG9fc2VuZHB2LmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zL2xpYl9sb2cvbWlkZGxld2FyZS9wdi9hZnRlcl9wdi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbGliX3UvdXRpbHMvdXRpbFB1YnN1Yi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2lucy9saWJfbG9nL21pZGRsZXdhcmUvaGpsai93aGF0X3RvX2hqbGpfdXNlcmRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsdWdpbnMvbGliX2xvZy9taWRkbGV3YXJlL2hqbGovd2hhdF90b19oamxqX3VzZXJkYXRhX3dlYi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2lucy9saWJfbG9nL21pZGRsZXdhcmUvaGpsai93aGF0X3RvX2hqbGpfdXQyLmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zL2xpYl9sb2cvbWlkZGxld2FyZS9oamxqL3doYXRfdG9faGpsal91bTJuYXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsdWdpbnNfd2ViX2Nsb3VkL2FwbHVzX3NwbV9jbG91ZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2luc193ZWJfY2xvdWQvbGliX3NwbV9jbG91ZC9tYWluLmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zX3dlYl9jbG91ZC9saWJfc3BtX2Nsb3VkL3dhdGNoU1BNLmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zL2FwbHVzX2FwaS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2lucy9saWJfYXBpL21haW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsdWdpbnMvbGliX2FwaS9hcGx1cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbGliX3UvY29yZS9SZWR1Y2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9saWJfdS9jb3JlL2NvbXBvc2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYl91L2NvcmUvcGx1Z2luc0xvYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2lucy9saWJfYXBpL3JlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYl91L3V0aWxzL3V0aWxQdmlkLmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zL2xpYl9xdWV1ZS9tZXRhX3F1ZXVlLmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zL2xpYl9xdWV1ZS9hY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsdWdpbnMvbGliX2xvZy9taWRkbGV3YXJlL2NvbW1vbi9ldGFnX3dlYl9zeW5jLmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zX3dlYi9saWJfanNCcmlkZ2UvQXRtQnJpZGdlLmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zX3dlYl9jbG91ZC9hcGx1c193ZWJfcGFnZWNvbmZpZy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbGliX3UvdXRpbHMvZmV0Y2hEYXRhLmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zL2xpYl9xdWV1ZS9hcGx1c19xdWV1ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2luc193ZWIvbGliX2hvdC9ob3RfbG9hZGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zX3dlYi9saWJfaG90L2FwbHVzX2FuYWx5dGljcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2luc193ZWIvbGliX2hvdC91dGlsSG90TG9hZGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zX3dlYi9hcGx1c19hcHZfaW5qZWN0LmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zX3dlYi9saWJfYXB2L21haW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwbHVzX3dlYl9iYXNpYy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbGliX3UvY29yZS9hcGx1c2luaXQuanMiXSwibmFtZXMiOlsibW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImluc3RhbGxlZE1vZHVsZXMiLCJleHBvcnRzIiwibW9kdWxlIiwiaWQiLCJsb2FkZWQiLCJjYWxsIiwibSIsImMiLCJwIiwiaW5pdEdsb2JhbCIsIndpbmRvdyIsImFwbHVzX2NvbmZpZyIsIl9hcGx1c19jb250ZXh0IiwiYXBsdXNTdGF0aWMiLCJBUExVUyIsIkFQTFVTX1FVRVVFIiwiR09MRExPRyIsIkdPTERMT0dfUVVFVUUiLCJpc1dlYiIsImUiLCJnZXRDb250ZXh0IiwiY29udGV4dCIsInYiLCJhcGx1cyIsImFwbHVzX3F1ZXVlIiwiX2FwbHVzRGVmYXVsdFZhbHVlIiwiX2FwbHVzUXVldWVEZWZhdWx0VmFsdWUiLCJfZ29sZGxvZ19xdWV1ZSIsImdvbGRsb2dfcXVldWUiLCJjb25jYXQiLCJnb2xkbG9nIiwiZ2V0R2xvYmFsVmFsdWUiLCJrZXkiLCJnIiwicSIsInNldEdsb2JhbFZhbHVlIiwidmFsdWUiLCJnZXRHb2xkbG9nVmFsIiwic2V0R29sZGxvZ1ZhbCIsInZhbCIsImYiLCJnZXRDbGllbnRJbmZvIiwiTVdfQ0hBTkdFIiwiTUVUQV9JTkZPIiwiQVBQRU5EX01FVEFfSU5GTyIsIlNFVF9NRVRBX0lORk8iLCJIVFRQIiwiX3B1YnN1YiIsImRlZmF1bHRDb2RlIiwiQ0xLIiwiRVhQIiwiSU1QRVhQIiwiT1RIRVIiLCJBUFBfU0hPVyIsIkFQUF9ISURFX09SX1VOTE9BRCIsIlNFU1NJT05fSU5URVJWQUwiLCJFS1ZTIiwiRVZFTlRfTUFYX0NPVU5UIiwiTUVNT1JZX01BWF9DT1VOVCIsIkVWRU5UX1NFTkRfREVGQVVMVF9JTlRFUlZBTCIsIlBBR0VfU1RBUlQiLCJBUFBfU1RBUlQiLCJBUFBfRU5EIiwiUEFHRV9FTlRFUiIsIkNVUlJFTlRfUEFHRV9DT05GSUciLCJfQU5PTllfSUQiLCJfVVNFUl9JRCIsIkRFRkFVTFRfQ09ERSIsIkVWRU5UX01BUCIsIjIxMDEiLCIyMjAxIiwiMjIwMiIsIjE5OTk5IiwiMTAyMyIsIjEwMTAiLCJFVkVOVF9JRF9NQVAiLCJTSE9XIiwiSF9PUl9VIiwiU1VCU0NSSUJFIiwiUFVCTElTSCIsIkNBQ0hFX1BVQlMiLCJBUExVU19VTklWRVJTQUwiLCJDT01QTEVURSIsIlBWX0NPREUiLCJFWFBfQ09ERSIsIkNMS19DT0RFIiwiT1RIRVJfQ09ERSIsIlNQTV9DTlQiLCJTUE1fVVJMIiwiU1BNX1BSRSIsIk1XX0NIQU5HRV9QViIsIk1XX0NIQU5HRV9ISkxKIiwiSFRUUFMiLCJBUExVU19BUFBFTkRfTUVUQV9JTkZPIiwiQVBMVVNfU0VUX01FVEFfSU5GTyIsIlBWSUQiLCJBUExVU19MT0dfUElQRSIsIm9wZW5BUElzIiwiU0VTU0lPTl9QQVVTRV9USU1FIiwiSU1QUklOVCIsIkNVUlJFTlRfU0VTU0lPTiIsIk1BWF9FVkVOVElEX0xFTkdUSCIsIk1BWF9QUk9QRVJUWV9LRVlfTEVOR1RIIiwiTUFYX1BST1BFUlRZX0tFWVNfQ09VTlQiLCJSRVFVRVNUUyIsIlNIQVJFUyIsIkFQTFVTX1NTUkMiLCJtZXRhSW5mbyIsImFwbHVzLWlmci1wdiIsImFwbHVzLXJob3N0LXYiLCJhcGx1cy1yaG9zdC1nIiwiYXBsdXMtY2hhbm5lbCIsImFwcElkIiwic2RrSWQiLCJhcGx1cy1jcHZkYXRhIiwiYXBsdXMtZXhkYXRhIiwiYXBsdXMtbW1zdGF0LXRpbWVvdXQiLCJhcGx1cy10b1VUIiwiZ2xvYmFsQ29uZmlnIiwiaXNBbGkiLCJFVEFHX1NUT1JBR0VfS0VZIiwic2NyaXB0X25hbWUiLCJsdmVyIiwiTkFNRV9TVE9SQUdFX0tFWVMiLCJSRUZFUlJFUiIsIlJFRkVSUkVSX1BWX0lEIiwiTE9TVF9QVl9QQUdFX0RVUkFUSU9OIiwiTE9TVF9QVl9QQUdFX1NQTUFCIiwiTE9TVF9QVl9QQUdFIiwiTE9TVF9QVl9QQUdFX01TRyIsInBsdWdpbnMiLCJuYW1lIiwicGF0aCIsImRlcHMiLCJjb25maWciLCJwdiIsImFwbHVzV2FpdGluZyIsInB2ZGF0YVRvVXQiLCJmbGFnIiwiaGpsaiIsInVybFJ1bGVzIiwicnVsZSIsImNkblBhdGgiLCJzZXNzaW9uS2V5IiwiSlNQQVRIIiwiQ1NTUEFUSCIsInJ1biIsImRvYyIsImRvY3VtZW50IiwiX2FwbHVzX2NwbHVnaW5fdHJhY2tfZGViIiwic3RhdHVzIiwid2luIiwiaXNUcmFja0RlYnVnIiwiTFMiLCJsb2NhbFN0b3JhZ2UiLCJfdHJhY2tpZCIsInJlZyIsIlJlZ0V4cCIsIm1hdGNoX3ZhbHVlIiwibG9jYXRpb24iLCJocmVmIiwibWF0Y2giLCJsZW5ndGgiLCJzZXRJdGVtIiwiX3IiLCJyZWZlcnJlciIsIm1hdGNoX3JlZmVyIiwiX24iLCJtYXRjaF9uYW1lIiwiX3RyYWNraWRWYWx1ZSIsImdldEl0ZW0iLCJkYXRlIiwidmFsdWVzIiwic3BsaXQiLCJyZXBsYWNlIiwibG9nZGF0ZSIsIkRhdGUiLCJsb2dkYXRlVGltZSIsImdldFRpbWUiLCJub3ciLCJub3dUaW1lIiwic2V0RnVsbFllYXIiLCJwYXJzZUludCIsInN1YnN0ciIsInNldE1vbnRoIiwic2V0RGF0ZSIsInNldEhvdXJzIiwic2V0TWludXRlcyIsInNldFNlY29uZHMiLCJzZXRNaWxsaXNlY29uZHMiLCJsaW1pdCIsImFwbHVzX3RyYWNrX2RlYnVnX2lkIiwib2JqIiwicHVzaCIsImFjdGlvbiIsImFyZ3VtZW50cyIsInN0YXRlIiwiY2IiLCJoYW5kbGVyIiwic2V0SW50ZXJ2YWwiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImNsZWFySW50ZXJ2YWwiLCJzZXRUaW1lb3V0IiwiUHViU3ViV2ViIiwidXRpbEdvbGRsb2ciLCJhcGx1c19wdWJzdWIiLCJjcmVhdGUiLCJQdWJTdWIiLCJleHRlbmQiLCJzdWJzY3JpYmVPbmNlIiwiZVR5cGUiLCJoIiwidGhpcyIsImNhbGxhYmxlIiwib25jZSIsIl9zZWxmIiwic3Vic2NyaWJlIiwidW5zdWJzY3JpYmUiLCJhcmdzIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJzbGljZSIsImFwcGx5IiwicyIsImhhbmRsZXJzIiwiaSIsImhfc3RyIiwidG9TdHJpbmciLCJzX3N0ciIsInNwbGljZSIsImlzRnVuY3Rpb24iLCJCYXNlIiwiZ2V0QXJncyIsImxlbiIsIl9hcmdzIiwiaiIsImZuIiwiVHlwZUVycm9yIiwicHJvcHMiLCJpbnN0YW5jZSIsInB1YnMiLCJzZXRIYW5kbGVycyIsImFyciIsInB1Ymxpc2giLCJzaXplIiwiY2FjaGVQdWJzIiwibyIsIlN1YkJhc2UiLCJPYmplY3QiLCJGIiwiY29uc3RydWN0b3IiLCJlcnIiLCJjb25zb2xlIiwibG9nIiwiX2FwbHVzX2NsaWVudCIsImdldE9sZEZhc2hpb25Pc0luZm8iLCJ1YSIsInRva2VuIiwidG9rZW4wIiwiaW5kZXhPZiIsIm9zIiwiZGV2aWNlX21vZGVsIiwib3NfdmVyc2lvbiIsImdldE1vZGVybk9TSW5mbyIsIm9zSW5mbyIsInN1YnN0cmluZyIsInJzIiwiZCIsInRvTG93ZXJDYXNlIiwidGVzdCIsIlVBIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiaW5mbyIsIm1vZGVybk9TIiwiRGFyd2luT1MiLCJfb3MiLCJzY3IiLCJzY3JlZW4iLCJzY3JlZW5XaWR0aCIsIndpZHRoIiwic2NyZWVuSGVpZ2h0IiwiaGVpZ2h0IiwibGFuZ3VhZ2UiLCJ1c2VyTGFuZ3VhZ2UiLCJvcHRpb25zIiwiZ2V0Q2RuUGF0aCIsImN1cnJlbnRfbm9kZSIsImdldEVsZW1lbnRCeUlkIiwicGF0aF9vdGhlcnMiLCJzcmMiLCJpc0ludGVybmF0aW9uYWwiLCJpc0ludCIsImdldE1ldGFJbmZvIiwiaXNNb2JpbGUiLCJpc1Bob25lIiwiZ2V0VXRQYXJhbUZyb21VcmwiLCJ1dHBhcmFtY250IiwidXRpbFVybCIsImdldFBhcmFtRnJvbVVybCIsIkpTT04iLCJwYXJzZSIsImRlY29kZVVSSUNvbXBvbmVudCIsInV0aWxOYXRpdmU0QXBsdXMiLCJ1dGlsTmFtZVN0b3JhZ2UiLCJyZWZlciIsImdldFJlZmVyIiwibmFtZVN0b3JhZ2UiLCJoYXZlTmF0aXZlRmxhZ0luVUEiLCJfJCIsImlzX3Rlcm1pbmFsIiwic2VuZF9wdl9jb3VudCIsInBhZ2VfcmVmZXJyZXIiLCJzcG0iLCJkYXRhIiwibWV0YV9pbmZvIiwicUdldCIsImsiLCJoYXNPd25Qcm9wZXJ0eSIsIm1ldGFWYWx1ZSIsImFwcGVuZE1ldGFJbmZvIiwic2V0TWV0YUluZm8iLCJ1cmwiLCJwYXJhbSIsInJlZzEiLCJyZWcyIiwidG1wXzEiLCJ0bXBfMiIsInBhcmFtXzEiLCJwYXJhbV8yIiwiZ2V0U1BNRnJvbVVybCIsIlVURkxBRyIsIlVNRkxBRyIsImlzTmF0aXZlNEFwbHVzIiwiY2hhbm5lbCIsImJyaWRnZU5hbWUiLCJhcGx1c0JyaWRnZU5hbWUiLCJqb2luIiwibWF0Y2hSZXN1bHQiLCJzYXZlIiwicGFpcnMiLCJlbXB0eSIsIlNUT1JBR0UiLCJlbmNvZGUiLCJFUSIsIk9SSUdJTl9OQU1FIiwiU0NIRU1FIiwiUSIsIkFORCIsImFkZEV2ZW50TGlzdGVuZXIiLCJlbGVtZW50IiwiZXZlbnROYW1lIiwiYXR0YWNoRXZlbnQiLCJldnQiLCJfbmFtZVN0b3JhZ2UiLCJSRV9QQUlSIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZGVjb2RlIiwic2hpZnQiLCJwYWlyIiwicGFyYW1zIiwibCIsIlN0cmluZyIsInJlbW92ZUl0ZW0iLCJjbGVhciIsInZhbHVlT2YiLCJnZXRNZXRhTWljcm9zY29wZURhdGEiLCJtZXRhX25vZGVzIiwibWV0YSIsImNvbnRlbnQiLCJfbWljcm9zY29wZV9kYXRhIiwidXRpbEF0dHJpYnV0ZSIsInRyeVRvR2V0QXR0cmlidXRlIiwidXRpbERhdGEiLCJwYXJzZVNlbWljb2xvbkNvbnRlbnQiLCJpc19oZWFkX2hhc19tZXRhX21pY3Jvc2NvcGVfZGF0YSIsIl9taWNyb3Njb3BlX2RhdGFfcGFyYW1zIiwiZm9ybWF0Iiwib2JqMnBhcmFtIiwibXNfZGF0YV9wYWdlX2lkIiwibXNfZGF0YV9zaG9wX2lkIiwibXNfZGF0YV9pbnN0YW5jZV9pZCIsIm1zX2RhdGFfc2l0ZUNhdGVnb3J5SWQiLCJtc19wcm90b3R5cGVfaWQiLCJzaXRlX2luc3RhbmNlX2lkX29yX3Nob3BfaWQiLCJfYXRwX2JlYWNvbl9kYXRhIiwiX2F0cF9iZWFjb25fZGF0YV9wYXJhbXMiLCJnZXRTUE1Qcm90b2NvbEZyb21NZXRhIiwibWV0YV9zcG1fcHJvdG9jb2wiLCJnZXRNZXRhQnlEYXRhc3BtIiwiX21ldGEiLCJxdWVyeVNlbGVjdG9yIiwiZWFjaCIsInBhcnNlT25lUGFnZSIsImlzb25lcGFnZSIsImFycl9jb250ZW50IiwidXJscGFnZW5hbWUiLCJpc29uZXBhZ2VfZGF0YSIsImdldEluZm8iLCJ1dGlsTWV0YSIsImdldE1ldGFUYWdzIiwibWV0YU5hbWUiLCJnZXRNZXRhQ250IiwiQVBMVVNfWF9TRVRUSU5HUyIsInByaW9yaXR5TWV0YUluZm8iLCJrZXlzIiwic3BtX3Byb3RvY29sIiwidXRpbERhc2giLCJhc3NpZ24iLCJmbG9hdF9rZXlzIiwicGFyc2VGbG9hdCIsImxhc3RfaW5mbyIsImxvZ2dlclByaW9yaXR5SW5mbyIsInV0aWxMb2dnZXIiLCJsb2dnZXIiLCJtc2ciLCJwYXJhbTJvYmoiLCJwcm9jZXNzT2JqZWN0Iiwib2xkX3ZhbHVlIiwibmV3X3ZhbHVlIiwidG9TZXRNZXRhSW5mbyIsInByb2Nlc3NBcnJheSIsInByb2Nlc3NPYmoiLCJmcm9tIiwicHJvY2Vzc0FwbHVzRXhpbmZvIiwiZXhpbmZvc19uZXciLCJfb2xkVmFsdWUiLCJ0bXBfcGFyc2UiLCJhcnIycGFyYW0iLCJza2lwRW5jb2RlIiwiYSIsImlzSW5QbGFuT2JqIiwic19wbGFpbl9vYmoiLCJfdmFsdWUiLCJhcnIyb2JqIiwicmV0IiwiaXRlbSIsImluZGV4IiwiZnJhZ21lbnQiLCJjb21tVHJhbnNsYXRlIiwiX3YiLCJlbmNvZGVHb2tleVZhbHVlIiwiZ29rZXkiLCJtYWtlQ2FjaGVOdW0iLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJpc1N0YXJ0V2l0aCIsInMxIiwiczIiLCJpc0VuZFdpdGgiLCJsMSIsImwyIiwiYW55IiwiaXNOdW1iZXIiLCJpc0NvbnRhaW4iLCJjbG9uZURlZXAiLCJzdHIiLCJuZXdvYmoiLCJzdHJpbmdpZnkiLCJ0YXJnZXRPYmoiLCJhcmdzT2JqIiwidGFyZ2V0IiwidG8iLCJuZXh0U291cmNlIiwibmV4dEtleSIsInV0aWxUcmltIiwidXRpbFN0b3JlIiwidHJ5VG9EZWNvZGVVUklDb21wb25lbnQiLCJkZWZhdWx0X3ZhbCIsImRpY3QiLCJ1bmRlY29kZSIsImEyIiwiYV9sZW4iLCJ0cmltIiwibm9kZUxpc3RUb0FycmF5Iiwibm9kZXMiLCJnZXRMc0NuYSIsInNldCIsIl9sc19jbmEiLCJnZXQiLCJfYXJyIiwic2V0THNDbmEiLCJ0b2RheSIsImNuYSIsImdldFVybCIsImVnVXJsIiwicmhvc3RfdiIsImN1c3RvbV9ob3N0IiwidGVzdEtleSIsInJlbW92ZSIsInByZWZpeCIsImxldmVsIiwiYXR0cl9uYW1lIiwiZ2V0QXR0cmlidXRlIiwidHJ5VG9TZXRBdHRyaWJ1dGUiLCJhdHRyX3ZhbHVlIiwic2V0QXR0cmlidXRlIiwidHJ5VG9SZW1vdmVBdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJmb3JjZSIsIl9oZWFkX25vZGUiLCJfbWV0YV9ub2RlcyIsImF0dHIiLCJnZXRPbmVQYWdlSW5mbyIsImluaXQiLCJfY29uZmlnIiwiYXBsdXNfYWNfaW5pdCIsImRvX2luaXQiLCJ0cmFja2VyVXRpbCIsIndyYXAiLCJnZXRBdXRvQ2xrQ29uZmlnIiwid2F0Y2hET00iLCJXYXRjaERPTSIsImF1dG9DbGtDb25maWciLCJ3YXRjaENMSyIsIndhdGNoX2NsayIsIm1ldGFLZXkiLCJtZXRhVmF1ZSIsIm9wdHMiLCJfY29uZmlnMiIsImNsZWFyRG9tIiwicmVzZXQiLCJnX3NwbSIsImdfU1BNIiwiX2FwbHVzX2FjIiwiZWxlbWVudFNlbGVjdG9yU2l6ZU1hcCIsImRvX3RyYWNrZXIyIiwibWV0aG9kX25hbWUiLCJ0aXRsZSIsInR5cGUiLCJkZXNjcmlwdGlvbiIsImRvX3RyYWNrZXIiLCJkb190cmFja2VyX2pzZXJyb3IiLCJhcGx1c0RlYnVnIiwid2FybiIsIm1lc3NhZ2UiLCJ1dGlsQXJyYXkiLCJ1dGlsRG9tIiwiZWFjaE1hcCIsInV0aWxFdmVudCIsInV0aWxfYWNfYWUiLCJ0YWdzIiwiTE9HS0VZX0FUVFIiLCJEQVRBX0FQTFVTX0FDX0tFWSIsInRyeUdldFBhcmFtcyIsImVsIiwiY2xrQ29uZmlncyIsImhhc2hfdmFsdWUiLCJfYWNIYXNoTWFwIiwibG9na2V5IiwiY2xrQ29uZmlnIiwiZ2V0UGFyYW1zIiwicGFyZW50Tm9kZSIsImluZGV4b2YiLCJ0YWdOYW1lIiwiaGFuZGxlcl9hdXRvX2NsayIsImV2ZW50Iiwic3JjRWxlbWVudCIsInNwbV9hYiIsInNjbSIsImV4YXJnc19vcmlnaW4iLCJleGFyZ3MiLCJmaWxsUHJvcHNEYXRhIiwiZmlsbEZpbHRlckRhdGEiLCJhY0F1dG9Vc2VyRm4iLCJnZXRBdXRvQ2xrVXNlckZuIiwiYXV0b1VzZXJGbkhhbmRsZXIiLCJlbGVtZW50U2VsZWN0b3IiLCJ1c2VyZGF0YSIsImFwbHVzQ29udGVudElkIiwiX21ldGhvZCIsIm1ldGhvZCIsImlzVG91Y2giLCJvbiIsInVuIiwiaXNBcnJheSIsImdldEN1cnJlbnROb2RlIiwiX2N1cnJlbnROb2RlIiwic2V0Tm9uY2UiLCJub2RlIiwibm9uY2UiLCJhZGRTY3JpcHQiLCJodHRwc19zcmMiLCJ0IiwiY3JlYXRlRWxlbWVudCIsImFzeW5jIiwiaGFzQ3Jvc3NPcmlnaW4iLCJoYXNBdHRyaWJ1dGUiLCJjcm9zc09yaWdpbiIsInByb3RvY29sIiwiaW5zZXJ0QmVmb3JlIiwiYXBwZW5kQ2hpbGQiLCJsb2FkU2NyaXB0IiwiY2FsbGJhY2siLCJvbmxvYWQiLCJlcnJvciIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsIm9uZXJyb3IiLCJyZWFkeVN0YXRlIiwibWFwIiwiazEiLCJnZXRDdXN0b21UYXAiLCJhcGx1c19jdGFwIiwidGFwRXZlbnRCaW5kIiwiY3VzdG9tVGFwIiwiYXBsdXNUYXAiLCJ0YXBFdmVudFVuQmluZCIsImF0dGEiLCJldmVudF90eXBlIiwiZ2V0UmFuZG9tIiwibWluIiwibWF4IiwiZmlyZUV2ZW50IiwiZXh0cmEiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJ0b3VjaHN0YXJ0SGFuZGxlciIsImRvY0VsIiwiZG9jdW1lbnRFbGVtZW50IiwiZ2VzdHVyZXMiLCJUT1VSQ0hfTU9WRSIsInRvdWNobW92ZUhhbmRsZXIiLCJUT1VDSF9FTkQiLCJ0b3VjaGVuZEhhbmRsZXIiLCJUT1VDSF9DQU5DRUwiLCJjaGFuZ2VkVG91Y2hlcyIsInRvdWNoIiwidG91Y2hSZWNvcmQiLCJnZXN0dXJlIiwic3RhcnRUb3VjaCIsInN0YXJ0VGltZSIsIlRBUFBJTkciLCJpZGVudGlmaWVyIiwiZGlzcGxhY2VtZW50WCIsImNsaWVudFgiLCJkaXNwbGFjZW1lbnRZIiwiY2xpZW50WSIsImRpc3RhbmNlIiwic3FydCIsInBvdyIsInRpbWVzdGFtcCIsIkFQTFVTX1RBUCIsInRvdWNoRXZlbnQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZml4SU9TVG91Y2hCdWciLCJfX2ZpeFRvdWNoRXZlbnQiLCJUT1VDSF9TVEFSVCIsImlzSW5pdGlhbGl6ZWQiLCJfYXBsdXNfdGFwX2NhbGxiYWNrIiwidXBkYXRlSGFzaHMiLCJhcGx1c0tleSIsIkdNIiwiTWFwIiwidG1wVmFsdWUiLCJ1dGlsSGFzaCIsInV0aWxFbmNvZGUiLCJnZXRYUGF0aCIsInNlZ3MiLCJzaWIiLCJ1bmlxdWVfaWRfY291bnQiLCJlbF9pZCIsImFsbF9ub2RlcyIsIm5vZGVUeXBlIiwidW5zaGlmdCIsInByZXZpb3VzU2libGluZyIsIm5vZGVsaXN0VG9BcnJheSIsIm5vZGVsaXN0IiwiZ2V0RWxlbWVudHMiLCJfZG9jdW1lbnQiLCJfZG9jIiwiZWxlbWVudHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwidGFnIiwiYXR0cnMiLCJmaWx0ZXIiLCJhdHRyX2tleSIsInRtcF90YWciLCJ0bXBfdmFsdWUiLCJoYXNLZXkiLCJpc0RlYnVnIiwic2VhcmNoIiwiSVNfREVCVUciLCJleHBDb25maWciLCJfZXhwX3Byb3BzIiwiX3ZhbCIsInVuZGVmaW5lZCIsInRtcHMiLCJpc01ldGhvZCIsImlzUGtnU2l6ZSIsInBrZ1NpemUiLCJpc19wa2dfc2l6ZSIsImZpbHRlckV4cENvbmZpZ1JlcXVlc3RDZmciLCJjZmciLCJnZXREZWZhdWx0UmVxdWVzdENmZyIsInN0cmluZ1RvT2JqZWN0IiwicGFyYW1zQXJyIiwidG1wIiwidHJ5VG9FbmNvZGVVUklDb21wb25lbnQiLCJhdXRvVXNlckZuIiwidXNlclBhcmFtcyIsImdldEVsZUF0dHJpYnV0ZXMiLCJlbGUiLCJhdHRyaWJ1dGVzIiwiYXR0cl92YWx1ZXMiLCJnZXRTcG1PYmoiLCJzcG1BbmNob3JJZCIsImFuY2hvcl9pZCIsImIiLCJnZXRFbGVtZW50SGFzaCIsInNvdXJjZSIsImdldFBhcmFtIiwiaGFzaF92YWx1ZV9pbmRleHMiLCJFSU5ERVgiLCJTUE1EIiwicHZpZCIsImlnbm9yZV9hdHRyIiwiX3RtcCIsImhhc2giLCJmaWx0ZXJVbmxvYWRBdHRyIiwiREFUQV9BUExVU19BRV9LRVkiLCJ1cGRhdGVNYXBWYWx1ZSIsInRtcEhhc2hzIiwidXBGbGFnIiwidG1wT2JqIiwidXBkYXRlSGFzaE1hcCIsImNoZWNrVmFsdWVJbmRleCIsInVwZGF0ZUV4cEhhc2hNYXAiLCJ1cGRhdGVDbGtIYXNoTWFwIiwiZ2V0Tm93IiwidGhyb3R0bGUiLCJmdW5jIiwid2FpdCIsInRpbWVvdXQiLCJyZXN1bHQiLCJwcmV2aW91cyIsImxhdGVyIiwibGVhZGluZyIsInRocm90dGxlZCIsInJlbWFpbmluZyIsImNsZWFyVGltZW91dCIsInRyYWlsaW5nIiwiY2FuY2VsIiwiY2hlY2tJc0luSGFzaE1hcCIsIl9oYXNocyIsIl9sb2drZXlIYXNocyIsInIiLCJzZXRSZWNvcmRTdWNjZXNzIiwiZWxlbWVudE9iaiIsImFwbHVzRG9tQXR0cktleSIsImNoIiwiZGVmX3YiLCJjaGFyQ29kZUF0IiwiZ2V0TWV0YVZhbHVlIiwiTE9PUF9USU1FIiwiZ2V0QXV0b0V4cFZpZXdSYXRlIiwiZGVmYXVsdF92YWx1ZSIsInJhdGUiLCJ2aXNpYmxlX3JhdGUiLCJBVVRPX0FUX1ZJRVdfUkFURSIsImdldEF1dG9FeHBEdXJhdGlvbiIsImR1cmF0aW9uIiwidG1wX2R1cmF0aW9uIiwiZHVyYXRpb25fbiIsIkVYUF9EVVJBVElPTiIsImdldEF1dG9Db25maWciLCJjb25maWdLZXkiLCJtZXRhT2JqIiwiYXBsdXNBdXRvRXhwIiwiY29uZmlncyIsInRtcF90YWdfZmlsdGVyIiwidGVtcHMiLCJjc3NTZWxlY3RvciIsIndob2xlU2VsZWN0b3IiLCJFcnJvciIsInRhZ19maWx0ZXIiLCJnZXRBdXRvRXhwQ29uZmlnIiwiZ2V0QXV0b0V4cFVzZXJGbiIsImFlQXV0b1VzZXJGbiIsImlzVGhyb3R0bGVXYXRjaERvbSIsIldhdGNoRG9tIiwiZWFjaEVsZW1lbnRzIiwiX3Bvc19pZCIsIl9pbmRleCIsImlzTmFOIiwiX29iaiIsImhhbmRsZXJfZG9tX2NoYW5nZSIsInRocm90dGxlX2hhbmRsZXJfZG9tX2NoYW5nZSIsImluaXRfb2JzZXJ2ZXIiLCJNT2JzZXJ2ZXIiLCJfb2JzZXJ2ZXIiLCJvYnNlcnZlcl90aW1lcyIsImNoaWxkTGlzdCIsImNoYXJhY3RlckRhdGEiLCJzdWJ0cmVlIiwib2JzZXJ2ZSIsImJvZHkiLCJpbml0X3dhdGNoX2RvbSIsIl9sb29wX29ic2VydmVyIiwiY3VycmVudF93aW5fc3RhdHVzIiwid2F0Y2hfdGltZXMiLCJ3YXRjaF9kb21fcnVubmluZyIsIm9uRm9jdXNIYW5kbGVyIiwib25CbHVySGFuZGxlciIsIm9uVmlzaWJpbGl0eUNoYW5nZSIsInZpc2liaWxpdHlTdGF0ZSIsImFkZEFsbExpc3RlbmVyIiwiV2luZFZhbmUiLCJyZW1vdmVBbGxMaXN0ZW5lciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwiTW96TXV0YXRpb25PYnNlcnZlciIsIl9jbGtDb25maWciLCJfZG9jcyIsImRpc2Nvbm5lY3QiLCJpbml0Rm4iLCJ3YXRjaEV4cG9zdXJlIiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJ3YXRjaFJlY29yZCIsImFwbHVzX2F1dG9fZXhwX2luaXQiLCJkb19pbml0X2ZsYWciLCJkZWJ1ZyIsImlzRGVidWdBcGx1cyIsIndhdGNoX2RhdGFfY2hhbmdlIiwid2F0Y2hfZXhwb3N1cmVfY2hhbmdlIiwiaXNUaHJvdHRsZVdhdGNoIiwiYXV0b0V4cENvbmZpZyIsIl93YXRjaF9kb21fY2ZnIiwiX2FwbHVzX2F1dG9fZXhwIiwiZXhwX3RpbWVzIiwidXRpbEVsZW1lbnRBYyIsImlzUmVjb3JkIiwiY2hlY2tJc1JlY29yZCIsImlzSW5IYXNoTWFwIiwiX2VsZSIsImV4cENvbmZpZ3MiLCJfYWUiLCJpZ25vcmVzIiwiZ2V0QXR0cnNDaGFyc05vZGVzIiwibXV0YXRpb24iLCJhdHRyaWJ1dGVOYW1lIiwiZWFjaF9ub2RlcyIsIl9ub2RlTmFtZSIsIm5vZGVOYW1lIiwiYXR0ck5hbWUiLCJtdXRhdGlvbnMiLCJhZGRlZE5vZGVzIiwiX2NmZyIsInBhcmVudEVsZW1lbnQiLCJ0YWtlUmVjb3JkcyIsIl9leHBDb25maWciLCJwb3NpdGlvbklzSW5XaW4iLCJ3aW5Qb3NpdGlvbnMiLCJ4IiwicExlZnRUb3AiLCJwUmlnaHRCb3R0b20iLCJ5IiwiZ2V0Vmlld2FiaWxpdHlSYXRlIiwiZWxlTGVmdFRvcElzSW5XaW4iLCJlbGVSaWdodFRvcElzSW5XaW4iLCJlbGVMZWZ0Qm90dG9tSXNJbldpbiIsImVsZVJpZ2h0Qm90dG9tSXNJbldpbiIsImZ1bGwiLCJoYWxmIiwicExlZnRCb3R0b20iLCJhYnMiLCJwUmlnaHRUb3AiLCJjb3JuZXIiLCJ3cmFwVmlld2FiaWxpdHlSYXRlIiwiQUNfUkFURSIsIm4iLCJOYU4iLCJnZXRFbGVtZW50UG9zaXRpb24iLCJwb3MiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJsZWZ0IiwidG9wIiwib2Zmc2V0V2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJnZXRXaW5Qb3NpdGlvbnMiLCJwb3NpdGlvblNlbGVjdG9yIiwicG9zdGlvbnMiLCJzZWxlY3RvckVsZSIsIl9wb3MiLCJlbGUxIiwiZWxlMiIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0Iiwib2xkX2hhc2hfdmFsdWUiLCJnZXRWaWV3YWJpbGl0eVJhdGVJbldpbmRvdyIsImVsZW1lbnRBcmVhIiwiZmlsdGVyU3RhcnRFeHBvc3VyZVNpemUiLCJleHBvc3VyZVRpbWUiLCJtb3ZlT3JTY3JvbGwiLCJlbGVfcyIsImV2ZW50VHlwZSIsImlzVGFyZ2V0IiwiX2VsZVBvcyIsImJvdW5kaW5nQ2xpZW50UmVjdCIsImludGVyc2VjdGlvblJhdGlvIiwidmlld2FiaWxpdHlSYXRlSW5XaW5kb3ciLCJBQ19SQVRFX0lOX1dJTkRPVyIsImlzUmVsYXRlaXZlUmF0aW8iLCJ2aWV3YWJpbGl0eVJhdGUiLCJ2aWV3YWJpbGl0eSIsImxhc3RFdmVudFR5cGUiLCJoYW5kbGVyX2RvbV9leHBvc3VyZSIsImVudHJ5IiwiaXNGaXJzdCIsIlBVQl9LRVkiLCJ1dGlsRXhwb3N1cmUiLCJmaWx0ZXJFbmRFeHBvc3VyZVNpemUiLCJjcmVhdGVJT2JzZXJ2ZXIiLCJkZWZhdWx0T3B0cyIsInJvb3QiLCJyb290TWFyZ2luIiwidGhyZXNob2xkIiwiSU9ic2VydmVyIiwiZW50cmllcyIsIndhdGNoSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJpb2JzZXJ2ZXJNYXAiLCJpb19iYXNlIiwiaW5PYnNlcnZlciIsImlvX3YiLCJBVVRPX0FUX1ZJRVdfUkFURV9JTl9XSU5ET1ciLCJpbyIsImlzRGlzcGxheU5vbmUiLCJpc05vbmUiLCJzdHlsZSIsImRpc3BsYXkiLCJyZWxhdGl2ZVNlbGVjdG9yUG9zaXRpb25zIiwiaXNWaWV3YWJpbGl0eVJhdGUiLCJ2aWV3YWJpbGl0eUluV2luZG93UmF0ZSIsInRocm90dGxlX2hhbmRsZXJfZXhwb3N1cmUiLCJzZWxlY3RvcnMiLCJ3YXRjaF9wb3NpdGlvbnNlbGVjdG9yX2NoYW5nZSIsImZvckVhY2giLCJ0bXBfc2VsZWN0b3JzIiwicHJvY2Vzc1NQTUNEIiwiZWx0eXBlIiwic3BtQyIsInNwbUFyciIsInNwbU9iaiIsIndhdGNoVW5sb2FkUmVjb3JkIiwicmVjb3JkUXVldWUiLCJmaWx0ZXJSZWNvcmRzIiwiaXNBcGx1c0RlYnVnIiwibG9na2V5Q29udGFpbmVyIiwicmVxdWVzdF9jZmciLCJfcmF0ZSIsIl9yYXRlTnVtIiwiTnVtYmVyIiwidG9GaXhlZCIsIl93IiwiX2giLCJfeCIsIl95IiwiX3ZpZXdhYmlsaXR5IiwiZG9fY2xvbmVfYXJyIiwiZWxlcyIsInRtcDIiLCJoYW5kbGVyUmVjb3JkIiwiY2xlYXJfbGlzdCIsInZfb3JpZ2luIiwicG9wIiwicHJvY2Vzc1JlY29yZFF1ZXVlIiwicmVjb3JkQXBsdXNBdCIsIl9sb2drZXkiLCJsb2drZXlfdmFsdWVzIiwiZXhwb3VzdXJlUGFyYW1zIiwic2VuZEJlYWNvbiIsInJlY29yZEFwbHVzQXRGb3JBbGl5dW4iLCJoYW5kbGVyRXhwb3N1cmUiLCJ1dGlsUmVmZXJyZXIiLCJyZWNvcmRWYWxJbldpbmRvd05hbWUiLCJyZWZlcnJlcl9wdl9pZCIsImlzX2h0dHBzIiwiTkFNRVNUT1JBR0VfS0VZUyIsImlzX2luX2lmcmFtZSIsInBhcmVudCIsInNlbGYiLCJwYWdlX3VybCIsImlzX2xvZ2luX3BhZ2UiLCJhcGx1c1RvdWNoIiwiZG9TY3JvbGxDaGVjayIsImRvU2Nyb2xsIiwiRE9NUmVhZHkiLCJkZXRhY2hFdmVudCIsInRvcGxldmVsIiwiZnJhbWVFbGVtZW50Iiwib25ldmVudCIsInBhc3NpdmVTdXBwb3J0ZWQiLCJwYXNzaXZlIiwic3VwcG9ydGVkIiwiZGVmaW5lUHJvcGVydHkiLCJNYWluIiwibWFpbiIsIldTIiwiQ1RYIiwiQ1RYX1RZUEUiLCJsb2dfY2xvdWQiLCJtYWluX2Jhc2VfaHR0cCIsImJvZHlCdWlsZCIsImhhbmRsZXJNaWRkbGV3YXJlIiwiY2hhbmdlVG9PYmoiLCJ3aGF0X3RvX3NlbmQiLCJsb2dkYXRhIiwid2hlcmVfdG9fc2VuZCIsInBvc3REYXRhIiwic2VuZCIsImdldEtleUluZGV4IiwiZXZlbnRfYXJncyIsIkhMIiwiY2hhbmdlVG9BcnJheSIsInRpbWUiLCJldmVudF90aW1lc3RhbXAiLCJjbGllbnQiLCJfcmVzb2x1dGlvbiIsInJlc29sdXRpb24iLCJMQU5HIiwic2RrX2luZm8iLCJjdXN0b21TZGtJZCIsInBsYXRmb3JtX3R5cGUiLCJwbGF0Zm9ybVR5cGUiLCJhcHBLZXkiLCJhcHBfZXh0X2luZm8iLCJzZXNzaW9uX2FyZ3MiLCJzZXNzaW9uQXJncyIsImdsb2JhbF9hcmdzIiwiZ2xvYmFsQXJncyIsImFyZzEiLCJldmVudF9jb2RlIiwidHJhY2tlckV2ZW50Q29kZSIsIm1vZGVsIiwiY2FjaGUiLCJfZGV2X2lkIiwiX3VzZXJfbmljayIsIl91c2VyX2lkIiwiX2Fub255X2lkIiwidGltZVpvbmUiLCJfc2Vzc2lvbl9pZCIsInByZSIsImpzdmVyIiwiYXBwVmVyc2lvbiIsImJyYW5kIiwibmV0d29ya1R5cGUiLCJPYmoiLCJwbGF0Zm9ybSIsInNka190eXBlIiwiYXBwa2V5Iiwic2RrX3ZlcnNpb24iLCJkZXZpY2VfdHlwZSIsInBpeGVsX3JhdGlvIiwiZGV2aWNlUGl4ZWxSYXRpbyIsInciLCJyb3VuZCIsImFwcF92ZXJzaW9uIiwibG9nX2lkIiwiZXhkYXRhIiwidHJhY2tfZGVidWdfaWQiLCJ1dGlsR1EiLCJzdWJzY3JpYmVMb2dzIiwicHVzaEludG9Hb2xkbG9nUXVldWUiLCJvcmlEYXRhcyIsImdldExvZ2ljU3ltYm9sIiwid2F0Y2hMT0ciLCJuYW1lcyIsImFwbHVzXzEiLCJhcGx1c18yIiwiX2J1aWxkSEpMSkV2ZW50IiwiZXZlbnRBcmdzIiwiZ3AiLCJ1cmxBcnIiLCJwYWdlX25hbWUiLCJ1cmxfcCIsInByZVVybEFyciIsInJlZl9wYWdlX25hbWUiLCJyZWZlcl9wIiwiaXNfYXV0byIsInByb3BlcnRpZXMiLCJjdXNwIiwiX2J1aWxkUFZFdmVudCIsInB2YXJncyIsInV0aWxzIiwiZGVsZXRlSW5mbyIsImJ1aWxkSGVhZGVyIiwibWFuZ2xlIiwiYmFzZTY0IiwianNvblV0aWwiLCJjaGVja0VtcHR5T2JqIiwiaGVhZGVyIiwiYV9hbm9ueV9pZCIsImFub255X2lkIiwiaWRfdHJhY2tpbmciLCJhX2Rldl9pZCIsImRldl9pZCIsImVrdiIsImFuYWx5dGljcyIsImVrdnMiLCJzZXNzaW9uaWQiLCJ1c2VySWQiLCJhY3RpdmVfdXNlciIsInB1aWQiLCJwcm92aWRlciIsInRzIiwidHJhY2VJZCIsImdldFJhbmRvbVN0ciIsIm1hbmdsZURhdGEiLCJyZXF1ZXN0RGF0YSIsInN0cmluZ2Z5IiwiZGVidWdJZCIsInN0YXJ0c1dpdGgiLCJzZWFyY2hWYWwiLCJvdXRwdXQiLCJzaG91bGRTZW5kRXZlbnRzIiwiaW50ZXJ2YWwiLCJsYXN0U2VuZFRpbWUiLCJjaGVja0V2ZW50IiwiZXZlbnRJZCIsInVsb2ciLCJyZXNlcnZlV29yZHMiLCJyZXNlcnZlV29yZE1hcCIsIndvcmQiLCJjb3VudCIsIkRhdGFUeXBlIiwiSEFMRl9TRVNTSU9OIiwiQ0xPU0VfU0VTU0lPTiIsIkVLViIsIkVOVEVSX1BBR0UiLCJMRUFWRV9QQUdFIiwiQWNjZXNzVHlwZSIsIk1PQklMRV9ORVRXT1JLXzJHIiwiTU9CSUxFX05FVFdPUktfM0ciLCJNT0JJTEVfTkVUV09SS180RyIsIk1PQklMRV9ORVRXT1JLX05PTkUiLCJMT0dfUFJFRklYIiwiVUxvZyIsInNldERlYnVnIiwiX2RlYnVnIiwidGFibGUiLCJ0aXAiLCJ0aXBfdyIsInJlcGVhdCIsImNoYXIiLCJyZXMiLCJfaW5zdGFuY2UiLCJfbWFuZ2xlSGVhZGVyIiwiX21hbmdsZU9iaiIsImlkTWFwIiwiX21hbmdsZUFuYWx5dGljcyIsInByb3AiLCJhbmFseXRpY3NNYXAiLCJoZWFkZXJNYXAiLCJ0ZXN0VG9rZW4iLCJfaWQiLCJpZF90eXBlIiwiaW1wcmludCIsInV1aWQiLCJ1bmlvbmlkIiwib3BlbmlkIiwiYW5vbnltb3VzaWQiLCJhbGlwYXlfaWQiLCJkZXZpY2VfaWQiLCJ1c2VyaWQiLCJiNjRjaGFycyIsImI2NHRhYiIsImJpbiIsImNoYXJBdCIsImZyb21DaGFyQ29kZSIsImNiX3V0b2IiLCJjYyIsInJlX3V0b2IiLCJ1dG9iIiwidSIsImNiX2VuY29kZSIsImNjYyIsInBhZGxlbiIsIm9yZCIsImNoYXJzIiwiYnRvYSIsIl9lbmNvZGUiLCJ1cmlzYWZlIiwibTAiLCJyZV9idG91IiwiY2JfYnRvdSIsImNjY2MiLCJjcCIsIm9mZnNldCIsImJ0b3UiLCJjYl9kZWNvZGUiLCJhdG9iIiwiX2RlY29kZSIsImpzb24iLCJwYXJzZVRvQXJyYXkiLCJwcm9wc1R5cGUiLCJpc1N1cHBvcnRXUyIsIkZOIiwiV2ViU29ja2V0IiwiX2FwbHVzX2NwbHVnaW5fd3MiLCJjb29raWUiLCJQZXJzaXN0ZW50TGlua0xpc3QiLCJ3c0hhbmRsZXIiLCJsc0NuYUtleSIsInRpbWVvdXRUb0h0dHAiLCJkb21haW4iLCJyZXRyeVRpbWVzS2V5IiwibWF4UmV0cnlUaW1lc1BlckhvdXIiLCJyZXRyeVRpbWVzIiwicGFnZUxvYWREYXRlSG91ciIsImdldERhdGVIb3VyIiwiZ2V0Rm9ybWF0RGF0ZSIsImdldEhvdXJzIiwiZ2V0UmV0cnlUaW1lcyIsInNldFJldHJ5VGltZXMiLCJ0aW1lcyIsImRvU2V0UmV0cnlUaW1lcyIsImNoZWF0Q2FsbGJhY2siLCJ0b1VwcGVyQ2FzZSIsIm5ld1NlbmQiLCJzbiIsInN5IiwiZ2V0UHZQb3N0RGF0YSIsInB2ZGF0YSIsIm1tdXJsIiwiZ2V0UG9zdERhdGEiLCJhd3MiLCJsb2dfY2FsbGJhY2siLCJyZWNvcmRUeXBlIiwiZ2V0Q25hRGF0YSIsImxzQ25hIiwiY29va2llQ25hIiwiZ2V0Q29va2llQ25hIiwiY25hQ2FsbGJhY2siLCJzZXRDb29raWVDbmEiLCJTYW1lU2l0ZSIsIndhdGNoV1NTdGF0dXMiLCJtc2dRdWV1ZVRvSHR0cFJlcXVlc3QiLCJzdGFydFdlYlNvY2tldCIsImNyZWF0ZVRpbWUiLCJjdHgiLCJzdGFydFdTIiwiZGF0YXN0ciIsImh0dHBSZXF1ZXN0QmVhY29uIiwiX2oiLCJQUk9UT0NPTF9JTkRFWCIsIkVWRU5UX0FSR1NfSU5ERVgiLCJpc1BlcnNpc3RlbnRMaW5rIiwibG9ndHlwZSIsImNoYW5nZVRvSHR0cFJlcXVlc3QiLCJtc2dRdWV1ZSIsImRhdGFJbkFycmF5IiwiYXJyYXkiLCJyZWR1Y2VEYXRhSW5BcnJheSIsImdldE1zZ1F1ZXVlIiwiY2xlYXJNc2dRdWV1ZSIsIndhdGNoUXVldWUiLCJzZXRNc2dRdWV1ZSIsIndhdGNoRG9tYWluIiwiemVyb0ZpbGwiLCJudW1iZXIiLCJ0YXJnZXRMZW5ndGgiLCJmb3JjZVNpZ24iLCJhYnNOdW1iZXIiLCJ6ZXJvc1RvRmlsbCIsInNpZ24iLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsImdldENvb2tpZSIsImNvb2tpZV92YWwiLCJnZXRFeHBpcmVzVGltZSIsImRhdGVTdHIiLCJleHBpcmVzIiwidG9VVENTdHJpbmciLCJzZXRUaW1lIiwidHJ5U2V0Q29va2llIiwic2V0Q29va2llIiwiZG9tYWlucyIsInRsZCIsImdldERvbWFpbnMiLCJnZXREYXRhIiwiaG9zdG5hbWUiLCJjbmF1aSIsImdldEhuZyIsInRvcHMiLCJmdWxsX2RvbWFpbiIsIkRFRkFVTFRfRE9NQUlOIiwidXRpbENhdGNoIiwid2Vic29ja2V0Iiwid3NpbmRleFByZSIsIndzaW5kZXgiLCJtc2dfcXVldWUiLCJzZXRXc0hhbmRsZXIiLCJ3c1VybCIsImdldFdzSGFuZGxlciIsInByb2Vzc01zZ1F1ZXVlIiwiaW5pdFdlYlNvY2tldCIsIndzUHJvdG9jb2wiLCJmaWxlbmFtZSIsIm9ub3BlbiIsIk1TR1MiLCJjb25uVGltZU1zZyIsImNhdGNoRXhjZXB0aW9uIiwidGltZVN0YW1wIiwib25jbG9zZSIsIm9ubWVzc2FnZSIsInJlYWR5SW5pdFdlYlNvY2tldCIsInN0YXJ0Iiwic3RvcCIsImNsb3NlIiwic2VuZE1zZyIsInByb2Nlc3NTeXNFdmVudCIsInByb2Nlc3NMb2dFdmVudCIsImlzU3VjY2VzcyIsImdldExvZ0NvbmZpZyIsImxvZ0NvbmZpZyIsInBhZ2VMb2FkVGltZSIsIlBBR0VfTE9BRF9USU1FIiwidXRpbEV0YWciLCJwbHVnaW5fZXRhZyIsImV0YWciLCJzZXRUYWciLCJzZXRTdGFnIiwic2V0THNUYWciLCJzZXRFdGFnIiwicmVxdWVzdGluZyIsImxzdGFnIiwic3RhZyIsInNldExzY25hU3RhdHVzIiwibHNjbmFzdGF0dXMiLCJ0aW1lciIsImFwbHVzX3Job3N0X3YiLCJkb19iYWNrIiwiRXRhZyIsIl9sc2NuYSIsInByb3RvY2FsIiwiZ2V0QXBsdXNXYWl0aW5nIiwid2hlbl90b19zZW5kcHYiLCJpc1dhaXQiLCJ1dGlsVUEiLCJQT1NUIiwiR0VUIiwiZ2V0QXBsdXNNZXRhQnlLZXkiLCJnZXRSaG9zdCIsImdldEhqbGpIb3N0VXJsIiwicmhvc3QiLCJlbmRmaXgiLCJnZXRQdkhvc3RVcmwiLCJnaWYiLCJnZXRIb3N0VXJsIiwiZ2V0Q2hhbm5lbCIsImFwbHVzQ2hhbm5lbCIsImNoYW5uZWxzIiwiaXNfc2luZ2xlIiwiaXNBbGlBcHAiLCJpc0lPUyIsImlzQW5kcm9pZCIsImlzV2luZG93c1Bob25lIiwiaXNCbGFja0JlcnJ5IiwiaXNPcGVyYU1vYmlsZSIsImxvZ0lkIiwidXRpbFBhcmFtcyIsImdldENvbW1vblBhcmFtcyIsInVzZXJJbmZvIiwicGFnZVVybCIsImNvbW1vblBhcmFtcyIsImdldExvZ0lkIiwiZ2V0VGltZVpvbmUiLCJnbWtleSIsImdldFB2UGFyYW1zIiwibWFuc25kbG9nIiwiZ2V0SGpsalBhcmFtcyIsImhqbGpQYXJhbXMiLCJnZXRDaGFycyIsImRlZmF1bHRWYWwiLCJnZXRSYW5kb21JZCIsImhhbmRsZVBWSWQiLCJjaGFyUG9zIiwiY2hhcnNXaXRob3V0RyIsImNoYXJzV2l0aG91dEwiLCJybmRfc3RycyIsImhhbmRsZWQiLCJsb2dOYW1lIiwicmFuZG9tOENoYXJzIiwicmFuZG9tNENoYXJzIiwicmFuZG9tNkNoYXJzIiwiX3RpbWVab25lIiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJfYW5kIiwiem9uZSIsInJlbWFpbmRlciIsInJlbWFpbmRlclpvbmUiLCJjb29raWVEYXRhIiwid24iLCJ3b3Jrbm8iLCJobmciLCJfaG5nIiwiZ2V0VXNlcmRhdGEiLCJjb21ib1VzZXJkYXRhIiwiX2RhdGEiLCJwcm9jZXNzTG9kYXNoRG9sbGFyIiwidXBkYXRlUHJlIiwidXRpbEV4aW5mbyIsImdldEV4UGFyYW1zT2JqIiwiZ2V0Q29va2llVXNlckluZm8iLCJnZXRQYWdlSWQiLCJwYWdlX2lkIiwicGFnZWlkIiwicGFnZUlkIiwicmVzZXRTcG1CIiwic3BtQVBJIiwiX3NwbSIsInNwbWIiLCJzZXRCIiwiY250cyIsInNwbV9jbnQiLCJnZXRFeFBhcmFtc0luZm8iLCJnZXRFeFBhcmFtcyIsImV4cGFyYW1zIiwicGFyYW0yYXJyIiwibWVyZ2VFeHBhcmFtcyIsImJlYWNvbkV4cGFyYW1zIiwibWV0YUV4cGFyYW1zIiwiYmV4cGFyYW1zIiwiZGVmYXVsdEV4cGFyYW1zIiwiYmxhY2tzIiwidG1wUGFyYW0iLCJiZWFjb25PYmoiLCJnZXRFeFBhcmFtc0Zyb21NZXRhIiwiYl9leHBhcmFtcyIsImdldEV4cGFyYW1zSW5mb3MiLCJleHBhcmFtc19rZXlfbmFtZXMiLCJtZXRhX2V4aW5mbyIsInRtcF9pbmZvIiwidG1wX2FyciIsImNvbmYiLCJ0bXBfb2JqIiwidWlkYXBsdXMiLCJwY19pIiwicHVfaSIsImNsZWFuUGFyYW1zIiwibmV3X3BhcmFtcyIsInV0aWwiLCJjbGVhblBhcmFtc0ZvclRvVVQiLCJleGNsdWRlUGFybXMiLCJzcG0tY250IiwibWtQbGFpbktleUZvckV4cGFyYW1zIiwiZXhwYXJhbXNBcnIiLCJlSXRlbSIsImtleUlzQXZhaWxhYmxlIiwidmFsSXNBdmFpbGFibGUiLCJ1cFV0RGF0YSIsImdldFRvVXREYXRhIiwicGFnZXVybCIsInBnMXN0ZXBrIiwicG9pbnQiLCJmdW5jdHlwZSIsImZ1bmNJZCIsImhvc3QiLCJwYXRobmFtZSIsIl9pc2g1IiwiX2g1dXJsIiwiX3RvVVQiLCJfYnJpZGdlTmFtZSIsIl9icmlkZ2VWZXJzaW9uIiwic3BtX3VybCIsInNwbV9wcmUiLCJwdmVyIiwidXRwYXJhbUNudCIsIl9pc19nMnVfIiwiX3Nsb2ciLCJta1BsYWluS2V5Iiwia2V5X3ByZWZpeCIsIl9rZXkiLCJtYWtlVXJsIiwibGlua19jaGFyIiwicGFyYW1fZGF0YSIsImdldFRvTmF0aXZlRGF0YSIsInNka0FyZ3MiLCJpc19oNSIsInB2ZGF0YVRvVW1OYXRpdmUiLCJjYW5fdG9fc2VuZHB2IiwidXRpbFB1YnN1YiIsIl9zcG1hYiIsIl9jb3VudCIsInB1Yk9iaiIsInNwbWFiX3ByZSIsImRvUHViTXNnIiwiZG9DYWNoZVB1YnMiLCJnZXRQdWJzdWIiLCJwdWJzdWIiLCJkb1N1Yk1zZyIsImdldFVzZXJEYXRhIiwiYXBsdXNFeGluZm8iLCJnb2tleUFyciIsImdva2V5U3RyIiwiX3RtcFZhbHVlIiwiYXV0b3NlbmQiLCJoamxqZGF0YVRvVW1OYXRpdmUiLCJ3YXRjaFNQTSIsImlzVG91Y2hFbmFibGVkIiwiZmluZEFuY2hvckVsZW1lbnQiLCJ0YWdfbmFtZSIsImZpbmRBcGx1c0FuY2hvckJ5QWxpbmtFbCIsImFsaW5rRWwiLCJzdWNjZXNzQ2FsbGJhY2siLCJmYWlsdXJlQ2FsbGJhY2siLCJnZXRBcGx1c0Nsa0NvbmZpZyIsImFwbHVzQXV0b0Nsa0NvbmZpZyIsInNwbV91cGRhdGVIcmVmV2l0aFNQTUlkIiwic3BtX2lkIiwicXVlcnlfc3BsaXQiLCJxdWVyeV9jb3VudCIsImZpbGVfZXh0IiwiYW5kX2NoYXIiLCJzcG1fcHJlZml4IiwicG5nIiwianBnIiwianBlZyIsImJtcCIsInN3ZiIsImh0bSIsImh0bWwiLCJwaHAiLCJhc3B4Iiwic2h0bWwiLCJ4aHRtbCIsImFwbHVzVHJhY2tlciIsImFwbHVzQW5jaG9yIiwiYWxpbmtzIiwiY3VycmVudFBhZ2UiLCJjdXJyZW50UGFnZUNvbmZpZyIsInBhZ2UiLCJzcG1CIiwibXlpbmRleCIsImFsaW5rIiwicmVhbF9wb3NfaWQiLCJfY3VycmVudF9zcG0iLCJfc3JjX3Bvc19pZCIsImRvVHJhY2UiLCJpbml0UGFnZVNwbSIsInNvdXJjZV9wb3NfaWQiLCJ3YXRjaFBhZ2VDb25maWciLCJ3YXRjaEFwbHVzQXV0b0NsayIsImFwbHVzQW5jaG9ySWQiLCJfYXBsdXNfYXBpIiwiYXBsdXNPYmoiLCJtYWtlUFZJZCIsIm1zZ0FyciIsImdldE1tc3RhdFRpbWVvdXQiLCJsb25ndGltZSIsInRpbWVJbnQiLCJSZWR1Y2VyIiwicmVxdWVzdCIsImZuX2JlZm9yZV9wdiIsImZuX2FmdGVyX3B2IiwiZm5fYmVmb3JlX3JlY29yZCIsImZuX2FmdGVyX3JlY29yZCIsIkVNUFRZX0ZOIiwiYmVmb3JlU2VuZFBWIiwiYWZ0ZXJTZW5kUFYiLCJkYXRhU3RyIiwic2VuZEltZyIsInJlcSIsInNlbmRQViIsInJlZHVjZXIiLCJwdWJzdWJUeXBlIiwibWVzc2FnZUZuUXVldWUiLCJtaWRkbGV3YXJlTWVzc2FnZUtleSIsInBhZ2VFbnRlciIsInNpZCIsInd2IiwiYmVmb3JlUmVjb3JkIiwiYWZ0ZXJSZWNvcmQiLCJyZWNvcmQiLCJyZWNvcmRVZGF0YSIsInNldFBhZ2VTUE0iLCJzcG1GbGFnIiwib2xkX3NwbWFiIiwic3BhSW5pdCIsIl9zcG1hYl9wcmUiLCJtc2dzIiwic3BtYWIiLCJkZWZhdWx0TW9kZSIsIm1vZGUiLCJ1cGRhdGVQYWdlUHJvcGVydGllcyIsIl9wYWdlIiwicGFnZU5hbWUiLCJ1cGRhdGVOZXh0UGFnZVByb3BlcnRpZXMiLCJwYWdlQXBwZWFyIiwicGFnZURpc2FwcGVhciIsInVwZGF0ZVBhZ2VVdHBhcmFtIiwidXBkYXRlTmV4dFBhZ2VVdHBhcmFtIiwidXBkYXRlU2Vzc2lvblByb3BlcnRpZXMiLCJDb21wb3NlIiwicGx1Z2luc0xvYWRlciIsIkNPTkZJRyIsInBsIiwibWlkZGxld2FyZSIsImFwcCIsImNvbXBvc2UiLCJjYWxsZWRMaXN0Iiwic2V0Q2FsbGVkTGlzdCIsInJlc2V0Q2FsbGVkTGlzdCIsIm13IiwibWF4VGltZW91dCIsInNsZWVwSGFuZGVyMSIsIl90aW1lX291dCIsIl9td19uYW1lIiwicGx1Z2luc19uYW1lIiwicHVic3ViSW5mbyIsInBsdWdpbiIsImltZyIsIkltYWdlIiwicm5kX2lkIiwicmVtb3ZlUm5kSWQiLCJpc0Rpc2FibGVQdmlkIiwiZGlzYWJsZVB2aWQiLCJtZXRhX3ZhbHVlIiwicHJlX3B2aWQiLCJnZXRQdklkIiwicXVlIiwiZ2V0Rm9ybWF0UXVldWUiLCJxdWV1ZSIsInByb2Nlc3NHb2xkbG9nUXVldWUiLCJmb3JtYXRRdWV1ZSIsImdldEFwbHVzSG9sZFR5cGUiLCJ1YWlkIiwiZmlsdGVyVGFzayIsInRhc2siLCJob2xkVHlwZSIsIlNUQVJUIiwiQVBMVVNfSE9MRF9RVUVVRSIsInByb2Nlc3NIb2xkR29sZGxvZ1F1ZXVlIiwiQVBMVVNfSE9MRF9VU0VSSURfUVVFVUUiLCJBUExVU19IT0xEX0FOT05ZX1FVRVVFIiwiZ2V0TWV0aG9kTmFtZSIsImlzT3BlbkFwaSIsIlFVRVVFIiwiZGVsYXlUYXNrcyIsInByb2Nlc3NUYXNrIiwic3Vic2NyaWJlQW5kUHJvY2Vzc1F1ZXVlIiwicXVldWVOYW1lIiwibWV0aG9kTmFtZSIsIl9mbiIsInF1ZXVlTWFwIiwic3Vic2NyaWJlTXdDaGFuZ2VRdWV1ZSIsInN1YnNjcmliZU1ldGFRdWV1ZSIsInN1YnNjcmliZVF1ZXVlIiwibWV0YVF1ZXVlIiwib3RoZXJzUXVldWUiLCJhYyIsIl9jbmEiLCJpbml0SlNCcmlkZ2UiLCJQcm9taXNlIiwiaXNXaW4iLCJzaWRCYXNlIiwiaW5jIiwiaWZyYW1lUG9vbCIsImlmcmFtZUxpbWl0IiwiSUZSQU1FX1BSRUZJWCIsIlBBUkFNX1BSRUZJWCIsIkNBTExfR0NfVElNRSIsIlBBUkFNX0dDX1RJTUUiLCJKU0JyaWRnZV9Db3JlIiwidHJhY2UiLCJzdWNjZXNzQ2FsbCIsImZhaWxDYWxsIiwic3VjY2VzcyIsImZhaWx1cmUiLCJwcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIkpTQnJpZGdlX1ByaXZhdGUiLCJnZXRTaWQiLCJjYWxsSW5mbyIsIm9uRmFpbHVyZSIsInJlZ2lzdGVyQ2FsbCIsInJlZ2lzdGVyR0MiLCJldm9rZU5hdGl2ZSIsImV2ZW50bmFtZSIsImV2ZW50ZGF0YSIsImV2IiwicGFyc2VEYXRhIiwic2V0RGF0YSIsImZpbmQiLCJyZXFJZCIsImtlZXBBbGl2ZSIsInVucmVnaXN0ZXJDYWxsIiwib25TdWNjZXNzIiwib25Db21wbGV0ZSIsImNhbGxzIiwiYnVpbGRQYXJhbSIsInNldFBhcmFtIiwicnN0Iiwib3JpZ2luVmFsdWUiLCJ1c2VJZnJhbWUiLCJpZnJhbWVpZCIsImlmcmFtZSIsImNzc1RleHQiLCJyZXRyaWV2ZUlmcmFtZSIsInJlbW92ZUNoaWxkIiwiY21kIiwiY2xhc3NOYW1lIiwianNvblN0ciIsIndlYmtpdCIsIm1lc3NhZ2VIYW5kbGVycyIsIlVtZW5nNEFwbHVzIiwicG9zdE1lc3NhZ2UiLCJDQUxMIiwidGhhdCIsImNhbGxHQ1RpbWUiLCJwYXJhbUdDVGltZSIsImNhbGxVVCIsImJyaWRnZVZlcnNpb24iLCJBdG1CcmlkZ2UiLCJjYWxsTWVyZ2VUb05hdGl2ZUdQIiwid2F0Y2hNZXRhSW5mbyIsImlzVW1lbmdTZGsiLCJmZXRjaERhdGEiLCJQQUdFX0NPTkZJR19LRVkiLCJjZG5wYXRoIiwiaXNTdGFydFRyYWNrZXIiLCJsYXRlc3RDb21wb25lbnRJZCIsImxhdGVzdFBhZ2VJZCIsImFwbHVzX3dlYl9wYWdlY29uZmlnIiwiX3BhdGgiLCJjb21wb25lbnRJZCIsImZldGNoRnJvbUxTIiwic2V0Q29uZmlnSW50b0xTIiwiZmV0Y2hGcm9tQ2RuIiwiZ2V0Q3VycmVudFBhZ2VDb25maWciLCJwYWdlcyIsInBvaW50cyIsImdldFBhZ2VDb25maWciLCJsb2NhbERhdGEiLCJ0cmFja2VyUGFnZVZpZXdFdmVudCIsImlzQXV0byIsImV2ZW50Q29kZSIsInRyYWNrZXJDb21tb25FdmVudCIsImNsa0V2ZW50cyIsInNlbGVjdG9yVHlwZSIsInNlbGVjdG9yIiwic3RhcnRUcmFja2VyIiwiZGF0YVNvdXJjZVR5cGUiLCJiYXNlIiwiZmV0Y2giLCJwZW5kaW5nIiwidGhlbiIsInJlc3BvbnNlIiwiaGVhZGVycyIsInRleHQiLCJjYXRjaCIsImFqYXgiLCJ4aHIiLCJyZXNwb25zZVRleHQiLCJDT1JTIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwiWERvbWFpblJlcXVlc3QiLCJvbnRpbWVvdXQiLCJRdWV1ZSIsInByb2Nlc3NBcGx1c1F1ZXVlIiwic3RhcnRMZW5ndGgiLCJhZGRTdHlsZSIsInN0eWxlVXJsIiwic3R5bGVJZCIsInN0eWxlTm9kZSIsInJlbCIsIm1hdGNoZWRJbkxTIiwic2Vzc2lvblN0b3JhZ2UiLCJ1dGlsSG90TG9hZGVyIiwiZGV2Q2RuIiwianNJZCIsImNzc0lkIiwiX2FwbHVzX2NwbHVnaW5fd2VidnQiLCJfYXBsdXNfYXB2IiwiX2siLCJhcGx1c2luaXQiLCJSVU5OSU5HIiwiYXBsdXNTdGF0dXMiLCJjb25maWdfcHZfY29udGV4dCIsIlBMVUdJTlNfUFYiXSwibWFwcGluZ3MiOiI7Q0FBUyxTQUFVQTtJQ0luQixTQUFBQyxFQUFBQztRQUdBLElBQUFDLEVBQUFELElBQ0EsT0FBQUMsRUFBQUQsR0FBQUU7UUFHQSxJQUFBQyxJQUFBRixFQUFBRDtZQUNBRTtZQUNBRSxJQUFBSjtZQUNBSyxTQUFBOztRQVVBLE9BTkFQLEVBQUFFLEdBQUFNLEtBQUFILEVB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O3dCQUdBcUksTUFBQTt3QkFDQUMsTUFBQXRJLEVBQUE7d0JBQ0F1SSxRQUNBOzt3QkFJQUYsTUFBQTt3QkFDQUMsTUFBQXRJLEVBQUE7d0JBQ0F1SSxRQUNBLGdCQUNBOzt3QkFJQUYsTUFBQTt3QkFDQUMsTUFBQXRJLEVBQUE7d0JBQ0F1SSxRQUNBOzt3QkFJQUYsTUFBQTt3QkFDQUMsTUFBQXRJLEVBQUE7d0JBQ0F1SSxRQUNBOzt3QkFJQUYsTUFBQTt3QkFDQUMsTUFBQXRJLEVBQUE7d0JBQ0F3STs0QkFDQUksTUFBQTs7O3dCQUlBUCxNQUFBO3dCQUNBQyxNQUFBdEksRUFBQTs7b0JBR0E2STt3QkFFQVIsTUFBQTt3QkFDQUMsTUFBQXRJLEVBQUE7O3dCQUdBcUksTUFBQTt3QkFDQUMsTUFBQXRJLEVBQUE7d0JBQ0F1STs7d0JBR0FGLE1BQUE7d0JBQ0FDLE1BQUF0SSxFQUFBO3dCQUNBdUk7O3dCQUdBRixNQUFBO3dCQUNBQyxNQUFBdEksRUFBQTs7d0JBR0FxSSxNQUFBO3dCQUNBQyxNQUFBdEksRUFBQTt3QkFDQXVJLFFBQ0E7O3dCQUlBRixNQUFBO3dCQUNBQyxNQUFBdEksRUFBQTt3QkFDQXVJLFFBQ0EsZ0JBQ0E7O3dCQUlBRixNQUFBO3dCQUNBQyxNQUFBdEksRUFBQTt3QkFDQXVJLFFBQ0E7O3dCQUlBRixNQUFBO3dCQUNBQyxNQUFBdEksRUFBQTt3QkFDQXVJLFFBQ0E7Ozs7O1lBUUFGLE1BQUE7WUFDQUMsTUFBQXRJLEVBQUE7O1lBR0FxSSxNQUFBO1lBQ0FDLE1BQUF0SSxFQUFBOztZQUdBcUksTUFBQTtZQUNBQyxNQUFBdEksRUFBQTs7WUFHQXFJLE1BQUE7WUFDQUMsTUFBQXRJLEVBQUE7O1lBR0FxSSxNQUFBO1lBQ0FDLE1BQUF0SSxFQUFBOztZQUdBcUksTUFBQTtZQUNBQyxNQUFBdEksRUFBQTs7WUFHQXFJLE1BQUE7WUFDQUMsTUFBQXRJLEVBQUE7O1lBR0FxSSxNQUFBO1lBQ0FDLE1BQUF0SSxFQUFBOztZQUdBcUksTUFBQTtZQUNBQyxNQUFBdEksRUFBQTtZQUNBd0k7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ZW50IjpbIi8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9LFxuLyoqKioqKi8gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bG9hZGVkOiBmYWxzZVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoW1xuLyogMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblxuXG4vKioqLyB9KSxcbi8qIDEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogYWxpbG9nL2FwbHVzL3NyYy9hcGx1cy5qc1xuXHQgKiDmqKHlnZfljJbnmoRhcGx1c0pz5YWl5Y+jXG5cdCAqXG5cdCAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cblx0ICpcblx0ICogQXV0aG9yczpcblx0ICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuXHQgKi9cblx0J3VzZSBzdHJpY3QnO1xuXHQvLyByZXF1aXJlKCcuLi9idWlsZF9hbGkvYXBsdXNfc3BhX2F1dG9fcHYuanMnKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXygyKS5pbml0R2xvYmFsKHdpbmRvdyk7XG5cdChmdW5jdGlvbiAoKSB7XG5cdCAgdmFyIGFwbHVzX2NvbmZpZyA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cdCAgX193ZWJwYWNrX3JlcXVpcmVfXygxMjcpKGFwbHVzX2NvbmZpZyk7XG5cdH0pKCk7XG5cblxuLyoqKi8gfSksXG4vKiAyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIHByb2plY3QgLSBmaWxlcGF0aFxuXHQgKiDmk43kvZxhcGx1c+eahOW3peWFt+exu1xuXHQgKlxuXHQgKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG5cdCAqXG5cdCAqIEF1dGhvcnM6XG5cdCAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cblx0ICovXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciBhcGx1c1N0YXRpYyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cdFxuXHR2YXIgQVBMVVMgPSBhcGx1c1N0YXRpYy5BUExVUztcblx0dmFyIEFQTFVTX1FVRVVFID0gYXBsdXNTdGF0aWMuQVBMVVNfUVVFVUU7XG5cdFxuXHR2YXIgR09MRExPRyA9IGFwbHVzU3RhdGljLkdPTERMT0c7XG5cdHZhciBHT0xETE9HX1FVRVVFID0gYXBsdXNTdGF0aWMuR09MRExPR19RVUVVRTtcblx0XG5cdHZhciBfYXBsdXNfY29udGV4dDtcblx0dmFyIGlzV2ViID0gZmFsc2U7XG5cdHRyeSB7XG5cdCAgX2FwbHVzX2NvbnRleHQgPSB3aW5kb3c7XG5cdCAgaXNXZWIgPSB0cnVlO1xuXHR9IGNhdGNoIChlKSB7fVxuXHRcblx0ZXhwb3J0cy5nZXRDb250ZXh0ID0gZnVuY3Rpb24gKCkge1xuXHQgIHJldHVybiBfYXBsdXNfY29udGV4dDtcblx0fTtcblx0XG5cdGV4cG9ydHMuaW5pdEdsb2JhbCA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG5cdCAgaWYgKGNvbnRleHQpIHtcblx0ICAgIF9hcGx1c19jb250ZXh0ID0gY29udGV4dDtcblx0ICB9IGVsc2Uge1xuXHQgICAgX2FwbHVzX2NvbnRleHQgPSB7XG5cdCAgICAgIHY6IDEsXG5cdCAgICAgIGFwbHVzOiB7fSxcblx0ICAgICAgYXBsdXNfcXVldWU6IFtdXG5cdCAgICB9O1xuXHQgIH1cblx0ICB2YXIgX2FwbHVzRGVmYXVsdFZhbHVlO1xuXHQgIHZhciBfYXBsdXNRdWV1ZURlZmF1bHRWYWx1ZTtcblx0ICBpZiAoaXNXZWIpIHtcblx0ICAgIHRyeSB7XG5cdCAgICAgIF9hcGx1c0RlZmF1bHRWYWx1ZSA9IChfYXBsdXNfY29udGV4dC5hcGx1cyB8fCAoX2FwbHVzX2NvbnRleHQuYXBsdXMgPSB7fSkpO1xuXHQgICAgICB2YXIgX2dvbGRsb2dfcXVldWUgPSAoX2FwbHVzX2NvbnRleHQuZ29sZGxvZ19xdWV1ZSB8fCAoX2FwbHVzX2NvbnRleHQuZ29sZGxvZ19xdWV1ZSA9IFtdKSk7XG5cdCAgICAgIF9hcGx1c1F1ZXVlRGVmYXVsdFZhbHVlID0gKF9hcGx1c19jb250ZXh0LmFwbHVzX3F1ZXVlIHx8IChfYXBsdXNfY29udGV4dC5hcGx1c19xdWV1ZSA9IFtdKSk7XG5cdCAgICAgIF9hcGx1c1F1ZXVlRGVmYXVsdFZhbHVlID0gX2dvbGRsb2dfcXVldWUuY29uY2F0KF9hcGx1c1F1ZXVlRGVmYXVsdFZhbHVlKTsgIFxuXHQgICAgfSBjYXRjaCAoZSkge31cblx0ICB9IGVsc2Uge1xuXHQgICAgX2FwbHVzRGVmYXVsdFZhbHVlID0gX2FwbHVzX2NvbnRleHQuYXBsdXM7XG5cdCAgICBfYXBsdXNRdWV1ZURlZmF1bHRWYWx1ZSA9IF9hcGx1c19jb250ZXh0LmFwbHVzX3F1ZXVlO1xuXHQgIH1cblx0ICBcblx0ICBfYXBsdXNfY29udGV4dC5hcGx1cyA9IF9hcGx1c19jb250ZXh0LmdvbGRsb2cgPSBfYXBsdXNEZWZhdWx0VmFsdWU7XG5cdCAgX2FwbHVzX2NvbnRleHQuYXBsdXNfcXVldWUgPSBfYXBsdXNfY29udGV4dC5nb2xkbG9nX3F1ZXVlID0gX2FwbHVzUXVldWVEZWZhdWx0VmFsdWU7XG5cdCAgXG5cdCAgcmV0dXJuIF9hcGx1c19jb250ZXh0O1xuXHR9O1xuXHRcblx0dmFyIGdldEdsb2JhbFZhbHVlID0gZnVuY3Rpb24gKGtleSkge1xuXHQgIGlmIChrZXkgPT09IEFQTFVTIHx8IGtleSA9PT0gR09MRExPRykge1xuXHQgICAgdmFyIGcgPSBfYXBsdXNfY29udGV4dFtBUExVU10gfHwgX2FwbHVzX2NvbnRleHRbR09MRExPR107XG5cdCAgICBpZiAoIWcpIHtcblx0ICAgICAgZyA9IF9hcGx1c19jb250ZXh0W0FQTFVTXSA9IF9hcGx1c19jb250ZXh0W0dPTERMT0ddID0ge307XG5cdCAgICB9XG5cdCAgICByZXR1cm4gZztcblx0ICB9XG5cdCAgdmFyIGdvbGRsb2dfcXVldWUgPSBHT0xETE9HX1FVRVVFO1xuXHQgIHZhciBhcGx1c19xdWV1ZSA9IEFQTFVTX1FVRVVFO1xuXHQgIGlmIChrZXkgPT09IGFwbHVzX3F1ZXVlIHx8IGtleSA9PT0gZ29sZGxvZ19xdWV1ZSkge1xuXHQgICAgdmFyIHEgPSBfYXBsdXNfY29udGV4dFthcGx1c19xdWV1ZV0gfHwgX2FwbHVzX2NvbnRleHRbZ29sZGxvZ19xdWV1ZV07XG5cdCAgICBpZiAoIXEpIHtcblx0ICAgICAgcSA9IF9hcGx1c19jb250ZXh0W2FwbHVzX3F1ZXVlXSA9IF9hcGx1c19jb250ZXh0W2dvbGRsb2dfcXVldWVdID0gW107XG5cdCAgICB9XG5cdCAgICByZXR1cm4gcTtcblx0ICB9XG5cdH07XG5cdGV4cG9ydHMuZ2V0R2xvYmFsVmFsdWUgPSBnZXRHbG9iYWxWYWx1ZTtcblx0XG5cdGV4cG9ydHMuc2V0R2xvYmFsVmFsdWUgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuXHQgIF9hcGx1c19jb250ZXh0W2tleV0gPSB2YWx1ZTtcblx0fTtcblx0XG5cdC8qKlxuXHQgKiDojrflj5ZhcGx1c+WGhemDqOWPmOmHj1xuXHQgKiBAcGFyYW1zIFtTdHJpbmddIGtleVxuXHQgKiBAcmV0dXJuIFtPYmplY3R8U3RyaW5nfE51bWJlcnxCb29sZWFuXVxuXHQgKi9cblx0dmFyIGdldEdvbGRsb2dWYWwgPSBmdW5jdGlvbihrZXkpIHtcblx0ICB2YXIgdjtcblx0ICB0cnkge1xuXHQgICAgdmFyIGFwbHVzID0gZ2V0R2xvYmFsVmFsdWUoQVBMVVMpO1xuXHQgICAgdiA9IGFwbHVzW2tleV07XG5cdCAgfSBjYXRjaCAoZSkge1xuXHQgICAgdiA9ICcnO1xuXHQgIH0gZmluYWxseSB7XG5cdCAgICByZXR1cm4gdjtcblx0ICB9XG5cdH07XG5cdGV4cG9ydHMuZ2V0R29sZGxvZ1ZhbCA9IGdldEdvbGRsb2dWYWw7XG5cdFxuXHQvKipcblx0ICog6K6+572uYXBsdXPlhoXpg6jlj5jph49cblx0ICogQHBhcmFtcyBbU3RyaW5nXSBrZXlcblx0ICogQHBhcmFtcyBbT2JqZWN0fFN0cmluZ3xOdW1iZXJ8Qm9vbGVhbl0gdmFsXG5cdCAqIEByZXR1cm4gW0Jvb2xlYW5dXG5cdCAqL1xuXHR2YXIgc2V0R29sZGxvZ1ZhbCA9IGZ1bmN0aW9uKGtleSwgdmFsKSB7XG5cdCAgdmFyIGYgPSBmYWxzZTtcblx0ICB0cnkge1xuXHQgICAgdmFyIGFwbHVzID0gZ2V0R2xvYmFsVmFsdWUoQVBMVVMpO1xuXHQgICAgaWYgKGtleSkge1xuXHQgICAgICBhcGx1c1trZXldID0gdmFsO1xuXHQgICAgICBmID0gdHJ1ZTtcblx0ICAgIH1cblx0ICB9IGNhdGNoIChlKSB7XG5cdCAgICBmID0gZmFsc2U7XG5cdCAgfSBmaW5hbGx5IHtcblx0ICAgIHJldHVybiBmO1xuXHQgIH1cblx0fTtcblx0ZXhwb3J0cy5zZXRHb2xkbG9nVmFsID0gc2V0R29sZGxvZ1ZhbDtcblx0XG5cdC8qKlxuXHQgKiDojrflj5ZjbGllbnRJbmZvKOa1j+iniOWZqOOAgeiuvuWkh+etieS/oeaBrylcblx0ICogQHJldHVybiB7T2JqZWN0fVxuXHQgKiAgIHZlcnNpb246IDIsXG5cdCAqICAgdWFfaW5mbzoge1xuXHQgKiAgICAgYjogXCJjaHJvbWU1OFwiXG5cdCAqICAgICBpc206IFwibWFjXCJcblx0ICogICAgIG14OiBcIjM2MGVlXCJcblx0ICogICAgIG86IFwibWFjXCJcblx0ICogICAgIHA6IDFcblx0ICogICAgIHM6IFwiMTkyMHgxMDgwXCJcblx0ICogICAgIHc6IFwid2Via2l0XCJcblx0ICogICB9XG5cdCAqIH1cblx0ICovXG5cdGV4cG9ydHMuZ2V0Q2xpZW50SW5mbyA9IGZ1bmN0aW9uKCkge1xuXHQgIHJldHVybiBnZXRHb2xkbG9nVmFsKCdfYXBsdXNfY2xpZW50JykgfHwge307XG5cdH07XG5cblxuLyoqKi8gfSksXG4vKiAzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0dmFyIEFQTFVTID0gJ2FwbHVzJztcblx0dmFyIEdPTERMT0cgPSAnZ29sZGxvZyc7XG5cdHZhciBBUExVU19RVUVVRSA9IEFQTFVTICsgJ19xdWV1ZSc7XG5cdHZhciBHT0xETE9HX1FVRVVFID0gR09MRExPRyArICdfcXVldWUnO1xuXHR2YXIgTVdfQ0hBTkdFID0gJ213X2NoYW5nZSc7XG5cdHZhciBNRVRBX0lORk8gPSAnTWV0YUluZm8nO1xuXHR2YXIgQVBQRU5EX01FVEFfSU5GTyA9ICdhcHBlbmQnICsgTUVUQV9JTkZPO1xuXHR2YXIgU0VUX01FVEFfSU5GTyA9ICdzZXQnICsgTUVUQV9JTkZPO1xuXHR2YXIgSFRUUCA9ICdodHRwJztcblx0dmFyIF9wdWJzdWIgPSAnX3B1YnN1Yic7XG5cdFxuXHR2YXIgZGVmYXVsdENvZGUgPSAnb3RoZXInO1xuXHR2YXIgQ0xLID0gJzIxMDEnO1xuXHR2YXIgRVhQID0gJzIyMDEnO1xuXHR2YXIgSU1QRVhQID0gJzIyMDInO1xuXHR2YXIgT1RIRVIgPSAnMTk5OTknO1xuXHR2YXIgQVBQX1NIT1cgPSAnMTAyMyc7XG5cdHZhciBBUFBfSElERV9PUl9VTkxPQUQgPSAnMTAxMCc7IFxuXHR2YXIgU0VTU0lPTl9JTlRFUlZBTCA9IDMwMDAwOyAvLyBzZXNzaW9uSWTov4fmnJ/ml7bpl7QgMzAwMDBcblx0dmFyIEVLVlMgPSAnZWt2cyc7XG5cdHZhciBFVkVOVF9NQVhfQ09VTlQgPSAxMDAwMDsgLy8g5pys5Zyw5pyA5aSa5a2Y5YKo6L+Z5LmI5aSaZWt25pWw5o2uXG5cdHZhciBNRU1PUllfTUFYX0NPVU5UID0gMTsgLy8g5YaF5a2Y5Lit5a2Y5YKo55qE5pyA5aSn5pWw5o2u5pWw6YeP77yM6LaF6L+H5YiZ57yT5a2Y5Yiw5pys5ZywXG5cdHZhciBFVkVOVF9TRU5EX0RFRkFVTFRfSU5URVJWQUwgPSAzMDAwOyAvLyBla3bpu5jorqTlj5HpgIHpl7TpmpTml7bpl7Q6IDPnp5Jcblx0dmFyIFBBR0VfU1RBUlQgPSAnJCRfcGFnZV9zdGFydCc7XG5cdHZhciBBUFBfU1RBUlQgPSAnJCRfYXBwX3N0YXJ0Jztcblx0dmFyIEFQUF9FTkQgPSAnJCRfYXBwX2VuZCc7XG5cdG1vZHVsZS5leHBvcnRzID0ge1xuXHQgIFBBR0VfRU5URVI6ICdQQUdFX0VOVEVSJyxcblx0ICBDVVJSRU5UX1BBR0VfQ09ORklHOiAnQ1VSUkVOVF9QQUdFX0NPTkZJRycsXG5cdCAgX0FOT05ZX0lEOiAnX2Fub255X2lkJyxcblx0ICBfVVNFUl9JRDogJ191c2VyX2lkJyxcblx0ICBERUZBVUxUX0NPREU6IGRlZmF1bHRDb2RlLFxuXHQgIE9USEVSOiBPVEhFUixcblx0ICBFVkVOVF9NQVA6IHtcblx0ICAgICcyMTAxJzogJ2NsaWNrJyxcblx0ICAgICcyMjAxJzogJ2V4cG9zdXJlJyxcblx0ICAgICcyMjAyJzogJ2V4cG9zdXJlJyxcblx0ICAgICcxOTk5OSc6IGRlZmF1bHRDb2RlLFxuXHQgICAgJzEwMjMnOiAnYXBwX3Nob3cnLFxuXHQgICAgJzEwMTAnOiAnYXBwX2hpZGVfb3JfdW5sb2FkJ1xuXHQgIH0sXG5cdCAgRVZFTlRfSURfTUFQOiB7XG5cdCAgICAnRVhQJzogRVhQLFxuXHQgICAgJ0lNUEVYUCc6IElNUEVYUCxcblx0ICAgICdDTEsnOiBDTEssXG5cdCAgICAnT1RIRVInOiBPVEhFUixcblx0ICAgICdTSE9XJzogQVBQX1NIT1csXG5cdCAgICAnSF9PUl9VJzogQVBQX0hJREVfT1JfVU5MT0FEXG5cdCAgfSxcblx0ICBBUExVUzogQVBMVVMsXG5cdCAgR09MRExPRzogR09MRExPRyxcblx0ICBTVUJTQ1JJQkU6IEFQTFVTICsgJy4nICsgQVBMVVMgKyBfcHVic3ViICsgJy5zdWJzY3JpYmUnLFxuXHQgIFBVQkxJU0g6IEFQTFVTICsgJy4nICsgQVBMVVMgKyBfcHVic3ViICsgJy5wdWJsaXNoJyxcblx0ICBDQUNIRV9QVUJTOiBBUExVUyArICcuJyArIEFQTFVTICsgX3B1YnN1YiArICcuY2FjaGVQdWJzJyxcblx0ICBBUExVU19VTklWRVJTQUw6IEFQTFVTICsgJ191bml2ZXJzYWwnLFxuXHQgIEFQTFVTX1FVRVVFOiBBUExVU19RVUVVRSxcblx0ICBHT0xETE9HX1FVRVVFOiBHT0xETE9HX1FVRVVFLFxuXHQgIENPTVBMRVRFOiAnY29tcGxldGUnLFxuXHQgIFBWX0NPREU6ICcyMDAxJyxcblx0ICBFWFBfQ09ERTogRVhQLFxuXHQgIENMS19DT0RFOiBDTEssXG5cdCAgT1RIRVJfQ09ERTogT1RIRVIsXG5cdCAgQ0xLOiAnQ0xLJyxcblx0ICBFWFA6ICdFWFAnLFxuXHQgIC8vIE9USEVSOiAnT1RIRVInLFxuXHQgIFNQTV9DTlQ6ICdzcG0tY250Jyxcblx0ICBTUE1fVVJMOiAnc3BtLXVybCcsXG5cdCAgU1BNX1BSRTogJ3NwbS1wcmUnLFxuXHQgIE1XX0NIQU5HRV9QVjogTVdfQ0hBTkdFICsgJ19wdicsXG5cdCAgTVdfQ0hBTkdFX0hKTEo6IE1XX0NIQU5HRSArICdfaGpsaicsXG5cdCAgSFRUUDogSFRUUCArICc6Jyxcblx0ICBIVFRQUzogJ2h0dHBzOicsXG5cdCAgQVBQRU5EX01FVEFfSU5GTzogQVBQRU5EX01FVEFfSU5GTyxcblx0ICBTRVRfTUVUQV9JTkZPOiBTRVRfTUVUQV9JTkZPLFxuXHQgIEFQTFVTX0FQUEVORF9NRVRBX0lORk86IEFQTFVTICsgJy4nICsgQVBQRU5EX01FVEFfSU5GTyxcblx0ICBBUExVU19TRVRfTUVUQV9JTkZPOiBBUExVUyArICcuJyArIFNFVF9NRVRBX0lORk8sXG5cdCAgUFZJRDoncHZpZCcsXG5cdCAgQVBMVVNfTE9HX1BJUEU6J2FwbHVzLWxvZy1waXBlJyxcblx0ICBvcGVuQVBJczogW1xuXHQgICAgJ3NlbmQnLCAnZW50ZXInLCAnc2VuZFBWJywgJ3JlY29yZCcsICdjb21iaW5lUmVjb3JkJywgJ3JlY29yZFVkYXRhJyxcblx0ICAgICdzZXRQYWdlU1BNJywgJ3NldE1ldGFJbmZvJywgJ2FwcGVuZE1ldGFJbmZvJyxcblx0ICAgICd1cGRhdGVQYWdlUHJvcGVydGllcycsXG5cdCAgICAndXBkYXRlTmV4dFBhZ2VQcm9wZXJ0aWVzJyxcblx0ICAgICd1cGRhdGVQYWdlVXRwYXJhbScsXG5cdCAgICAndXBkYXRlTmV4dFBhZ2VVdHBhcmFtJyxcblx0ICAgICdwYWdlQXBwZWFyJywgJ3BhZ2VEaXNhcHBlYXInLCAnc2tpcFBhZ2UnLFxuXHQgICAgJ3VwZGF0ZVNlc3Npb25Qcm9wZXJ0aWVzJywgJ2dldFBhZ2VTcG1VcmwnLCAnZ2V0UGFnZVNwbVByZSdcblx0ICBdLFxuXHQgIFNFU1NJT05fSU5URVJWQUw6IFNFU1NJT05fSU5URVJWQUwsXG5cdCAgU0VTU0lPTl9QQVVTRV9USU1FOiAnc2Vzc2lvbl9wYXVzZV90aW1lJyxcblx0ICBJTVBSSU5UOiAnaW1wcmludCcsXG5cdCAgQ1VSUkVOVF9TRVNTSU9OOiAnY3VycmVudF9zZXNzaW9uJyxcblx0ICBNQVhfRVZFTlRJRF9MRU5HVEg6IDEyOCxcblx0ICBNQVhfUFJPUEVSVFlfS0VZX0xFTkdUSDogMjU2LFxuXHQgIE1BWF9QUk9QRVJUWV9LRVlTX0NPVU5UOiAxMDAsXG5cdCAgUkVRVUVTVFM6ICdyZXF1ZXN0cycsXG5cdCAgU0hBUkVTOiAnc2hhcmVzJyxcblx0ICBBUExVU19TU1JDOiAnX2FwbHVzX3NzcmMnLFxuXHQgIEVLVlM6IEVLVlMsXG5cdCAgRVZFTlRfTUFYX0NPVU5UOiBFVkVOVF9NQVhfQ09VTlQsXG5cdCAgTUVNT1JZX01BWF9DT1VOVDogTUVNT1JZX01BWF9DT1VOVCxcblx0ICBFVkVOVF9TRU5EX0RFRkFVTFRfSU5URVJWQUw6IEVWRU5UX1NFTkRfREVGQVVMVF9JTlRFUlZBTCxcblx0ICBQQUdFX1NUQVJUOiBQQUdFX1NUQVJULFxuXHQgIEFQUF9TVEFSVDogQVBQX1NUQVJULFxuXHQgIEFQUF9FTkQ6IEFQUF9FTkRcblx0fTtcblx0XG5cdC8vIHZhciBvcGVuQVBJcyA9IFtcblx0Ly8gICAnc2VuZCcsICdlbnRlcicsICdzZW5kUFYnLCAncmVjb3JkJyxcblx0Ly8gICAnc2V0UGFnZVNQTScsICdzZXRNZXRhSW5mbycsICdhcHBlbmRNZXRhSW5mbycsXG5cdC8vICAgVVBEQVRFICsgJ1BhZ2VQcm9wZXJ0aWVzJyxcblx0Ly8gICBVUERBVEUgKyAnTmV4dFBhZ2VQcm9wZXJ0aWVzJyxcblx0Ly8gICBVUERBVEUgKyAnUGFnZVV0cGFyYW0nLFxuXHQvLyAgIFVQREFURSArICdOZXh0UGFnZVV0cGFyYW0nLFxuXHQvLyAgICdwYWdlQXBwZWFyJywgJ3BhZ2VEaXNhcHBlYXInLFxuXHQvLyAgICdza2lwUGFnZSdcblx0Ly8gXTtcblxuLyoqKi8gfSksXG4vKiA0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSB7XG5cdCAgXCJtZXRhSW5mb1wiOiB7XG5cdCAgICBcImFwbHVzLWlmci1wdlwiOiBcIjFcIixcblx0ICAgIFwiYXBsdXMtcmhvc3QtdlwiOiBcIlwiLFxuXHQgICAgXCJhcGx1cy1yaG9zdC1nXCI6IFwiXCIsXG5cdCAgICBcImFwbHVzLWNoYW5uZWxcIjogXCJcIixcblx0ICAgIFwiYXBwSWRcIjogXCJcIixcblx0ICAgIFwic2RrSWRcIjogXCJhcGx1c19jbG91ZFwiLFxuXHQgICAgXCJhcGx1cy1jcHZkYXRhXCI6IHt9LFxuXHQgICAgXCJhcGx1cy1leGRhdGFcIjoge30sXG5cdCAgICBcImFwbHVzLW1tc3RhdC10aW1lb3V0XCI6IFwiMTAwMDBcIixcblx0ICAgIFwiYXBsdXMtdG9VVFwiOiBcIlwiXG5cdCAgfSxcblx0ICBcImdsb2JhbENvbmZpZ1wiOiB7XG5cdCAgICBcImlzQWxpXCI6IGZhbHNlLFxuXHQgICAgXCJBUExVU19RVUVVRVwiOiBcImFwbHVzX3F1ZXVlXCIsXG5cdCAgICBcIkVUQUdfU1RPUkFHRV9LRVlcIjogXCJfX0VUQUdfX0NOQV9fSURfX1wiLFxuXHQgICAgXCJzY3JpcHRfbmFtZVwiOiBcImFwbHVzLmpzXCIsXG5cdCAgICBcImx2ZXJcIjogXCIxLjIuMFwiLFxuXHQgICAgXCJOQU1FX1NUT1JBR0VfS0VZU1wiOiB7XG5cdCAgICAgIFwiUkVGRVJSRVJcIjogXCJ3bV9yZWZlcnJlclwiLFxuXHQgICAgICBcIlJFRkVSUkVSX1BWX0lEXCI6IFwicmVmZXJfcHZfaWRcIixcblx0ICAgICAgXCJMT1NUX1BWX1BBR0VfRFVSQVRJT05cIjogXCJsb3N0X3B2X3BhZ2VfZHVyYXRpb25cIixcblx0ICAgICAgXCJMT1NUX1BWX1BBR0VfU1BNQUJcIjogXCJsb3N0X3B2X3BhZ2Vfc3BtYWJcIixcblx0ICAgICAgXCJMT1NUX1BWX1BBR0VcIjogXCJsb3N0X3B2X3BhZ2VcIixcblx0ICAgICAgXCJMT1NUX1BWX1BBR0VfTVNHXCI6IFwibG9zdF9wdl9wYWdlX21zZ1wiXG5cdCAgICB9XG5cdCAgfSxcblx0ICBcInBsdWdpbnNcIjogW1xuXHQgICAge1xuXHQgICAgICBcIm5hbWVcIjogXCJhcGx1c190cmFja19kZWJ1Z1wiLFxuXHQgICAgICBcInBhdGhcIjogX193ZWJwYWNrX3JlcXVpcmVfXyg1KVxuXHQgICAgfSxcblx0ICAgIHtcblx0ICAgICAgXCJuYW1lXCI6IFwiYXBsdXNfYm9keV9yZWFkeVwiLFxuXHQgICAgICBcInBhdGhcIjogX193ZWJwYWNrX3JlcXVpcmVfXyg2KVxuXHQgICAgfSxcblx0ICAgIHtcblx0ICAgICAgXCJuYW1lXCI6IFwicHVic3ViXCIsXG5cdCAgICAgIFwicGF0aFwiOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpXG5cdCAgICB9LFxuXHQgICAge1xuXHQgICAgICBcIm5hbWVcIjogXCJhcGx1c19jbGllbnRcIixcblx0ICAgICAgXCJwYXRoXCI6IF9fd2VicGFja19yZXF1aXJlX18oMTIpXG5cdCAgICB9LFxuXHQgICAge1xuXHQgICAgICBcIm5hbWVcIjogXCJhcGx1c19tZXRhX2luamVjdFwiLFxuXHQgICAgICBcInBhdGhcIjogX193ZWJwYWNrX3JlcXVpcmVfXygxNClcblx0ICAgIH0sXG5cdCAgICB7XG5cdCAgICAgIFwibmFtZVwiOiBcImFwbHVzX2FjXCIsXG5cdCAgICAgIFwicGF0aFwiOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDMxKVxuXHQgICAgfSxcblx0ICAgIHtcblx0ICAgICAgXCJuYW1lXCI6IFwiYXBsdXNfYWVcIixcblx0ICAgICAgXCJwYXRoXCI6IF9fd2VicGFja19yZXF1aXJlX18oNDUpXG5cdCAgICB9LFxuXHQgICAge1xuXHQgICAgICBcIm5hbWVcIjogXCJuYW1lX3N0b3JhZ2VcIixcblx0ICAgICAgXCJwYXRoXCI6IF9fd2VicGFja19yZXF1aXJlX18oNTQpXG5cdCAgICB9LFxuXHQgICAge1xuXHQgICAgICBcIm5hbWVcIjogXCJhcGx1c193ZWJfaHR0cF91bVwiLFxuXHQgICAgICBcInBhdGhcIjogX193ZWJwYWNrX3JlcXVpcmVfXyg1Nylcblx0ICAgIH0sXG5cdCAgICB7XG5cdCAgICAgIFwibmFtZVwiOiBcImFwbHVzX3dlYl93c1wiLFxuXHQgICAgICBcInBhdGhcIjogX193ZWJwYWNrX3JlcXVpcmVfXyg3MSlcblx0ICAgIH0sXG5cdCAgICB7XG5cdCAgICAgIFwibmFtZVwiOiBcImFwbHVzX2xvZ19pbmplY3RcIixcblx0ICAgICAgXCJwYXRoXCI6IF9fd2VicGFja19yZXF1aXJlX18oNzgpLFxuXHQgICAgICBcImRlcHNcIjogW1xuXHQgICAgICAgIFwiYXBsdXNfbWV0YV9pbmplY3RcIlxuXHQgICAgICBdLFxuXHQgICAgICBcImNvbmZpZ1wiOiB7XG5cdCAgICAgICAgXCJwbHVnaW5zXCI6IHtcblx0ICAgICAgICAgIFwicHZcIjogW1xuXHQgICAgICAgICAgICB7XG5cdCAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiZXRhZ1wiLFxuXHQgICAgICAgICAgICAgIFwicGF0aFwiOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDc5KVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICB7XG5cdCAgICAgICAgICAgICAgXCJuYW1lXCI6IFwid2hlbl90b19zZW5kcHZcIixcblx0ICAgICAgICAgICAgICBcInBhdGhcIjogX193ZWJwYWNrX3JlcXVpcmVfXyg4MSksXG5cdCAgICAgICAgICAgICAgXCJjb25maWdcIjoge1xuXHQgICAgICAgICAgICAgICAgXCJhcGx1c1dhaXRpbmdcIjogXCJcIlxuXHQgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAge1xuXHQgICAgICAgICAgICAgIFwibmFtZVwiOiBcIndoZXJlX3RvX3NlbmRcIixcblx0ICAgICAgICAgICAgICBcInBhdGhcIjogX193ZWJwYWNrX3JlcXVpcmVfXyg4Milcblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAge1xuXHQgICAgICAgICAgICAgIFwibmFtZVwiOiBcIndoYXRfdG9fc2VuZFwiLFxuXHQgICAgICAgICAgICAgIFwicGF0aFwiOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDg0KSxcblx0ICAgICAgICAgICAgICBcImNvbmZpZ1wiOiB7XG5cdCAgICAgICAgICAgICAgICBcInB2ZGF0YVRvVXRcIjoge31cblx0ICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIHtcblx0ICAgICAgICAgICAgICBcIm5hbWVcIjogXCJjb29raWVfZGF0YVwiLFxuXHQgICAgICAgICAgICAgIFwicGF0aFwiOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDg3KVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICB7XG5cdCAgICAgICAgICAgICAgXCJuYW1lXCI6IFwid2hhdF90b19zZW5kcHZfdXNlcmRhdGFcIixcblx0ICAgICAgICAgICAgICBcInBhdGhcIjogX193ZWJwYWNrX3JlcXVpcmVfXyg4OCksXG5cdCAgICAgICAgICAgICAgXCJkZXBzXCI6IFtcblx0ICAgICAgICAgICAgICAgIFwid2hhdF90b19zZW5kXCJcblx0ICAgICAgICAgICAgICBdXG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIHtcblx0ICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ3aGF0X3RvX3NlbmRwdl91c2VyZGF0YV93ZWJcIixcblx0ICAgICAgICAgICAgICBcInBhdGhcIjogX193ZWJwYWNrX3JlcXVpcmVfXyg5MCksXG5cdCAgICAgICAgICAgICAgXCJkZXBzXCI6IFtcblx0ICAgICAgICAgICAgICAgIFwid2hhdF90b19zZW5kXCIsXG5cdCAgICAgICAgICAgICAgICBcIndoYXRfdG9fc2VuZHB2X3VzZXJkYXRhXCJcblx0ICAgICAgICAgICAgICBdXG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIHtcblx0ICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ3aGF0X3RvX3NlbmRwdl91dDJcIixcblx0ICAgICAgICAgICAgICBcInBhdGhcIjogX193ZWJwYWNrX3JlcXVpcmVfXyg5NCksXG5cdCAgICAgICAgICAgICAgXCJkZXBzXCI6IFtcblx0ICAgICAgICAgICAgICAgIFwid2hhdF90b19zZW5kXCJcblx0ICAgICAgICAgICAgICBdXG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIHtcblx0ICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ3aGF0X3RvX3NlbmRwdl91bTJuYXRpdmVcIixcblx0ICAgICAgICAgICAgICBcInBhdGhcIjogX193ZWJwYWNrX3JlcXVpcmVfXyg5NiksXG5cdCAgICAgICAgICAgICAgXCJkZXBzXCI6IFtcblx0ICAgICAgICAgICAgICAgIFwid2hhdF90b19zZW5kXCJcblx0ICAgICAgICAgICAgICBdXG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIHtcblx0ICAgICAgICAgICAgICBcIm5hbWVcIjogXCJjYW5fdG9fc2VuZHB2XCIsXG5cdCAgICAgICAgICAgICAgXCJwYXRoXCI6IF9fd2VicGFja19yZXF1aXJlX18oOTcpLFxuXHQgICAgICAgICAgICAgIFwiY29uZmlnXCI6IHtcblx0ICAgICAgICAgICAgICAgIFwiZmxhZ1wiOiBcIk5PXCJcblx0ICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIHtcblx0ICAgICAgICAgICAgICBcIm5hbWVcIjogXCJhZnRlcl9wdlwiLFxuXHQgICAgICAgICAgICAgIFwicGF0aFwiOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDk4KVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICBdLFxuXHQgICAgICAgICAgXCJoamxqXCI6IFtcblx0ICAgICAgICAgICAge1xuXHQgICAgICAgICAgICAgIFwibmFtZVwiOiBcImV0YWdcIixcblx0ICAgICAgICAgICAgICBcInBhdGhcIjogX193ZWJwYWNrX3JlcXVpcmVfXyg3OSlcblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAge1xuXHQgICAgICAgICAgICAgIFwibmFtZVwiOiBcIndoZXJlX3RvX3NlbmRcIixcblx0ICAgICAgICAgICAgICBcInBhdGhcIjogX193ZWJwYWNrX3JlcXVpcmVfXyg4MiksXG5cdCAgICAgICAgICAgICAgXCJkZXBzXCI6IFtdXG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIHtcblx0ICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ3aGF0X3RvX3NlbmRcIixcblx0ICAgICAgICAgICAgICBcInBhdGhcIjogX193ZWJwYWNrX3JlcXVpcmVfXyg4NCksXG5cdCAgICAgICAgICAgICAgXCJkZXBzXCI6IFtdXG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIHtcblx0ICAgICAgICAgICAgICBcIm5hbWVcIjogXCJjb29raWVfZGF0YVwiLFxuXHQgICAgICAgICAgICAgIFwicGF0aFwiOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDg3KVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICB7XG5cdCAgICAgICAgICAgICAgXCJuYW1lXCI6IFwid2hhdF90b19oamxqX3VzZXJkYXRhXCIsXG5cdCAgICAgICAgICAgICAgXCJwYXRoXCI6IF9fd2VicGFja19yZXF1aXJlX18oMTAwKSxcblx0ICAgICAgICAgICAgICBcImRlcHNcIjogW1xuXHQgICAgICAgICAgICAgICAgXCJ3aGF0X3RvX3NlbmRcIlxuXHQgICAgICAgICAgICAgIF1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAge1xuXHQgICAgICAgICAgICAgIFwibmFtZVwiOiBcIndoYXRfdG9faGpsal91c2VyZGF0YV93ZWJcIixcblx0ICAgICAgICAgICAgICBcInBhdGhcIjogX193ZWJwYWNrX3JlcXVpcmVfXygxMDEpLFxuXHQgICAgICAgICAgICAgIFwiZGVwc1wiOiBbXG5cdCAgICAgICAgICAgICAgICBcIndoYXRfdG9fc2VuZFwiLFxuXHQgICAgICAgICAgICAgICAgXCJ3aGF0X3RvX2hqbGpfdXNlcmRhdGFcIlxuXHQgICAgICAgICAgICAgIF1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAge1xuXHQgICAgICAgICAgICAgIFwibmFtZVwiOiBcIndoYXRfdG9faGpsal91dDJcIixcblx0ICAgICAgICAgICAgICBcInBhdGhcIjogX193ZWJwYWNrX3JlcXVpcmVfXygxMDIpLFxuXHQgICAgICAgICAgICAgIFwiZGVwc1wiOiBbXG5cdCAgICAgICAgICAgICAgICBcIndoYXRfdG9fc2VuZFwiXG5cdCAgICAgICAgICAgICAgXVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICB7XG5cdCAgICAgICAgICAgICAgXCJuYW1lXCI6IFwid2hhdF90b19oamxqX3VtMm5hdGl2ZVwiLFxuXHQgICAgICAgICAgICAgIFwicGF0aFwiOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwMyksXG5cdCAgICAgICAgICAgICAgXCJkZXBzXCI6IFtcblx0ICAgICAgICAgICAgICAgIFwid2hhdF90b19zZW5kXCJcblx0ICAgICAgICAgICAgICBdXG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIF1cblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH0sXG5cdCAgICB7XG5cdCAgICAgIFwibmFtZVwiOiBcImFwbHVzX3NwbV9pbmplY3RcIixcblx0ICAgICAgXCJwYXRoXCI6IF9fd2VicGFja19yZXF1aXJlX18oMTA0KVxuXHQgICAgfSxcblx0ICAgIHtcblx0ICAgICAgXCJuYW1lXCI6IFwiYXBsdXNfYXBpXCIsXG5cdCAgICAgIFwicGF0aFwiOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwNylcblx0ICAgIH0sXG5cdCAgICB7XG5cdCAgICAgIFwibmFtZVwiOiBcIm1ldGFfcXVldWVcIixcblx0ICAgICAgXCJwYXRoXCI6IF9fd2VicGFja19yZXF1aXJlX18oMTE1KVxuXHQgICAgfSxcblx0ICAgIHtcblx0ICAgICAgXCJuYW1lXCI6IFwiZXRhZ1wiLFxuXHQgICAgICBcInBhdGhcIjogX193ZWJwYWNrX3JlcXVpcmVfXyg3OSlcblx0ICAgIH0sXG5cdCAgICB7XG5cdCAgICAgIFwibmFtZVwiOiBcImV0YWdfd2ViX3N5bmNcIixcblx0ICAgICAgXCJwYXRoXCI6IF9fd2VicGFja19yZXF1aXJlX18oMTE3KVxuXHQgICAgfSxcblx0ICAgIHtcblx0ICAgICAgXCJuYW1lXCI6IFwiYXBsdXNVbUJyaWRnZVwiLFxuXHQgICAgICBcInBhdGhcIjogX193ZWJwYWNrX3JlcXVpcmVfXygxMTgpXG5cdCAgICB9LFxuXHQgICAge1xuXHQgICAgICBcIm5hbWVcIjogXCJhcGx1c193ZWJfcGFnZWNvbmZpZ1wiLFxuXHQgICAgICBcInBhdGhcIjogX193ZWJwYWNrX3JlcXVpcmVfXygxMTkpXG5cdCAgICB9LFxuXHQgICAge1xuXHQgICAgICBcIm5hbWVcIjogXCJhcGx1c19xdWV1ZVwiLFxuXHQgICAgICBcInBhdGhcIjogX193ZWJwYWNrX3JlcXVpcmVfXygxMjEpXG5cdCAgICB9LFxuXHQgICAge1xuXHQgICAgICBcIm5hbWVcIjogXCJob3RfbG9hZGVyXCIsXG5cdCAgICAgIFwicGF0aFwiOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyMiksXG5cdCAgICAgIFwiY29uZmlnXCI6IHtcblx0ICAgICAgICBcInVybFJ1bGVzXCI6IFtcblx0ICAgICAgICAgIHtcblx0ICAgICAgICAgICAgXCJydWxlXCI6IFwiYXBsdXNfd2VidnRfbWVzc2FnZXJcIixcblx0ICAgICAgICAgICAgXCJjZG5QYXRoXCI6IFtcblx0ICAgICAgICAgICAgICBcImh0dHBzOi8vZC5hbGljZG4uY29tL2FsaWxvZy9tbG9nL2FwbHVzX3dlYnZ0X21lc3NhZ2VyLmpzXCJcblx0ICAgICAgICAgICAgXVxuXHQgICAgICAgICAgfVxuXHQgICAgICAgIF1cblx0ICAgICAgfVxuXHQgICAgfSxcblx0ICAgIHtcblx0ICAgICAgXCJuYW1lXCI6IFwiYXBsdXNfYW5hbHl0aWNzXCIsXG5cdCAgICAgIFwicGF0aFwiOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyMyksXG5cdCAgICAgIFwiY29uZmlnXCI6IHtcblx0ICAgICAgICBcInNlc3Npb25LZXlcIjogXCJfX2FwbHVzX19hbmFseXRpY3NfX1wiLFxuXHQgICAgICAgIFwiSlNQQVRIXCI6IFwiaHR0cHM6Ly9nLmFsaWNkbi5jb20vYWxpbG9nL2FwbHVzLWRlc2lnbi8xLjQuNC9hbmFseXRpY3NfaW5kZXguYnVuZGxlLmpzXCIsXG5cdCAgICAgICAgXCJDU1NQQVRIXCI6IFwiaHR0cHM6Ly9nLmFsaWNkbi5jb20vYWxpbG9nL2FwbHVzLWRlc2lnbi8xLjQuNC9hbmFseXRpY3NfaW5kZXguYnVuZGxlLmNzc1wiXG5cdCAgICAgIH1cblx0ICAgIH0sXG5cdCAgICB7XG5cdCAgICAgIFwibmFtZVwiOiBcImFwbHVzX2FwdlwiLFxuXHQgICAgICBcInBhdGhcIjogX193ZWJwYWNrX3JlcXVpcmVfXygxMjUpLFxuXHQgICAgICBcImRlcHNcIjogW1xuXHQgICAgICAgIFwiYXBsdXNfbG9nX2luamVjdFwiLFxuXHQgICAgICAgIFwiYXBsdXNfYXBpXCJcblx0ICAgICAgXVxuXHQgICAgfVxuXHQgIF1cblx0fTtcblxuLyoqKi8gfSksXG4vKiA1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0LyoqXG5cdCAqIHByb2plY3QgLSBmaWxlcGF0aFxuXHQgKiDkupHkuIp3ZWLln4vngrnpqozor4FhcGx1c190cmFja19kZWJ1Z19pZOazqOWFpemAu+i+kVxuXHQgKlxuXHQgKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG5cdCAqXG5cdCAqIEF1dGhvcnM6XG5cdCAqICAgUmljaGFyZHzosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuXHQgKi9cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG5cdCAgcmV0dXJuIHtcblx0ICAgIHJ1bjogZnVuY3Rpb24gKCkge1xuXHQgICAgICB2YXIgZG9jID0gZG9jdW1lbnQ7XG5cdCAgICAgIHZhciBhcGx1cyA9ICh3aW5kb3cuYXBsdXMgfHwgKHdpbmRvdy5hcGx1cyA9IHt9KSk7XG5cdCAgICAgIC8vIOS/neivgeWPquS8muacieS4gOS4qmFwbHVzX3BsdWdpbl9tb25pdG9y6L+Q6KGMXG5cdCAgICAgIGlmIChhcGx1cy5fYXBsdXNfY3BsdWdpbl90cmFja19kZWIpIHtcblx0ICAgICAgICByZXR1cm47XG5cdCAgICAgIH1cblx0ICAgICAgYXBsdXMuX2FwbHVzX2NwbHVnaW5fdHJhY2tfZGViID0ge1xuXHQgICAgICAgICdzdGF0dXMnOiAnaW5pdCdcblx0ICAgICAgfTtcblx0ICAgICAgdmFyIHdpbiA9IHdpbmRvdztcblx0ICAgICAgdmFyIGlzVHJhY2tEZWJ1ZyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB0cnkge1xuXHQgICAgICAgICAgdmFyIExTID0gd2luLmxvY2FsU3RvcmFnZTtcblx0ICAgICAgICAgIHZhciBfdHJhY2tpZCA9ICdhcGx1c190cmFja19kZWJ1Z19pZCc7XG5cdCAgICAgICAgICB2YXIgcmVnID0gbmV3IFJlZ0V4cCgnWz98Jl0nICsgX3RyYWNraWQgKyAnPShcXFxcdyopJyk7XG5cdCAgICAgICAgICB2YXIgbWF0Y2hfdmFsdWUgPSBsb2NhdGlvbi5ocmVmLm1hdGNoKHJlZyk7XG5cdCAgICAgICAgICBpZiAobWF0Y2hfdmFsdWUgJiYgbWF0Y2hfdmFsdWUubGVuZ3RoID4gMCkge1xuXHQgICAgICAgICAgICBMUy5zZXRJdGVtKF90cmFja2lkLCBtYXRjaF92YWx1ZVsxXSk7XG5cdCAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICB2YXIgX3IgPSBkb2MucmVmZXJyZXIgfHwgJyc7XG5cdCAgICAgICAgICAgIHZhciBtYXRjaF9yZWZlciA9IF9yLm1hdGNoKHJlZyk7XG5cdCAgICAgICAgICAgIGlmIChtYXRjaF9yZWZlciAmJiBtYXRjaF9yZWZlci5sZW5ndGggPiAwKSB7XG5cdCAgICAgICAgICAgICAgTFMuc2V0SXRlbShfdHJhY2tpZCwgbWF0Y2hfcmVmZXJbMV0pO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgIHZhciBfbiA9IHdpbi5uYW1lIHx8ICcnO1xuXHQgICAgICAgICAgICAgIHZhciBtYXRjaF9uYW1lID0gX24ubWF0Y2gocmVnKTtcblx0ICAgICAgICAgICAgICBpZiAobWF0Y2hfbmFtZSAmJiBtYXRjaF9uYW1lLmxlbmd0aCA+IDApIHtcblx0ICAgICAgICAgICAgICAgIExTLnNldEl0ZW0oX3RyYWNraWQsIG1hdGNoX25hbWVbMV0pO1xuXHQgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgdmFyIF90cmFja2lkVmFsdWUgPSBMUy5nZXRJdGVtKF90cmFja2lkKSB8fCAnJztcblx0ICAgICAgICAgIGlmIChfdHJhY2tpZFZhbHVlICYmIF90cmFja2lkVmFsdWUubGVuZ3RoID4gNTApIHtcblx0ICAgICAgICAgICAgdmFyIHZhbHVlcyA9IF90cmFja2lkVmFsdWUuc3BsaXQoJ18nKTtcblx0ICAgICAgICAgICAgdmFyIGRhdGU7XG5cdCAgICAgICAgICAgIGlmICh2YWx1ZXMgJiYgdmFsdWVzLmxlbmd0aCA+IDApIHtcblx0ICAgICAgICAgICAgICBkYXRlID0gdmFsdWVzW3ZhbHVlcy5sZW5ndGggLSAxXS5yZXBsYWNlKC9sb2cvLCAnJyk7XG5cdCAgICAgICAgICAgICAgdmFyIGxvZ2RhdGUgPSBuZXcgRGF0ZSgpO1xuXHQgICAgICAgICAgICAgIHZhciBsb2dkYXRlVGltZSA9IGxvZ2RhdGUuZ2V0VGltZSgpO1xuXHQgICAgICAgICAgICAgIHZhciBub3cgPSBuZXcgRGF0ZSgpO1xuXHQgICAgICAgICAgICAgIHZhciBub3dUaW1lID0gbm93LmdldFRpbWUoKTtcblx0ICAgICAgICAgICAgICBsb2dkYXRlLnNldEZ1bGxZZWFyKHBhcnNlSW50KGRhdGUuc3Vic3RyKDAsIDQpKSk7XG5cdCAgICAgICAgICAgICAgbG9nZGF0ZS5zZXRNb250aChwYXJzZUludChkYXRlLnN1YnN0cig0LCAyKSAtIDEpKTtcblx0ICAgICAgICAgICAgICBsb2dkYXRlLnNldERhdGUocGFyc2VJbnQoZGF0ZS5zdWJzdHIoNiwgMikpKTtcblx0ICAgICAgICAgICAgICBsb2dkYXRlLnNldEhvdXJzKHBhcnNlSW50KGRhdGUuc3Vic3RyKDgsIDIpKSk7XG5cdCAgICAgICAgICAgICAgbG9nZGF0ZS5zZXRNaW51dGVzKHBhcnNlSW50KGRhdGUuc3Vic3RyKDEwLCAyKSkpO1xuXHQgICAgICAgICAgICAgIGxvZ2RhdGUuc2V0U2Vjb25kcyhwYXJzZUludChkYXRlLnN1YnN0cigxMiwgMikpKTtcblx0ICAgICAgICAgICAgICBsb2dkYXRlLnNldE1pbGxpc2Vjb25kcygwKTtcblx0ICAgICAgICAgICAgICBsb2dkYXRlVGltZSA9IGxvZ2RhdGUuZ2V0VGltZSgpO1xuXHQgICAgICAgICAgICAgIG5vd1RpbWUgPSBub3cuZ2V0VGltZSgpO1xuXHQgICAgICAgICAgICAgIHZhciBsaW1pdCA9IG5vd1RpbWUgLSBsb2dkYXRlVGltZTtcblx0ICAgICAgICAgICAgICByZXR1cm4gbGltaXQgPD0gMzYwMDAwMCA/IChfdHJhY2tpZFZhbHVlIHx8IG1hdGNoX3ZhbHVlWzFdKSA6IGZhbHNlO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfSBjYXRjaCAoZSkge1xuXHQgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgICAgIH1cblx0ICAgICAgfTtcblx0ICAgICAgdmFyIGFwbHVzX3RyYWNrX2RlYnVnX2lkID0gaXNUcmFja0RlYnVnKCk7XG5cdCAgICAgIGlmIChhcGx1c190cmFja19kZWJ1Z19pZCkge1xuXHQgICAgICAgIGFwbHVzLl9hcGx1c19jcGx1Z2luX3RyYWNrX2RlYi5zdGF0dXMgPSAnc3RhcnQnO1xuXHQgICAgICAgIHZhciBvYmogPSB7XG5cdCAgICAgICAgICBhcGx1c190cmFja19kZWJ1Z19pZDogYXBsdXNfdHJhY2tfZGVidWdfaWQsXG5cdCAgICAgICAgfTtcblx0ICAgICAgICB2YXIgcSA9IHdpbmRvdy5hcGx1c19xdWV1ZSB8fCAod2luZG93LmFwbHVzX3F1ZXVlID0gW10pO1xuXHQgICAgICAgIHEucHVzaCh7XG5cdCAgICAgICAgICBhY3Rpb246ICdhcGx1cy5hcHBlbmRNZXRhSW5mbycsXG5cdCAgICAgICAgICBhcmd1bWVudHM6IFsnYXBsdXMtZXhkYXRhJywgb2JqXVxuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIHEucHVzaCh7XG5cdCAgICAgICAgICBhY3Rpb246ICdhcGx1cy5hcHBlbmRNZXRhSW5mbycsXG5cdCAgICAgICAgICBhcmd1bWVudHM6IFsnYXBsdXMtY3B2ZGF0YScsIG9ial1cblx0ICAgICAgICB9KTtcblx0XG5cdCAgICAgICAgYXBsdXMuX2FwbHVzX2NwbHVnaW5fdHJhY2tfZGViLnN0YXR1cyA9ICdjb21wbGV0ZSc7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9O1xuXHR9O1xuXG5cbi8qKiovIH0pLFxuLyogNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdC8qKlxuXHQgKiDnrYnlvoVib2R5IHJlYWR5XG5cdCAqXG5cdCAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cblx0ICpcblx0ICogQXV0aG9yczpcblx0ICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuXHQgKi9cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG5cdCAgcmV0dXJuIHtcblx0ICAgIC8qKlxuXHQgICAgICogQHBhcmFtcyB7T2JqZWN0fSBvcHRpb25zIHtcblx0ICAgICAqICAgbG9nQ29uZmlnOiB7bG9nQ29uZmlnfVxuXHQgICAgICogfVxuXHQgICAgICovXG5cdCAgICAvLyBpbml0OiBmdW5jdGlvbihvcHRpb25zKSB7XG5cdCAgICAvLyAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdCAgICAvLyB9LFxuXHRcblx0ICAgIHJ1bjogZnVuY3Rpb24gKHN0YXRlLCBjYikge1xuXHQgICAgICB2YXIgaGFuZGxlciA9IHNldEludGVydmFsKGZ1bmN0aW9uKCl7XG5cdCAgICAgICAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JykubGVuZ3RoKSB7XG5cdCAgICAgICAgICBjbGVhckludGVydmFsKGhhbmRsZXIpO1xuXHQgICAgICAgICAgaGFuZGxlciA9IG51bGw7XG5cdCAgICAgICAgICBjYigpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSwgNTApO1xuXHQgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBpZiAoaGFuZGxlcikge1xuXHQgICAgICAgICAgY2xlYXJJbnRlcnZhbChoYW5kbGVyKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0sIDEwMDApO1xuXHQgICAgICByZXR1cm4gMTAwMDtcblx0ICAgIH0sXG5cdCAgfTtcblx0fTtcblxuXG4vKioqLyB9KSxcbi8qIDcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcblx0dmFyIFB1YlN1YldlYiA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciB1dGlsR29sZGxvZyA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuXHQgIHJldHVybiB7XG5cdCAgICBydW46ICBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIHZhciBhcGx1cyA9IHV0aWxHb2xkbG9nLmdldEdsb2JhbFZhbHVlKCdhcGx1cycpO1xuXHQgICAgICAvLyDkv53or4Hlj6rkvJrmnInkuIDkuKpwdWJzdWLov5DooYxcblx0ICAgICAgaWYgKGFwbHVzLmFwbHVzX3B1YnN1Yikge1xuXHQgICAgICAgIHJldHVybjtcblx0ICAgICAgfVxuXHQgICAgICAvLyBhcGx1cy5hcGx1c19wdWJzdWLmmK/kuIDkuKrnm5HlkKzogIXvvIzlnKjmj5Lku7bljJblhoXpg6jkvJrnlKjliLDku5bvvIzmnInmlbDmja7lj5jljJblsIbkvJrlj5HlsITnm7jlupTnmoRkYXRhY2hhbmdl5LqL5Lu2XG5cdCAgICAgIGFwbHVzLmFwbHVzX3B1YnN1YiA9IFB1YlN1YldlYi5jcmVhdGUoKTtcblx0ICAgIH1cblx0ICB9O1xuXHR9O1xuXG5cbi8qKiovIH0pLFxuLyogOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdHZhciBQdWJTdWIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBQdWJTdWIuZXh0ZW5kKHtcblx0ICAvKipcblx0ICAgKiDorqLpmIXliLDkuIDmrKHlm57osIPlkI7lj5bmtojorqLpmIVcblx0ICAgKiBAcGFyYW0ge1N0cmluZ30gZVR5cGUg6K6i6ZiF55qE5raI5oGv5Y+l5p+EXG5cdCAgICogQHBhcmFtIHtGdW5jdGlvbn0gaCDorqLpmIXnmoTmtojmga/lm57osIPlh73mlbBcblx0ICAgKiBAcmV0dXJuIGNvbnRleHRcblx0ICAgKi9cblx0ICBzdWJzY3JpYmVPbmNlOiBmdW5jdGlvbihlVHlwZSwgaCkge1xuXHQgICAgLy8g5a+55Zue6LCD5Ye95pWw6L+b6KGM5pat6KiAXG5cdCAgICB0aGlzLmNhbGxhYmxlKGgpO1xuXHRcblx0ICAgIHZhciBfc2VsZiA9IHRoaXM7XG5cdCAgICB2YXIgb25jZTtcblx0ICAgIHRoaXMuc3Vic2NyaWJlLmNhbGwodGhpcywgZVR5cGUsIG9uY2UgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgX3NlbGYudW5zdWJzY3JpYmUuY2FsbChfc2VsZiwgZVR5cGUsIG9uY2UpO1xuXHQgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cdCAgICAgIGguYXBwbHkoX3NlbGYsIGFyZ3MpO1xuXHQgICAgfSk7XG5cdCAgICByZXR1cm4gdGhpcztcblx0ICB9LFxuXHRcblx0ICAvKipcblx0ICAgKiDlj5bmtojorqLpmIXvvIzlsIbkvJrlj5bmtojigJxlVHlwZeKAneWPpeafhOWvueW6lOeahOKAnGjigJ3lm57osIPlh73mlbDkuIvnmoTmiYDmnInorqLpmIVcblx0ICAgKiBAcGFyYW0ge1N0cmluZ30gZVR5cGUg6K6i6ZiF55qE5raI5oGv5Y+l5p+EXG5cdCAgICogQHBhcmFtIHtGdW5jdGlvbn0gaCDorqLpmIXnmoTmtojmga/lm57osIPlh73mlbBcblx0ICAgKiBAcmV0dXJuIGNvbnRleHRcblx0ICAgKi9cblx0ICB1bnN1YnNjcmliZTogZnVuY3Rpb24oZVR5cGUsIGgpIHtcblx0ICAgIC8vIOWvueWbnuiwg+WHveaVsOi/m+ihjOaWreiogFxuXHQgICAgdGhpcy5jYWxsYWJsZShoKTtcblx0XG5cdCAgICB2YXIgcyA9IHRoaXMuaGFuZGxlcnNbZVR5cGVdO1xuXHQgICAgaWYgKCFzKSByZXR1cm4gdGhpcztcblx0XG5cdCAgICBpZiAodHlwZW9mIHMgPT09ICdvYmplY3QnICYmIHMubGVuZ3RoID4gMCkge1xuXHQgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgcy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgIHZhciBoX3N0ciA9IGgudG9TdHJpbmcoKTtcblx0ICAgICAgICB2YXIgc19zdHIgPSBzW2ldLnRvU3RyaW5nKCk7XG5cdCAgICAgICAgaWYgKGhfc3RyID09PSBzX3N0cikge1xuXHQgICAgICAgICAgcy5zcGxpY2UoaSwgMSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIHRoaXMuaGFuZGxlcnNbZVR5cGVdID0gcztcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGRlbGV0ZSB0aGlzLmhhbmRsZXJzW2VUeXBlXTtcblx0ICAgIH1cblx0ICAgIHJldHVybiB0aGlzO1xuXHQgIH1cblx0fSk7XG5cblxuLyoqKi8gfSksXG4vKiA5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIGFsaWxvZy9zL3NyYy9saWJfdS9jb3JlL1B1YlN1Yi5qc1xuXHQgKiDmtojmga/orqLpmIXmqKHlnotcblx0ICpcblx0ICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuXHQgKlxuXHQgKiBBdXRob3JzOlxuXHQgKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG5cdCAqL1xuXHQndXNlIHN0cmljdCc7XG5cdFxuXHR2YXIgaXNGdW5jdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXHR2YXIgQmFzZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xuXHRcblx0dmFyIGdldEFyZ3MgPSBmdW5jdGlvbihhcmdzKSB7XG5cdCAgdmFyIGxlbiA9IGFyZ3MubGVuZ3RoO1xuXHQgIHZhciBfYXJncyA9IG5ldyBBcnJheShsZW4gLSAxKTtcblx0ICBmb3IgKHZhciBqID0gMTsgaiA8IGxlbjsgaisrKSB7XG5cdCAgICBfYXJnc1tqIC0gMV0gPSBhcmdzW2pdO1xuXHQgIH1cblx0ICByZXR1cm4gX2FyZ3M7XG5cdH07XG5cdFxuXHR2YXIgUHViU3ViID0gQmFzZS5leHRlbmQoe1xuXHQgIC8qKlxuXHQgICAqIOWvuWZu6L+b6KGM5pat6KiA77yM5LiN5piv4oCYZnVuY3Rpb27igJnnsbvlnovmiqXplJnvvIzlkKbliJnov5Tlm55mblxuXHQgICAqL1xuXHQgIGNhbGxhYmxlOiBmdW5jdGlvbiAoZm4pIHtcblx0ICAgIGlmICghaXNGdW5jdGlvbihmbikpIHRocm93IG5ldyBUeXBlRXJyb3IoZm4gKyAnIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG5cdCAgICByZXR1cm4gZm47XG5cdCAgfSxcblx0XG5cdCAgY3JlYXRlOiBmdW5jdGlvbiAocHJvcHMpIHtcblx0ICAgIHZhciBpbnN0YW5jZSA9IG5ldyB0aGlzKCk7XG5cdCAgICAvLyDnu5Hlrpror6Xlrp7kvovnmoTlsZ7mgKdcblx0ICAgIGZvciAodmFyIG5hbWUgaW4gcHJvcHMpIHtcblx0ICAgICAgaW5zdGFuY2VbbmFtZV0gPSBwcm9wc1tuYW1lXTtcblx0ICAgIH1cblx0XG5cdCAgICBpbnN0YW5jZS5oYW5kbGVycyA9IFtdO1xuXHQgICAgaW5zdGFuY2UucHVicyA9IHt9O1xuXHQgICAgcmV0dXJuIGluc3RhbmNlO1xuXHQgIH0sXG5cdFxuXHQgIHNldEhhbmRsZXJzOiBmdW5jdGlvbihoYW5kbGVycykge1xuXHQgICAgdGhpcy5oYW5kbGVycyA9IGhhbmRsZXJzO1xuXHQgIH0sXG5cdFxuXHQgIC8qKlxuXHQgICAqIOiuoumYheWPpeafhOS4uuKAnGVUeXBl4oCd55qE5raI5oGv77yM5b2T5pyJ5raI5oGv6L+H5p2l5omn6KGM5Zue6LCD5Ye95pWw77ya4oCcaOKAnVxuXHQgICAqIEBwYXJhbSB7U3RyaW5nfSBlVHlwZSDorqLpmIXnmoTmtojmga/lj6Xmn4Rcblx0ICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoIOiuoumYheeahOa2iOaBr+Wbnuiwg+WHveaVsFxuXHQgICAqIEByZXR1cm4gY29udGV4dFxuXHQgICAqL1xuXHQgIHN1YnNjcmliZTogZnVuY3Rpb24oZVR5cGUsIGgpe1xuXHQgICAgLy8g5a+55Zue6LCD5Ye95pWw6L+b6KGM5pat6KiAXG5cdCAgICB0aGlzLmNhbGxhYmxlKGgpO1xuXHRcblx0ICAgIHZhciBfc2VsZiA9IHRoaXM7XG5cdCAgICB2YXIgcHVicyA9IF9zZWxmLnB1YnMgfHwge307XG5cdFxuXHQgICAgdmFyIGFyciA9IHB1YnNbZVR5cGVdIHx8IFtdO1xuXHQgICAgaWYgKGFycikge1xuXHQgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgIHZhciBfYXJncyA9IGFycltpXSgpO1xuXHQgICAgICAgIGguYXBwbHkoX3NlbGYsIF9hcmdzKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgdmFyIGhhbmRsZXJzID0gX3NlbGYuaGFuZGxlcnMgfHwgW107XG5cdCAgICBpZighKGVUeXBlIGluIGhhbmRsZXJzKSkge1xuXHQgICAgICBoYW5kbGVyc1tlVHlwZV0gPSBbXTtcblx0ICAgIH1cblx0ICAgIGhhbmRsZXJzW2VUeXBlXS5wdXNoKGgpO1xuXHQgICAgX3NlbGYuc2V0SGFuZGxlcnMoaGFuZGxlcnMpO1xuXHQgICAgcmV0dXJuIF9zZWxmO1xuXHQgIH0sXG5cdFxuXHQgIC8qKlxuXHQgICAqIOa2iOaBr+WIhuWPke+8jOWwhuS8muWIhuWPkeWIsOaJgOacieiuoumYhWVUeXBl5Y+l5p+E55qE6K6i6ZiF6ICFXG5cdCAgICogQHBhcmFtIHtTdHJpbmd9IGVUeXBlIOWIhuWPkea2iOaBr+WPpeafhFxuXHQgICAqL1xuXHQgIHB1Ymxpc2g6IGZ1bmN0aW9uIChlVHlwZSkge1xuXHRcblx0ICAgIHZhciBhcmdzID0gZ2V0QXJncyhhcmd1bWVudHMpO1xuXHQgICAgdmFyIGhhbmRsZXJzID0gdGhpcy5oYW5kbGVycyB8fCBbXTtcblx0XG5cdCAgICB2YXIgc2l6ZSA9IGhhbmRsZXJzW2VUeXBlXSA/IGhhbmRsZXJzW2VUeXBlXS5sZW5ndGggOiAwO1xuXHQgICAgaWYgKHNpemUgPiAwKSB7XG5cdCAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgaSsrKSB7XG5cdCAgICAgICAgdmFyIGZuID0gaGFuZGxlcnNbZVR5cGVdW2ldO1xuXHQgICAgICAgIGlmIChpc0Z1bmN0aW9uKGZuKSkge1xuXHQgICAgICAgICAgZm4uYXBwbHkodGhpcywgYXJncyk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdFxuXHQgICAgcmV0dXJuIHRoaXM7XG5cdCAgfSxcblx0XG5cdCAgY2FjaGVQdWJzOiBmdW5jdGlvbiAoZVR5cGUpIHtcblx0ICAgIHZhciBwdWJzID0gdGhpcy5wdWJzIHx8IHt9O1xuXHQgICAgdmFyIGFyZ3MgPSBnZXRBcmdzKGFyZ3VtZW50cyk7XG5cdCAgICBpZiAoIXB1YnNbZVR5cGVdKSB7XG5cdCAgICAgIHB1YnNbZVR5cGVdID0gW107XG5cdCAgICB9XG5cdCAgICBwdWJzW2VUeXBlXS5wdXNoKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgcmV0dXJuIGFyZ3M7XG5cdCAgICB9KTtcblx0ICB9LFxuXHR9KTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gUHViU3ViO1xuXG5cbi8qKiovIH0pLFxuLyogMTAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQvKipcblx0ICogcHJvamVjdCAtIGZpbGVwYXRoXG5cdCAqXG5cdCAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cblx0ICpcblx0ICogQXV0aG9yczpcblx0ICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuXHQgKi9cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobykge1xuXHQgIHJldHVybiB0eXBlb2YgbyA9PT0gJ2Z1bmN0aW9uJztcblx0fTtcblxuLyoqKi8gfSksXG4vKiAxMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBhbGlsb2cvcy9zcmMvbGliX3UvY29yZS9CYXNlLmpzXG5cdCAqIOWfuuexu++8jOaPkOS+m+exu+aJgOmcgOimgeeahOWfuuehgOWxnuaAp1xuXHQgKlxuXHQgKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG5cdCAqXG5cdCAqIEF1dGhvcnM6XG5cdCAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cblx0ICovXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciBpc0Z1bmN0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMCk7XG5cdFxuXHQvLyDln7rnsbtcblx0ZnVuY3Rpb24gQmFzZSgpIHt9XG5cdFxuXHQvLyDlsIZleHRlbmTlkoxjcmVhdGXnva7kuo5wcm90b3R5cGXlr7nosaHkuK3vvIzku6Xkvr/lrZDnsbvnu6fmib9cblx0QmFzZS5wcm90b3R5cGUuZXh0ZW5kID0gZnVuY3Rpb24oKSB7fTtcblx0QmFzZS5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XG5cdC8vIOS4uuS6huiDveWcqOWfuuexu+S4iuebtOaOpeS7pS5leHRlbmTnmoTmlrnlvI/ov5vooYzosIPnlKhcblx0QmFzZS5leHRlbmQgPSBmdW5jdGlvbihwcm9wcykge1xuXHQgIHJldHVybiB0aGlzLnByb3RvdHlwZS5leHRlbmQuY2FsbCh0aGlzLCBwcm9wcyk7XG5cdH07XG5cdFxuXHRCYXNlLnByb3RvdHlwZS5jcmVhdGUgPSBmdW5jdGlvbihwcm9wcykge1xuXHQgIC8qKlxuXHQgICAqIGNyZWF0ZeWunumZheS4iuaYr+WvuW5ld+eahOWwgeijhe+8m1xuXHQgICAqIGNyZWF0Zei/lOWbnueahOWunuS+i+WunumZheS4iuWwseaYr25ld+aehOmAoOWHuueahOWunuS+i++8m1xuXHQgICAqIHRoaXPljbPmjIflkJHosIPnlKjlvZPliY1jcmVhdGXnmoTmnoTpgKDlh73mlbDvvJtcblx0ICAgKi9cblx0ICB2YXIgaW5zdGFuY2UgPSBuZXcgdGhpcygpO1xuXHQgIC8vIOe7keWumuivpeWunuS+i+eahOWxnuaAp1xuXHQgIGZvciAodmFyIG5hbWUgaW4gcHJvcHMpIHtcblx0ICAgIGluc3RhbmNlW25hbWVdID0gcHJvcHNbbmFtZV07XG5cdCAgfVxuXHQgIHJldHVybiBpbnN0YW5jZTtcblx0fTtcblx0XG5cdEJhc2UucHJvdG90eXBlLmV4dGVuZCA9IGZ1bmN0aW9uKHByb3BzKSB7XG5cdCAgLy8g5rS+55Sf5Ye65p2l55qE5paw55qE5a2Q57G7XG5cdCAgdmFyIFN1YkJhc2UgPSBmdW5jdGlvbigpIHt9O1xuXHQgIHRyeSB7XG5cdCAgICAvKipcblx0ICAgICAqIOe7p+aJv+eItuexu+eahOWxnuaAp+WSjOaWueazle+8jFxuXHQgICAgICog5b2T54S25YmN5o+Q5piv54i257G755qE5bGe5oCn6YO95pS+5ZyocHJvdG90eXBl5LitXG5cdCAgICAgKiDogIzpnZ7kuIrpnaJjcmVhdGXmlrnms5XnmoTigJzlrp7kvovlsZ7mgKfigJ3kuK1cblx0ICAgICAqL1xuXHQgICAgaWYgKCFpc0Z1bmN0aW9uKE9iamVjdC5jcmVhdGUpKSB7XG5cdCAgICAgIE9iamVjdC5jcmVhdGUgPSBmdW5jdGlvbiAobykge1xuXHQgICAgICAgIGZ1bmN0aW9uIEYoKSB7fVxuXHQgICAgICAgIEYucHJvdG90eXBlID0gbztcblx0ICAgICAgICByZXR1cm4gbmV3IEYoKTtcblx0ICAgICAgfTtcblx0ICAgIH1cblx0ICAgIFN1YkJhc2UucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh0aGlzLnByb3RvdHlwZSk7XG5cdFxuXHQgICAgLy8g5bm25LiU5re75Yqg6Ieq5bex55qE5pa55rOV5ZKM5bGe5oCnXG5cdCAgICBmb3IgKHZhciBuYW1lIGluIHByb3BzKSB7XG5cdCAgICAgIFN1YkJhc2UucHJvdG90eXBlW25hbWVdID0gcHJvcHNbbmFtZV07XG5cdCAgICB9XG5cdCAgICBTdWJCYXNlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFN1YkJhc2U7XG5cdFxuXHQgICAgLy8g6ZyA6KaB5LulLmV4dGVuZOeahOaWueW8j+WSjC5jcmVhdGXnmoTmlrnlvI/osIPnlKjvvJpcblx0ICAgIFN1YkJhc2UuZXh0ZW5kID0gU3ViQmFzZS5wcm90b3R5cGUuZXh0ZW5kO1xuXHQgICAgU3ViQmFzZS5jcmVhdGUgPSBTdWJCYXNlLnByb3RvdHlwZS5jcmVhdGU7XG5cdCAgfSBjYXRjaChlcnIpIHtcblx0ICAgIGNvbnNvbGUgJiYgY29uc29sZS5sb2coZXJyKTtcblx0ICB9IGZpbmFsbHkge1xuXHQgICAgcmV0dXJuIFN1YkJhc2U7XG5cdCAgfVxuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBCYXNlO1xuXG5cbi8qKiovIH0pLFxuLyogMTIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogcHJvamVjdCAtIGZpbGVwYXRoXG5cdCAqIOWuouaIt+err+S+pua1i+iEmuacrFxuXHQgKiAgQHJlZjogaHR0cHM6Ly9naXRodWIuY29tL2tpc3N5dGVhbS9raXNzeS9ibG9iLzEuNC54L3NyYy9zZWVkL3NyYy91YS5qc1xuXHQgKiAgICAgICAgaHR0cHM6Ly9naXRodWIuY29tL3l1eXUxOTExL01hZ25ldG8vYmxvYi9tYXN0ZXIvc3JjL3BsdWdpbnMvY2xpZW50L3VhLmpzXG5cdCAqICAgICAgICBodHRwOi8vZ2l0bGFiLmFsaWJhYmEtaW5jLmNvbS90Yi9hcC9ibG9iL21hc3Rlci9idWlsZC8xLjAvcG9jL20vb3MuanNcblx0ICogICAgICAgIGh0dHA6Ly9naXRsYWIuYWxpYmFiYS1pbmMuY29tL3RiL2FwL2Jsb2IvbWFzdGVyL2J1aWxkLzEuMC9tL20vdWEuanNcblx0ICogICAgICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9jbG91ZGNvbWUvanF1ZXJ5LnVhL2Jsb2IvbWFzdGVyL2pxdWVyeS51YS5qc1xuXHQgKlxuXHQgKiDmlK/mjIHnmoTlm73kuqfmtY/op4jlmajvvJpcblx0ICogMzYwc2UgICAgICAgIOaegemAn+aooeW8j1xuXHQgKiAzNjBlZSAgICAgICAg5p6B6YCf5qih5byPXG5cdCAqIOeMjuixuSAgICAgICAgICDlj4zmqKHlvI9cblx0ICogUVEgICAgICAgICAgIOWPjOaooeW8j1xuXHQgKiDlgrLmuLhcblx0ICog5reY5a6dICAgICAgICAgIOaegemAn+aooeW8j1xuXHQgKlxuXHQgKiAqIOebruWJjTM2MGVl55qE5rWL6K+V5piv5ryP6bG85rOV77yM5aaC5p6c5YW25LuW5Yy56YWN5LiN5LiK5bCx5piv5a6D77yM5Zug5q2k5Lya6K+v5YikXG5cdCAqXG5cdCAqIOeOsOWcqOi/mOS4jeiDveajgOa1i+eahOa1j+iniOWZqO+8mlxuXHQgKiAzNjBzZSAgICAgICAgICAgIOWFvOWuueaooeW8j1xuXHQgKiAzNjBlZSAgICAgICAgICAgIOWFvOWuueaooeW8j1xuXHQgKiDmt5jlrp3mtY/op4jlmaggICAgICAgICDlhbzlrrnmqKHlvI9cblx0ICpcblx0ICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuXHQgKlxuXHQgKiBBdXRob3JzOlxuXHQgKiAgIGdvbmdoYW8uZ2hcblx0ICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuXHQgKi9cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG5cdCAgcmV0dXJuIHtcblx0ICAgIHJ1bjogZnVuY3Rpb24gKCkge1xuXHQgICAgICB2YXIgYXBsdXMgPSAod2luZG93LmFwbHVzIHx8ICh3aW5kb3cuYXBsdXMgPSB7fSkpO1xuXHQgICAgICBhcGx1cy5fYXBsdXNfY2xpZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMykoKTtcblx0ICAgIH1cblx0ICB9O1xuXHR9O1xuXG5cbi8qKiovIH0pLFxuLyogMTMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQvKipcblx0ICogcHJvamVjdCAtIGZpbGVwYXRoXG5cdCAqIOWuouaIt+err+S+pua1i+iEmuacrFxuXHQgKiAgQHJlZjogaHR0cHM6Ly9naXRodWIuY29tL2tpc3N5dGVhbS9raXNzeS9ibG9iLzEuNC54L3NyYy9zZWVkL3NyYy91YS5qc1xuXHQgKiAgICAgICAgaHR0cHM6Ly9naXRodWIuY29tL3l1eXUxOTExL01hZ25ldG8vYmxvYi9tYXN0ZXIvc3JjL3BsdWdpbnMvY2xpZW50L3VhLmpzXG5cdCAqICAgICAgICBodHRwOi8vZ2l0bGFiLmFsaWJhYmEtaW5jLmNvbS90Yi9hcC9ibG9iL21hc3Rlci9idWlsZC8xLjAvcG9jL20vb3MuanNcblx0ICogICAgICAgIGh0dHA6Ly9naXRsYWIuYWxpYmFiYS1pbmMuY29tL3RiL2FwL2Jsb2IvbWFzdGVyL2J1aWxkLzEuMC9tL20vdWEuanNcblx0ICogICAgICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9jbG91ZGNvbWUvanF1ZXJ5LnVhL2Jsb2IvbWFzdGVyL2pxdWVyeS51YS5qc1xuXHQgKlxuXHQgKiDmlK/mjIHnmoTlm73kuqfmtY/op4jlmajvvJpcblx0ICogMzYwc2UgICAgICAgIOaegemAn+aooeW8j1xuXHQgKiAzNjBlZSAgICAgICAg5p6B6YCf5qih5byPXG5cdCAqIOeMjuixuSAgICAgICAgICDlj4zmqKHlvI9cblx0ICogUVEgICAgICAgICAgIOWPjOaooeW8j1xuXHQgKiDlgrLmuLhcblx0ICog5reY5a6dICAgICAgICAgIOaegemAn+aooeW8j1xuXHQgKlxuXHQgKiAqIOebruWJjTM2MGVl55qE5rWL6K+V5piv5ryP6bG85rOV77yM5aaC5p6c5YW25LuW5Yy56YWN5LiN5LiK5bCx5piv5a6D77yM5Zug5q2k5Lya6K+v5YikXG5cdCAqXG5cdCAqIOeOsOWcqOi/mOS4jeiDveajgOa1i+eahOa1j+iniOWZqO+8mlxuXHQgKiAzNjBzZSAgICAgICAgICAgIOWFvOWuueaooeW8j1xuXHQgKiAzNjBlZSAgICAgICAgICAgIOWFvOWuueaooeW8j1xuXHQgKiDmt5jlrp3mtY/op4jlmaggICAgICAgICDlhbzlrrnmqKHlvI9cblx0ICpcblx0ICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuXHQgKlxuXHQgKiBBdXRob3JzOlxuXHQgKiAgIGdvbmdoYW8uZ2hcblx0ICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuXHQgKi9cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0ZnVuY3Rpb24gZ2V0T2xkRmFzaGlvbk9zSW5mbyh1YSkge1xuXHQgIHZhciB0b2tlbiA9IFtcblx0ICAgIFsnV2luZG93cyBOVCA1LjEnLCAnd2luWFAnXSxcblx0ICAgIFsnV2luZG93cyBOVCA2LjEnLCAnd2luNyddLFxuXHQgICAgWydXaW5kb3dzIE5UIDYuMCcsICd3aW5WaXN0YSddLFxuXHQgICAgWydXaW5kb3dzIE5UIDYuMicsICd3aW44J10sXG5cdCAgICBbJ1dpbmRvd3MgTlQgNi4zJywgJ3dpbjguMSddLFxuXHQgICAgWydXaW5kb3dzIE5UIDEwLjAnLCAnd2luMTAnXSxcblx0ICAgIFsnVWJ1bnR1JywgJ3VidW50dSddLFxuXHQgICAgWydMaW51eCcsICdsaW51eCddLFxuXHQgICAgWydXaW5kb3dzIE5UIDUuMicsICd3aW4yMDAzJ10sXG5cdCAgICBbJ1dpbmRvd3MgTlQgNS4wJywgJ3dpbjIwMDAnXSxcblx0ICAgIFsnV2luZG93cycsICd3aW5PdGhlciddLFxuXHQgICAgWydyaGlubycsICdyaGlubyddXG5cdCAgXTtcblx0ICBmb3IgKHZhciBpID0gMCwgbGVuID0gdG9rZW4ubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcblx0ICAgIHZhciB0b2tlbjAgPSB0b2tlbltpXVswXTtcblx0ICAgIGlmICh1YS5pbmRleE9mKHRva2VuMCkgIT09IC0xKSB7XG5cdCAgICAgIHZhciBvcyA9IHRva2VuMC5zcGxpdCgnICcpWzBdO1xuXHQgICAgICByZXR1cm4ge1xuXHQgICAgICAgIGRldmljZV9tb2RlbDogb3MsXG5cdCAgICAgICAgb3M6IG9zLFxuXHQgICAgICAgIG9zX3ZlcnNpb246IHRva2VuW2ldWzFdXG5cdCAgICAgIH07XG5cdCAgICB9XG5cdCAgfVxuXHQgIHZhciBPVEhFUiA9ICdvdGhlcic7XG5cdCAgcmV0dXJuIHtcblx0ICAgIC8vIGRldmljZV9tb2RlbDogT1RIRVIsXG5cdCAgICBvczogT1RIRVIsXG5cdCAgICBvc192ZXJzaW9uOiBPVEhFUlxuXHQgIH07XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGdldE1vZGVybk9TSW5mbyAodWEsIGRldmljZV9tb2RlbCkge1xuXHQgIC8qKlxuXHQgICAqIGlQYWQ7IENQVSBPUyAxMV8wIGxpa2UgTWFjIE9TIFhcblx0ICAgKiBpUGhvbmU7IENQVSBpUGhvbmUgT1MgMTFfMCBsaWtlIE1hYyBPUyBYXG5cdCAgICogTWFjaW50b3NoOyBJbnRlbCBNYWMgT1MgWCAxMF8xNF80XG5cdCAgICogTGludXg7IEFuZHJvaWQgNS4wOyBTTS1HOTAwUCBCdWlsZC9MUlgyMVRcblx0ICAgKi9cblx0ICB2YXIgb3NJbmZvID0gdWEuc3Vic3RyaW5nKHVhLmluZGV4T2YoJygnKSArIDEsIHVhLmluZGV4T2YoJyknKSk7XG5cdCAgdmFyIHJzID0ge1xuXHQgICAgLy8gZGV2aWNlX21vZGVsOiBkZXZpY2VfbW9kZWwsXG5cdCAgfTtcblx0ICB2YXIgZCA9IGRldmljZV9tb2RlbC50b0xvd2VyQ2FzZSgpO1xuXHQgIHN3aXRjaCAoZCkge1xuXHQgIGNhc2UgJ2lwYWQnOlxuXHQgIGNhc2UgJ2lwaG9uZSc6XG5cdCAgY2FzZSAnaXBvZCc6XG5cdCAgY2FzZSAnbWFjaW50b3NoJzpcblx0ICAgIGlmIChkID09PSAnbWFjaW50b3NoJykge1xuXHQgICAgICBpZiAoL01hYyBPUyBYLy50ZXN0KG9zSW5mbykpIHtcblx0ICAgICAgICBycy5vcyA9ICdNYWMgT1MgWCc7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgcnMub3MgPSAnTWFjIE9TJztcblx0ICAgICAgfVxuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgcnMub3MgPSAnSU9TJztcblx0ICAgIH1cblx0ICAgIHJzLm9zX3ZlcnNpb24gPSBvc0luZm8ubWF0Y2goL1swLTlfLl0rLylbMF07XG5cdCAgICBicmVhaztcblx0ICBjYXNlICdhbmRyb2lkJzpcblx0ICAgIHJzLm9zID0gJ0FuZHJvaWQnO1xuXHQgICAgcnMub3NfdmVyc2lvbiA9IG9zSW5mby5tYXRjaCgvWzAtOS5dKy8pWzBdO1xuXHQgICAgYnJlYWs7XG5cdCAgZGVmYXVsdDpcblx0ICAgIGJyZWFrO1xuXHQgIH1cblx0ICBycy5vc192ZXJzaW9uID0gcnMub3NfdmVyc2lvbi5yZXBsYWNlKC9fL2csICcuJyk7XG5cdCAgcmV0dXJuIHJzO1xuXHR9XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcblx0ICB2YXIgVUEgPSBuYXZpZ2F0b3IudXNlckFnZW50O1xuXHQgIHZhciBpbmZvID0ge307XG5cdCAgdmFyIG1vZGVybk9TID0gVUEubWF0Y2goL2lwaG9uZXxpcGFkfGFuZHJvaWR8bWFjaW50b3NoL2kpO1xuXHQgIHZhciBEYXJ3aW5PUyA9IFVBLm1hdGNoKC9EYXJ3aW4vaSk7XG5cdCAgaWYgKG1vZGVybk9TKSB7XG5cdCAgICBpbmZvID0gZ2V0TW9kZXJuT1NJbmZvKFVBLCBtb2Rlcm5PU1swXSk7XG5cdCAgfSBlbHNlIGlmIChEYXJ3aW5PUykge1xuXHQgICAgdmFyIF9vcyA9IFVBLnNwbGl0KCcgJylbMl07XG5cdCAgICBpbmZvID0ge1xuXHQgICAgICBvczogJ0RhcndpbicsXG5cdCAgICAgIG9zX3ZlcnNpb246IF9vcy5tYXRjaCgvWzAtOS5dKy8pWzBdXG5cdCAgICB9O1xuXHQgIH0gZWxzZSB7XG5cdCAgICBpbmZvID0gZ2V0T2xkRmFzaGlvbk9zSW5mbyhVQSk7XG5cdCAgfVxuXHQgIHZhciBzY3IgPSBzY3JlZW4gfHwge307XG5cdCAgaW5mby5zY3JlZW5XaWR0aCA9IHNjci53aWR0aDtcblx0ICBpbmZvLnNjcmVlbkhlaWdodCA9IHNjci5oZWlnaHQ7XG5cdFxuXHQgIGlmIChuYXZpZ2F0b3IpIHtcblx0ICAgIGluZm8udXNlckFnZW50ID0gbmF2aWdhdG9yLnVzZXJBZ2VudCB8fCAnLSc7XG5cdCAgICBpbmZvLmxhbmd1YWdlID0gbmF2aWdhdG9yLmxhbmd1YWdlIHx8IG5hdmlnYXRvci51c2VyTGFuZ3VhZ2UgfHwgJy0nO1xuXHQgIH1cblx0ICByZXR1cm4gaW5mbztcblx0fTtcblxuXG4vKioqLyB9KSxcbi8qIDE0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIHByb2plY3QgLSBmaWxlcGF0aFxuXHQgKiDojrflj5bpobXpnaLkuIrnmoQgPG1ldGE+IOS4reS4jiBhcGx1cyDmiZPngrnnm7jlhbPnmoTlgLxcblx0ICpcblx0ICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuXHQgKlxuXHQgKiBBdXRob3JzOlxuXHQgKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG5cdCAqL1xuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcblx0ICByZXR1cm4ge1xuXHQgICAgLyoqXG5cdCAgICAgKiBAcGFyYW1zIHtPYmplY3R9IG9wdGlvbnMge1xuXHQgICAgICogICBsb2dDb25maWc6IHtsb2dDb25maWd9XG5cdCAgICAgKiB9XG5cdCAgICAgKi9cblx0ICAgIC8vIGluaXQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcblx0ICAgIC8vICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0ICAgIC8vIH0sXG5cdFxuXHQgICAgcnVuOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIF9fd2VicGFja19yZXF1aXJlX18oMTUpKHRoaXMub3B0aW9ucy5jb250ZXh0LmFwbHVzX2NvbmZpZyk7XG5cdCAgICB9XG5cdCAgfTtcblx0fTtcblxuXG4vKioqLyB9KSxcbi8qIDE1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIGFsaWxvZy9zIC0gc3JjL3BsdWdpbnMvbGliX2FwaS9tYWluLmpzXG5cdCAqIG1ldGHphY3nva7mj5Lku7bvvIzooqthcGnmj5Lku7bkvp3otZZcblx0ICpcblx0ICpcblx0ICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuXHQgKlxuXHQgKiBBdXRob3JzOlxuXHQgKiAgIFJpY2hhcmR86LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cblx0ICovXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdC8vIHZhciBhc3NpZ24gPSByZXF1aXJlKCdAdXRpbHMvYXNzaWduJyk7XG5cdHZhciB1dGlsR29sZGxvZyA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdHZhciB1dGlsVXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNik7XG5cdHZhciB1dGlsTmF0aXZlNEFwbHVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNyk7XG5cdHZhciB1dGlsTmFtZVN0b3JhZ2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KTtcblx0dmFyIG1ldGFJbmZvID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOSk7XG5cdFxuXHRmdW5jdGlvbiBnZXRDZG5QYXRoICgpIHtcblx0ICB2YXIgZG9jID0gZG9jdW1lbnQ7XG5cdCAgdmFyIHBhdGggPSAnLy9nLmFsaWNkbi5jb20nO1xuXHQgIGlmIChkb2MpIHtcblx0ICAgIHZhciBjdXJyZW50X25vZGUgPSBkb2MuZ2V0RWxlbWVudEJ5SWQoJ2JlYWNvbi1hcGx1cycpIHx8IGRvYy5nZXRFbGVtZW50QnlJZCgndGItYmVhY29uLWFwbHVzJyk7XG5cdCAgICB2YXIgcGF0aF9vdGhlcnMgPSBbJy8vYXNzZXRzLmFsaWNkbi5jb20vZycsICcvL2ctYXNzZXRzLmRhaWx5LnRhb2Jhby5uZXQnLCAnLy9hbGlkdC5vc3MtY24taGFuZ3pob3UuYWxpeXVuY3MuY29tJ107XG5cdCAgICBpZiAoY3VycmVudF9ub2RlKSB7XG5cdCAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aF9vdGhlcnMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICB2YXIgcmVnID0gbmV3IFJlZ0V4cChwYXRoX290aGVyc1tpXSk7XG5cdCAgICAgICAgaWYgKHJlZy50ZXN0KGN1cnJlbnRfbm9kZS5zcmMpKSB7XG5cdCAgICAgICAgICBwYXRoID0gcGF0aF9vdGhlcnNbaV07XG5cdCAgICAgICAgICBicmVhaztcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH0gIFxuXHQgIH1cblx0ICByZXR1cm4gcGF0aDtcblx0fVxuXHRcblx0dmFyIGNkblBhdGg7XG5cdC8vIOaYr+WQpuWbvemZheeOr+Wig1xuXHRmdW5jdGlvbiBpc0ludGVybmF0aW9uYWwgKCkge1xuXHQgIGlmICghY2RuUGF0aCkge1xuXHQgICAgY2RuUGF0aCA9IGdldENkblBhdGgoKTtcblx0ICB9XG5cdCAgdmFyIGlzSW50ID0gY2RuUGF0aCA9PT0gJy8vYXNzZXRzLmFsaWNkbi5jb20vZycgfHwgY2RuUGF0aCA9PT0gJy8vbGF6LWctY2RuLmFsaWNkbi5jb20nO1xuXHQgIHJldHVybiBpc0ludCB8fCBtZXRhSW5mby5nZXRNZXRhSW5mbygnYXBsdXMtZW52JykgPT09ICdpbnQnO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBpc01vYmlsZSAoKSB7XG5cdCAgaWYgKG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IudXNlckFnZW50KSB7XG5cdCAgICB2YXIgaXNQaG9uZSA9ICgvaXBob25lfGFuZHJvaWQvaSkudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblx0ICAgIHZhciBpc01vYmlsZSA9IGlzUGhvbmUgfHwgKC9UQlxcLVBEL2kpLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cdCAgICByZXR1cm4gaXNNb2JpbGU7XG5cdCAgfVxuXHQgIHJldHVybiB0cnVlO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBnZXRVdFBhcmFtRnJvbVVybCAoKSB7XG5cdCAgLy8gYXBsdXMuc2V0TWV0YUluZm8oJ2FwbHVzLXV0cGFyYW0nKTtcblx0ICB2YXIgcnM7XG5cdCAgdmFyIHV0cGFyYW1jbnQgPSB1dGlsVXJsLmdldFBhcmFtRnJvbVVybCgndXRwYXJhbWNudCcsIGxvY2F0aW9uLmhyZWYpO1xuXHQgIGlmICh1dHBhcmFtY250KSB7XG5cdCAgICB0cnkge1xuXHQgICAgICBycyA9IHV0cGFyYW1jbnQgPSBKU09OLnBhcnNlKGRlY29kZVVSSUNvbXBvbmVudCh1dHBhcmFtY250KSk7XG5cdCAgICB9IGNhdGNoIChlKSB7fVxuXHQgIH1cblx0ICByZXR1cm4gcnM7XG5cdH1cblx0XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFwbHVzX2NvbmZpZykge1xuXHQgIHZhciBhcGx1cyA9IHV0aWxHb2xkbG9nLmdldEdsb2JhbFZhbHVlKCdhcGx1cycpO1xuXHQgIHZhciBOQU1FX1NUT1JBR0VfS0VZUyA9IGFwbHVzX2NvbmZpZy5nbG9iYWxDb25maWcuTkFNRV9TVE9SQUdFX0tFWVM7XG5cdCAgdmFyIHJlZmVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMCkuZ2V0UmVmZXIoTkFNRV9TVE9SQUdFX0tFWVMpO1xuXHQgIC8vIGFwbHVzLmx2ZXIgPSBhcGx1c19jb25maWcuZ2xvYmFsQ29uZmlnLmx2ZXI7XG5cdCAgYXBsdXMubmFtZVN0b3JhZ2UgPSB1dGlsTmFtZVN0b3JhZ2UubmFtZVN0b3JhZ2U7IC8vIOWOhuWPsuWOn+WboO+8jOWcqCBhcGx1cyDkuIrmmrTpnLLlh7ogbmFtZVN0b3JhZ2Vcblx0ICB1dGlsTmF0aXZlNEFwbHVzLmhhdmVOYXRpdmVGbGFnSW5VQSgpO1xuXHQgIHZhciBfJCA9IChhcGx1cy5fJCA9IGFwbHVzLl8kIHx8IHt9KTsgLy8g5YaF6YOo5L2/55So55qE5Y+Y6YePXG5cdCAgXyQuaXNfdGVybWluYWwgPSBpc01vYmlsZSgpO1xuXHQgIF8kLnNlbmRfcHZfY291bnQgPSAwO1xuXHQgIF8kLnBhZ2VfcmVmZXJyZXIgPSByZWZlcjtcblx0ICBfJC5zcG0gPSB7XG5cdCAgICBkYXRhOiB7fSxcblx0ICAgIHBhZ2VfcmVmZXJyZXI6IHJlZmVyXG5cdCAgfTtcblx0ICBhcGx1cy5nbG9iYWxDb25maWcgPSBhcGx1c19jb25maWcuZ2xvYmFsQ29uZmlnO1xuXHQgIHZhciB1dHBhcmFtY250ID0gZ2V0VXRQYXJhbUZyb21VcmwoKTtcblx0XG5cdCAgXyQubWV0YV9pbmZvID0gbWV0YUluZm8ucUdldCgpIHx8IHt9O1xuXHQgIGZvciAodmFyIGsgaW4gYXBsdXNfY29uZmlnLm1ldGFJbmZvKSB7XG5cdCAgICBpZiAoIV8kLm1ldGFfaW5mby5oYXNPd25Qcm9wZXJ0eShrKSkge1xuXHQgICAgICB2YXIgbWV0YVZhbHVlID0gYXBsdXNfY29uZmlnLm1ldGFJbmZvW2tdO1xuXHQgICAgICBpZiAoayA9PT0gJ2FwbHVzLXV0cGFyYW0nKSB7XG5cdCAgICAgICAgLy8g6L+Z6YeM55So55So5oi35Zyo6aG16Z2i5LiK6YWN572u55qEYXBsdXMtdXRwYXJhbeWOu21lcmdlIHV0cGFyYW1jbnRcblx0ICAgICAgICB1dHBhcmFtY250ICYmIG1ldGFJbmZvLmFwcGVuZE1ldGFJbmZvKGssIHV0cGFyYW1jbnQpO1xuXHQgICAgICAgIG1ldGFJbmZvLmFwcGVuZE1ldGFJbmZvKGssIG1ldGFWYWx1ZSk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgbWV0YUluZm8uc2V0TWV0YUluZm8oaywgbWV0YVZhbHVlKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH1cblx0ICBcblx0XG5cdCAgYXBsdXMuXyQgPSBfJDtcblx0ICBhcGx1cy5pc0ludGVybmF0aW9uYWwgPSBpc0ludGVybmF0aW9uYWw7XG5cdCAgYXBsdXMuZ2V0Q2RuUGF0aCA9IGdldENkblBhdGg7XG5cdH07XG5cblxuLyoqKi8gfSksXG4vKiAxNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdC8vIC8qKlxuXHQvLyAgKiDku44gdXJsIOS4reWPluWHuuWvueW6lOeahCBzcG0g5Y+C5pWwXG5cdC8vICAqIEBwYXJhbSB1cmwge1N0cmluZ31cblx0Ly8gICogQHJldHVybiB7U3RyaW5nfSBzcG0gYS5iLmMuZC5wdmlk77yM5LiA5YWx5LqU5L2NXG5cdC8vICAqL1xuXHQvLyBmdW5jdGlvbiBnZXRTUE1Gcm9tVXJsKHVybCkge1xuXHQvLyAgIHZhciBtID0gdXJsLm1hdGNoKG5ldyBSZWdFeHAoJ1xcXFw/LipzcG09KFtcXFxcd1xcXFwuXFxcXC1cXFxcKi9dKyknKSk7XG5cdC8vICAgdmFyIHNwbTtcblx0Ly8gICByZXR1cm4gKG0gJiYgKHNwbSA9IG1bMV0pICYmIHNwbS5zcGxpdCgnLicpLmxlbmd0aCA9PSA1KSA/IHNwbSA6IG51bGw7XG5cdC8vIH1cblx0Ly8gZXhwb3J0cy5nZXRTUE1Gcm9tVXJsID0gZ2V0U1BNRnJvbVVybDtcblx0XG5cdC8qKlxuXHQgKiBAYXV0aG9yIGppemhhLnd5aiAob2xkailcblx0ICogQGJsb2cgaHR0cDovL29sZGoubmV0XG5cdCAqL1xuXHRcblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0ZnVuY3Rpb24gZ2V0UGFyYW1Gcm9tVXJsKGtleSwgdXJsKSB7XG5cdCAgaWYgKGtleSAmJiB1cmwpIHtcblx0ICAgIHZhciBwYXJhbSA9ICcnO1xuXHQgICAgdmFyIG07XG5cdCAgICB0cnkge1xuXHQgICAgICB2YXIgcmVnMSA9IG5ldyBSZWdFeHAoa2V5ICsgJz0oW14mfCN8P3xcXC9dKyknKTtcblx0ICAgICAgaWYgKGtleSA9PT0gJ3NwbScgfHwga2V5ID09PSAnc2NtJykge1xuXHQgICAgICAgIHZhciByZWcyID0gbmV3IFJlZ0V4cCgnXFxcXD8uKicgKyBrZXkgKyAnPShbXFxcXHdcXFxcLlxcXFwtXFxcXCovXSspJyk7XG5cdCAgICAgICAgdmFyIHRtcF8xID0gdXJsLm1hdGNoKHJlZzEpO1xuXHQgICAgICAgIHZhciB0bXBfMiA9IHVybC5tYXRjaChyZWcyKTtcblx0ICAgICAgICB2YXIgcGFyYW1fMSA9IHRtcF8xICYmIHRtcF8xLmxlbmd0aCA9PT0gMiA/IHRtcF8xWzFdIDogJyc7XG5cdCAgICAgICAgdmFyIHBhcmFtXzIgPSB0bXBfMiAmJiB0bXBfMi5sZW5ndGggPT09IDIgPyB0bXBfMlsxXSA6ICcnO1xuXHQgICAgICAgIHBhcmFtID0gcGFyYW1fMSA+IHBhcmFtXzIgPyBwYXJhbV8xIDogcGFyYW1fMjtcblx0ICAgICAgICBwYXJhbSA9IGRlY29kZVVSSUNvbXBvbmVudChwYXJhbSk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgbSA9IHVybC5tYXRjaChyZWcxKTtcblx0ICAgICAgICBwYXJhbSA9IG0gJiYgbS5sZW5ndGggPT09IDIgPyBtWzFdIDogJyc7XG5cdCAgICAgIH1cblx0ICAgIH0gY2F0Y2ggKGVycikge1xuXHQgICAgICAvLyBUT0RPXG5cdCAgICB9IGZpbmFsbHkge1xuXHQgICAgICByZXR1cm4gcGFyYW07XG5cdCAgICB9XG5cdCAgfSBlbHNlIHtcblx0ICAgIHJldHVybiAnJztcblx0ICB9XG5cdH07XG5cdGV4cG9ydHMuZ2V0UGFyYW1Gcm9tVXJsID0gZ2V0UGFyYW1Gcm9tVXJsO1xuXHRcblx0LyoqXG5cdCAqIOS7jiB1cmwg5Lit5Y+W5Ye65a+55bqU55qEIHNwbSDlj4LmlbBcblx0ICog5LyY5bqT5Zyf6LGGc3BtQ+S9jeWPr+iDveWtmOWcqOeJueauiuWtl+espu+8jOWmgu+8muKAnHNwbT0wLjAuaXRlbV9YTVRZNE9URXlOVEEwTUE9PS5BLkJpaU5TMeKAnVxuXHQgKiBAcGFyYW0gdXJsIHtTdHJpbmd9XG5cdCAqIEByZXR1cm4ge1N0cmluZ30gc3BtIGEuYi5jLmQucHZpZO+8jOS4gOWFseS6lOS9jVxuXHQgKi9cblx0ZXhwb3J0cy5nZXRTUE1Gcm9tVXJsID0gZnVuY3Rpb24odXJsKSB7XG5cdCAgcmV0dXJuIGdldFBhcmFtRnJvbVVybCgnc3BtJywgdXJsKTtcblx0fTtcblxuXG4vKioqLyB9KSxcbi8qIDE3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIHByb2plY3QgLSBmaWxlcGF0aFxuXHQgKiBkZXNjcmlwdGlvblxuXHQgKlxuXHQgKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG5cdCAqXG5cdCAqIEF1dGhvcnM6XG5cdCAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cblx0ICovXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciB1dGlsR29sZGxvZyA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdFxuXHR2YXIgVVRGTEFHID0gJ1VUNEFwbHVzJztcblx0dmFyIFVNRkxBRyA9ICdVbWVuZzRBcGx1cyc7XG5cdFxuXHRleHBvcnRzLmlzTmF0aXZlNEFwbHVzID0gZnVuY3Rpb24gKCkge1xuXHQgIHZhciBhcGx1cyA9IHV0aWxHb2xkbG9nLmdldEdsb2JhbFZhbHVlKCdhcGx1cycpO1xuXHQgIHZhciBjaGFubmVsID0gYXBsdXMuZ2V0TWV0YUluZm8oJ2FwbHVzLXRvVVQnKTtcblx0ICB2YXIgYnJpZGdlTmFtZSA9IGFwbHVzLmFwbHVzQnJpZGdlTmFtZTtcblx0ICByZXR1cm4gKGJyaWRnZU5hbWUgPT09IFVURkxBRyAmJiBjaGFubmVsID09PSBVVEZMQUcpIHx8IGJyaWRnZU5hbWUgPT09IFVNRkxBRztcblx0fTtcblx0XG5cdGV4cG9ydHMuaGF2ZU5hdGl2ZUZsYWdJblVBID0gZnVuY3Rpb24gKCkge1xuXHQgIHZhciBhcGx1cyA9IHV0aWxHb2xkbG9nLmdldEdsb2JhbFZhbHVlKCdhcGx1cycpO1xuXHQgIHZhciBicmlkZ2VOYW1lID0gYXBsdXMuYXBsdXNCcmlkZ2VOYW1lO1xuXHQgIC8vIOW9k2JyaWRnZU5hbWXkuLrnqbrlgLzml7bmiY3ov5vooYzku6XkuIvnmoTliKTmlq3lkozlpITnkIbpgLvovpHvvIzku6Xmj5DljYflpJrmrKHov5DooYznmoTmgKfog71cblx0ICBpZiAoIWJyaWRnZU5hbWUgJiYgdHlwZW9mIGJyaWRnZU5hbWUgIT09ICdib29sZWFuJyAmJiBuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCkge1xuXHQgICAgdmFyIHJlZyA9IG5ldyBSZWdFeHAoW1VURkxBRywgVU1GTEFHXS5qb2luKCd8JyksICdpJyk7XG5cdCAgICB2YXIgbWF0Y2hSZXN1bHQgPSBuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKHJlZyk7XG5cdCAgICBicmlkZ2VOYW1lID0gbWF0Y2hSZXN1bHQgPyBtYXRjaFJlc3VsdFswXSA6IGZhbHNlO1xuXHQgICAgYXBsdXMuYXBsdXNCcmlkZ2VOYW1lID0gYnJpZGdlTmFtZTtcblx0ICB9XG5cdCAgcmV0dXJuICEhYnJpZGdlTmFtZTtcblx0fTtcblxuXG4vKioqLyB9KSxcbi8qIDE4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIHByb2plY3QgLSBmaWxlcGF0aFxuXHQgKiBkZXNjcmlwdGlvblxuXHQgKlxuXHQgKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG5cdCAqXG5cdCAqIEF1dGhvcnM6XG5cdCAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cblx0ICovXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciB1dGlsR29sZGxvZyA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdFxuXHQvKipcblx0ICogbmFtZVN0b3JhZ2Ug55qE5a6e546w5ou36LSdXG5cdCAqXG5cdCAqIGh0dHA6Ly9naXRsYWIuYWxpYmFiYS1pbmMuY29tL2NvZGV2L25hbWUtc3RvcmFnZS90cmVlL21hc3RlclxuXHQgKi9cblx0dmFyIG5hbWVTdG9yYWdlID0gKGZ1bmN0aW9uICgpIHtcblx0XG5cdCAgdmFyIF9uYW1lU3RvcmFnZSA9IHV0aWxHb2xkbG9nLmdldEdsb2JhbFZhbHVlKCduYW1lU3RvcmFnZScpO1xuXHRcblx0ICBpZiAoX25hbWVTdG9yYWdlKSB7XG5cdCAgICByZXR1cm4gX25hbWVTdG9yYWdlO1xuXHQgIH1cblx0XG5cdCAgdmFyIFNDSEVNRSA9IFwibmFtZVN0b3JhZ2U6XCI7XG5cdCAgLy92YXIgUkVfTkFNRVMgPSAvXm5hbWVTdG9yYWdlOihbXj9dKikoPzpcXD8oPzooW149XSspPShbXiZdKikpKik/L2c7XG5cdCAgdmFyIFJFX1BBSVIgPSAvXihbXj1dKykoPzo9KC4qKSk/JC87XG5cdCAgdmFyIFEgPSBcIj9cIjtcblx0ICB2YXIgRVEgPSBcIj1cIjtcblx0ICB2YXIgQU5EID0gXCImXCI7XG5cdFxuXHQgIHZhciBlbmNvZGUgPSBlbmNvZGVVUklDb21wb25lbnQ7XG5cdCAgdmFyIGRlY29kZSA9IGRlY29kZVVSSUNvbXBvbmVudDtcblx0XG5cdCAgdmFyIFNUT1JBR0UgPSB7fTtcblx0ICB2YXIgT1JJR0lOX05BTUU7XG5cdFxuXHQgIHZhciBuYW1lU3RvcmFnZSA9IHt9O1xuXHRcblx0ICAvLyDop6PmnpDlubbliJ3lp4vljJYgbmFtZSDmlbDmja7jgIJcblx0ICAvLyDmoIflh4bnmoQgbmFtZVN0b3JhZ2Ug5pWw5o2u5qC85byP5Li6IGBuYW1lU3RvcmFnZTpvcmlnaW4tbmFtZT9rZXk9dmFsdWVgXG5cdCAgLy8gQHBhcmFtIHtTdHJpbmd9IG5hbWUuXG5cdCAgKGZ1bmN0aW9uIHBhcnNlKG5hbWUpIHtcblx0XG5cdCAgICBpZiAobmFtZSAmJiBuYW1lLmluZGV4T2YoU0NIRU1FKSA9PT0gMCkge1xuXHRcblx0ICAgICAgdmFyIG1hdGNoID0gbmFtZS5zcGxpdCgvWzo/XS8pO1xuXHRcblx0ICAgICAgbWF0Y2guc2hpZnQoKTsgLy8gc2NoZW1lOiBtYXRjaFswXTtcblx0ICAgICAgT1JJR0lOX05BTUUgPSBkZWNvZGUobWF0Y2guc2hpZnQoKSkgfHwgXCJcIjsgLy8gbWF0Y2hbMV1cblx0XG5cdCAgICAgIHZhciBwYXJhbXMgPSBtYXRjaC5qb2luKFwiXCIpOyAvLyBtYXRjaFsyLC4uLl1cblx0XG5cdCAgICAgIHZhciBwYWlycyA9IHBhcmFtcy5zcGxpdChBTkQpO1xuXHQgICAgICBmb3IgKHZhciBpID0gMCwgcGFpciwga2V5LCB2YWx1ZSwgbCA9IHBhaXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHQgICAgICAgIHBhaXIgPSBwYWlyc1tpXS5tYXRjaChSRV9QQUlSKTtcblx0ICAgICAgICBpZiAoIXBhaXIgfHwgIXBhaXJbMV0pIHtcblx0ICAgICAgICAgIGNvbnRpbnVlO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAga2V5ID0gZGVjb2RlKHBhaXJbMV0pO1xuXHQgICAgICAgIHZhbHVlID0gZGVjb2RlKHBhaXJbMl0pIHx8IFwiXCI7XG5cdFxuXHQgICAgICAgIFNUT1JBR0Vba2V5XSA9IHZhbHVlO1xuXHQgICAgICB9XG5cdFxuXHQgICAgfSBlbHNlIHtcblx0XG5cdCAgICAgIE9SSUdJTl9OQU1FID0gbmFtZSB8fCBcIlwiO1xuXHRcblx0ICAgIH1cblx0XG5cdCAgfSkod2luZG93Lm5hbWUpO1xuXHRcblx0ICAvLyDlhpnlhaXmlbDmja7jgIJcblx0ICAvLyBAcGFyYW0ge1N0cmluZ30ga2V5LCDplK7lkI3jgIJcblx0ICAvLyBAcGFyYW0ge1N0cmluZ30gdmFsdWUsIOmUruWAvOOAglxuXHQgIG5hbWVTdG9yYWdlLnNldEl0ZW0gPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuXHQgICAgaWYgKCFrZXkgfHwgXCJ1bmRlZmluZWRcIiA9PT0gdHlwZW9mIHZhbHVlKSB7XG5cdCAgICAgIHJldHVybjtcblx0ICAgIH1cblx0ICAgIFNUT1JBR0Vba2V5XSA9IFN0cmluZyh2YWx1ZSk7XG5cdCAgICBzYXZlKCk7XG5cdCAgfTtcblx0XG5cdCAgLy8g6K+75Y+W5pWw5o2u44CCXG5cdCAgLy8gQHBhcmFtIHtTdHJpbmd9IGtleSwg6ZSu5ZCN44CCXG5cdCAgLy8gQHJldHVybiB7U3RyaW5nfSDplK7lgLzjgILlpoLmnpzkuI3lrZjlnKjvvIzliJnov5Tlm54gYG51bGxg44CCXG5cdCAgbmFtZVN0b3JhZ2UuZ2V0SXRlbSA9IGZ1bmN0aW9uIChrZXkpIHtcblx0ICAgIHJldHVybiBTVE9SQUdFLmhhc093blByb3BlcnR5KGtleSkgPyBTVE9SQUdFW2tleV0gOiBudWxsO1xuXHQgIH07XG5cdFxuXHQgIC8vIOenu+mZpOaVsOaNruOAglxuXHQgIC8vIEBwYXJhbSB7U3RyaW5nfSBrZXksIOmUruWQjeOAglxuXHQgIG5hbWVTdG9yYWdlLnJlbW92ZUl0ZW0gPSBmdW5jdGlvbiAoa2V5KSB7XG5cdCAgICBpZiAoIVNUT1JBR0UuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuXHQgICAgICByZXR1cm47XG5cdCAgICB9XG5cdCAgICBTVE9SQUdFW2tleV0gPSBudWxsO1xuXHQgICAgZGVsZXRlIFNUT1JBR0Vba2V5XTtcblx0ICAgIHNhdmUoKTtcblx0ICB9O1xuXHRcblx0ICAvLyDmuIXnqbogbmFtZVN0b3JhZ2XjgIJcblx0ICBuYW1lU3RvcmFnZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIFNUT1JBR0UgPSB7fTtcblx0ICAgIHNhdmUoKTtcblx0ICB9O1xuXHRcblx0ICBuYW1lU3RvcmFnZS52YWx1ZU9mID0gZnVuY3Rpb24gKCkge1xuXHQgICAgcmV0dXJuIFNUT1JBR0U7XG5cdCAgfTtcblx0XG5cdCAgbmFtZVN0b3JhZ2UudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICB2YXIgbmFtZSA9IHdpbmRvdy5uYW1lO1xuXHQgICAgcmV0dXJuIG5hbWUuaW5kZXhPZihTQ0hFTUUpID09PSAwID8gbmFtZSA6IFNDSEVNRSArIG5hbWU7XG5cdCAgfTtcblx0XG5cdCAgLy8g5L+d5a2Y5pWw5o2u5YiwIHdpbmRvdy5uYW1lXG5cdCAgLy8g5aaC5p6c5rKh5pyJ5a2Y5YKo5pWw5o2u77yM5YiZ5oGi5aSN5Y6f5aeL56qX5Y+j5ZCN56ewKHdpbmRvdy5uYW1lKeOAglxuXHQgIGZ1bmN0aW9uIHNhdmUoKSB7XG5cdCAgICB2YXIgcGFpcnMgPSBbXTtcblx0ICAgIHZhciBlbXB0eSA9IHRydWU7XG5cdCAgICB2YXIgdmFsdWU7XG5cdFxuXHQgICAgZm9yICh2YXIga2V5IGluIFNUT1JBR0UpIHtcblx0ICAgICAgaWYgKFNUT1JBR0UuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuXHQgICAgICAgIGVtcHR5ID0gZmFsc2U7XG5cdCAgICAgICAgdmFsdWUgPSBTVE9SQUdFW2tleV0gfHwgXCJcIjtcblx0ICAgICAgICBwYWlycy5wdXNoKGVuY29kZShrZXkpICsgRVEgKyBlbmNvZGUodmFsdWUpKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHRcblx0ICAgIHdpbmRvdy5uYW1lID0gZW1wdHkgPyBPUklHSU5fTkFNRSA6IFNDSEVNRSArIGVuY29kZShPUklHSU5fTkFNRSkgKyBRICsgcGFpcnMuam9pbihBTkQpO1xuXHQgIH07XG5cdFxuXHQgIC8vIGFkZEV2ZW50TGlzdGVyIGltcGxlbWVudGF0aW9uXG5cdCAgLy8gQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudC5cblx0ICAvLyBAcGFyYW0ge1N0cmluZ30gZXZlbnROYW1lLlxuXHQgIC8vIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIuXG5cdCAgZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihlbGVtZW50LCBldmVudE5hbWUsIGhhbmRsZXIpIHtcblx0ICAgIGlmICghZWxlbWVudCkge1xuXHQgICAgICByZXR1cm47XG5cdCAgICB9XG5cdFxuXHQgICAgaWYgKGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcikge1xuXHQgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyLCBmYWxzZSk7XG5cdCAgICB9IGVsc2UgaWYgKGVsZW1lbnQuYXR0YWNoRXZlbnQpIHtcblx0ICAgICAgZWxlbWVudC5hdHRhY2hFdmVudCgnb24nICsgZXZlbnROYW1lLCBmdW5jdGlvbiAoZXZ0KSB7XG5cdCAgICAgICAgaGFuZGxlci5jYWxsKGVsZW1lbnQsIGV2dCk7XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgIH07XG5cdFxuXHQgIC8vIFNhdmUgdGhlIGxhc3QgZGF0YSBmb3IgdGhlIG5leHQgcGFnZS5cblx0ICBhZGRFdmVudExpc3RlbmVyKHdpbmRvdywgJ2JlZm9yZXVubG9hZCcsIGZ1bmN0aW9uICgpIHtcblx0ICAgIHNhdmUoKTtcblx0ICB9KTtcblx0XG5cdCAgcmV0dXJuIG5hbWVTdG9yYWdlO1xuXHRcblx0fSkoKTtcblx0XG5cdGV4cG9ydHMubmFtZVN0b3JhZ2UgPSBuYW1lU3RvcmFnZTtcblxuXG4vKioqLyB9KSxcbi8qIDE5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIHByb2plY3QgLSBmaWxlcGF0aFxuXHQgKiDojrflj5bpobXpnaLkuIrnmoQgPG1ldGE+IOS4reS4jiBhcGx1cyDmiZPngrnnm7jlhbPnmoTlgLxcblx0ICog6Zi/6YeM57O75Lia5Yqh6LWw6L+Z5Liq6YC76L6RXG5cdCAqXG5cdCAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cblx0ICpcblx0ICogQXV0aG9yczpcblx0ICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuXHQgKi9cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIGZvcm1hdCA9IF9fd2VicGFja19yZXF1aXJlX18oMjApO1xuXHR2YXIgdXRpbERhc2ggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxKTtcblx0dmFyIHV0aWxEYXRhID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMyk7XG5cdHZhciB1dGlsTG9nZ2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNik7XG5cdHZhciBlYWNoID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNyk7XG5cdHZhciB1dGlsQXR0cmlidXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOCk7XG5cdHZhciB1dGlsTWV0YSA9IF9fd2VicGFja19yZXF1aXJlX18oMjkpO1xuXHQvLyB2YXIgdXRpbEV4aW5mbyA9IHJlcXVpcmUoJ0B1dGlscy91dGlsRXhpbmZvJyk7XG5cdFxuXHR2YXIgaW5mbyA9IHt9O1xuXHR2YXIgQVBMVVNfWF9TRVRUSU5HUyA9ICdhcGx1cy14LXNldHRpbmdzJztcblx0dmFyIHByaW9yaXR5TWV0YUluZm87XG5cdFxuXHQvLyDliKDpmaTlpKfph4/nmoRBcnJyYXnvvIzkv53nlZnljoblj7LkuI3op4TojIPnmoRtZXRhTmFtZSAyMDE4LTAxLTEwIEDosIvlo6tcblx0Ly8g6K+m6KeBIGh0dHBzOi8vbGFyay5hbGlwYXkuY29tL2FwbHVzanMvZG9jcy9scHl2Y21cblx0dmFyIGtleXMgPSBbJ2Fob3QtYXBsdXMnLCAnaXNvbmVwYWdlJywgJ3NwbS1pZCcsICdkYXRhLXNwbScsICdtaWNyb3Njb3BlLWRhdGEnXTtcblx0XG5cdC8qKlxuXHQgKiDlj5blvpcgaGVhZCAvIG1ldGEg5Lit55qE5pi+5b6u6ZWc55qE5pWw5o2u77yMXG5cdCAqIOW9ouWmgu+8mlxuXHQgKiA8bWV0YSBuYW1lPVwibWljcm9zY29wZS1kYXRhXCIgY29udGVudD1cInBhZ2VJZD0xMjM7IHNpdGVJZD00NTZcIj5cblx0ICog5Y+v6IO95pyJ5aSa5p2hIG1ldGEg5pWw5o2u44CCXG5cdCAqXG5cdCAqIOebuOWFs+agvOW8j+WPiuivtOaYjuinge+8mlxuXHQgKiBodHRwOi8vd2lraS51ZWQudGFvYmFvLm5ldC9kb2t1LnBocD9pZD10ZWFtOnVkYzpmMmU6d2VidHJhY2VyOmRldi1kb2NzOmV4dHJhLWRhdGFcblx0ICovXG5cdGZ1bmN0aW9uIGdldE1ldGFNaWNyb3Njb3BlRGF0YSAobWV0YV9ub2Rlcykge1xuXHQgIHZhciBpO1xuXHQgIHZhciBtZXRhO1xuXHQgIHZhciBsID0gbWV0YV9ub2Rlcy5sZW5ndGg7XG5cdCAgdmFyIGNvbnRlbnQ7XG5cdCAgdmFyIF9taWNyb3Njb3BlX2RhdGEgPSB7fTtcblx0ICBpbmZvLl9taWNyb3Njb3BlX2RhdGEgPSBfbWljcm9zY29wZV9kYXRhO1xuXHRcblx0ICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG5cdCAgICBtZXRhID0gbWV0YV9ub2Rlc1tpXTtcblx0ICAgIGlmICh1dGlsQXR0cmlidXRlLnRyeVRvR2V0QXR0cmlidXRlKG1ldGEsICduYW1lJykgPT09ICdtaWNyb3Njb3BlLWRhdGEnKSB7XG5cdCAgICAgIGNvbnRlbnQgPSB1dGlsQXR0cmlidXRlLnRyeVRvR2V0QXR0cmlidXRlKG1ldGEsICdjb250ZW50Jyk7XG5cdCAgICAgIHV0aWxEYXRhLnBhcnNlU2VtaWNvbG9uQ29udGVudChjb250ZW50LCBfbWljcm9zY29wZV9kYXRhKTtcblx0ICAgICAgaW5mby5pc19oZWFkX2hhc19tZXRhX21pY3Jvc2NvcGVfZGF0YSA9IHRydWU7XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICBpbmZvLl9taWNyb3Njb3BlX2RhdGFfcGFyYW1zID0gZm9ybWF0Lm9iajJwYXJhbShfbWljcm9zY29wZV9kYXRhKTtcblx0XG5cdCAgaW5mby5tc19kYXRhX3BhZ2VfaWQgPSBfbWljcm9zY29wZV9kYXRhWydwYWdlSWQnXTtcblx0ICBpbmZvLm1zX2RhdGFfc2hvcF9pZCA9IF9taWNyb3Njb3BlX2RhdGFbJ3Nob3BJZCddO1xuXHQgIGluZm8ubXNfZGF0YV9pbnN0YW5jZV9pZCA9IF9taWNyb3Njb3BlX2RhdGFbJ3NpdGVJbnN0YW5jZUlkJ107XG5cdCAgaW5mby5tc19kYXRhX3NpdGVDYXRlZ29yeUlkID0gX21pY3Jvc2NvcGVfZGF0YVsnc2l0ZUNhdGVnb3J5J107XG5cdCAgaW5mby5tc19wcm90b3R5cGVfaWQgPSBfbWljcm9zY29wZV9kYXRhWydwcm90b3R5cGVJZCddO1xuXHQgIGluZm8uc2l0ZV9pbnN0YW5jZV9pZF9vcl9zaG9wX2lkID0gaW5mby5tc19kYXRhX2luc3RhbmNlX2lkIHx8IGluZm8ubXNfZGF0YV9zaG9wX2lkO1xuXHRcblx0ICAvLyDnp7vpmaTkuoYgYXRwLWJlYWNvbiDlip/og73vvIzmmoLml7bkv53nlZnlhaXlj6MgQOiwi+WjqyAyMDE4LTAxLTEwXG5cdCAgaW5mby5fYXRwX2JlYWNvbl9kYXRhID0ge307XG5cdCAgaW5mby5fYXRwX2JlYWNvbl9kYXRhX3BhcmFtcyA9ICcnO1xuXHR9O1xuXHRcblx0LyoqXG5cdCAqIDxtZXRhIG5hbWU9XCJkYXRhLXNwbVwiIGNvbnRlbnQ9XCIxXCIgZGF0YS1zcG0tcHJvdG9jb2w9XCJpXCIgLz5cblx0ICpcblx0ICog5Y+W5b6XIGRhdGEtc3BtIOi/meS4qiBtZXRhIOS4iueahCBkYXRhLXNwbS1wcm90b2NvbCDnmoTlgLxcblx0ICog5aaC5p6c5pyJ6K6+572u5LiU5YC85Li6ICdpJ++8iOS9v+eUqCBpbWcg5Y2P6K6u77yJ77yM5YiZ6aG16Z2i5LiK5omA5pyJ55qEIDxhPi88YXJlYT4g6ZO+5o6l6KKr54K55Ye75pe26YO95LiN5re75YqgIHNwbSDlj4LmlbDvvIzogIzmmK9cblx0ICog5Y+R6YCB5LiA5LiqIG5ldyBJbWFnZSgpIOivt+axglxuXHQgKi9cblx0ZnVuY3Rpb24gZ2V0U1BNUHJvdG9jb2xGcm9tTWV0YSAobWV0YV9ub2Rlcykge1xuXHQgIHZhciBtZXRhX3NwbV9wcm90b2NvbDtcblx0ICB2YXIgZ2V0TWV0YUJ5RGF0YXNwbSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIHZhciBfbWV0YTtcblx0ICAgIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKSB7XG5cdCAgICAgIF9tZXRhID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbWV0YVtuYW1lPWRhdGEtc3BtXScpO1xuXHQgICAgfVxuXHQgICAgZWFjaChtZXRhX25vZGVzLCBmdW5jdGlvbiAobSkge1xuXHQgICAgICBpZiAodXRpbEF0dHJpYnV0ZS50cnlUb0dldEF0dHJpYnV0ZShtLCAnbmFtZScpID09PSAnZGF0YS1zcG0nKSB7XG5cdCAgICAgICAgX21ldGEgPSBtO1xuXHQgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIHJldHVybiBfbWV0YTtcblx0ICB9O1xuXHQgIHZhciBtZXRhID0gZ2V0TWV0YUJ5RGF0YXNwbSgpO1xuXHQgIGlmIChtZXRhKSB7XG5cdCAgICBtZXRhX3NwbV9wcm90b2NvbCA9IHV0aWxBdHRyaWJ1dGUudHJ5VG9HZXRBdHRyaWJ1dGUobWV0YSwgJ2RhdGEtc3BtLXByb3RvY29sJyk7XG5cdCAgfVxuXHQgIHJldHVybiBtZXRhX3NwbV9wcm90b2NvbDtcblx0fTtcblx0XG5cdGZ1bmN0aW9uIHBhcnNlT25lUGFnZShpbmZvKSB7XG5cdCAgdmFyIGNvbnRlbnQgPSBpbmZvLmlzb25lcGFnZSB8fCAnLTEnO1xuXHQgIHZhciBhcnJfY29udGVudCA9IGNvbnRlbnQuc3BsaXQoJ3wnKTtcblx0ICB2YXIgaXNvbmVwYWdlID0gYXJyX2NvbnRlbnRbMF07XG5cdCAgdmFyIHVybHBhZ2VuYW1lID0gYXJyX2NvbnRlbnRbMV0gPyBhcnJfY29udGVudFsxXSA6ICcnO1xuXHRcblx0ICBpbmZvLmlzb25lcGFnZV9kYXRhID0ge1xuXHQgICAgaXNvbmVwYWdlOiBpc29uZXBhZ2UsXG5cdCAgICB1cmxwYWdlbmFtZTogdXJscGFnZW5hbWVcblx0ICB9O1xuXHR9O1xuXHRcblx0LyoqXG5cdCAqIEByZXR1cm5zIHt7fX1cblx0ICovXG5cdHZhciBsYXN0X2luZm87XG5cdGZ1bmN0aW9uIGdldEluZm8oKSB7XG5cdCAgaWYgKGRvY3VtZW50KSB7XG5cdCAgICB2YXIgbWV0YV9ub2RlcyA9IHV0aWxNZXRhLmdldE1ldGFUYWdzKCk7XG5cdCAgICBnZXRNZXRhTWljcm9zY29wZURhdGEobWV0YV9ub2Rlcyk7XG5cdFxuXHQgICAgLy8gc3RlcDHjgIHmi7/liLDmiYDmnIlhcGx1c+WFs+mUruivjeW8gOWktOeahG1ldGFWYWx1ZVxuXHQgICAgZWFjaChtZXRhX25vZGVzLCBmdW5jdGlvbihtKXtcblx0ICAgICAgdmFyIG1ldGFOYW1lID0gdXRpbEF0dHJpYnV0ZS50cnlUb0dldEF0dHJpYnV0ZShtLCAnbmFtZScpO1xuXHQgICAgICBpZiAoL15hcGx1cy8udGVzdChtZXRhTmFtZSkpIHtcblx0ICAgICAgICBpbmZvW21ldGFOYW1lXSA9IHV0aWxNZXRhLmdldE1ldGFDbnQobWV0YU5hbWUpO1xuXHQgICAgICAgIGlmIChtZXRhTmFtZSA9PT0gQVBMVVNfWF9TRVRUSU5HUykge1xuXHQgICAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgcHJpb3JpdHlNZXRhSW5mbyA9IGluZm9bbWV0YU5hbWVdID0gSlNPTi5wYXJzZSh1dGlsTWV0YS5nZXRNZXRhQ250KG1ldGFOYW1lKSk7XG5cdCAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvLyBzdGVwMuOAgeaLv+WIsOmZpOS6hmFwbHVz5YWz6ZSu6K+N5byA5aS055qE77yM5Y6G5Y+y5pq06Zyy55qE5o6l5Y+jbWV0YVZhbHVlXG5cdCAgICBlYWNoKGtleXMsIGZ1bmN0aW9uIChrKSB7XG5cdCAgICAgIGluZm9ba10gPSB1dGlsTWV0YS5nZXRNZXRhQ250KGspO1xuXHQgICAgfSk7XG5cdFxuXHQgICAgaW5mby5zcG1fcHJvdG9jb2wgPSBnZXRTUE1Qcm90b2NvbEZyb21NZXRhKG1ldGFfbm9kZXMpO1xuXHQgICAgaWYgKHByaW9yaXR5TWV0YUluZm8pIHtcblx0ICAgICAgaW5mbyA9IHV0aWxEYXNoLmFzc2lnbihpbmZvLCBwcmlvcml0eU1ldGFJbmZvKTtcblx0ICAgIH1cblx0XG5cdCAgICAvLyBzdGVwM+OAgea1rueCueaVsOeJueauiuWkhOeQhlxuXHQgICAgdmFyIGZsb2F0X2tleXMgPSBbJ2FwbHVzLXJhdGUtYWhvdCddO1xuXHQgICAgdmFyIGk7XG5cdCAgICB2YXIgaztcblx0ICAgIHZhciBsID0gZmxvYXRfa2V5cy5sZW5ndGg7XG5cdCAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSArKykge1xuXHQgICAgICBrID0gZmxvYXRfa2V5c1tpXTtcblx0ICAgICAgaW5mb1trXSA9IHBhcnNlRmxvYXQoaW5mb1trXSk7XG5cdCAgICB9XG5cdFxuXHQgICAgcGFyc2VPbmVQYWdlKGluZm8pO1xuXHQgIH1cblx0ICBsYXN0X2luZm8gPSBpbmZvIHx8IHt9O1xuXHQgIHJldHVybiBpbmZvO1xuXHR9O1xuXHRleHBvcnRzLmdldEluZm8gPSBnZXRJbmZvO1xuXHRcblx0Ly8g5aaC5p6c5pyJ57yT5a2Y77yM5L2/55So57yT5a2Y55qE5YC877yM5rKh5pyJ57yT5a2Y5YiZ5LuOIERPTSDkuK3or7vlj5Zcblx0ZXhwb3J0cy5xR2V0ID0gZnVuY3Rpb24gKCkge1xuXHQgIHJldHVybiBsYXN0X2luZm8gfHwgZ2V0SW5mbygpO1xuXHR9O1xuXHRcblx0ZnVuY3Rpb24gbG9nZ2VyUHJpb3JpdHlJbmZvIChrKSB7XG5cdCAgdXRpbExvZ2dlci5sb2dnZXIoe1xuXHQgICAgbXNnOiAncGxlYXNlIGRvIG5vdCByZXBlYXQgc2V0UHJpb3JpdHlNZXRhSW5mbyAnICsga1xuXHQgIH0pO1xuXHR9XG5cdFxuXHQvKipcblx0ICog5Yqo5oCB6YWN572ubWV0YVxuXHQgKiDlrrnplJnmoKHpqoznp7vmpI3liLBhcGx1c+WPr+inhuWMluWfi+eCuemqjOivgeW3peWFt+WGhSAyMDE4LTAxLTEwIEDosIvlo6tcblx0ICog6K+m6KeB77yaaHR0cHM6Ly9sYXJrLmFsaXBheS5jb20vYXBsdXNqcy9wcm9qZWN0L3BlcmZvcm1hbmNlXG5cdCAqXG5cdCAqIEBwYXJhbXMge1N0cmluZ30ga1xuXHQgKiBAcGFyYW1zIHtPYmplY3R9IHZcblx0ICogQHBhcmFtcyB7T2JqZWN0fSBvcHRzIHsgcHJpb3JpdHk6IDEgfSB8fCBudWxsXG5cdCAqL1xuXHRleHBvcnRzLnNldE1ldGFJbmZvID0gZnVuY3Rpb24gKGssIHYpIHtcblx0ICBpZiAoIWxhc3RfaW5mbykge1xuXHQgICAgbGFzdF9pbmZvID0ge307XG5cdCAgfVxuXHQgIC8vIOWFqOWxgOmFjee9ruWPquimgeacieWwseS4jeiDveWGjeasoeiuvue9ru+8jOaVhei/memHjOebtOaOpXJldHVyblxuXHQgIGlmICh0eXBlb2YgcHJpb3JpdHlNZXRhSW5mbyA9PT0gJ29iamVjdCcgJiYgcHJpb3JpdHlNZXRhSW5mb1trXSkge1xuXHQgICAgbG9nZ2VyUHJpb3JpdHlJbmZvKGspO1xuXHQgICAgcmV0dXJuIHRydWU7XG5cdCAgfVxuXHQgIGlmIChrID09PSBBUExVU19YX1NFVFRJTkdTKSB7XG5cdCAgICBpZiAoIXByaW9yaXR5TWV0YUluZm8pIHtcblx0ICAgICAgdHJ5IHtcblx0ICAgICAgICBwcmlvcml0eU1ldGFJbmZvID0gdHlwZW9mIHYgPT09ICdvYmplY3QnID8gdiA6IEpTT04ucGFyc2Uodik7XG5cdCAgICAgICAgbGFzdF9pbmZvID0gdXRpbERhc2guYXNzaWduKGxhc3RfaW5mbywgcHJpb3JpdHlNZXRhSW5mbyk7XG5cdCAgICAgIH0gY2F0Y2ggKGUpIHtcblx0ICAgICAgICBjb25zb2xlICYmIGNvbnNvbGUubG9nKGUpO1xuXHQgICAgICB9ICBcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGxvZ2dlclByaW9yaXR5SW5mbyhrKTtcblx0ICAgIH1cblx0ICAgIHJldHVybiB0cnVlO1xuXHQgIH1cblx0XG5cdCAgaWYgKGsgPT09ICdhcGx1cy1leGluZm8nKSB7XG5cdCAgICBsYXN0X2luZm9ba10gPSB0eXBlb2YgdiA9PT0gJ29iamVjdCcgPyB2IDogZm9ybWF0LnBhcmFtMm9iaih2KTtcblx0ICB9IGVsc2Uge1xuXHQgICAgbGFzdF9pbmZvW2tdID0gdjtcblx0ICB9XG5cdCAgcmV0dXJuIHRydWU7XG5cdH07XG5cdFxuXHQvKipcblx0ICogZ2V0IG1ldGFJbmZvIGJ5IGtleVxuXHQgKiDlrrnplJnmoKHpqoznp7vmpI3liLBhcGx1c+WPr+inhuWMluWfi+eCuemqjOivgeW3peWFt+WGhSAyMDE4LTAxLTEwIEDosIvlo6tcblx0ICog6K+m6KeB77yaaHR0cHM6Ly9sYXJrLmFsaXBheS5jb20vYXBsdXNqcy9wcm9qZWN0L3BlcmZvcm1hbmNlXG5cdCAqXG5cdCAqIEBwYXJhbSB7U3RyaW5nfVxuXHQgKiBAcmV0dXJuIHtPYmplY3R9XG5cdCAqL1xuXHR2YXIgZ2V0TWV0YUluZm8gPSBmdW5jdGlvbihrKSB7XG5cdCAgaWYgKCFsYXN0X2luZm8pIHtcblx0ICAgIGxhc3RfaW5mbyA9IHt9O1xuXHQgIH1cblx0ICByZXR1cm4gbGFzdF9pbmZvW2tdIHx8ICcnO1xuXHR9O1xuXHRleHBvcnRzLmdldE1ldGFJbmZvID0gZ2V0TWV0YUluZm87XG5cdFxuXHRcblx0LyoqXG5cdCAqIFRvIGFwcGVuZCBgbWV0YWAgdGFnIGlmIHRoZXJlJ3Mgbm9uZSBhcGx1cyBtZXRhLlxuXHQgKiBPdGhlcndpc2UsIG1lcmdlIGNvbnRlbnQgYXR0cmlidXRlczpcblx0ICogIC0gYEFycmF5LnByb3RvdHlwZS5jb25jYXRgIGNhbGxlZCBvbiBBcnJheSB2YWx1ZXMuXG5cdCAqICAtIGBPYmplY3QuYXNzaWduYCBjYWxsZWQgb24gT2JqZWN0IHZhbHVlcy5cblx0ICogIEBwYXJhbSBrXG5cdCAqICBAcGFyYW0gdlxuXHQgKi9cblx0ZXhwb3J0cy5hcHBlbmRNZXRhSW5mbyA9IGZ1bmN0aW9uIChrLCB2KSB7XG5cdCAgaWYgKGsgJiYgdikge1xuXHQgICAgLy8gYXBsdXMtdXRwYXJhbSB8fCBhcGx1cy1uZXh0cGFnZS11dHBhcmFtIHx8IGFwbHVzLWV4ZGF0YVxuXHQgICAgdmFyIHByb2Nlc3NPYmplY3QgPSBmdW5jdGlvbiAob2xkX3ZhbHVlKSB7XG5cdCAgICAgIHRyeSB7XG5cdCAgICAgICAgdmFyIG5ld192YWx1ZSA9IHR5cGVvZiB2ID09PSAnc3RyaW5nJyA/IEpTT04ucGFyc2UodikgOiB2O1xuXHQgICAgICAgIHRvU2V0TWV0YUluZm8oaywgdXRpbERhc2guYXNzaWduKG9sZF92YWx1ZSwgbmV3X3ZhbHVlKSk7XG5cdCAgICAgIH0gY2F0Y2ggKGUpIHt9XG5cdCAgICB9O1xuXHQgICAgLy8gYXBsdXMtYXV0by1leHAgfHwgYXBsdXMtYXV0by1jbGtcblx0ICAgIHZhciBwcm9jZXNzQXJyYXkgPSBmdW5jdGlvbiAob2xkX3ZhbHVlKSB7XG5cdCAgICAgIHRyeSB7XG5cdCAgICAgICAgdmFyIG5ld192YWx1ZSA9IHR5cGVvZiB2ID09PSAnc3RyaW5nJyA/IEpTT04ucGFyc2UodikgOiB2O1xuXHQgICAgICAgIHRvU2V0TWV0YUluZm8oaywgb2xkX3ZhbHVlLmNvbmNhdChuZXdfdmFsdWUpKTtcblx0ICAgICAgfSBjYXRjaCAoZSkge31cblx0ICAgIH07XG5cdFxuXHQgICAgdmFyIHByb2Nlc3NPYmogPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0ICAgICAgaWYgKHZhbHVlLmNvbnN0cnVjdG9yID09PSBBcnJheSkge1xuXHQgICAgICAgIHByb2Nlc3NBcnJheSh2YWx1ZSk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgcHJvY2Vzc09iamVjdCh2YWx1ZSk7XG5cdCAgICAgIH1cblx0ICAgIH07XG5cdCAgICB2YXIgdG9TZXRNZXRhSW5mbyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG5cdCAgICAgIGFwbHVzLnNldE1ldGFJbmZvKGtleSwgdmFsdWUsIHtcblx0ICAgICAgICBmcm9tOiAnYXBwZW5kTWV0YUluZm8nXG5cdCAgICAgIH0pO1xuXHQgICAgfTtcblx0XG5cdCAgICAvLyBodHRwczovL2xhcmsuYWxpcGF5LmNvbS9hcGx1c2pzL2RvY3MvbWV0YSNtZXRhLWFwbHVzLWV4aW5mb1xuXHQgICAgdmFyIHByb2Nlc3NBcGx1c0V4aW5mbyA9IGZ1bmN0aW9uIChvbGRfdmFsdWUpIHtcblx0ICAgICAgdmFyIGV4aW5mb3NfbmV3ID0gZm9ybWF0LnBhcmFtMm9iaih2KTtcblx0ICAgICAgdG9TZXRNZXRhSW5mbyhrLCB1dGlsRGFzaC5hc3NpZ24ob2xkX3ZhbHVlLCBleGluZm9zX25ldykpOyAvLyBleGluZm9zX29sZC5jb25jYXQoZXhpbmZvc19uZXcpLmpvaW4oJyYnKVxuXHQgICAgfTtcblx0XG5cdCAgICB2YXIgZmxhZztcblx0ICAgIHZhciBfb2xkVmFsdWUgPSBhcGx1cy5nZXRNZXRhSW5mbyhrKTtcblx0ICAgIGlmIChrID09PSAnYXBsdXMtZXhpbmZvJykge1xuXHQgICAgICBwcm9jZXNzQXBsdXNFeGluZm8oX29sZFZhbHVlKTtcblx0ICAgICAgZmxhZyA9IHRydWU7XG5cdCAgICB9XG5cdCAgICBpZiAoX29sZFZhbHVlKSB7XG5cdCAgICAgIGlmICh0eXBlb2YgX29sZFZhbHVlID09PSAnb2JqZWN0Jykge1xuXHQgICAgICAgIHByb2Nlc3NPYmooX29sZFZhbHVlKTtcblx0ICAgICAgICBmbGFnID0gdHJ1ZTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICB0cnkge1xuXHQgICAgICAgICAgdmFyIHRtcF9wYXJzZSA9IEpTT04ucGFyc2UoX29sZFZhbHVlKTtcblx0ICAgICAgICAgIGlmICh0eXBlb2YgdG1wX3BhcnNlID09PSAnb2JqZWN0Jykge1xuXHQgICAgICAgICAgICBwcm9jZXNzT2JqKHRtcF9wYXJzZSk7XG5cdCAgICAgICAgICAgIGZsYWcgPSB0cnVlO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0gY2F0Y2ggKGUpIHtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIGlmICghZmxhZykge1xuXHQgICAgICB0b1NldE1ldGFJbmZvKGssIHYpO1xuXHQgICAgfVxuXHQgIH1cblx0fTtcblxuLyoqKi8gfSksXG4vKiAyMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdC8qKlxuXHQgKiBhbGlsb2cvcy91dGlsL2Zvcm1hdC5qc1xuXHQgKiDlt6Xlhbfnsbtcblx0ICpcblx0ICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuXHQgKlxuXHQgKiBBdXRob3JzOlxuXHQgKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG5cdCAqL1xuXHQndXNlIHN0cmljdCc7XG5cdFxuXHQvLyB2YXIgdHJ5VG9EZWNvZGUgPSByZXF1aXJlKCcuL3RyeVRvRGVjb2RlJyk7XG5cdFxuXHRleHBvcnRzLmFycjJvYmogPSBmdW5jdGlvbiAoYXJyKSB7XG5cdCAgdmFyIHJldCA9IHt9O1xuXHQgIHZhciBrO1xuXHQgIHZhciB2O1xuXHQgIHZhciBpO1xuXHQgIHZhciBsZW4gPSBhcnIubGVuZ3RoO1xuXHRcblx0ICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0ICAgIGsgPSBhcnJbaV1bMF07XG5cdCAgICB2ID0gYXJyW2ldWzFdO1xuXHQgICAgcmV0W2tdID0gdjtcblx0ICB9XG5cdCAgcmV0dXJuIHJldDtcblx0fTtcblx0XG5cdC8qKlxuXHQgKiBwYXJhbSB0byBvYmplY3Rcblx0ICog5bCG5LiA5Liq566A5Y2V55qE5b2i5aaCIGE9MSZiPTImYz0zIOi/meagt+eahOWPguaVsOi9rOWMluS4uueugOWNleeahCBvYmplY3Qg5qC85byP77yM5aaC77yaXG5cdCAqIHtcblx0ICogICBhOiBcIjFcIixcblx0ICogICBiOiBcIjJcIixcblx0ICogICBjOiBcIjNcIlxuXHQgKiB9XG5cdCAqIEBwYXJhbSBwYXJhbXMge1N0cmluZ31cblx0ICovXG5cdGV4cG9ydHMucGFyYW0yb2JqID0gZnVuY3Rpb24gKHBhcmFtcykge1xuXHQgIGlmICh0eXBlb2YgcGFyYW1zID09PSAnb2JqZWN0Jykge1xuXHQgICAgcmV0dXJuIHBhcmFtcztcblx0ICB9XG5cdCAgaWYgKCFwYXJhbXMpIHBhcmFtcyA9ICcnO1xuXHRcblx0ICB2YXIgb2JqID0ge307XG5cdCAgdmFyIGEgPSBwYXJhbXMuc3BsaXQoJyYnKTtcblx0ICBmb3IgKHZhciBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcblx0ICAgIHZhciBpdGVtID0gYVtpXTtcblx0ICAgIHZhciBpbmRleCA9IGl0ZW0uaW5kZXhPZignPScpO1xuXHQgICAgdmFyIGZyYWdtZW50ID0gaXRlbS5zcGxpdCgnPScpO1xuXHQgICAgdmFyIGxlbiA9IGl0ZW0ubGVuZ3RoO1xuXHQgICAgaWYgKGZyYWdtZW50Lmxlbmd0aCA9PT0gMikge1xuXHQgICAgICBvYmpbZnJhZ21lbnRbMF1dID0gZnJhZ21lbnRbMV0gfHwgJyc7ICBcblx0ICAgIH0gZWxzZSBpZiAoaW5kZXggPiAwKSB7XG5cdCAgICAgIHZhciBrZXkgPSBpdGVtLnNsaWNlKDAsIGluZGV4KTtcblx0ICAgICAgdmFyIHZhbHVlID0gaXRlbS5zbGljZShpbmRleCArIDEsIGxlbikgfHwgJyc7XG5cdCAgICAgIG9ialtrZXldID0gdmFsdWU7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBvYmpbZnJhZ21lbnRbMF1dID0gJyc7XG5cdCAgICB9XG5cdCAgfVxuXHQgIHJldHVybiBvYmo7XG5cdH07XG5cdFxuXHQvLyBjb25zb2xlLmxvZygnVE9ETyBkZWxldGUgc19wbGFpbl9vYmonKTtcblx0dmFyIHNfcGxhaW5fb2JqID0gJzo6LXBsYWluLTo6Jztcblx0ZXhwb3J0cy5zX3BsYWluX29iaiA9IHNfcGxhaW5fb2JqO1xuXHRcblx0LyoqXG5cdCAqIGFycmF5IHRvIHBhcmFtXG5cdCAqIOWwhuS4gOS4queugOWNleeahOaVsOe7hOi9rOWMluS4uiB1cmwg5Y+C5pWw55qE5b2i5byP77yMXG5cdCAqIOWFtuS4reaVsOe7hOS4ulxuXHQgKiAgICAgIFtbazEsIHYxXSwgW2syLCB2Ml0sIFtrMywgdjNdLCAuLi5dXG5cdCAqIOeahOW9ouW8j+OAglxuXHQgKiDkuI4gb2JqMnBhcmFtIOebuOavlO+8jOi/meS4quaWueazleeahOWlveWkhOaYr+WPr+S7peS/neivgeacgOWQjuWPguaVsOeahOmhuuW6j1xuXHQgKiBAcGFyYW0gYXJyIHtBcnJheX1cblx0ICogQHJldHVybiB7U3RyaW5nfVxuXHQgKi9cblx0ZnVuY3Rpb24gYXJyMnBhcmFtKGFyciwgc2tpcEVuY29kZSkge1xuXHQgIHZhciBhID0gW10sXG5cdCAgICBrLFxuXHQgICAgdixcblx0ICAgIGksXG5cdCAgICBsZW4gPSBhcnIubGVuZ3RoO1xuXHRcblx0ICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0ICAgIGsgPSBhcnJbaV1bMF07XG5cdCAgICB2ID0gYXJyW2ldWzFdO1xuXHQgICAgdmFyIGlzSW5QbGFuT2JqID0gay5pbmRleE9mKHNfcGxhaW5fb2JqKSA9PT0gMDtcblx0ICAgIHZhciBfdmFsdWUgPSBpc0luUGxhbk9iaiB8fCBza2lwRW5jb2RlID8gdiA6IGVuY29kZVVSSUNvbXBvbmVudCh2KTtcblx0ICAgIGEucHVzaChpc0luUGxhbk9iaiA/IF92YWx1ZSA6IChrICsgJz0nICsgX3ZhbHVlKSk7XG5cdCAgfVxuXHQgIHJldHVybiBhLmpvaW4oJyYnKTtcblx0fTtcblx0ZXhwb3J0cy5hcnIycGFyYW0gPSBhcnIycGFyYW07XG5cdFxuXHQvKipcblx0ICogb2JqZWN0IHRvIHBhcmFtXG5cdCAqIOWwhuS4gOS4queugOWNleWvueixoei9rOWMluS4uiB1cmwg5Y+C5pWw55qE5b2i5byPXG5cdCAqIOWPguingSBhcnIycGFyYW0oKSDmlrnms5Vcblx0ICogQHBhcmFtIG9iaiB7T2JqZWN0fVxuXHQgKiBAcGFyYW0gY29tbVRyYW5zbGF0ZSB7Qm9vbGVhbn0g5pmu6YCa6L2s5o2i5LiN5YGaaXNTdGFydFdpdGjmoKHpqoxcblx0ICpcblx0ICovXG5cdGV4cG9ydHMub2JqMnBhcmFtID0gZnVuY3Rpb24gKG9iaiwgY29tbVRyYW5zbGF0ZSkge1xuXHQgIHZhciBhID0gW107XG5cdCAgdmFyIGs7XG5cdCAgdmFyIHY7XG5cdCAgdmFyIF92O1xuXHQgIGZvciAoayBpbiBvYmopXG5cdCAgICBpZiAoayAmJiBvYmouaGFzT3duUHJvcGVydHkoaykpIHtcblx0ICAgICAgdiA9ICcnICsgb2JqW2tdO1xuXHQgICAgICBfdiA9IGsgKyAnPScgKyB2O1xuXHQgICAgICBpZiAoIWNvbW1UcmFuc2xhdGUpIHtcblx0ICAgICAgICBhLnB1c2goay5pbmRleE9mKHNfcGxhaW5fb2JqKSA9PT0gMCA/IHYgOiBfdik7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgYS5wdXNoKF92KTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIHJldHVybiBhLmpvaW4oJyYnKTtcblx0fTtcblx0XG5cdGV4cG9ydHMuZW5jb2RlR29rZXlWYWx1ZSA9IGZ1bmN0aW9uIChnb2tleSkge1xuXHQgIC8vIHZhciBhcGx1cyA9IHJlcXVpcmUoJ0B1dGlscy91dGlsR29sZGxvZycpLmdldEdsb2JhbFZhbHVlKCdhcGx1cycpO1xuXHQgIC8vIC8vIOWvuWdva2V55YaF55qEdmFsdWXnu5/kuIDliqDkuIDlsYLnvJbnoIFcblx0ICAvLyBpZiAodHlwZW9mIGdva2V5ID09PSAnb2JqZWN0JyAmJiBhcGx1cy5nbG9iYWxDb25maWcuaXNBbGkpIHtcblx0ICAvLyAgIGZvciAodmFyIGsgaW4gZ29rZXkpIHtcblx0ICAvLyAgICAgaWYgKHR5cGVvZiBnb2tleVtrXSA9PT0gJ3N0cmluZycpIHtcblx0ICAvLyAgICAgICB0cnkge1xuXHQgIC8vICAgICAgICAgZ29rZXlba10gPSBlbmNvZGVVUklDb21wb25lbnQoZGVjb2RlVVJJQ29tcG9uZW50KGdva2V5W2tdKSk7XG5cdCAgLy8gICAgICAgfSBjYXRjaCAoZSkge31cblx0ICAvLyAgICAgfVxuXHQgIC8vICAgfVxuXHQgIC8vIH1cblx0ICByZXR1cm4gZ29rZXk7XG5cdH07XG5cblxuLyoqKi8gfSksXG4vKiAyMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBwcm9qZWN0IC0gZmlsZXBhdGhcblx0ICogZGVzY3JpcHRpb25cblx0ICpcblx0ICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuXHQgKlxuXHQgKiBBdXRob3JzOlxuXHQgKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG5cdCAqL1xuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRleHBvcnRzLmFzc2lnbiA9IF9fd2VicGFja19yZXF1aXJlX18oMjIpO1xuXHRcblx0LyoqXG5cdCAqIOeUn+aIkOS4gOS4queUqOS6jumBv+WFjee8k+WtmOeahOmaj+acuuaVsFxuXHQgKiDkuLrkuoblh4/lsJEgdXJsIOmVv+W6pu+8jOi/meS4qumaj+acuuaVsOaNrueahOmVv+W6puWumuS4uiA3IOS9je+8jFxuXHQgKiDkuLrkuoblh4/lsJHnorDmkp7vvIzkvb/nlKggMTYg6L+b5Yi25pWw5a2XXG5cdCAqXG5cdCAqIDI2ODQzNTQ1NiA9IDIgXiAyOCA9IDB4ZmZmZmZmZiArIDFcblx0ICovXG5cdGV4cG9ydHMubWFrZUNhY2hlTnVtID0gZnVuY3Rpb24gKCkge1xuXHQgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyNjg0MzU0NTYpLnRvU3RyaW5nKDE2KTtcblx0fTtcblx0XG5cdC8qKlxuXHQgKiDliKTmlq3lrZfnrKbkuLIgczEg5piv5ZCm5Lul5a2X56ym5LiyIHMyIOW8gOWktFxuXHQgKiBAcGFyYW0gczEge1N0cmluZ31cblx0ICogQHBhcmFtIHMyIHtTdHJpbmd9XG5cdCAqL1xuXHRleHBvcnRzLmlzU3RhcnRXaXRoID0gZnVuY3Rpb24oczEsIHMyKSB7XG5cdCAgcmV0dXJuIHMxLmluZGV4T2YoczIpID09PSAwO1xuXHR9O1xuXHQvKipcblx0ICog5Yik5pat5a2X56ym5LiyIHMxIOaYr+a7nuS7peWtl+espuS4siBzMiDnu5PlsL5cblx0ICogQHBhcmFtIHMxIHtTdHJpbmd9XG5cdCAqIEBwYXJhbSBzMiB7U3RyaW5nfVxuXHQgKi9cblx0ZXhwb3J0cy5pc0VuZFdpdGggPSBmdW5jdGlvbihzMSwgczIpIHtcblx0ICB2YXIgbDEgPSBzMS5sZW5ndGgsIGwyID0gczIubGVuZ3RoO1xuXHQgIHJldHVybiBsMSA+PSBsMiAmJiBzMS5pbmRleE9mKHMyKSA9PSAobDEgLSBsMik7XG5cdH07XG5cdFxuXHRleHBvcnRzLmFueSA9IGZ1bmN0aW9uKGFyciwgZm4pIHtcblx0ICB2YXIgaTtcblx0ICB2YXIgbCA9IGFyci5sZW5ndGg7XG5cdCAgZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuXHQgICAgaWYgKGZuKGFycltpXSkpIHtcblx0ICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICB9XG5cdCAgfVxuXHQgIHJldHVybiBmYWxzZTtcblx0fTtcblx0XG5cdGV4cG9ydHMuaXNOdW1iZXIgPSBmdW5jdGlvbih2KSB7XG5cdCAgcmV0dXJuIHR5cGVvZiB2ID09PSAnbnVtYmVyJztcblx0fTtcblx0XG5cdC8qKlxuXHQgKiDliKTmlq3lrZfnrKbkuLIgczEg5piv5ZCm5YyF5ZCr5a2X56ym5LiyIHMyXG5cdCAqIEBwYXJhbSBzMSB7U3RyaW5nfVxuXHQgKiBAcGFyYW0gczIge1N0cmluZ31cblx0ICovXG5cdGV4cG9ydHMuaXNDb250YWluID0gZnVuY3Rpb24gKHMxLCBzMikge1xuXHQgIHJldHVybiBzMS5pbmRleE9mKHMyKSA+IC0xO1xuXHR9O1xuXHRcblx0LyoqXG5cdCAqIOWFi+mahuS4gOS4qm9iamVjdFxuXHQgKi9cblx0dmFyIGNsb25lRGVlcCA9IGZ1bmN0aW9uKG9iaikge1xuXHQgIHZhciBzdHI7XG5cdCAgdmFyIG5ld29iaiA9IG9iai5jb25zdHJ1Y3RvciA9PT0gQXJyYXkgPyBbXSA6IHt9O1xuXHQgIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuXHQgICAgcmV0dXJuO1xuXHQgIH0gZWxzZSBpZiAoSlNPTiAmJiBKU09OLnBhcnNlKSB7XG5cdCAgICBzdHIgPSBKU09OLnN0cmluZ2lmeShvYmopOyAvL+ezu+WIl+WMluWvueixoVxuXHQgICAgbmV3b2JqID0gSlNPTi5wYXJzZShzdHIpOyAvL+i/mOWOn1xuXHQgIH0gZWxzZSB7XG5cdCAgICBmb3IgKHZhciBpIGluIG9iaikge1xuXHQgICAgICBuZXdvYmpbaV0gPSB0eXBlb2Ygb2JqW2ldID09PSAnb2JqZWN0JyA/IGNsb25lRGVlcChvYmpbaV0pIDogb2JqW2ldO1xuXHQgICAgfVxuXHQgIH1cblx0ICByZXR1cm4gbmV3b2JqO1xuXHR9O1xuXHRcblx0ZXhwb3J0cy5jbG9uZURlZXAgPSBjbG9uZURlZXA7XG5cblxuLyoqKi8gfSksXG4vKiAyMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdFxuXHQvKipcblx0ICog5a+56LGhbWVyZ2Vcblx0ICogIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9hc3NpZ25cblx0ICovXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldE9iaiwgYXJnc09iaikge1xuXHQgIGlmICh0eXBlb2YgT2JqZWN0LmFzc2lnbiAhPT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQpIHtcblx0ICAgICAgdmFyIHRvID0gT2JqZWN0KHRhcmdldCk7XG5cdCAgICAgIGZvciAodmFyIGluZGV4ID0gMTsgaW5kZXggPCBhcmd1bWVudHMubGVuZ3RoOyBpbmRleCsrKSB7XG5cdCAgICAgICAgdmFyIG5leHRTb3VyY2UgPSBhcmd1bWVudHNbaW5kZXhdO1xuXHQgICAgICAgIGlmIChuZXh0U291cmNlICE9PSBudWxsKSB7IC8vIFNraXAgb3ZlciBpZiB1bmRlZmluZWQgb3IgbnVsbFxuXHQgICAgICAgICAgZm9yICh2YXIgbmV4dEtleSBpbiBuZXh0U291cmNlKSB7XG5cdCAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobmV4dFNvdXJjZSwgbmV4dEtleSkpIHtcblx0ICAgICAgICAgICAgICB0b1tuZXh0S2V5XSA9IG5leHRTb3VyY2VbbmV4dEtleV07XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIHRvO1xuXHQgICAgfSh0YXJnZXRPYmosIGFyZ3NPYmopO1xuXHQgIH0gZWxzZSB7XG5cdCAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgdGFyZ2V0T2JqLCBhcmdzT2JqKTtcblx0ICB9XG5cdH07XG5cbi8qKiovIH0pLFxuLyogMjMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogcHJvamVjdCAtIGZpbGVwYXRoXG5cdCAqIGRlc2NyaXB0aW9uXG5cdCAqXG5cdCAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cblx0ICpcblx0ICogQXV0aG9yczpcblx0ICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuXHQgKi9cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIHV0aWxUcmltID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNCk7XG5cdHZhciB1dGlsU3RvcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI1KTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0ge1xuXHQgIHRyeVRvRGVjb2RlVVJJQ29tcG9uZW50OiBmdW5jdGlvbiAodmFsLCBkZWZhdWx0X3ZhbCkge1xuXHQgICAgdmFyIHYgPSBkZWZhdWx0X3ZhbCB8fCAnJztcblx0ICAgIGlmICh2YWwpIHtcblx0ICAgICAgdHJ5IHtcblx0ICAgICAgICB2ID0gZGVjb2RlVVJJQ29tcG9uZW50KHZhbCk7XG5cdCAgICAgIH0gY2F0Y2ggKGUpIHtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgcmV0dXJuIHY7XG5cdCAgfSxcblx0ICBcblx0ICAvKipcblx0ICAgKiDlsIblvaLlpoIgXCJwYWdlSWQ9MTIzOyBzaXRlSWQ9NDU2XCIg55qE5YaF5a656Kej5p6Q5Li6IE9iamVjdFxuXHQgICAqIEBwYXJhbSBzIHtTdHJpbmd9XG5cdCAgICogQHBhcmFtIFtkaWN0XSB7T2JqZWN0fVxuXHQgICAqIEByZXR1cm4ge09iamVjdH1cblx0ICAgKi9cblx0ICBwYXJzZVNlbWljb2xvbkNvbnRlbnQ6IGZ1bmN0aW9uIChzLCBkaWN0LCB1bmRlY29kZSkge1xuXHQgICAgZGljdCA9IGRpY3QgfHwge307XG5cdCAgICB2YXIgYSA9IHMuc3BsaXQoJzsnKTtcblx0ICAgIHZhciBqO1xuXHQgICAgdmFyIGFfbGVuID0gYS5sZW5ndGg7XG5cdCAgICB2YXIgYTI7XG5cdFxuXHQgICAgZm9yIChqID0gMDsgaiA8IGFfbGVuOyBqKyspIHtcblx0ICAgICAgYTIgPSBhW2pdLnNwbGl0KCc9Jyk7XG5cdCAgICAgIHZhciBfdmFsdWUgPSB1dGlsVHJpbS50cmltKGEyLnNsaWNlKDEpLmpvaW4oJz0nKSk7XG5cdCAgICAgIGRpY3RbdXRpbFRyaW0udHJpbShhMlswXSkgfHwgJyddID0gdW5kZWNvZGUgPyBfdmFsdWUgOiB0aGlzLnRyeVRvRGVjb2RlVVJJQ29tcG9uZW50KF92YWx1ZSk7XG5cdCAgICB9XG5cdFxuXHQgICAgcmV0dXJuIGRpY3Q7XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICog5bCG5LiA5LiqIG5vZGUgbGlzdCDovazkuLrmlbDnu4Rcblx0ICAgKiBAcGFyYW0gbm9kZXMge05vZGVMaXN0fVxuXHQgICAqIOWPguinge+8mmh0dHA6Ly93d3cucGxhbmFiYy5uZXQvMjAxMC8wMS8wNi9hcmd1bWVudHNfdG9fYXJyYXkvXG5cdCAgICovXG5cdCAgbm9kZUxpc3RUb0FycmF5OiBmdW5jdGlvbiAobm9kZXMpIHtcblx0ICAgIHZhciBhcnI7XG5cdCAgICB2YXIgbGVuZ3RoO1xuXHRcblx0ICAgIHRyeSB7XG5cdCAgICAgIC8vIHdvcmtzIGluIGV2ZXJ5IGJyb3dzZXIgZXhjZXB0IElFXG5cdCAgICAgIGFyciA9IFtdLnNsaWNlLmNhbGwobm9kZXMpO1xuXHQgICAgICByZXR1cm4gYXJyO1xuXHQgICAgfSBjYXRjaCAoZXJyKSB7XG5cdCAgICAgIC8vIHNsb3dlciwgYnV0IHdvcmtzIGluIElFXG5cdCAgICAgIGFyciA9IFtdO1xuXHQgICAgICBsZW5ndGggPSBub2Rlcy5sZW5ndGg7XG5cdFxuXHQgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgYXJyLnB1c2gobm9kZXNbaV0pO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICByZXR1cm4gYXJyO1xuXHQgICAgfVxuXHQgIH0sXG5cdFxuXHQgIGdldExzQ25hOiBmdW5jdGlvbiAoRVRBR19TVE9SQUdFX0tFWSwgZGF0ZSkge1xuXHQgICAgaWYgKHV0aWxTdG9yZS5zZXQgJiYgdXRpbFN0b3JlLnRlc3QoKSkge1xuXHQgICAgICB2YXIgX2xzX2NuYSA9ICcnO1xuXHQgICAgICB2YXIgX3ZhbHVlID0gdXRpbFN0b3JlLmdldChFVEFHX1NUT1JBR0VfS0VZKTtcblx0ICAgICAgaWYgKF92YWx1ZSkge1xuXHQgICAgICAgIHZhciBfYXJyID0gX3ZhbHVlLnNwbGl0KCdfJykgfHwgW107XG5cdCAgICAgICAgaWYgKGRhdGUpIHtcblx0ICAgICAgICAgIF9sc19jbmEgPSBfYXJyLmxlbmd0aCA+IDEgJiYgZGF0ZSA9PT0gX2FyclswXSA/IF9hcnJbMV0gOiAnJztcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgX2xzX2NuYSA9IF9hcnIubGVuZ3RoID4gMSA/IF9hcnJbMV0gOiAnJztcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChfbHNfY25hKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHJldHVybiAnJztcblx0ICAgIH1cblx0ICB9LFxuXHRcblx0ICAvLyB1dGlsU3RvcmUuc2V0KHRoaXMuRVRBR19TVE9SQUdFX0tFWSwgIHRoaXMudG9kYXkgKyAnXycgKyBlbmNvZGVVUklDb21wb25lbnQoY25hKSk7XG5cdCAgc2V0THNDbmE6IGZ1bmN0aW9uIChFVEFHX1NUT1JBR0VfS0VZLCB0b2RheSwgY25hKSB7XG5cdCAgICBpZiAoY25hICYmIHV0aWxTdG9yZS5zZXQgJiYgdXRpbFN0b3JlLnRlc3QoKSkge1xuXHQgICAgICB1dGlsU3RvcmUuc2V0KEVUQUdfU1RPUkFHRV9LRVksICB0b2RheSArICdfJyArIGVuY29kZVVSSUNvbXBvbmVudChjbmEpKTtcblx0ICAgIH1cblx0ICB9LFxuXHRcblx0ICBnZXRVcmw6IGZ1bmN0aW9uICh1cmwpIHtcblx0ICAgIHZhciBlZ1VybCA9IHVybCB8fCAnLy9sb2cubW1zdGF0LmNvbS9lZy5qcyc7XG5cdCAgICB0cnkge1xuXHQgICAgICB2YXIgcmhvc3RfdiA9IGFwbHVzLmdldE1ldGFJbmZvKCdhcGx1cy1yaG9zdC12Jyk7XG5cdCAgICAgIHZhciByZWcgPSAvW1thLXp8XFwtfFxcX3wwLTlcXC5dK1thLXp8XFwtfFxcX3wwLTldLztcblx0ICAgICAgdmFyIGN1c3RvbV9ob3N0ID0gcmhvc3Rfdi5tYXRjaChyZWcpO1xuXHQgICAgICBpZiAoY3VzdG9tX2hvc3QgJiYgY3VzdG9tX2hvc3RbMF0pIHtcblx0ICAgICAgICAvLyBlZ1VybCA9IGVnVXJsLnJlcGxhY2UocmVnLCBjdXN0b21faG9zdFswXSk7XG5cdCAgICAgICAgZWdVcmwgPSAnLy8nICsgY3VzdG9tX2hvc3RbMF0gKyAnL2VnLmpzJztcblx0ICAgICAgfVxuXHQgICAgfSBjYXRjaCAoZSkge1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIGVnVXJsO1xuXHQgIH1cblx0fTtcblxuXG4vKioqLyB9KSxcbi8qIDI0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0LyoqXG5cdCAqIHByb2plY3QgLSBmaWxlcGF0aFxuXHQgKiDlr7nlrZfnrKbkuLLov5vooYx0cmlt5aSE55CGXG5cdCAqXG5cdCAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cblx0ICpcblx0ICogQXV0aG9yczpcblx0ICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuXHQgKi9cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0LyoqXG5cdCAqIOWOu+aOieWtl+espuS4siBzIOWJjeWQjueahOepuuagvFxuXHQgKiBAcGFyYW0gcyB7U3RyaW5nfVxuXHQgKi9cblx0ZnVuY3Rpb24gdHJpbShzKSB7XG5cdCAgcmV0dXJuICh0eXBlb2YgcyA9PT0gJ3N0cmluZycpID8gcy5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJykgOiAnJztcblx0fTtcblx0ZXhwb3J0cy50cmltID0gdHJpbTtcblxuXG4vKioqLyB9KSxcbi8qIDI1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0LyoqXG5cdCAqIHByb2plY3QgLSBmaWxlcGF0aFxuXHQgKiBkZXNjcmlwdGlvblxuXHQgKlxuXHQgKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG5cdCAqXG5cdCAqIEF1dGhvcnM6XG5cdCAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cblx0ICovXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdG1vZHVsZS5leHBvcnRzID0ge1xuXHQgIHNldDogZnVuY3Rpb24gKGssIHYpIHtcblx0ICAgIHRyeSB7XG5cdCAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGssIHYpO1xuXHQgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgIH0gY2F0Y2ggKGUpIHtcblx0ICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgfVxuXHQgIH0sXG5cdCAgLy8g57uP6L+HdGVzdOS5i+WQjmdldOW6lOivpeS4jeS8muaciemXrumimFxuXHQgIGdldDogZnVuY3Rpb24gKGspIHtcblx0ICAgIHRyeSB7XG5cdCAgICAgIHJldHVybiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrKTtcblx0ICAgIH0gY2F0Y2ggKGUpIHtcblx0ICAgICAgcmV0dXJuICcnO1xuXHQgICAgfVxuXHQgIH0sXG5cdCAgdGVzdDogZnVuY3Rpb24gKCkge1xuXHQgICAgdmFyIHRlc3RLZXkgPSAnZ3JleV90ZXN0X2tleSc7XG5cdCAgICB0cnkge1xuXHQgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSh0ZXN0S2V5LCAxKTtcblx0ICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0odGVzdEtleSk7XG5cdCAgICAgIHJldHVybiB0cnVlO1xuXHQgICAgfSBjYXRjaCAoZSkge1xuXHQgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICB9XG5cdCAgfSxcblx0ICByZW1vdmU6IGZ1bmN0aW9uIChrKSB7XG5cdCAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShrKTtcblx0ICB9XG5cdH07XG5cblxuLyoqKi8gfSksXG4vKiAyNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdC8qKlxuXHQgKiBwcm9qZWN0IC0gZmlsZXBhdGhcblx0ICog5pel5b+X57G75bel5YW36ZuG5ZCIXG5cdCAqXG5cdCAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cblx0ICpcblx0ICogQXV0aG9yczpcblx0ICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuXHQgKi9cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0LyoqXG5cdCAqIEBwYXJhbXMge09iamVjdH0gbyA6e1xuXHQgKiAgIGxldmVsOiAnd2Fybi9pbmZvL2xvZycgZGVmYXVsdCBpcyB3YXJuXG5cdCAqICAgbXNnOiAnbXNnJ1xuXHQgKiB9XG5cdCAqL1xuXHR2YXIgcHJlZml4ID0gJ1thcGx1c+aXpeW/l106ICc7XG5cdGV4cG9ydHMubG9nZ2VyID0gZnVuY3Rpb24gKG8pIHtcblx0ICBpZiAoIW8pIHtcblx0ICAgIG8gPSB7fTtcblx0ICB9XG5cdCAgdmFyIGxldmVsID0gby5sZXZlbCB8fCAnd2Fybic7XG5cdCAgY29uc29sZSAmJiBjb25zb2xlW2xldmVsXSAmJiBjb25zb2xlW2xldmVsXShwcmVmaXgrby5tc2cpO1xuXHR9O1xuXG5cbi8qKiovIH0pLFxuLyogMjcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQvKipcblx0ICogcHJvamVjdCAtIGZpbGVwYXRoXG5cdCAqIGRvbeaTjeS9nOW3peWFt+exu++8jOi/meS4quWfuuehgOW3peWFt+exu+S8muiiq+WFtuS7luW3peWFt+exu+W8leeUqO+8jOaVheS4peemgeWcqOi/memHjOWGjeW8leeUqOWFtuS7luaooeWdl+S7peWFjeWHuueOsOmXrumimFxuXHQgKlxuXHQgKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG5cdCAqXG5cdCAqIEF1dGhvcnM6XG5cdCAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cblx0ICovXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyciwgZm4pIHtcblx0ICB2YXIgaTtcblx0ICB2YXIgbCA9IGFyci5sZW5ndGg7XG5cdCAgZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuXHQgICAgdmFyIHJzID0gZm4oYXJyW2ldLCBpKTtcblx0ICAgIGlmIChycyA9PT0gJ2JyZWFrJykge1xuXHQgICAgICBicmVhaztcblx0ICAgIH1cblx0ICB9XG5cdH07XG5cbi8qKiovIH0pLFxuLyogMjggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQvKipcblx0ICogYWxpbG9nL3Mvc3JjL2xpYl91L3V0aWxzL3V0aWxBdHRyaWJ1dGUuanNcblx0ICpcblx0ICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuXHQgKlxuXHQgKiBBdXRob3JzOlxuXHQgKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG5cdCAqL1xuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRleHBvcnRzLnRyeVRvR2V0QXR0cmlidXRlID0gZnVuY3Rpb24oZWxlbWVudCwgYXR0cl9uYW1lKSB7XG5cdCAgcmV0dXJuIGVsZW1lbnQgJiYgZWxlbWVudC5nZXRBdHRyaWJ1dGUgPyAoZWxlbWVudC5nZXRBdHRyaWJ1dGUoYXR0cl9uYW1lKSB8fCAnJykgOiAnJztcblx0fTtcblx0XG5cdHZhciB0cnlUb1NldEF0dHJpYnV0ZSA9IGZ1bmN0aW9uIChlbGVtZW50LCBhdHRyX25hbWUsIGF0dHJfdmFsdWUpIHtcblx0ICBpZiAoZWxlbWVudCAmJiBlbGVtZW50LnNldEF0dHJpYnV0ZSkge1xuXHQgICAgdHJ5IHtcblx0ICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoYXR0cl9uYW1lLCBhdHRyX3ZhbHVlKTtcblx0ICAgIH0gY2F0Y2ggKGUpIHtcblx0ICAgIH1cblx0ICB9XG5cdH07XG5cdGV4cG9ydHMudHJ5VG9TZXRBdHRyaWJ1dGUgPSB0cnlUb1NldEF0dHJpYnV0ZTtcblx0XG5cdGV4cG9ydHMudHJ5VG9SZW1vdmVBdHRyaWJ1dGUgPSBmdW5jdGlvbiAoZWxlbWVudCwgYXR0cl9uYW1lKSB7XG5cdCAgaWYgKGVsZW1lbnQgJiYgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUpIHtcblx0ICAgIHRyeSB7XG5cdCAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGF0dHJfbmFtZSk7XG5cdCAgICB9IGNhdGNoIChlKSB7XG5cdCAgICAgIHRyeVRvU2V0QXR0cmlidXRlKGVsZW1lbnQsIGF0dHJfbmFtZSwgJycpO1xuXHQgICAgfVxuXHQgIH1cblx0fTtcblxuXG4vKioqLyB9KSxcbi8qIDI5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIHByb2plY3QgLSBmaWxlcGF0aFxuXHQgKiDmk43kvZxtZXRh55qE5bel5YW357G7XG5cdCAqXG5cdCAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cblx0ICpcblx0ICogQXV0aG9yczpcblx0ICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuXHQgKi9cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIF9oZWFkX25vZGU7XG5cdHZhciBfbWV0YV9ub2Rlcztcblx0XG5cdHZhciB1dGlsQXR0cmlidXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOCk7XG5cdC8qKlxuXHQgKiDlj5blvpfpobXpnaLkuIogaGVhZCDkuK3nmoTmiYDmnIkgbWV0YSDlhYPntKBcblx0ICogQHBhcmFtIFtmb3JjZV0ge2Jvb2xlYW59IOaYr+WQpuW8uuWItuiOt+WPluaWsOWGheWuuVxuXHQgKi9cblx0ZnVuY3Rpb24gZ2V0TWV0YVRhZ3MoZm9yY2UpIHtcblx0ICBfaGVhZF9ub2RlID0gX2hlYWRfbm9kZSB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdO1xuXHRcblx0ICBpZiAoX21ldGFfbm9kZXMgJiYgIWZvcmNlKSB7XG5cdCAgICByZXR1cm4gX21ldGFfbm9kZXM7XG5cdCAgfVxuXHRcblx0ICByZXR1cm4gX2hlYWRfbm9kZSA/IChfbWV0YV9ub2RlcyA9IF9oZWFkX25vZGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ21ldGEnKSkgOiBbXTtcblx0fTtcblx0ZXhwb3J0cy5nZXRNZXRhVGFncyA9IGdldE1ldGFUYWdzO1xuXHRcblx0LyoqXG5cdCAqIOWPluW+lyBoZWFkIC8gbWV0YSDkuK3mjIflrpogbWV0YSDnmoQgKGF0dHIgfHwgY29udGVudCkg5YC8XG5cdCAqIDxtZXRhIG5hbWU9XCJhcGx1cy10ZXJtaW5hbFwiIGNvbnRlbnQ9XCIxXCI+XG5cdCAqL1xuXHRmdW5jdGlvbiBnZXRNZXRhQ250KG5hbWUsIGF0dHIpIHtcblx0ICB2YXIgaTtcblx0ICB2YXIgbWV0YTtcblx0ICB2YXIgbWV0YV9ub2RlcyA9IGdldE1ldGFUYWdzKCk7XG5cdCAgdmFyIGwgPSBtZXRhX25vZGVzLmxlbmd0aDtcblx0ICB2YXIgY29udGVudDtcblx0XG5cdCAgZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuXHQgICAgbWV0YSA9IG1ldGFfbm9kZXNbaV07XG5cdCAgICBpZiAodXRpbEF0dHJpYnV0ZS50cnlUb0dldEF0dHJpYnV0ZShtZXRhLCAnbmFtZScpID09PSBuYW1lKSB7XG5cdCAgICAgIGNvbnRlbnQgPSB1dGlsQXR0cmlidXRlLnRyeVRvR2V0QXR0cmlidXRlKG1ldGEsIGF0dHIgfHwgJ2NvbnRlbnQnKTtcblx0ICAgIH1cblx0ICB9XG5cdFxuXHQgIHJldHVybiBjb250ZW50IHx8ICcnO1xuXHR9O1xuXHRleHBvcnRzLmdldE1ldGFDbnQgPSBnZXRNZXRhQ250O1xuXHRcblx0XG5cdC8qKlxuXHQgKiDnoa7lrpogaGVhZCAvIG1ldGEg5Lit55qEIGlzb25lcGFnZSDnmoTmlbDmja5cblx0ICog5b2i5aaC77yaXG5cdCAqIDxtZXRhIG5hbWU9XCJpc29uZXBhZ2VcIiBjb250ZW50PVwiMFwiIC8+IOihqOekuuS4jeaYr29uZXBhZ2Vcblx0ICogPG1ldGEgbmFtZT1cImlzb25lcGFnZVwiIGNvbnRlbnQ9XCIxfGh0dHA6Ly9oNS5tLnRhb2Jhby5jb20vd2UvaW5kZXguaHRtI2RldGFpbFwiIC8+IOihqOekuuaYr29uZXBhZ2Vcblx0ICovXG5cdGZ1bmN0aW9uIGdldE9uZVBhZ2VJbmZvKG1ldGFJbmZvKSB7XG5cdCAgdmFyIG9iaiA9IHtcblx0ICAgIGlzb25lcGFnZTogJy0xJyxcblx0ICAgIHVybHBhZ2VuYW1lOiAnJ1xuXHQgIH07XG5cdCAgdmFyIG1ldGFfaW5mbyA9IG1ldGFJbmZvLnFHZXQoKTtcblx0ICBpZiAobWV0YV9pbmZvICYmIG1ldGFfaW5mby5oYXNPd25Qcm9wZXJ0eSgnaXNvbmVwYWdlX2RhdGEnKSkge1xuXHQgICAgb2JqLmlzb25lcGFnZSA9IG1ldGFfaW5mby5pc29uZXBhZ2VfZGF0YS5pc29uZXBhZ2U7XG5cdCAgICBvYmoudXJscGFnZW5hbWUgPSBtZXRhX2luZm8uaXNvbmVwYWdlX2RhdGEudXJscGFnZW5hbWU7XG5cdCAgfSBlbHNlIHtcblx0ICAgIHZhciBjb250ZW50ID0gZ2V0TWV0YUNudCgnaXNvbmVwYWdlJykgfHwgJy0xJztcblx0ICAgIHZhciBhcnJfY29udGVudCA9IGNvbnRlbnQuc3BsaXQoXCJ8XCIpO1xuXHQgICAgb2JqLmlzb25lcGFnZSA9IGFycl9jb250ZW50WzBdO1xuXHQgICAgb2JqLnVybHBhZ2VuYW1lID0gYXJyX2NvbnRlbnRbMV0gPyBhcnJfY29udGVudFsxXSA6IFwiXCI7XG5cdCAgfVxuXHQgIHJldHVybiBvYmo7XG5cdH07XG5cdGV4cG9ydHMuZ2V0T25lUGFnZUluZm8gPSBnZXRPbmVQYWdlSW5mbztcblxuXG4vKioqLyB9KSxcbi8qIDMwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIHByb2plY3QgLSBmaWxlcGF0aFxuXHQgKiByZWZlcnJlcuW3peWFt+exu1xuXHQgKlxuXHQgKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG5cdCAqXG5cdCAqIEF1dGhvcnM6XG5cdCAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cblx0ICovXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciBuYW1lU3RvcmFnZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpLm5hbWVTdG9yYWdlO1xuXHRcblx0ZXhwb3J0cy5nZXRSZWZlciA9IGZ1bmN0aW9uIChOQU1FX1NUT1JBR0VfS0VZUykge1xuXHQgIHJldHVybiBkb2N1bWVudC5yZWZlcnJlciB8fCBuYW1lU3RvcmFnZS5nZXRJdGVtKE5BTUVfU1RPUkFHRV9LRVlTLlJFRkVSUkVSKSB8fCAnJztcblx0fTtcblxuXG4vKioqLyB9KSxcbi8qIDMxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIGFsaWxvZy9zIC0gc3JjL2FwbHVzX2F1dG9fY2xrLmpzXG5cdCAqIGFwbHVz5LiT6aG56YeH6ZuGOiDpobXpnaLlhYPntKDngrnlh7voh6rliqjph4fpm4Zcblx0ICpcblx0ICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuXHQgKlxuXHQgKiBBdXRob3JzOlxuXHQgKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG5cdCAqL1xuXHQndXNlIHN0cmljdCc7XG5cdFxuXHQvLyA8bWV0YSBuYW1lPVwiYXBsdXMtYXV0by1jbGtcIiBjb250ZW50PVwie3tsb2drZXk6XCIvYS5iLmNcIix0YWc6XCJkaXZcIixmaWx0ZXI6XCJzY209MTIzNFwifX1cIj5cblx0XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuXHQgIHJldHVybiB7XG5cdCAgICAvKipcblx0ICAgICAqIEBwYXJhbXMge09iamVjdH0gb3B0aW9ucyB7XG5cdCAgICAgKiAgIGxvZ0NvbmZpZzoge2xvZ0NvbmZpZ31cblx0ICAgICAqIH1cblx0ICAgICAqL1xuXHQgICAgLy8gaW5pdDogZnVuY3Rpb24ob3B0aW9ucykge1xuXHQgICAgLy8gICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHQgICAgLy8gfSxcblx0XG5cdCAgICBydW46IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgX193ZWJwYWNrX3JlcXVpcmVfXygzMikoKTtcblx0ICAgIH1cblx0ICB9O1xuXHR9O1xuXG4vKioqLyB9KSxcbi8qIDMyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIHByb2plY3QgLSBmaWxlcGF0aFxuXHQgKiBkZXNjcmlwdGlvblxuXHQgKlxuXHQgKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG5cdCAqXG5cdCAqIEF1dGhvcnM6XG5cdCAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cblx0ICovXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciB0cmFja2VyVXRpbCA9IF9fd2VicGFja19yZXF1aXJlX18oMzMpO1xuXHR2YXIgYXBsdXNTdGF0aWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXHR2YXIgdXRpbExvZ2dlciA9IF9fd2VicGFja19yZXF1aXJlX18oMjYpO1xuXHRcblx0dmFyIHdhdGNoQ0xLID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNCk7XG5cdHZhciBXYXRjaERPTSA9IF9fd2VicGFja19yZXF1aXJlX18oNDQpO1xuXHRcblx0dmFyIGNvbmZpZyA9IF9fd2VicGFja19yZXF1aXJlX18oNDMpO1xuXHRcblx0ZnVuY3Rpb24gaW5pdCAoY2IpIHtcblx0ICB2YXIgYXBsdXMgPSAod2luZG93LmFwbHVzIHx8ICh3aW5kb3cuYXBsdXMgPSB7fSkpO1xuXHRcblx0ICB2YXIgYXBsdXNfYWNfaW5pdCA9IGZhbHNlO1xuXHQgIHZhciBfY29uZmlnOyAvLyBsYXN0Q29uZmlnXG5cdCAgdmFyIGRvX2luaXQgPSBmdW5jdGlvbigpIHtcblx0ICAgIGlmICghYXBsdXNfYWNfaW5pdCkge1xuXHQgICAgICB0cmFja2VyVXRpbC53cmFwKGZ1bmN0aW9uKCl7XG5cdCAgICAgICAgLy8g6aG65bqP5LiN6IO95Lmx77yM546v546v55u45omjIVxuXHQgICAgICAgIC8vIDHjgIHnm5HlkKxkb23lj5jljJZcblx0ICAgICAgICBfY29uZmlnID0gY29uZmlnLmdldEF1dG9DbGtDb25maWcoKTtcblx0ICAgICAgICB2YXIgd2F0Y2hET007XG5cdFxuXHQgICAgICAgIGlmIChfY29uZmlnICYmIF9jb25maWcubGVuZ3RoID4gMCkge1xuXHQgICAgICAgICAgd2F0Y2hET00gPSBXYXRjaERPTS5jcmVhdGUoe1xuXHQgICAgICAgICAgICBhdXRvQ2xrQ29uZmlnOiBfY29uZmlnXG5cdCAgICAgICAgICB9KTtcblx0ICAgICAgICAgIHdhdGNoRE9NLmluaXQoKTtcblx0ICAgICAgICAgIC8vIDLjgIHnm5HlkKzngrnlh7vlubbml6Xlv5flj5HpgIFcblx0ICAgICAgICAgIHdhdGNoQ0xLLndhdGNoX2NsaygpO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgYXBsdXMuYXBsdXNfcHVic3ViLnN1YnNjcmliZSgnc2V0TWV0YUluZm8nLCBmdW5jdGlvbiAobWV0YUtleSwgbWV0YVZhdWUsIG9wdHMpIHtcblx0ICAgICAgICAgIGlmIChtZXRhS2V5ID09PSAnYXBsdXMtYXV0by1jbGsnKSB7XG5cdCAgICAgICAgICAgIC8vIDLjgIHojrflj5bphY3nva7lubbliKTmlq3phY3nva7mraPnoa7mgKfvvIxnZXRBdXRvRXhwQ29uZmln5YaF5YGa5LqG5by65qCh6aqM77yM5Ye66ZSZ5ZCO5Lya5omT5Y2w6ZSZ6K+v5L+h5oGvXG5cdCAgICAgICAgICAgIHZhciBfY29uZmlnMiA9IGNvbmZpZy5nZXRBdXRvQ2xrQ29uZmlnKG1ldGFWYXVlKTtcblx0ICAgICAgICAgICAgaWYgKEpTT04uc3RyaW5naWZ5KF9jb25maWcyKSA9PT0gSlNPTi5zdHJpbmdpZnkoX2NvbmZpZykpIHtcblx0ICAgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgX2NvbmZpZyA9IF9jb25maWcyO1xuXHQgICAgICAgICAgICB9XG5cdFxuXHQgICAgICAgICAgICB3YXRjaENMSy5jbGVhcigpO1xuXHQgICAgICAgICAgICBpZiAoIW9wdHMpIHtcblx0ICAgICAgICAgICAgICBvcHRzID0ge1xuXHQgICAgICAgICAgICAgICAgZnJvbTogJ3NldE1ldGFJbmZvJ1xuXHQgICAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgd2F0Y2hET00gJiYgd2F0Y2hET00uY2xlYXIob3B0cyk7XG5cdCAgICAgICAgICAgIHdhdGNoRE9NICYmIHdhdGNoRE9NLmNsZWFyRG9tKHtcblx0ICAgICAgICAgICAgICBhdXRvQ2xrQ29uZmlnOiBfY29uZmlnXG5cdCAgICAgICAgICAgIH0sIG9wdHMpO1xuXHQgICAgICAgICAgICBpZiAobWV0YVZhdWUpIHtcblx0ICAgICAgICAgICAgICBpZiAod2F0Y2hET00pIHtcblx0ICAgICAgICAgICAgICAgIHdhdGNoRE9NLnJlc2V0KHtcblx0ICAgICAgICAgICAgICAgICAgYXV0b0Nsa0NvbmZpZzogX2NvbmZpZ1xuXHQgICAgICAgICAgICAgICAgfSwgb3B0cyk7XG5cdCAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHdhdGNoRE9NID0gV2F0Y2hET00uY3JlYXRlKHtcblx0ICAgICAgICAgICAgICAgICAgYXV0b0Nsa0NvbmZpZzogX2NvbmZpZ1xuXHQgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICB3YXRjaERPTS5pbml0KCk7XG5cdCAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgIHdhdGNoQ0xLLndhdGNoX2NsaygpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfSk7XG5cdCAgICAgIH0sICdkb19pbml0Jyk7XG5cdCAgICAgIGFwbHVzX2FjX2luaXQgPSB0cnVlO1xuXHQgICAgfVxuXHQgIH07XG5cdFxuXHQgIC8vIHV0aWxFdmVudC5ET01SZWFkeShmdW5jdGlvbigpIHtcblx0ICAvLyA1c+WQjui/mOayoeacieWujOaIkOWKoOi9ve+8jOaOp+WItuWPsOaJk+WHuuS4gOadoeitpuWRiu+8jFRPRE8g55uR5o6n6L+Z5Z2X5YaF5a65XG5cdCAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuXHQgICAgaWYgKCFhcGx1c19hY19pbml0KSB7XG5cdCAgICAgIHV0aWxMb2dnZXIubG9nZ2VyKHtcblx0ICAgICAgICBtc2c6ICdhcGx1c19hY19pbml0IGZhaWxlZCEgcGxlYXNlIGNoZWNrIHdoZXRoZXIgYXBsdXNKcyBpcyBsb2FkZWQgY29ycmVjdGx5ISdcblx0ICAgICAgfSk7XG5cdCAgICB9XG5cdCAgfSwgNTAwMCk7XG5cdCAgLy8g5pyJYXBsdXNfcHVic3Vi5LqL5Lu255uR5ZCs6ICF5qih5Z6L55qE5oOF5Ya15LiL77yM55uR5ZCsYXBsdXNSZWFkeeS6i+S7tlxuXHQgIHZhciBfJCA9IGFwbHVzLl8kIHx8IHt9O1xuXHQgIHZhciBnX3NwbSA9IHdpbmRvdy5nX1NQTSB8fCB7fTtcblx0ICBpZiAoXyQuc3RhdHVzID09PSAnY29tcGxldGUnICYmIGdfc3BtLnNwbSkge1xuXHQgICAgZG9faW5pdCgpO1xuXHQgIH1cblx0ICAvLyBhcGx1cy5hcGx1c19wdWJzdWIuc3Vic2NyaWJlKCdhcGx1c1JlYWR5JywgZnVuY3Rpb24oc3RhdHVzKSB7XG5cdCAgLy8gICBpZiAoc3RhdHVzID09PSAnY29tcGxldGUnKSB7XG5cdCAgLy8gICAgIGRvX2luaXQoKTtcblx0ICAvLyAgIH1cblx0ICAvLyB9KTtcblx0ICB2YXIgcSA9ICh3aW5kb3cuYXBsdXNfcXVldWUgfHwgKHdpbmRvdy5hcGx1c19xdWV1ZSA9IFtdKSk7XG5cdCAgcS5wdXNoKHtcblx0ICAgIGFjdGlvbjogYXBsdXNTdGF0aWMuU1VCU0NSSUJFLFxuXHQgICAgYXJndW1lbnRzOiBbJ2FwbHVzUmVhZHknLCBmdW5jdGlvbiAoc3RhdHVzKSB7XG5cdCAgICAgIGlmIChzdGF0dXMgPT09ICdjb21wbGV0ZScpIHtcblx0ICAgICAgICBkb19pbml0KCdhcGx1c1JlYWR5Jyk7XG5cdCAgICAgIH1cblx0ICAgIH1dXG5cdCAgfSk7XG5cdCAgaWYgKHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgY2IoKTtcblx0ICB9XG5cdCAgLy8gfSk7XG5cdH1cblx0XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuXHQgIHZhciBhcGx1cyA9ICh3aW5kb3cuYXBsdXMgfHwgKHdpbmRvdy5hcGx1cyA9IHt9KSk7XG5cdCAgaWYgKGFwbHVzLl9hcGx1c19hYykge1xuXHQgICAgcmV0dXJuO1xuXHQgIH0gZWxzZSB7XG5cdCAgICBhcGx1cy5fYXBsdXNfYWMgPSB7XG5cdCAgICAgIHN0YXR1czogJ2luaXQnLFxuXHQgICAgICBlbGVtZW50U2VsZWN0b3JTaXplTWFwOiB7fVxuXHQgICAgfTtcblx0ICAgIGluaXQoZnVuY3Rpb24gKCkge1xuXHQgICAgICBhcGx1cy5fYXBsdXNfYWMuc3RhdHVzID0gJ2NvbXBsZXRlJztcblx0ICAgIH0pO1xuXHQgIH1cblx0fTtcblxuXG4vKioqLyB9KSxcbi8qIDMzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIGFsaWxvZy9zIC0gc3JjL2xpYl91L21vbml0b3IvdHJhY2tlclV0aWwuanNcblx0ICogdHJhY2tlclV0aWxcblx0ICpcblx0ICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuXHQgKlxuXHQgKiBBdXRob3JzOlxuXHQgKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG5cdCAqL1xuXHQndXNlIHN0cmljdCc7XG5cdFxuXHR2YXIgdXRpbEdvbGRsb2cgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHRcblx0LyoqXG5cdCAqIGFwbHVz5Zyo57q/6LCD6K+V77yM5pel5b+X5Lya5Ye6546w5Zyo5Zyo57q/6LCD6K+V5bmz5Y+w5LitXG5cdCAqIGh0dHBzOi8vbWxvZy5hbGliYWJhLWluYy5jb20vYXBsdXN0cmFja1xuXHQgKiBAcGFyYW1zIG8ge09iamVjdH0ge1xuXHQgKiAgIG1ldGhvZE5hbWU6IHVwZGF0ZU5leHRQYWdlVXRwYXJhbS9wYWdlQXBwZWFyL29uVVRDYWxsQmFjay4uLlxuXHQgKiAgIHBhcmFtczogey4uLn1cblx0ICogfVxuXHQgKi9cblx0dmFyIGRvX3RyYWNrZXIyID0gZnVuY3Rpb24gKHBhcmFtcywgbWV0aG9kX25hbWUpIHtcblx0ICB2YXIgcSA9IHV0aWxHb2xkbG9nLmdldEdsb2JhbFZhbHVlKCdhcGx1c19xdWV1ZScsIFtdKTtcblx0ICBxLnB1c2goe1xuXHQgICAgYWN0aW9uOiAnYXBsdXMuX2FwbHVzX2NwbHVnaW5fdHJhY2tfZGViLm1vbml0b3InLFxuXHQgICAgYXJndW1lbnRzOiBbe1xuXHQgICAgICBrZXk6ICdBUExVU19QTFVHSU5fREVCVUcnLFxuXHQgICAgICB0aXRsZTogJ2FwbHVzX2NvcmUnLFxuXHQgICAgICBtc2c6IFtcblx0ICAgICAgICAnX2Vycm9yXzptZXRob2ROYW1lPScgKyBtZXRob2RfbmFtZSArICcscGFyYW1zPScgKyBKU09OLnN0cmluZ2lmeShwYXJhbXMpXG5cdCAgICAgIF0sXG5cdCAgICAgIHR5cGU6ICd1cGRhdGVNc2cnLFxuXHQgICAgICBkZXNjcmlwdGlvbjogbWV0aG9kX25hbWUgfHwgJ2FwbHVzX2NvcmUnXG5cdCAgICB9XVxuXHQgIH0pO1xuXHR9O1xuXHRcblx0dmFyIGRvX3RyYWNrZXIgPSBmdW5jdGlvbiAocGFyYW1zLCBtZXRob2RfbmFtZSwgY2IpIHtcblx0ICB2YXIgcSA9IHV0aWxHb2xkbG9nLmdldEdsb2JhbFZhbHVlKCdhcGx1c19xdWV1ZScsIFtdKTtcblx0ICBxLnB1c2goe1xuXHQgICAgYWN0aW9uOiBbJ2FwbHVzJywgJ19hcGx1c19jcGx1Z2luX20nLCBtZXRob2RfbmFtZV0uam9pbignLicpLFxuXHQgICAgYXJndW1lbnRzOiBbcGFyYW1zLCBjYl1cblx0ICB9KTtcblx0fTtcblx0XG5cdC8qKlxuXHQgKiDorrDlvZXigJ1KU+mUmeivr+KAnFxuXHQgKlxuXHQgKiBAcGFyYW1zIHtPYmplY3R9IGNvbmZpZyA6IHtcblx0ICogICBsb2drZXk6ICdmc3AuMS4xJyxcblx0ICogICBtZXNzYWdlOiAnJyxcblx0ICogICBlcnJvcjogZXJyb3IsXG5cdCAqICAgZmlsZW5hbWU6ICdmaWxlbmFtZScsXG5cdCAqIH1cblx0ICpcblx0ICogQHJldHVybiB7Qm9vbGVhbn1cblx0ICovXG5cdGV4cG9ydHMuZG9fdHJhY2tlcl9qc2Vycm9yID0gZnVuY3Rpb24ocGFyYW1zLCBjYikge1xuXHQgIHZhciBuYW1lID0gJ2RvX3RyYWNrZXJfanNlcnJvcic7XG5cdCAgZG9fdHJhY2tlcihwYXJhbXMsIG5hbWUsIGNiKTtcblx0ICBkb190cmFja2VyMihwYXJhbXMsIG5hbWUpO1xuXHQgIHZhciBhcGx1cyA9IHV0aWxHb2xkbG9nLmdldEdsb2JhbFZhbHVlKCdhcGx1cycpO1xuXHQgIGlmIChhcGx1cyAmJiBhcGx1cy5hcGx1c0RlYnVnICYmIGNvbnNvbGUpIHtcblx0ICAgIGNvbnNvbGUud2FybihwYXJhbXMpO1xuXHQgIH1cblx0fTtcblx0XG5cdC8qKlxuXHQgKiDljIXoo7nmlrnms5XvvIznu5nmlrnms5XliqB0cnkgY2F0Y2gg5ZKM6ZSZ6K+v55uR5o6nXG5cdCAqIEBwYXJhbSBmbiB7RnVuY3Rpb259XG5cdCAqIEBwYXJhbSBmbl9uYW1lIHtTdHJpbmd9XG5cdCAqL1xuXHRleHBvcnRzLndyYXAgPSBmdW5jdGlvbihmbikge1xuXHQgIGlmICh0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicpIHtcblx0ICAgIHRyeSB7XG5cdCAgICAgIGZuKCk7XG5cdCAgICB9IGNhdGNoIChlcnIpIHtcblx0ICAgICAgZG9fdHJhY2tlcjIoe1xuXHQgICAgICAgIG1zZzogZXJyLm1lc3NhZ2UgfHwgZXJyXG5cdCAgICAgIH0sICdleGNlcHRpb24nKTtcblx0ICAgIH0gZmluYWxseSB7XG5cdCAgICB9XG5cdCAgfVxuXHR9O1xuXG4vKioqLyB9KSxcbi8qIDM0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIHByb2plY3QgLSBmaWxlcGF0aFxuXHQgKiBkZXNjcmlwdGlvblxuXHQgKlxuXHQgKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG5cdCAqXG5cdCAqIEF1dGhvcnM6XG5cdCAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cblx0ICovXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciB1dGlsQXJyYXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM1KTtcblx0dmFyIHV0aWxBdHRyaWJ1dGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4KTtcblx0dmFyIHV0aWxEb20gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM2KTtcblx0dmFyIHV0aWxHb2xkbG9nID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0dmFyIHV0aWxEYXNoID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMSk7XG5cdHZhciBlYWNoTWFwID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNyk7XG5cdHZhciBlYWNoID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNyk7XG5cdFxuXHR2YXIgdXRpbEV2ZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOCk7XG5cdHZhciB1dGlsX2FjX2FlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MCk7XG5cdHZhciBjb25maWcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQzKTtcblx0XG5cdC8vIHZhciBpc1RvdWNoRW5hYmxlZCA9IGZ1bmN0aW9uKCkge1xuXHQvLyAgIHZhciBfJCA9IHV0aWxHb2xkbG9nLmdldEdvbGRsb2dWYWwoJ18kJykgfHwge307XG5cdC8vICAgdmFyIG1ldGFfaW5mbyA9IF8kLm1ldGFfaW5mbyB8fCB7fTtcblx0Ly8gICB2YXIgYXBsdXNUb3VjaCA9IG1ldGFfaW5mb1snYXBsdXMtdG91Y2gnXTtcblx0Ly8gICByZXR1cm4gdXRpbERvbS5pc1RvdWNoKCkgJiYgKGFwbHVzVG91Y2ggPT09ICcxJyB8fCBhcGx1c1RvdWNoID09PSAndGFwJyk7XG5cdC8vIH07XG5cdFxuXHR2YXIgd2luID0gd2luZG93O1xuXHR2YXIgdGFncyA9IFsnaWZyYW1lJywgJ2h0bWwnLCAnYm9keScsICdoZWFkJ107XG5cdHZhciBMT0dLRVlfQVRUUiA9IGNvbmZpZy5EQVRBX0FQTFVTX0FDX0tFWTtcblx0XG5cdHZhciB0cnlHZXRQYXJhbXMgPSBmdW5jdGlvbihlbCkge1xuXHQgIHZhciBjbGtDb25maWdzID0gW107XG5cdCAgdmFyIGhhc2hfdmFsdWUgPSBlbCA/IHV0aWxBdHRyaWJ1dGUudHJ5VG9HZXRBdHRyaWJ1dGUoZWwsIExPR0tFWV9BVFRSKSA6ICcnO1xuXHQgIGlmIChoYXNoX3ZhbHVlKSB7XG5cdCAgICB2YXIgX2FwbHVzX2FjID0gdXRpbEdvbGRsb2cuZ2V0R29sZGxvZ1ZhbCgnX2FwbHVzX2FjJykgfHwge307XG5cdCAgICB2YXIgX2FjSGFzaE1hcCA9IF9hcGx1c19hYy5fYWNIYXNoTWFwIHx8IHt9O1xuXHQgICAgZWFjaE1hcChfYWNIYXNoTWFwLCBmdW5jdGlvbiAobG9na2V5LCBhcnIpIHtcblx0ICAgICAgZWFjaChhcnIsIGZ1bmN0aW9uICh2KSB7XG5cdCAgICAgICAgaWYgKHYuaGFzaF92YWx1ZSA9PT0gaGFzaF92YWx1ZSkge1xuXHQgICAgICAgICAgY2xrQ29uZmlncy5wdXNoKHYuY2xrQ29uZmlnKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0pO1xuXHQgICAgfSk7XG5cdCAgfVxuXHQgIHJldHVybiB7XG5cdCAgICBjbGtDb25maWdzOiBjbGtDb25maWdzLFxuXHQgICAgZWw6IGVsXG5cdCAgfTtcblx0fTtcblx0XG5cdHZhciBnZXRQYXJhbXMgPSBmdW5jdGlvbihlbCkge1xuXHQgIHZhciBwYXJhbXMgPSB0cnlHZXRQYXJhbXMoZWwpO1xuXHQgIGlmIChwYXJhbXMgJiYgcGFyYW1zLmNsa0NvbmZpZ3MgJiYgcGFyYW1zLmNsa0NvbmZpZ3MubGVuZ3RoID4gMCkge1xuXHQgICAgcmV0dXJuIHBhcmFtcztcblx0ICB9XG5cdFxuXHQgIHdoaWxlICgoZWwgPSBlbC5wYXJlbnROb2RlKSAmJiB1dGlsQXJyYXkuaW5kZXhvZih0YWdzLCBlbC50YWdOYW1lID8gZWwudGFnTmFtZS50b0xvd2VyQ2FzZSgpIDogJ2h0bWwnKSA9PT0gLTEpIHtcblx0ICAgIHBhcmFtcyA9IHRyeUdldFBhcmFtcyhlbCk7XG5cdCAgICBpZiAocGFyYW1zICYmIHBhcmFtcy5jbGtDb25maWdzICYmIHBhcmFtcy5jbGtDb25maWdzLmxlbmd0aCA+IDApIHtcblx0ICAgICAgcmV0dXJuIHBhcmFtcztcblx0ICAgIH1cblx0ICB9XG5cdH07XG5cdFxuXHR2YXIgaGFuZGxlcl9hdXRvX2NsayA9IGZ1bmN0aW9uKGUpIHtcblx0ICBlID0gZSB8fCB3aW4uZXZlbnQ7XG5cdCAgdmFyIGVsID0gZS50YXJnZXQgfHwgZS5zcmNFbGVtZW50O1xuXHRcblx0ICB2YXIgcGFyYW1zID0gZ2V0UGFyYW1zKGVsKSB8fCB7fTtcblx0ICB2YXIgY2xrQ29uZmlncyA9IHBhcmFtcy5jbGtDb25maWdzO1xuXHQgIGlmIChwYXJhbXMgJiYgY2xrQ29uZmlncyAmJiBwYXJhbXMuZWwpe1xuXHQgICAgZWFjaChjbGtDb25maWdzLCBmdW5jdGlvbiAodikge1xuXHQgICAgICB2YXIgY2xrQ29uZmlnID0gdjtcblx0ICAgICAgZWwgPSBwYXJhbXMuZWw7XG5cdCAgICAgIHZhciBzcG1fYWIgPSBhcGx1cy5zcG1fYWIgPyBhcGx1cy5zcG1fYWIuam9pbignLicpIDogJzAuMCc7IC8vIOS/neW6lXNwbUFCXG5cdCAgICAgIHZhciBzcG0gPSBzcG1fYWIgKyAnLjAuMCc7XG5cdCAgICAgIHZhciBzY20gPSAnJztcblx0ICAgICAgaWYgKHdpbi5nX1NQTSAmJiB0eXBlb2Ygd2luLmdfU1BNLnNwbSA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICAgIHNwbSA9IHdpbi5nX1NQTS5zcG0oZWwpO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciBnb2tleSA9IFtdO1xuXHQgICAgICB2YXIgZXhhcmdzX29yaWdpbiA9IHtcblx0ICAgICAgICAvLyBfeHBhdGg6IHV0aWxfYWNfYWUuZ2V0WFBhdGgoZWwpLFxuXHQgICAgICB9O1xuXHQgICAgICAvLyDor7vlj5booqvmm53lhYnlhYPntKDkuIrnmoTnibnlrprlsZ7mgKfvvIzov5nkupvnibnlrprlsZ7mgKfmmK/pgJrov4fmm53lhYnln4vngrnkuovlhYjln4vov5vljrvnmoRcblx0ICAgICAgdmFyIGV4YXJncyA9IHV0aWxfYWNfYWUuZmlsbFByb3BzRGF0YShjbGtDb25maWcsIGVsLCBleGFyZ3Nfb3JpZ2luKTtcblx0ICAgICAgZXhhcmdzID0gdXRpbF9hY19hZS5maWxsRmlsdGVyRGF0YShjbGtDb25maWcsIGVsLCBleGFyZ3Nfb3JpZ2luKTtcblx0ICAgICAgdmFyIGFjQXV0b1VzZXJGbiA9IGNvbmZpZy5nZXRBdXRvQ2xrVXNlckZuKCk7XG5cdCAgICAgIGlmIChhY0F1dG9Vc2VyRm4pIHtcblx0ICAgICAgICB2YXIgcnMgPSB1dGlsX2FjX2FlLmF1dG9Vc2VyRm5IYW5kbGVyKGFjQXV0b1VzZXJGbiwgZWwsIGNsa0NvbmZpZy5lbGVtZW50U2VsZWN0b3IsIGUpO1xuXHQgICAgICAgIGlmICh0eXBlb2YgcnMgPT09ICdvYmplY3QnKSB7XG5cdCAgICAgICAgICBpZiAodHlwZW9mIHJzLnVzZXJkYXRhID09PSAnb2JqZWN0Jykge1xuXHQgICAgICAgICAgICBleGFyZ3MgPSB1dGlsRGFzaC5hc3NpZ24oZXhhcmdzLCBycy51c2VyZGF0YSk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICAvLyDlj6/op4bljJbln4vngrnkvJrliqjmgIHms6jlhaVzcG3jgIFzY23vvIzor6bop4EgL3Mvc3JjL3BsdWdpbnMvbGliX3dlYnZ0L0xvZ0cuanM6IGdldEF0dHJBcmdzXG5cdCAgICAgICAgICBpZiAocnMuc3BtKSB7XG5cdCAgICAgICAgICAgIHNwbSA9IHJzLnNwbTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIGlmIChycy5zY20pIHtcblx0ICAgICAgICAgICAgc2NtID0gcnMuc2NtO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0gZWxzZSBpZiAocnMgPT09IGZhbHNlKSB7IC8vIOi/lOWbniBmYWxzZSDliJnkuI3kuIrmiqXln4vngrlcblx0ICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKGFwbHVzLmdsb2JhbENvbmZpZy5pc0FsaSkge1xuXHQgICAgICAgIGdva2V5LnB1c2goJ2Nsa2RhdGE9JyArIEpTT04uc3RyaW5naWZ5KFt7XG5cdCAgICAgICAgICBleGFyZ3M6IGV4YXJncyxcblx0ICAgICAgICAgIHNjbTogc2NtLCAvLyBUT0RPXG5cdCAgICAgICAgICBzcG06IHNwbSxcblx0ICAgICAgICAgIGFwbHVzQ29udGVudElkOiAnJyxcblx0ICAgICAgICB9XSkpO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIGZvciAodmFyIGsgaW4gZXhhcmdzKSB7XG5cdCAgICAgICAgICBnb2tleS5wdXNoKGsgKyAnPScgKyBleGFyZ3Nba10pO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICBcblx0ICAgICAgZ29rZXkucHVzaCgnX2lzX2F1dG9fY2xrPTEnKTtcblx0ICAgICAgdmFyIF9tZXRob2QgPSBjbGtDb25maWcubWV0aG9kIHx8ICdQT1NUJztcblx0ICAgICAgaWYgKCFhcGx1cy5nbG9iYWxDb25maWcuaXNBbGkpIHtcblx0ICAgICAgICBfbWV0aG9kID0gJ0dFVCc7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKGNsa0NvbmZpZy5sb2drZXkgIT09ICckJF9BUExVUycpIHtcblx0ICAgICAgICBhcGx1c19xdWV1ZS5wdXNoKHtcblx0ICAgICAgICAgIGFjdGlvbjogJ2FwbHVzLnJlY29yZCcsXG5cdCAgICAgICAgICBhcmd1bWVudHM6IFtjbGtDb25maWcubG9na2V5LCAnQ0xLJywgZ29rZXkuam9pbignJicpLCBfbWV0aG9kXVxuXHQgICAgICAgIH0pOyAgXG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgLy8gY29uc29sZS5sb2coJ2Nsa0NvbmZpZy5sb2drZXkgPT09ICcsIGNsa0NvbmZpZy5sb2drZXkpO1xuXHQgICAgICB9XG5cdCAgICB9KTtcblx0ICB9XG5cdH07XG5cdFxuXHRleHBvcnRzLndhdGNoX2NsayA9IGZ1bmN0aW9uKCkge1xuXHQgIC8qKlxuXHQgICAqIOe7keWumiBkb2N1bWVudCDnmoQgbW91c2Vkb3du44CBdG91Y2gg5LqL5Lu277yM5b2T5YWD57Sg6KKr54K55Ye75oiWdG91Y2jml7boh6rliqjlj5HpgIHlj6/op4bljJbku6Tnrq1cblx0ICAgKi9cblx0ICBpZiAodXRpbERvbS5pc1RvdWNoKCkpIHtcblx0ICAgIHV0aWxFdmVudC5vbihkb2N1bWVudCwgJ3RhcCcsIGhhbmRsZXJfYXV0b19jbGspO1xuXHQgIH0gZWxzZSB7XG5cdCAgICB1dGlsRXZlbnQub24oZG9jdW1lbnQsICdtb3VzZWRvd24nLCBoYW5kbGVyX2F1dG9fY2xrKTtcblx0ICB9XG5cdH07XG5cdFxuXHRleHBvcnRzLmNsZWFyID0gZnVuY3Rpb24oKSB7XG5cdCAgaWYgKHV0aWxEb20uaXNUb3VjaCgpKSB7XG5cdCAgICB1dGlsRXZlbnQudW4oZG9jdW1lbnQsICd0YXAnLCBoYW5kbGVyX2F1dG9fY2xrKTtcblx0ICB9IGVsc2Uge1xuXHQgICAgdXRpbEV2ZW50LnVuKGRvY3VtZW50LCAnbW91c2Vkb3duJywgaGFuZGxlcl9hdXRvX2Nsayk7XG5cdCAgfVxuXHR9O1xuXG5cbi8qKiovIH0pLFxuLyogMzUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQvKipcblx0ICogcHJvamVjdCAtIGZpbGVwYXRoXG5cdCAqIOaVsOe7hOW3peWFt1xuXHQgKlxuXHQgKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG5cdCAqXG5cdCAqIEF1dGhvcnM6XG5cdCAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cblx0ICovXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdC8qKlxuXHQgKiBJRTjkuI3mlK/mjIHmlbDnu4Tljp/nlJ/nmoRpbmRleE9m77yM5pWF6Ieq6KGM5a6e546w5LiA5LiqaW5kZXhvZlxuXHQgKiBAcGFyYW0gW0FycmF5XSBhcnJcblx0ICogQHBhcmFtIFtPYmplY3RdIGl0ZW1cblx0ICogQHJldHVybiBbTnVtYmVyXSBpbmRleFxuXHQgKi9cblx0ZXhwb3J0cy5pbmRleG9mID0gZnVuY3Rpb24oYXJyLCBpdGVtKSB7XG5cdCAgdmFyIGluZGV4ID0gLTE7XG5cdCAgdHJ5IHtcblx0ICAgIGluZGV4ID0gYXJyLmluZGV4T2YoaXRlbSk7XG5cdCAgfSBjYXRjaCAoZSkge1xuXHQgICAgZm9yICh2YXIgaiA9IDA7IGogPCBhcnIubGVuZ3RoOyBqKyspIHtcblx0ICAgICAgaWYgKGFycltqXSA9PT0gaXRlbSkge1xuXHQgICAgICAgIGluZGV4ID0gajtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0gZmluYWxseSB7XG5cdCAgICByZXR1cm4gaW5kZXg7XG5cdCAgfVxuXHR9O1xuXHRcblx0ZXhwb3J0cy5pc0FycmF5ID0gZnVuY3Rpb24gKG8pIHtcblx0ICBpZiAoQXJyYXkuaXNBcnJheSkge1xuXHQgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkobyk7XG5cdCAgfSBlbHNlIHtcblx0ICAgIHJldHVybiAvQXJyYXkvLnRlc3QoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pKTtcblx0ICB9XG5cdH07XG5cblxuLyoqKi8gfSksXG4vKiAzNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBwcm9qZWN0IC0gZmlsZXBhdGhcblx0ICogZG9t5pON5L2c5bel5YW357G777yM6L+Z5Liq5Z+656GA5bel5YW357G75Lya6KKr5YW25LuW5bel5YW357G75byV55So77yM5pWF5Lil56aB5Zyo6L+Z6YeM5YaN5byV55So5YW25LuW5qih5Z2X5Lul5YWN5Ye6546w6Zeu6aKYXG5cdCAqXG5cdCAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cblx0ICpcblx0ICogQXV0aG9yczpcblx0ICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuXHQgKi9cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIHV0aWxBdHRyaWJ1dGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4KTtcblx0dmFyIGFwbHVzU3RhdGljID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblx0XG5cdHZhciBfaGVhZF9ub2RlO1xuXHR2YXIgX2N1cnJlbnROb2RlO1xuXHRcblx0ZnVuY3Rpb24gZ2V0Q3VycmVudE5vZGUgKCkge1xuXHQgIGlmICghX2N1cnJlbnROb2RlKSB7XG5cdCAgICBfY3VycmVudE5vZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYmVhY29uLWFwbHVzJykgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RiLWJlYWNvbi1hcGx1cycpO1xuXHQgIH1cblx0ICByZXR1cm4gX2N1cnJlbnROb2RlO1xuXHR9XG5cdGV4cG9ydHMuZ2V0Q3VycmVudE5vZGUgPSBnZXRDdXJyZW50Tm9kZTtcblx0XG5cdC8qKlxuXHQgKiBBcGx1c+aUr+aMgemHh+mbhkNTUOino+WGs+aWueahiFxuXHQgKiBmcm9tIOS6keadsCAgMjAxOC0xMi0xNyAgaHR0cHM6Ly9hb25lLmFsaWJhYmEtaW5jLmNvbS9yZXEvMTgyNDExNTQ/ZnJvbT1hayZmcm9tPWFrJlxuXHQgKi9cblx0ZnVuY3Rpb24gc2V0Tm9uY2UgKG5vZGUpIHtcblx0ICB2YXIgY3VycmVudF9ub2RlID0gZ2V0Q3VycmVudE5vZGUoKTtcblx0ICB2YXIgbm9uY2UgPSB1dGlsQXR0cmlidXRlLnRyeVRvR2V0QXR0cmlidXRlKGN1cnJlbnRfbm9kZSwgJ2NzcHgnKTtcblx0ICBpZiAobm9kZSAmJiBub25jZSkge1xuXHQgICAgbm9kZS5ub25jZSA9IG5vbmNlO1xuXHQgIH1cblx0fVxuXHRcblx0LyoqXG5cdCAqIOWcqOW9k+WJjemhtemdoua3u+WKoOS4gOS4qiBqc1xuXHQgKiBAcGFyYW0gc3JjXG5cdCAqIEBwYXJhbSBbaHR0cHNfc3JjXVxuXHQgKi9cblx0ZXhwb3J0cy5hZGRTY3JpcHQgPSBmdW5jdGlvbiAoc3JjLCBodHRwc19zcmMsIGlkKSB7XG5cdCAgdmFyIHMgPSAnc2NyaXB0Jztcblx0ICB2YXIgdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQocyk7XG5cdCAgdC50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7XG5cdCAgdC5hc3luYyA9IHRydWU7XG5cdCAgdmFyIGN1cnJlbnRfbm9kZSA9IGdldEN1cnJlbnROb2RlKCk7XG5cdCAgdmFyIGhhc0Nyb3NzT3JpZ2luID0gY3VycmVudF9ub2RlICYmIGN1cnJlbnRfbm9kZS5oYXNBdHRyaWJ1dGUoJ2Nyb3Nzb3JpZ2luJyk7XG5cdCAgaWYgKGhhc0Nyb3NzT3JpZ2luKSB7XG5cdCAgICB0LmNyb3NzT3JpZ2luID0gJ2Fub255bW91cyc7XG5cdCAgfVxuXHRcblx0ICB2YXIgdXJsID0gYXBsdXNTdGF0aWMuSFRUUFMgPT09IGxvY2F0aW9uLnByb3RvY29sID8gKGh0dHBzX3NyYyB8fCBzcmMpIDogc3JjO1xuXHQgIGlmICh1cmwuaW5kZXhPZignLy8nKSA9PT0gMCkge1xuXHQgICAgdXJsID0gYXBsdXNTdGF0aWMuSFRUUFMgKyB1cmw7XG5cdCAgfVxuXHQgIHQuc3JjID0gdXJsO1xuXHQgIGlmIChpZCkge1xuXHQgICAgdC5pZCA9IGlkO1xuXHQgIH1cblx0ICBzZXROb25jZSh0KTtcblx0ICB2YXIgbSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKHMpWzBdO1xuXHQgIF9oZWFkX25vZGUgPSBfaGVhZF9ub2RlIHx8IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF07XG5cdCAgaWYgKG0pIHtcblx0ICAgIG0ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodCwgbSk7XG5cdCAgfSBlbHNlIGlmIChfaGVhZF9ub2RlKSB7XG5cdCAgICBfaGVhZF9ub2RlLmFwcGVuZENoaWxkKHQpO1xuXHQgIH1cblx0fTtcblx0XG5cdC8qKlxuXHQgKiDlnKjlvZPliY3pobXpnaLmt7vliqDkuIDkuKoganPvvIzlubbmiafooYzlm57osINcblx0ICogQHBhcmFtIHNyY1xuXHQgKiBAcGFyYW0gW2h0dHBzX3NyY11cblx0ICovXG5cdGV4cG9ydHMubG9hZFNjcmlwdCA9IGZ1bmN0aW9uKHVybCwgY2FsbGJhY2spIHtcblx0ICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuXHQgIF9oZWFkX25vZGUgPSBfaGVhZF9ub2RlIHx8IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF07XG5cdCAgbm9kZS5hc3luYyA9IHRydWU7XG5cdFxuXHQgIGlmIChcIm9ubG9hZFwiIGluIG5vZGUpIHtcblx0ICAgIG5vZGUub25sb2FkID0gb25sb2FkO1xuXHQgIH0gZWxzZSB7XG5cdCAgICB2YXIgb25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIGlmICgvbG9hZGVkfGNvbXBsZXRlLy50ZXN0KG5vZGUucmVhZHlTdGF0ZSkpIHtcblx0ICAgICAgICBvbmxvYWQoKTtcblx0ICAgICAgfVxuXHQgICAgfTtcblx0ICAgIG5vZGUub25yZWFkeXN0YXRlY2hhbmdlID0gb25yZWFkeXN0YXRlY2hhbmdlO1xuXHRcblx0ICAgIC8vIOS4gOW8gOWni+S5n+WIpOaWreS4gOasoeeKtuaAgVxuXHQgICAgb25yZWFkeXN0YXRlY2hhbmdlKCk7XG5cdCAgfVxuXHRcblx0ICBub2RlLm9uZXJyb3IgPSBmdW5jdGlvbihlKSB7XG5cdCAgICBvbmxvYWQoZSk7XG5cdCAgfTtcblx0XG5cdCAgZnVuY3Rpb24gb25sb2FkKGVycm9yKSB7XG5cdCAgICBub2RlLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG5vZGUub25sb2FkID0gbm9kZS5vbmVycm9yID0gbnVsbDtcblx0ICAgIG5vZGUgPSBudWxsO1xuXHRcblx0ICAgIGNhbGxiYWNrKGVycm9yKTtcblx0ICB9XG5cdFxuXHQgIG5vZGUuc3JjID0gdXJsO1xuXHQgIHNldE5vbmNlKG5vZGUpO1xuXHQgIF9oZWFkX25vZGUuYXBwZW5kQ2hpbGQobm9kZSk7XG5cdH07XG5cdFxuXHQvKipcblx0ICog5Yik5pat5piv5ZCm5pSv5oyBdG91Y2jkuovku7Zcblx0ICogQHJldHVybiBbQm9vbGVhbl1cblx0ICovXG5cdGV4cG9ydHMuaXNUb3VjaCA9IGZ1bmN0aW9uKCkge1xuXHQgIHJldHVybiAnb250b3VjaGVuZCcgaW4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cdH07XG5cdFxuXG5cbi8qKiovIH0pLFxuLyogMzcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQvKipcblx0ICogcHJvamVjdCAtIGZpbGVwYXRoXG5cdCAqIOWvuW1hcOi/m+ihjOmrmOaAp+iDveeahOmBjeWOhlxuXHQgKlxuXHQgKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG5cdCAqXG5cdCAqIEF1dGhvcnM6XG5cdCAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cblx0ICovXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1hcCwgY2FsbGJhY2spIHtcblx0ICBpZiAoT2JqZWN0ICYmIE9iamVjdC5rZXlzKSB7XG5cdCAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG1hcCk7XG5cdCAgICB2YXIgbGVuID0ga2V5cy5sZW5ndGg7XG5cdCAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdCAgICAgIHZhciBrMSA9IGtleXNbaV07XG5cdCAgICAgIGNhbGxiYWNrKGsxLCBtYXBbazFdKTtcblx0ICAgIH1cblx0ICB9IGVsc2Uge1xuXHQgICAgZm9yICh2YXIgayBpbiBtYXApIHtcblx0ICAgICAgY2FsbGJhY2soaywgbWFwW2tdKTtcblx0ICAgIH1cblx0ICB9XG5cdH07XG5cblxuLyoqKi8gfSksXG4vKiAzOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBwcm9qZWN0IC0gZmlsZXBhdGhcblx0ICogZGVzY3JpcHRpb25cblx0ICpcblx0ICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuXHQgKlxuXHQgKiBBdXRob3JzOlxuXHQgKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG5cdCAqL1xuXHQndXNlIHN0cmljdCc7XG5cdFxuXHR2YXIgYXR0YSA9ICEhZG9jdW1lbnQuYXR0YWNoRXZlbnQ7XG5cdHZhciBhcGx1c1RhcCA9IF9fd2VicGFja19yZXF1aXJlX18oMzkpO1xuXHRcblx0ZnVuY3Rpb24gZ2V0Q3VzdG9tVGFwICgpIHtcblx0ICB2YXIgXyQgPSBhcGx1cy5fJCB8fCB7fTtcblx0ICB2YXIgbWV0YV9pbmZvID0gXyQubWV0YV9pbmZvIHx8IHt9O1xuXHQgIHZhciBhcGx1c19jdGFwID0gbWV0YV9pbmZvLmFwbHVzX2N0YXAgfHwge307XG5cdCAgaWYgKGFwbHVzX2N0YXAgJiYgdHlwZW9mIGFwbHVzX2N0YXAub24gPT09ICdmdW5jdGlvbicpIHtcblx0ICAgIHJldHVybiBhcGx1c19jdGFwO1xuXHQgIH0gZWxzZSB7XG5cdCAgICByZXR1cm4gbnVsbDtcblx0ICB9XG5cdH07XG5cdFxuXHRmdW5jdGlvbiB0YXBFdmVudEJpbmQoZWxlbWVudCwgZm4pIHtcblx0ICAvLyDlpoLmnpzkuJrliqHmlrnmnInoh6rlrprkuYnlrp7njrDnmoR0YXDkuovku7bmj5Lku7bvvIzkvJjlhYjmjInor6Xkuovku7bmiafooYxcblx0ICB2YXIgY3VzdG9tVGFwID0gZ2V0Q3VzdG9tVGFwKCk7XG5cdCAgaWYgKGN1c3RvbVRhcCkge1xuXHQgICAgY3VzdG9tVGFwLm9uKGVsZW1lbnQsIGZuKTtcblx0ICB9IGVsc2Uge1xuXHQgICAgYXBsdXNUYXAub24oZWxlbWVudCwgZm4pO1xuXHQgIH1cblx0fTtcblx0XG5cdGZ1bmN0aW9uIHRhcEV2ZW50VW5CaW5kKGVsZW1lbnQsIGZuKSB7XG5cdCAgLy8g5aaC5p6c5Lia5Yqh5pa55pyJ6Ieq5a6a5LmJ5a6e546w55qEdGFw5LqL5Lu25o+S5Lu277yM5LyY5YWI5oyJ6K+l5LqL5Lu25omn6KGMXG5cdCAgdmFyIGN1c3RvbVRhcCA9IGdldEN1c3RvbVRhcCgpO1xuXHQgIGlmIChjdXN0b21UYXApIHtcblx0ICAgIGN1c3RvbVRhcC51bihlbGVtZW50LCBmbik7XG5cdCAgfSBlbHNlIHtcblx0ICAgIGFwbHVzVGFwLnVuKGVsZW1lbnQsIGZuKTtcblx0ICB9XG5cdH07XG5cdFxuXHQvKipcblx0ICog57uR5a6a5LqL5Lu2XG5cdCAqIEBwYXJhbSBvYmoge1dpbmRvd3xFbGVtZW50fSBET00g5YWD57SgXG5cdCAqIEBwYXJhbSBldmVudF90eXBlXG5cdCAqIEBwYXJhbSBmXG5cdCAqL1xuXHRleHBvcnRzLm9uID0gZnVuY3Rpb24ob2JqLCBldmVudF90eXBlLCBmKSB7XG5cdCAgaWYgKGV2ZW50X3R5cGUgPT09ICd0YXAnKSB7XG5cdCAgICB0YXBFdmVudEJpbmQob2JqLCBmKTtcblx0ICAgIHJldHVybjtcblx0ICB9XG5cdCAgaWYgKGF0dGEpIHtcblx0ICAgIG9ialsnYXR0YWNoRXZlbnQnXShldmVudF90eXBlLCBmKTtcblx0ICB9IGVsc2Uge1xuXHQgICAgb2JqWydhZGRFdmVudExpc3RlbmVyJ10oZXZlbnRfdHlwZSwgZik7XG5cdCAgfVxuXHR9O1xuXHRcblx0LyoqXG5cdCAqIOenu+mZpOe7keWumuS6i+S7tlxuXHQgKiBAcGFyYW0gb2JqIHtXaW5kb3d8RWxlbWVudH0gRE9NIOWFg+e0oFxuXHQgKiBAcGFyYW0gZXZlbnRfdHlwZVxuXHQgKiBAcGFyYW0gZlxuXHQgKi9cblx0ZXhwb3J0cy51biA9IGZ1bmN0aW9uKG9iaiwgZXZlbnRfdHlwZSwgZikge1xuXHQgIGlmIChldmVudF90eXBlID09PSAndGFwJykge1xuXHQgICAgdGFwRXZlbnRVbkJpbmQob2JqLCBmKTtcblx0ICAgIHJldHVybjtcblx0ICB9XG5cdCAgaWYgKGF0dGEpIHtcblx0ICAgIG9ialsnZGV0YWNoRXZlbnQnXShldmVudF90eXBlLCBmKTtcblx0ICB9IGVsc2Uge1xuXHQgICAgb2JqWydyZW1vdmVFdmVudExpc3RlbmVyJ10oZXZlbnRfdHlwZSwgZik7XG5cdCAgfVxuXHR9O1xuXG5cbi8qKiovIH0pLFxuLyogMzkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQvKipcblx0ICogdGFwXG5cdCAqIHRoYW5rcyBA6JmO54mZXG5cdCAqIGh0dHA6Ly9naXRsYWIuYWxpYmFiYS1pbmMuY29tL2FsaWxvZy9hcGx1c19wbHVnaW5fYWxpdHJpcC90cmVlL21hc3Rlci9zcmMvbGliX3RhcFxuXHQgKiBBdXRob3JzOlxuXHQgKiAgIOiZjueJmSA8aHV5YS5uemJAYWxpYmFiYS1pbmMuY29tPlxuXHQgKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG5cdCAqL1xuXHRcblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIGlzSW5pdGlhbGl6ZWQgPSBmYWxzZTtcblx0XG5cdC8vIHZhciBkb2MgPSB3aW5kb3cuZG9jdW1lbnQ7XG5cdC8vIHZhciBkb2NFbCA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cdHZhciBnZXN0dXJlcyA9IHt9O1xuXHR2YXIgVE9VQ0hfU1RBUlQgPSAndG91Y2hzdGFydCc7XG5cdHZhciBUT1VDSF9FTkQgPSAndG91Y2hlbmQnO1xuXHR2YXIgVE9VUkNIX01PVkUgPSAndG91Y2htb3ZlJztcblx0dmFyIFRBUFBJTkcgPSAndGFwcGluZyc7XG5cdHZhciBUT1VDSF9DQU5DRUwgPSAndG91Y2hjYW5jZWwnO1xuXHRcblx0ZnVuY3Rpb24gZ2V0UmFuZG9tKG1pbiwgbWF4KSB7XG5cdCAgcmV0dXJuIG1pbiArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSk7XG5cdH07XG5cdHZhciBBUExVU19UQVAgPSAnYXBsdXNfdGFwJyArIGdldFJhbmRvbSgxLCAxMDAwMDApO1xuXHRcblx0ZnVuY3Rpb24gZmlyZUV2ZW50KGVsZW1lbnQsIHR5cGUsIGV4dHJhKSB7XG5cdCAgdmFyIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0hUTUxFdmVudHMnKTtcblx0ICBldmVudC5pbml0RXZlbnQodHlwZSwgdHJ1ZSwgdHJ1ZSk7XG5cdFxuXHQgIGlmICh0eXBlb2YgZXh0cmEgPT09ICdvYmplY3QnKSB7XG5cdCAgICBmb3IgKHZhciBwIGluIGV4dHJhKSB7XG5cdCAgICAgIGV2ZW50W3BdID0gZXh0cmFbcF07XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICBlbGVtZW50LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiB0b3VjaHN0YXJ0SGFuZGxlcihldmVudCkge1xuXHQgIHZhciBkb2NFbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblx0ICBpZiAoT2JqZWN0LmtleXMoZ2VzdHVyZXMpLmxlbmd0aCA9PT0gMCkge1xuXHQgICAgZG9jRWwuYWRkRXZlbnRMaXN0ZW5lcihUT1VSQ0hfTU9WRSwgdG91Y2htb3ZlSGFuZGxlciwgZmFsc2UpO1xuXHQgICAgZG9jRWwuYWRkRXZlbnRMaXN0ZW5lcihUT1VDSF9FTkQsIHRvdWNoZW5kSGFuZGxlciwgZmFsc2UpO1xuXHQgICAgZG9jRWwuYWRkRXZlbnRMaXN0ZW5lcihUT1VDSF9DQU5DRUwsIHRvdWNoZW5kSGFuZGxlciwgZmFsc2UpO1xuXHQgIH1cblx0XG5cdCAgLy8gcmVjb3JkIGV2ZXJ5IHRvdWNoXG5cdCAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudC5jaGFuZ2VkVG91Y2hlcy5sZW5ndGg7IGkrKykge1xuXHQgICAgdmFyIHRvdWNoID0gZXZlbnQuY2hhbmdlZFRvdWNoZXNbaV07XG5cdCAgICB2YXIgdG91Y2hSZWNvcmQgPSB7fTtcblx0XG5cdCAgICBmb3IgKHZhciBwIGluIHRvdWNoKSB7XG5cdCAgICAgIHRvdWNoUmVjb3JkW3BdID0gdG91Y2hbcF07XG5cdCAgICB9XG5cdFxuXHQgICAgdmFyIGdlc3R1cmUgPSB7XG5cdCAgICAgIHN0YXJ0VG91Y2g6IHRvdWNoUmVjb3JkLFxuXHQgICAgICBzdGFydFRpbWU6IERhdGUubm93KCksXG5cdCAgICAgIHN0YXR1czogVEFQUElORyxcblx0ICAgICAgZWxlbWVudDogZXZlbnQuc3JjRWxlbWVudCB8fCBldmVudC50YXJnZXRcblx0ICAgIH07XG5cdCAgICBnZXN0dXJlc1t0b3VjaC5pZGVudGlmaWVyXSA9IGdlc3R1cmU7XG5cdCAgfVxuXHR9XG5cdFxuXHRmdW5jdGlvbiB0b3VjaG1vdmVIYW5kbGVyKGV2ZW50KSB7XG5cdCAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudC5jaGFuZ2VkVG91Y2hlcy5sZW5ndGg7IGkrKykge1xuXHQgICAgdmFyIHRvdWNoID0gZXZlbnQuY2hhbmdlZFRvdWNoZXNbaV07XG5cdCAgICB2YXIgZ2VzdHVyZSA9IGdlc3R1cmVzW3RvdWNoLmlkZW50aWZpZXJdO1xuXHRcblx0ICAgIGlmICghZ2VzdHVyZSkge1xuXHQgICAgICByZXR1cm47XG5cdCAgICB9XG5cdFxuXHQgICAgdmFyIGRpc3BsYWNlbWVudFggPSB0b3VjaC5jbGllbnRYIC0gZ2VzdHVyZS5zdGFydFRvdWNoLmNsaWVudFg7XG5cdCAgICB2YXIgZGlzcGxhY2VtZW50WSA9IHRvdWNoLmNsaWVudFkgLSBnZXN0dXJlLnN0YXJ0VG91Y2guY2xpZW50WTtcblx0ICAgIHZhciBkaXN0YW5jZSA9IE1hdGguc3FydChNYXRoLnBvdyhkaXNwbGFjZW1lbnRYLCAyKSArIE1hdGgucG93KGRpc3BsYWNlbWVudFksIDIpKTtcblx0XG5cdCAgICAvLyBtYWdpYyBudW1iZXIgMTA6IG1vdmluZyAxMHB4IG1lYW5zIHBhbiwgbm90IHRhcFxuXHQgICAgaWYgKChnZXN0dXJlLnN0YXR1cyA9PT0gVEFQUElORyB8fCBnZXN0dXJlLnN0YXR1cyA9PT0gJ3ByZXNzaW5nJykgJiYgZGlzdGFuY2UgPiAxMCkge1xuXHQgICAgICBnZXN0dXJlLnN0YXR1cyA9ICdwYW5uaW5nJztcblx0ICAgIH1cblx0ICB9XG5cdH1cblx0XG5cdGZ1bmN0aW9uIHRvdWNoZW5kSGFuZGxlcihldmVudCkge1xuXHRcblx0ICBmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50LmNoYW5nZWRUb3VjaGVzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICB2YXIgdG91Y2ggPSBldmVudC5jaGFuZ2VkVG91Y2hlc1tpXTtcblx0ICAgIHZhciBpZCA9IHRvdWNoLmlkZW50aWZpZXI7XG5cdCAgICB2YXIgZ2VzdHVyZSA9IGdlc3R1cmVzW2lkXTtcblx0XG5cdCAgICBpZiAoIWdlc3R1cmUpIHtcblx0ICAgICAgY29udGludWU7XG5cdCAgICB9XG5cdFxuXHQgICAgaWYgKGdlc3R1cmUuc3RhdHVzID09PSBUQVBQSU5HICYmIGV2ZW50LnR5cGUgPT09IFRPVUNIX0VORCkge1xuXHQgICAgICBnZXN0dXJlLnRpbWVzdGFtcCA9IERhdGUubm93KCk7XG5cdCAgICAgIC8vIGZpcmUgY2xpY2ssIG5vdCB0YXAuXG5cdCAgICAgIGZpcmVFdmVudChnZXN0dXJlLmVsZW1lbnQsIEFQTFVTX1RBUCwge1xuXHQgICAgICAgIHRvdWNoOiB0b3VjaCxcblx0ICAgICAgICB0b3VjaEV2ZW50OiBldmVudFxuXHQgICAgICB9KTtcblx0ICAgIH1cblx0XG5cdCAgICBkZWxldGUgZ2VzdHVyZXNbaWRdO1xuXHQgIH1cblx0XG5cdCAgdmFyIGRvY0VsID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXHQgIGlmIChPYmplY3Qua2V5cyhnZXN0dXJlcykubGVuZ3RoID09PSAwKSB7XG5cdCAgICBkb2NFbC5yZW1vdmVFdmVudExpc3RlbmVyKFRPVVJDSF9NT1ZFLCB0b3VjaG1vdmVIYW5kbGVyLCBmYWxzZSk7XG5cdCAgICBkb2NFbC5yZW1vdmVFdmVudExpc3RlbmVyKFRPVUNIX0VORCwgdG91Y2hlbmRIYW5kbGVyLCBmYWxzZSk7XG5cdCAgICBkb2NFbC5yZW1vdmVFdmVudExpc3RlbmVyKFRPVUNIX0NBTkNFTCwgdG91Y2hlbmRIYW5kbGVyLCBmYWxzZSk7XG5cdCAgfVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBmaXhJT1NUb3VjaEJ1ZyhlbGVtZW50KSB7XG5cdCAgaWYgKCFlbGVtZW50Ll9fZml4VG91Y2hFdmVudCkge1xuXHQgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFRPVUNIX1NUQVJULCBmdW5jdGlvbiAoKSB7XG5cdCAgICB9LCBmYWxzZSk7XG5cdCAgICBlbGVtZW50Ll9fZml4VG91Y2hFdmVudCA9IHRydWU7XG5cdCAgfVxuXHR9XG5cdGZ1bmN0aW9uIGluaXQgKCkge1xuXHQgIGlmICghaXNJbml0aWFsaXplZCkge1xuXHQgICAgdmFyIGRvY0VsID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXHQgICAgZG9jRWwuYWRkRXZlbnRMaXN0ZW5lcihUT1VDSF9TVEFSVCwgdG91Y2hzdGFydEhhbmRsZXIsIGZhbHNlKTtcblx0ICAgIGlzSW5pdGlhbGl6ZWQgPSB0cnVlO1xuXHQgIH1cblx0fVxuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSB7XG5cdCAgb246IGZ1bmN0aW9uKGVsZW1lbnQsIGNhbGxiYWNrKSB7XG5cdCAgICBpbml0KCk7XG5cdCAgICBpZiAoZWxlbWVudCAmJiBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIgJiYgY2FsbGJhY2spIHtcblx0ICAgICAgZml4SU9TVG91Y2hCdWcoZWxlbWVudCk7XG5cdCAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihBUExVU19UQVAsIChjYWxsYmFjay5fYXBsdXNfdGFwX2NhbGxiYWNrID0gZnVuY3Rpb24oZSkge1xuXHQgICAgICAgIGNhbGxiYWNrKGUsIGUudGFyZ2V0KTtcblx0ICAgICAgfSksIGZhbHNlKTtcblx0ICAgIH1cblx0ICB9LFxuXHQgIHVuOiBmdW5jdGlvbihlbGVtZW50LCBjYWxsYmFjaykge1xuXHQgICAgaWYgKGVsZW1lbnQgJiYgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyICYmIGNhbGxiYWNrICYmIGNhbGxiYWNrLl9hcGx1c190YXBfY2FsbGJhY2spIHtcblx0ICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKEFQTFVTX1RBUCwgY2FsbGJhY2suX2FwbHVzX3RhcF9jYWxsYmFjaywgZmFsc2UpO1xuXHQgICAgfVxuXHQgIH1cblx0fTtcblxuXG4vKioqLyB9KSxcbi8qIDQwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIHByb2plY3QgLSBmaWxlcGF0aFxuXHQgKiBkZXNjcmlwdGlvblxuXHQgKlxuXHQgKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG5cdCAqXG5cdCAqIEF1dGhvcnM6XG5cdCAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cblx0ICovXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciBkb2MgPSBkb2N1bWVudDtcblx0dmFyIHdpbiA9IHdpbmRvdztcblx0XG5cdHZhciB1dGlsR29sZGxvZyA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdHZhciB1dGlsTG9nZ2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNik7XG5cdHZhciB1dGlsSGFzaCA9IF9fd2VicGFja19yZXF1aXJlX18oNDEpO1xuXHR2YXIgZWFjaCA9IF9fd2VicGFja19yZXF1aXJlX18oMjcpO1xuXHR2YXIgZWFjaE1hcCA9IF9fd2VicGFja19yZXF1aXJlX18oMzcpO1xuXHR2YXIgdXRpbEVuY29kZSA9IF9fd2VicGFja19yZXF1aXJlX18oNDIpO1xuXHRcblx0dmFyIGNvbmZpZyA9IF9fd2VicGFja19yZXF1aXJlX18oNDMpO1xuXHRcblx0dmFyIGlzQXJyYXkgPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0ICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcblx0fTtcblx0ZXhwb3J0cy5pc0FycmF5ID0gaXNBcnJheTtcblx0XG5cdC8qKlxuXHQgKiBAc2VlIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjY2MTgxOC9qYXZhc2NyaXB0LWdldC14cGF0aC1vZi1hLW5vZGVcblx0ICogQHBhcmFtIGVsXG5cdCAqIEByZXR1cm4ge1N0cmluZ31cblx0ICovXG5cdGV4cG9ydHMuZ2V0WFBhdGggPSBmdW5jdGlvbiAoZWwpIHtcblx0ICB2YXIgYWxsX25vZGVzID0gZG9jLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKSxcblx0ICAgIHNlZ3MsIGksIHNpYiwgdW5pcXVlX2lkX2NvdW50LFxuXHQgICAgbm9kZSwgZWxfaWQ7XG5cdCAgZm9yIChzZWdzID0gW107IGVsICYmIGVsLm5vZGVUeXBlID09IDE7IGVsID0gZWwucGFyZW50Tm9kZSkge1xuXHQgICAgaWYgKGVsLmlkKSB7XG5cdCAgICAgIGVsX2lkID0gZWwuaWQ7XG5cdCAgICAgIHVuaXF1ZV9pZF9jb3VudCA9IDA7XG5cdCAgICAgIGZvciAoaSA9IDA7IGkgPCBhbGxfbm9kZXMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICBub2RlID0gYWxsX25vZGVzW2ldO1xuXHQgICAgICAgIGlmIChub2RlLmlkICYmIG5vZGUuaWQgPT0gZWxfaWQpIHtcblx0ICAgICAgICAgIHVuaXF1ZV9pZF9jb3VudCsrO1xuXHQgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIHNlZ3MudW5zaGlmdChlbC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgKyBcIltAaWQ9XFxcIlwiICsgZWxfaWQgKyBcIlxcXCJdXCIpO1xuXHQgICAgICBpZiAodW5pcXVlX2lkX2NvdW50ID09IDEpIHtcblx0ICAgICAgICBzZWdzLnVuc2hpZnQoXCIvXCIpO1xuXHQgICAgICAgIHJldHVybiBzZWdzLmpvaW4oXCIvXCIpO1xuXHQgICAgICB9XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBmb3IgKGkgPSAxLCBzaWIgPSBlbC5wcmV2aW91c1NpYmxpbmc7IHNpYjsgc2liID0gc2liLnByZXZpb3VzU2libGluZykge1xuXHQgICAgICAgIGlmIChzaWIudGFnTmFtZSA9PSBlbC50YWdOYW1lKSAgaSsrO1xuXHQgICAgICB9XG5cdCAgICAgIHNlZ3MudW5zaGlmdChlbC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgKyBcIltcIiArIGkgKyBcIl1cIik7XG5cdCAgICB9XG5cdCAgfVxuXHQgIHJldHVybiBzZWdzLmxlbmd0aCA/IFwiL1wiICsgc2Vncy5qb2luKFwiL1wiKSA6IG51bGw7XG5cdH07XG5cdFxuXHR2YXIgbm9kZWxpc3RUb0FycmF5ID0gZnVuY3Rpb24gKG5vZGVsaXN0LCBub2Rlcykge1xuXHQgIGlmICghbm9kZXMgfHwgbm9kZXMubGVuZ3RoID09PSAwKSB7XG5cdCAgICBub2RlcyA9IFtdO1xuXHQgIH1cblx0ICBpZiAobm9kZWxpc3QgJiYgbm9kZWxpc3QubGVuZ3RoID4gMCkge1xuXHQgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlbGlzdC5sZW5ndGg7IGkrKykge1xuXHQgICAgICBub2Rlcy5wdXNoKG5vZGVsaXN0W2ldKTtcblx0ICAgIH1cblx0ICB9XG5cdCAgcmV0dXJuIG5vZGVzO1xuXHR9O1xuXHRleHBvcnRzLm5vZGVsaXN0VG9BcnJheSA9IG5vZGVsaXN0VG9BcnJheTtcblx0XG5cdC8qKlxuXHQgKiDmoLnmja7lupTnlKjln4vnmoTlhYPntKDpgInmi6nlmajojrflj5blhYPntKBcblx0ICogQHBhcmFtIHtPYmplY3R9IHtcblx0ICogICAgbG9na2V5OiAvYS5iLmMzLFxuXHQgKiAgICBlbGVtZW50U2VsZWN0b3I6ICdwW2RhdGEtc3BtLWNsaWNrXScsXG5cdCAqICAgIHRhZzogcCxcblx0ICogICAgZmlsdGVyOiBkYXRhLXNwbS1jbGlja1xuXHQgKiB9XG5cdCAqIEByZXR1cm4ge0FycmF5fSBlbGVtZW50c1xuXHQgKi9cblx0ZXhwb3J0cy5nZXRFbGVtZW50cyA9IGZ1bmN0aW9uKG8sIF9kb2N1bWVudCkge1xuXHQgIHZhciBfZG9jID0gX2RvY3VtZW50IHx8IGRvYztcblx0ICB2YXIgZWxlbWVudHMgPSBbXTtcblx0ICAvLyDmlK/mjIFxdWVyeVNlbGVjdG9yQWxs55qE5rWP6KeI5Zmo5oyJ6L+Z5Liq5p2l5Y+W77yM5ZCm5YiZ5oyJ5Lyg57uf55qE5pa55rOVXG5cdCAgaWYgKF9kb2MucXVlcnlTZWxlY3RvckFsbCkge1xuXHQgICAgZWxlbWVudHMgPSBub2RlbGlzdFRvQXJyYXkoX2RvYy5xdWVyeVNlbGVjdG9yQWxsKG8uZWxlbWVudFNlbGVjdG9yKSB8fCBbXSk7XG5cdCAgICAvLyB2YXIgZWxlX3NlbGVjdG9yX3NlbGYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG8uZWxlbWVudFNlbGVjdG9yKTtcblx0ICAgIC8vIGlmIChfZG9jdW1lbnQgJiYgZWxlX3NlbGVjdG9yX3NlbGYgPT09IF9kb2N1bWVudCkge1xuXHQgICAgLy8gICBlbGVtZW50cy5wdXNoKF9kb2N1bWVudCk7XG5cdCAgICAvLyB9XG5cdCAgfSBlbHNlIHtcblx0ICAgIHZhciB0YWdzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoby50YWcpO1xuXHQgICAgdmFyIGF0dHJzID0gby5maWx0ZXIuc3BsaXQoJz0nKTtcblx0ICAgIHZhciBhdHRyX2tleSA9IGF0dHJzLmxlbmd0aCA+IDAgPyBhdHRyc1swXS50cmltKCkgOiAnJztcblx0ICAgIHZhciBhdHRyX3ZhbHVlID0gYXR0cnMubGVuZ3RoID4gMSA/IGF0dHJzWzFdLnRyaW0oKSA6ICcnO1xuXHRcblx0ICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGFncy5sZW5ndGg7IGkrKykge1xuXHQgICAgICB2YXIgdG1wX3RhZyA9IHRhZ3NbaV07XG5cdCAgICAgIHZhciB0bXBfdmFsdWUgPSB0bXBfdGFnLmdldEF0dHJpYnV0ZShhdHRyX2tleSk7XG5cdCAgICAgIHZhciBoYXNLZXkgPSB0bXBfdGFnLmhhc0F0dHJpYnV0ZShhdHRyX2tleSk7XG5cdCAgICAgIGlmIChoYXNLZXkgJiYgKGF0dHJfdmFsdWUgPyBhdHRyX3ZhbHVlID09PSB0bXBfdmFsdWUgOiB0cnVlKSkge1xuXHQgICAgICAgIGVsZW1lbnRzLnB1c2godG1wX3RhZyk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9XG5cdCAgcmV0dXJuIGVsZW1lbnRzO1xuXHR9O1xuXHRcblx0dmFyIGlzRGVidWcgPSBmdW5jdGlvbigpIHtcblx0ICByZXR1cm4gL2FwbHVzRGVidWc9dHJ1ZS8udGVzdChsb2NhdGlvbi5zZWFyY2gpO1xuXHR9O1xuXHR2YXIgSVNfREVCVUcgPSBpc0RlYnVnKCk7XG5cdFxuXHRleHBvcnRzLklTX0RFQlVHID0gSVNfREVCVUc7XG5cdFxuXHQvKipcblx0ICog6K+75Y+W6KKr5pud5YWJL+eCueWHu+WFg+e0oOS4iueahOeJueWumuWxnuaAp++8jOi/meS6m+eJueWumuWxnuaAp+aYr+mAmui/h+abneWFieWfi+eCueS6i+WFiOWfi+i/m+WOu+eahO+8jOWmgui/meS4quS+i+WtkOmHjOeahHByb3Bz77yaXG5cdCAqIDxtZXRhIG5hbWU9XCJhcGx1cy1hdXRvLWV4cFwiIGNvbnRlbnQ9J1t7XCJsb2drZXlcIjpcIi9hYmMxXCIsXCJ0YWdcIjpcImFcIixcImZpbHRlclwiOlwiZGF0YS1zY21cIixcInByb3BzXCI6W1wiY2F0ZVwiLCBcIm5hbWVcIl19XSc+XG5cdCAqIDxtZXRhIG5hbWU9XCJhcGx1cy1hdXRvLWNsa1wiIGNvbnRlbnQ9J1t7XCJsb2drZXlcIjpcIi9hYmMxXCIsXCJ0YWdcIjpcImFcIixcImZpbHRlclwiOlwiZGF0YS1zY21cIixcInByb3BzXCI6W1wiY2F0ZVwiLCBcIm5hbWVcIl19XSc+XG5cdCAqIOi/meS4quaWueazleS8muivu+WPlmVsZW1lbnTkuIrnmoRuYW1l5bGe5oCn5ZKMY2F0ZeWxnuaAp+eahOWAvFxuXHQgKiBAcmV0dXJuIHtPYmplY3R9IG9ialxuXHQgKi9cblx0ZXhwb3J0cy5maWxsUHJvcHNEYXRhID0gZnVuY3Rpb24gKGV4cENvbmZpZywgZWxlbWVudCwgb2JqKSB7XG5cdCAgaWYgKCFvYmopIHtcblx0ICAgIG9iaiA9IHt9O1xuXHQgIH1cblx0ICB0cnkge1xuXHQgICAgdmFyIF9leHBfcHJvcHMgPSBleHBDb25maWcucHJvcHMgfHwgW107XG5cdCAgICBpZiAoX2V4cF9wcm9wcyAmJiBpc0FycmF5KF9leHBfcHJvcHMpICYmIF9leHBfcHJvcHMubGVuZ3RoID4gMCkge1xuXHQgICAgICBmb3IgKHZhciBrID0gMDsgayA8IF9leHBfcHJvcHMubGVuZ3RoOyBrKyspIHtcblx0ICAgICAgICBpZiAoZWxlbWVudCAmJiBlbGVtZW50LmdldEF0dHJpYnV0ZSkge1xuXHQgICAgICAgICAgdmFyIGtleSA9IF9leHBfcHJvcHNba107XG5cdCAgICAgICAgICB2YXIgX3ZhbCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKGtleSk7XG5cdCAgICAgICAgICBpZiAodHlwZW9mIF92YWwgIT09IHVuZGVmaW5lZCAmJiBfdmFsICE9PSBudWxsICYmIF92YWwgIT09ICcnKSB7XG5cdCAgICAgICAgICAgIG9ialtrZXldID0gZW5jb2RlVVJJQ29tcG9uZW50KF92YWwpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0gY2F0Y2ggKGUpIHtcblx0ICAgIHV0aWxMb2dnZXIubG9nZ2VyKHtcblx0ICAgICAgbXNnOiBlICYmIGUubWVzc2FnZVxuXHQgICAgfSk7XG5cdCAgfVxuXHQgIHJldHVybiBvYmo7XG5cdH07XG5cdFxuXHQvKipcblx0ICog6K+75Y+W6KKr5pud5YWJL+eCueWHu+WFg+e0oOS4iueahGZpbHRlcuWxnuaAp++8jOWmgui/meS4quS+i+WtkO+8mlxuXHQgKiA8bWV0YSBuYW1lPVwiYXBsdXMtYXV0by1leHBcIiBjb250ZW50PSdbe1wibG9na2V5XCI6XCIvYWJjMVwiLFwidGFnXCI6XCJhXCIsXCJmaWx0ZXJcIjpcImRhdGEtc2NtXCIsXCJwcm9wc1wiOltcImNhdGVcIiwgXCJuYW1lXCJdfV0nPlxuXHQgKiA8bWV0YSBuYW1lPVwiYXBsdXMtYXV0by1jbGtcIiBjb250ZW50PSdbe1wibG9na2V5XCI6XCIvYWJjMVwiLFwidGFnXCI6XCJhXCIsXCJmaWx0ZXJcIjpcImRhdGEtc2NtXCIsXCJwcm9wc1wiOltcImNhdGVcIiwgXCJuYW1lXCJdfV0nPlxuXHQgKiDov5nkuKrmlrnms5XkvJror7vlj5ZlbGVtZW505LiK55qEZGF0YS1zY23lsZ7mgKfnmoTlgLxcblx0ICogQHJldHVybiB7T2JqZWN0fSBvYmpcblx0ICovXG5cdGV4cG9ydHMuZmlsbEZpbHRlckRhdGEgPSBmdW5jdGlvbiAoZXhwQ29uZmlnLCBlbGVtZW50LCBvYmopIHtcblx0ICBpZiAoIW9iaikge1xuXHQgICAgb2JqID0ge307XG5cdCAgfVxuXHQgIHRyeSB7XG5cdCAgICB2YXIgZmlsdGVyID0gZXhwQ29uZmlnLmZpbHRlciB8fCAnJztcblx0ICAgIHZhciB0bXBzID0gZmlsdGVyLnNwbGl0KCc9Jyk7XG5cdFxuXHQgICAgaWYgKGlzQXJyYXkodG1wcykgJiYgdG1wc1sxXSkge1xuXHQgICAgICBvYmpbdG1wc1swXV0gPSB0bXBzWzFdO1xuXHQgICAgfSBlbHNlIGlmICh0bXBzWzBdICYmIGVsZW1lbnQgJiYgZWxlbWVudC5nZXRBdHRyaWJ1dGUpIHtcblx0ICAgICAgdmFyIF92YWwgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSh0bXBzWzBdKSB8fCAnJztcblx0ICAgICAgaWYgKHR5cGVvZiBfdmFsICE9PSB1bmRlZmluZWQgJiYgX3ZhbCAhPT0gbnVsbCAmJiBfdmFsICE9PSAnJykge1xuXHQgICAgICAgIG9ialt0bXBzWzBdXSA9IF92YWw7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9IGNhdGNoIChlKSB7XG5cdCAgICB1dGlsTG9nZ2VyLmxvZ2dlcih7XG5cdCAgICAgIG1zZzogZSAmJiBlLm1lc3NhZ2Vcblx0ICAgIH0pO1xuXHQgIH1cblx0ICByZXR1cm4gb2JqO1xuXHR9O1xuXHRcblx0dmFyIGlzTWV0aG9kID0gZnVuY3Rpb24gKG1ldGhvZCkge1xuXHQgIHJldHVybiAhIS9eUE9TVHxHRVQkL2kudGVzdChtZXRob2QpO1xuXHR9O1xuXHRleHBvcnRzLmlzTWV0aG9kID0gaXNNZXRob2Q7XG5cdFxuXHR2YXIgaXNQa2dTaXplID0gZnVuY3Rpb24gKHBrZ1NpemUpIHtcblx0ICB2YXIgaXNfcGtnX3NpemUgPSAhIS9eXFxkKyQvLnRlc3QocGtnU2l6ZSk7XG5cdCAgaWYgKGlzX3BrZ19zaXplICYmIHBhcnNlSW50KHBrZ1NpemUpID4gMCkge1xuXHQgICAgcmV0dXJuIHRydWU7XG5cdCAgfVxuXHQgIHJldHVybiBmYWxzZTtcblx0fTtcblx0ZXhwb3J0cy5pc1BrZ1NpemUgPSBpc1BrZ1NpemU7XG5cdFxuXHQvKipcblx0ICogYWRkZWQgYnkgQFJpY2hhcmR86LCL5aOrIGluIDIwMTctMTEtMjgg5aKe5Yqg5pel5b+X5omT5YyF5p2h5pWwXCJwa2dTaXplXCIsIOaXpeW/l+WPkemAgeaWueW8j1wibWV0aG9kXCLkuKTkuKrphY3nva7poblcblx0ICogQHBhcmFtcyBleHBDb25maWcge09iamVjdH1cblx0ICogICAgZWc6IHtcblx0ICogICAgICAgXCJsb2drZXlcIjpcIi9hYmMxXCIsXCJ0YWdcIjpcImFcIixcImZpbHRlclwiOlwiZGF0YS1zY21cIixcInByb3BzXCI6W1wibmFtZVwiLFwiYWdlXCJdLFwicGtnU2l6ZVwiOjksXCJtZXRob2RcIjpcIkdFVFwiXG5cdCAqICAgICB9XG5cdCAqIEByZXR1cm4ge09iamVjdH0ge21ldGhvZDogJ0dFVC9QT1NUJywgcGtnU2l6ZTogbnVtYmVyfVxuXHQgKi9cblx0ZXhwb3J0cy5maWx0ZXJFeHBDb25maWdSZXF1ZXN0Q2ZnID0gZnVuY3Rpb24gKGV4cENvbmZpZykge1xuXHQgIHZhciBjZmcgPSBjb25maWcuZ2V0RGVmYXVsdFJlcXVlc3RDZmcoKSB8fCB7fTtcblx0ICB0cnkge1xuXHQgICAgdmFyIG9iaiA9IGV4cENvbmZpZyB8fCB7fTtcblx0ICAgIGlmIChpc01ldGhvZChvYmoubWV0aG9kKSkge1xuXHQgICAgICBjZmcubWV0aG9kID0gb2JqLm1ldGhvZDtcblx0ICAgIH1cblx0ICAgIGlmIChpc1BrZ1NpemUob2JqLnBrZ1NpemUpKSB7XG5cdCAgICAgIGNmZy5wa2dTaXplID0gcGFyc2VJbnQob2JqLnBrZ1NpemUpO1xuXHQgICAgfVxuXHQgIH0gY2F0Y2ggKGUpIHtcblx0ICAgIHV0aWxMb2dnZXIubG9nZ2VyKHtcblx0ICAgICAgbXNnOiBlICYmIGUubWVzc2FnZVxuXHQgICAgfSk7XG5cdCAgfVxuXHQgIHJldHVybiBjZmc7XG5cdH07XG5cdFxuXHR2YXIgc3RyaW5nVG9PYmplY3QgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG5cdCAgdmFyIHBhcmFtc0FyciA9IHBhcmFtcy5zcGxpdCgnJicpO1xuXHQgIHZhciBvYmogPSB7fTtcblx0ICBpZiAocGFyYW1zQXJyLmxlbmd0aCA+IDApIHtcblx0ICAgIGVhY2gocGFyYW1zQXJyLCBmdW5jdGlvbiAodikge1xuXHQgICAgICB2YXIgdG1wID0gdi5zcGxpdCgnPScpO1xuXHQgICAgICBpZiAodG1wLmxlbmd0aCA9PT0gMikge1xuXHQgICAgICAgIG9ialt0bXBbMF1dID0gdXRpbEVuY29kZS50cnlUb0VuY29kZVVSSUNvbXBvbmVudCh0bXBbMV0pO1xuXHQgICAgICB9XG5cdCAgICB9KTtcblx0ICB9XG5cdCAgcmV0dXJuIG9iajtcblx0fTtcblx0XG5cdGV4cG9ydHMuYXV0b1VzZXJGbkhhbmRsZXIgPSBmdW5jdGlvbiAoYXV0b1VzZXJGbiwgZWwsIGVsZW1lbnRTZWxlY3RvciwgZSl7XG5cdCAgdmFyIHJzID0ge1xuXHQgICAgdXNlcmRhdGE6IHt9LFxuXHQgICAgc3BtOiAnJyxcblx0ICAgIHNjbTogJydcblx0ICB9O1xuXHQgIHRyeSB7XG5cdCAgICB2YXIgdXNlclBhcmFtcyA9IGF1dG9Vc2VyRm4oZWwsIGVsZW1lbnRTZWxlY3RvciwgZSk7XG5cdCAgICBpZiAodXNlclBhcmFtcykge1xuXHQgICAgICBpZiAodHlwZW9mIHVzZXJQYXJhbXMgPT09ICdzdHJpbmcnKSB7XG5cdCAgICAgICAgLy8gcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh1c2VyUGFyYW1zKTtcblx0ICAgICAgICBycy51c2VyZGF0YSA9IHN0cmluZ1RvT2JqZWN0KHVzZXJQYXJhbXMpOyAvLyDlrZfnrKbkuLLkvKDpgJLkuI3mlK/mjIHms6jlhaVzcG3jgIFzY21cblx0ICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdXNlclBhcmFtcyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHVzZXJQYXJhbXMudXNlcmRhdGEgPT09ICdvYmplY3QnKSB7XG5cdCAgICAgICAgLy8gcnMudXNlcmRhdGEgPSB0eXBlb2YgdXNlclBhcmFtcy51c2VyZGF0YSA9PT0gJ29iamVjdCcgPyB1c2VyUGFyYW1zLnVzZXJkYXRhIDogIHt9O1xuXHQgICAgICAgIGVhY2hNYXAodXNlclBhcmFtcy51c2VyZGF0YSwgZnVuY3Rpb24gKGssIHYpIHtcblx0ICAgICAgICAgIHJzLnVzZXJkYXRhW2tdID0gdXRpbEVuY29kZS50cnlUb0VuY29kZVVSSUNvbXBvbmVudCh2KTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgICBycy5zcG0gPSB1c2VyUGFyYW1zLnNwbTtcblx0ICAgICAgICBycy5zY20gPSB1c2VyUGFyYW1zLnNjbTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0gY2F0Y2goZSkge1xuXHQgICAgY29uc29sZS5sb2coZSk7XG5cdCAgfVxuXHQgIHJldHVybiBycztcblx0fTtcblx0XG5cdHZhciBnZXRFbGVBdHRyaWJ1dGVzID0gZnVuY3Rpb24oZWxlLCBjb25maWcpIHtcblx0ICB2YXIgYXR0cmlidXRlcyA9ICcnO1xuXHQgIGlmIChlbGUgJiYgY29uZmlnKSB7XG5cdCAgICB2YXIgYXR0cl92YWx1ZXMgPSBbZWxlLmdldEF0dHJpYnV0ZShjb25maWcuZmlsdGVyKV07XG5cdCAgICB2YXIgcHJvcHMgPSBjb25maWcucHJvcHMgfHwgW107XG5cdCAgICBpZiAocHJvcHMpIHtcblx0ICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgIGF0dHJfdmFsdWVzLnB1c2goZWxlLmdldEF0dHJpYnV0ZShwcm9wc1tpXSkpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICBhdHRyaWJ1dGVzID0gYXR0cl92YWx1ZXMuam9pbignXycpO1xuXHQgIH1cblx0ICByZXR1cm4gYXR0cmlidXRlcztcblx0fTtcblx0XG5cdC8qKlxuXHQgKiBAcmV0dXJuIHtPYmplY3R9IHNwbSB7XG5cdCAqICAgYTogYWFhLFxuXHQgKiAgIGI6IGJiYixcblx0ICogICBjOiBjY2MsXG5cdCAqICAgZDogZGRkLFxuXHQgKiAgIGU6IHB2aWQsXG5cdCAqIH1cblx0ICovXG5cdHZhciBnZXRTcG1PYmogPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuXHQgIC8vIGNvbnNvbGUudGltZSgnZ2V0U3BtT2JqJyk7XG5cdCAgdmFyIHNwbUFuY2hvcklkID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3BtLWFuY2hvci1pZCcpO1xuXHQgIGlmIChzcG1BbmNob3JJZCkge1xuXHQgICAgdmFyIGFuY2hvcl9pZCA9IHNwbUFuY2hvcklkLnNwbGl0KCcuJyk7XG5cdCAgICByZXR1cm4ge1xuXHQgICAgICBhOiBhbmNob3JfaWRbMF0sXG5cdCAgICAgIGI6IGFuY2hvcl9pZFsxXSxcblx0ICAgICAgYzogYW5jaG9yX2lkWzJdLFxuXHQgICAgICBkOiBhbmNob3JfaWRbM10sXG5cdCAgICAgIGU6IGFuY2hvcl9pZFs0XSxcblx0ICAgIH07XG5cdCAgfVxuXHQgIC8vIGNvbnNvbGUudGltZUVuZCgnZ2V0U3BtT2JqJyk7XG5cdCAgcmV0dXJuO1xuXHR9O1xuXHRleHBvcnRzLmdldFNwbU9iaiA9IGdldFNwbU9iajtcblx0XG5cdC8qKlxuXHQgKiBAcGFyYW1zIHtPYmplY3R9IGNvbmZpZyA6IHtcblx0ICogICBjc3NTZWxlY3RvcjogXCJbZGF0YS10cmFja2VyPVwibHpkbW9kLWx6ZC1hY3QtcHJvZHVjdC1zbG90M1wiXVwiXG5cdCAqICAgZWxlbWVudFNlbGVjdG9yOiBcIltkYXRhLXRyYWNrZXI9XCJsemRtb2QtbHpkLWFjdC1wcm9kdWN0LXNsb3QzXCJdXCJcblx0ICogICBsb2drZXk6IFwiL3phYy50ZXN0LnByb2R1Y3QxXCJcblx0ICogICBzb3VyY2U6IFwiYXBsdXNfd2VidnRcIiAgLy8g6KGo56S65p2l6Ieq5Y+v6KeG5YyW5Z+L54K5XG5cdCAqIH1cblx0ICogQHBhcmFtcyB7T2JqZWN0fSBvcHRpb25zIDoge1xuXHQgKiAgICBpZ25vcmVfYXR0cjogdHJ1ZSxcblx0ICogICAgaW5kZXg6IGksXG5cdCAqICAgIGVsZTogZWxlXG5cdCAqICB9XG5cdCAqL1xuXHRleHBvcnRzLmdldEVsZW1lbnRIYXNoID0gZnVuY3Rpb24gKGNvbmZpZywgb3B0aW9ucykge1xuXHQgIHZhciBzcG0gPSB7fTtcblx0ICBpZiAoY29uZmlnLnNvdXJjZSAhPT0gJ2FwbHVzX3dlYnZ0Jykge1xuXHQgICAgc3BtID0gZ2V0U3BtT2JqKG9wdGlvbnMuZWxlKSB8fCAod2luZG93LmdfU1BNICA/IHdpbmRvdy5nX1NQTS5nZXRQYXJhbShvcHRpb25zLmVsZSkgOiB7fSk7IC8vIFRPRE8g5q2k5aSE5oCn6IO95o2f6ICX6L6D5aSnXG5cdCAgfVxuXHRcblx0ICB2YXIgaGFzaF92YWx1ZV9pbmRleHMgPSAnJztcblx0ICAvLyBzcG3miJZ4cGF0aFxuXHQgIHZhciBFSU5ERVggPSAneCcgKyBvcHRpb25zLmluZGV4O1xuXHQgIGlmIChzcG0uYSAmJiBzcG0uYiAmJiBzcG0uYyAmJiBzcG0uZCkge1xuXHQgICAgdmFyIFNQTUQgPSAvXmkvLnRlc3Qoc3BtLmQpID8gRUlOREVYIDogc3BtLmQ7XG5cdCAgICBoYXNoX3ZhbHVlX2luZGV4cyA9IHNwbS5hICsgJ18nICsgc3BtLmIgKyAnXycgKyBzcG0uYyArICdfJyArIFNQTUQ7XG5cdCAgICBpZiAoc3BtLmUpIHtcblx0ICAgICAgaGFzaF92YWx1ZV9pbmRleHMgKz0gJ18nICsgc3BtLmU7XG5cdCAgICB9XG5cdCAgfSBlbHNlIHtcblx0ICAgIC8vIFRPRE8g5aaC5p6ceHBhdGjmsqHmnInmgKfog73pl67popjvvIznlKh4cGF0aOS7o+abv+WmguS4i+i/meauteS7o+eggSBA6LCL5aOrIGluIDIwMTgtMTEtMTlcblx0ICAgIGhhc2hfdmFsdWVfaW5kZXhzID0gRUlOREVYO1xuXHQgICAgaWYgKGFwbHVzLnB2aWQpIHtcblx0ICAgICAgaGFzaF92YWx1ZV9pbmRleHMgKz0gYXBsdXMucHZpZDtcblx0ICAgIH1cblx0ICB9XG5cdCAgLy8g6KGl5YWFZWxlbWVudFNlbGVjdG9y44CB5bGe5oCn5Y+Y5YyWXG5cdCAgaWYgKCFvcHRpb25zLmlnbm9yZV9hdHRyKSB7XG5cdCAgICBoYXNoX3ZhbHVlX2luZGV4cyArPSBjb25maWcubG9na2V5ICsgJ18nO1xuXHQgICAgaGFzaF92YWx1ZV9pbmRleHMgKz0gY29uZmlnLmVsZW1lbnRTZWxlY3RvciArICdfJztcblx0ICAgIGhhc2hfdmFsdWVfaW5kZXhzICs9IGdldEVsZUF0dHJpYnV0ZXMob3B0aW9ucy5lbGUsIGNvbmZpZyk7ICBcblx0ICB9XG5cdCAgdmFyIF90bXAgPSBFSU5ERVggKyAnXycgKyB1dGlsSGFzaC5oYXNoKGhhc2hfdmFsdWVfaW5kZXhzKTtcblx0ICByZXR1cm4gX3RtcDtcblx0fTtcblx0Ly8gY29weSBmcm9tIHV0aWxBYy5qc1xuXHRcblx0Ly8g6L+H5ruk5LiN5oOz5LiK5Lyg55qE5bGe5oCnXG5cdGV4cG9ydHMuZmlsdGVyVW5sb2FkQXR0ciA9IGZ1bmN0aW9uKHN0cikge1xuXHQgIGlmIChzdHIpIHtcblx0ICAgIHN0ciA9IHN0ci5yZXBsYWNlKC8oaHJlZnxzdHlsZXxkYXRhLXNwbS1hbmNob3ItaWQpPVtcXCd8XFxcIl1bXFx3fFxcV3xcXC5dK1tcXCd8XFxcIl0vLCAnJyk7XG5cdCAgICBzdHIgPSBzdHIucmVwbGFjZSgvXFxzXFw+L2csICc+Jyk7XG5cdCAgICBzdHIgPSBzdHIucmVwbGFjZShuZXcgUmVnRXhwKGNvbmZpZy5EQVRBX0FQTFVTX0FFX0tFWSArICc9W1xcXFxcXCd8XFxcXFxcXCJdXFxcXFxcdytbXFxcXFxcJ3xcXFxcXFxcIl0nKSwgJycpO1xuXHQgICAgc3RyID0gc3RyLnJlcGxhY2UobmV3IFJlZ0V4cChjb25maWcuREFUQV9BUExVU19BQ19LRVkgKyAnPVtcXFxcXFwnfFxcXFxcXFwiXVxcXFxcXHcrW1xcXFxcXCd8XFxcXFxcXCJdJyksICcnKTtcblx0ICB9XG5cdCAgcmV0dXJuIHN0cjtcblx0fTtcblx0XG5cdC8qKlxuXHQgKiDmm7TmlrBhcGx1cy5fYWNIYXNoTWFwXG5cdCAqL1xuXHR2YXIgdXBkYXRlTWFwVmFsdWUgPSBmdW5jdGlvbih0bXBIYXNocywgb2JqKSB7XG5cdCAgdmFyIHVwRmxhZztcblx0ICB2YXIgaSA9IDA7XG5cdCAgdmFyIGxlbiA9IHRtcEhhc2hzLmxlbmd0aDtcblx0ICB3aGlsZSAoaSA8IGxlbikge1xuXHQgICAgdmFyIHRtcE9iaiA9IHRtcEhhc2hzW2ldIHx8IHt9O1xuXHQgICAgaWYgKHRtcE9iai5oYXNoX3ZhbHVlID09PSBvYmouaGFzaF92YWx1ZSkge1xuXHQgICAgICB0bXBIYXNoc1tpXSA9IG9iajtcblx0ICAgICAgdXBGbGFnID0gdHJ1ZTtcblx0ICAgICAgcmV0dXJuIHRtcEhhc2hzO1xuXHQgICAgfVxuXHQgICAgaSsrO1xuXHQgIH1cblx0ICAvLyBmb3IodmFyIGkgPSAwOyBpIDwgdG1wSGFzaHMubGVuZ3RoOyBpKyspIHtcblx0ICAvLyB9XG5cdCAgaWYgKCF1cEZsYWcpIHtcblx0ICAgIHRtcEhhc2hzLnB1c2gob2JqKTtcblx0ICB9XG5cdCAgcmV0dXJuIHRtcEhhc2hzO1xuXHR9O1xuXHRcblx0ZnVuY3Rpb24gdXBkYXRlSGFzaHMgKGxvZ2tleSwgb3B0cywgYXBsdXNLZXkpIHtcblx0ICB2YXIgaGFzaF92YWx1ZSA9IG9wdHMuaGFzaF92YWx1ZTtcblx0ICB2YXIgR00gPSB1dGlsR29sZGxvZy5nZXRHb2xkbG9nVmFsKGFwbHVzS2V5KSB8fCB7fTtcblx0ICBpZiAoIUdNLmhhc2hfdmFsdWUpIHtcblx0ICAgIEdNLmhhc2hfdmFsdWUgPSB7fTtcblx0ICB9XG5cdCAgaWYgKCFHTS5oYXNoX3ZhbHVlW2xvZ2tleV0pIHtcblx0ICAgIEdNLmhhc2hfdmFsdWVbbG9na2V5XSA9IHdpbi5NYXAgPyBuZXcgd2luLk1hcCgpIDoge307XG5cdCAgfVxuXHQgIGlmICh3aW4uTWFwKSB7XG5cdCAgICB2YXIgdG1wVmFsdWUgPSBHTS5oYXNoX3ZhbHVlW2xvZ2tleV0uZ2V0KGhhc2hfdmFsdWUpO1xuXHQgICAgaWYgKHRtcFZhbHVlKSB7XG5cdCAgICAgICsrdG1wVmFsdWU7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICB0bXBWYWx1ZSA9IDE7XG5cdCAgICB9XG5cdCAgICBHTS5oYXNoX3ZhbHVlW2xvZ2tleV0uc2V0KGhhc2hfdmFsdWUsIHRtcFZhbHVlKTtcblx0ICB9IGVsc2Uge1xuXHQgICAgaWYgKEdNLmhhc2hfdmFsdWVbbG9na2V5XVtoYXNoX3ZhbHVlXSkge1xuXHQgICAgICArK0dNLmhhc2hfdmFsdWVbbG9na2V5XVtoYXNoX3ZhbHVlXTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIEdNLmhhc2hfdmFsdWVbbG9na2V5XVtoYXNoX3ZhbHVlXSA9IDE7XG5cdCAgICB9XG5cdCAgfVxuXHQgIHV0aWxHb2xkbG9nLnNldEdvbGRsb2dWYWwoYXBsdXNLZXksIEdNKTsgXG5cdH07XG5cdFxuXHQvKipcblx0ICog5pu05pawXCJhcGx1cy5fYWNIYXNoTWFwXCLvvIxcImFwbHVzLl9hY0hhc2hNYXBcIuagvOW8j+WmguS4i1xuXHQgKiB7XG5cdCAqICAgJy9hLmIuYzEnOiBbJzM1NTg1YjRjJywgJzM1NTg1YjRkJywgJzM1NTg1YjRlJ10sXG5cdCAqICAgJy9hLmIuYzInOiBbJzM1NTg1YjVjJywgJzM1NTg1YjVkJywgJzM1NTg1YjVlJ10sXG5cdCAqICAgJy9hLmIuYzMnOiBbJzM1NTg1YjVjJywgJzM1NTg1YjVkJywgJzM1NTg1YjVlJ10sXG5cdCAqIH1cblx0ICogQHBhcmFtIHtTdHJpbmd9IGxvZ2tleSA9PiAnL2EuYi5jMSdcblx0ICogQHBhcmFtIHtPYmplY3R9IG9iajoge1xuXHQgICAgICAgaGFzaF92YWx1ZSA9PiAnMzU1ODViNGMnXG5cdCAgICAgICBlbGU6IHh4eFxuXHQgICB9XG5cdCAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlID0+IENMRUFSL0FERC9VUERBVEUgZGVmYXVsdCB2YWx1ZSBpcyBBRERcblx0ICovXG5cdHZhciB1cGRhdGVIYXNoTWFwID0gZnVuY3Rpb24obG9na2V5LCBvYmosIHR5cGUsIGFwbHVzS2V5KSB7XG5cdCAgaWYoIXR5cGUpIHtcblx0ICAgIHR5cGUgPSAnQUREJztcblx0ICB9XG5cdCAgaWYgKCFsb2drZXkgfHwgdHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcblx0ICAgIHJldHVybjtcblx0ICB9XG5cdCAgdmFyIEdNID0gdXRpbEdvbGRsb2cuZ2V0R29sZGxvZ1ZhbChhcGx1c0tleSkgfHwge307XG5cdCAgdmFyIF9hY0hhc2hNYXAgPSBHTS5fYWNIYXNoTWFwIHx8IHt9O1xuXHQgIHZhciB0bXBIYXNocyA9IF9hY0hhc2hNYXBbbG9na2V5XSB8fCBbXTtcblx0XG5cdCAgdmFyIGNoZWNrVmFsdWVJbmRleCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgdmFyIGkgPSAwO1xuXHQgICAgdmFyIGxlbiA9IHRtcEhhc2hzLmxlbmd0aDtcblx0ICAgIHdoaWxlIChpIDwgbGVuKSB7XG5cdCAgICAgIHZhciB0bXBPYmogPSB0bXBIYXNoc1tpXSB8fCB7fTtcblx0ICAgICAgaWYgKHRtcE9iai5oYXNoX3ZhbHVlID09PSBvYmouaGFzaF92YWx1ZSkge1xuXHQgICAgICAgIHJldHVybiBpO1xuXHQgICAgICB9XG5cdCAgICAgIGkrKztcblx0ICAgIH1cblx0ICAgIC8vIGZvcih2YXIgaSA9IDA7IGkgPCB0bXBIYXNocy5sZW5ndGg7IGkrKykge1xuXHQgICAgLy8gfVxuXHQgICAgcmV0dXJuIC0xO1xuXHQgIH07XG5cdFxuXHQgIHZhciBpbmRleCA9IGNoZWNrVmFsdWVJbmRleCgpO1xuXHRcblx0ICBpZiAodHlwZSA9PT0gJ0FERCcgJiYgaW5kZXggPT09IC0xKSB7XG5cdCAgICB0bXBIYXNocy5wdXNoKG9iaik7XG5cdCAgICB1cGRhdGVIYXNocyhsb2drZXksIG9iaiwgYXBsdXNLZXkpO1xuXHQgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ0NMRUFSJyAmJiBpbmRleCA+IC0xKSB7XG5cdCAgICB0bXBIYXNocy5zcGxpY2UoaW5kZXgsIDEpO1xuXHQgICAgLy8gdG1wSGFzaHNbaW5kZXhdID0gbnVsbDtcblx0ICB9IGVsc2UgaWYgKHR5cGUgPT09ICdVUERBVEUnKSB7XG5cdCAgICB0bXBIYXNocyA9IHVwZGF0ZU1hcFZhbHVlKHRtcEhhc2hzLCBvYmopO1xuXHQgIH1cblx0XG5cdCAgX2FjSGFzaE1hcFtsb2drZXldID0gdG1wSGFzaHM7XG5cdCAgR00uX2FjSGFzaE1hcCA9IF9hY0hhc2hNYXA7XG5cdCAgdXRpbEdvbGRsb2cuc2V0R29sZGxvZ1ZhbChhcGx1c0tleSwgR00pO1xuXHR9O1xuXHRcblx0XG5cdGV4cG9ydHMudXBkYXRlRXhwSGFzaE1hcCA9IGZ1bmN0aW9uKGxvZ2tleSwgb2JqLCB0eXBlKSB7XG5cdCAgdXBkYXRlSGFzaE1hcChsb2drZXksIG9iaiwgdHlwZSwgJ19hcGx1c19hdXRvX2V4cCcpO1xuXHR9O1xuXHRleHBvcnRzLnVwZGF0ZUNsa0hhc2hNYXAgPSBmdW5jdGlvbihsb2drZXksIG9iaiwgdHlwZSkge1xuXHQgIHVwZGF0ZUhhc2hNYXAobG9na2V5LCBvYmosIHR5cGUsICdfYXBsdXNfYWMnKTtcblx0fTtcblx0XG5cdC8vIGV4cG9ydHMuZGVib3VuY2UgPSBmdW5jdGlvbiAoZnVuYywgd2FpdCwgaW1tZWRpYXRlKSB7XG5cdC8vICAgdmFyIHRpbWVvdXQ7XG5cdC8vICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuXHQvLyAgICAgdHJ5IHtcblx0Ly8gICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLCBhcmdzID0gYXJndW1lbnRzO1xuXHQvLyAgICAgICB2YXIgbGF0ZXIgPSBmdW5jdGlvbigpIHtcblx0Ly8gICAgICAgICB0aW1lb3V0ID0gbnVsbDtcblx0Ly8gICAgICAgICBpZiAoIWltbWVkaWF0ZSkgZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcblx0Ly8gICAgICAgfTtcblx0Ly8gICAgICAgdmFyIGNhbGxOb3cgPSBpbW1lZGlhdGUgJiYgIXRpbWVvdXQ7XG5cdC8vICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcblx0Ly8gICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpO1xuXHQvLyAgICAgICBpZiAoY2FsbE5vdykgZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcblx0Ly8gICAgIH0gY2F0Y2ggKGUpIHtcblx0Ly8gICAgIH1cblx0Ly8gICB9O1xuXHQvLyB9O1xuXHRcblx0dmFyIGdldE5vdyA9IGZ1bmN0aW9uICgpIHtcblx0ICByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG5cdH07XG5cdFxuXHQvLyBSZXR1cm5zIGEgZnVuY3Rpb24sIHRoYXQsIHdoZW4gaW52b2tlZCwgd2lsbCBvbmx5IGJlIHRyaWdnZXJlZCBhdCBtb3N0IG9uY2Vcblx0Ly8gZHVyaW5nIGEgZ2l2ZW4gd2luZG93IG9mIHRpbWUuIE5vcm1hbGx5LCB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uIHdpbGwgcnVuXG5cdC8vIGFzIG11Y2ggYXMgaXQgY2FuLCB3aXRob3V0IGV2ZXIgZ29pbmcgbW9yZSB0aGFuIG9uY2UgcGVyIGB3YWl0YCBkdXJhdGlvbjtcblx0Ly8gYnV0IGlmIHlvdSdkIGxpa2UgdG8gZGlzYWJsZSB0aGUgZXhlY3V0aW9uIG9uIHRoZSBsZWFkaW5nIGVkZ2UsIHBhc3Ncblx0Ly8gYHtsZWFkaW5nOiBmYWxzZX1gLiBUbyBkaXNhYmxlIGV4ZWN1dGlvbiBvbiB0aGUgdHJhaWxpbmcgZWRnZSwgZGl0dG8uXG5cdGV4cG9ydHMudGhyb3R0bGUgPSBmdW5jdGlvbihmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG5cdCAgdmFyIHRpbWVvdXQsIGNvbnRleHQsIGFyZ3MsIHJlc3VsdDtcblx0ICB2YXIgcHJldmlvdXMgPSAwO1xuXHQgIGlmICghb3B0aW9ucykgb3B0aW9ucyA9IHt9O1xuXHRcblx0ICB2YXIgbGF0ZXIgPSBmdW5jdGlvbigpIHtcblx0ICAgIHByZXZpb3VzID0gb3B0aW9ucy5sZWFkaW5nID09PSBmYWxzZSA/IDAgOiBnZXROb3coKTtcblx0ICAgIHRpbWVvdXQgPSBudWxsO1xuXHQgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcblx0ICAgIGlmICghdGltZW91dCkgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuXHQgIH07XG5cdFxuXHQgIHZhciB0aHJvdHRsZWQgPSBmdW5jdGlvbigpIHtcblx0ICAgIHZhciBub3cgPSBnZXROb3coKTtcblx0ICAgIGlmICghcHJldmlvdXMgJiYgb3B0aW9ucy5sZWFkaW5nID09PSBmYWxzZSkgcHJldmlvdXMgPSBub3c7XG5cdCAgICB2YXIgcmVtYWluaW5nID0gd2FpdCAtIChub3cgLSBwcmV2aW91cyk7XG5cdCAgICBjb250ZXh0ID0gdGhpcztcblx0ICAgIGFyZ3MgPSBhcmd1bWVudHM7XG5cdCAgICBpZiAocmVtYWluaW5nIDw9IDAgfHwgcmVtYWluaW5nID4gd2FpdCkge1xuXHQgICAgICBpZiAodGltZW91dCkge1xuXHQgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcblx0ICAgICAgICB0aW1lb3V0ID0gbnVsbDtcblx0ICAgICAgfVxuXHQgICAgICBwcmV2aW91cyA9IG5vdztcblx0ICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcblx0ICAgICAgaWYgKCF0aW1lb3V0KSBjb250ZXh0ID0gYXJncyA9IG51bGw7XG5cdCAgICB9IGVsc2UgaWYgKCF0aW1lb3V0ICYmIG9wdGlvbnMudHJhaWxpbmcgIT09IGZhbHNlKSB7XG5cdCAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCByZW1haW5pbmcpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHJlc3VsdDtcblx0ICB9O1xuXHRcblx0ICB0aHJvdHRsZWQuY2FuY2VsID0gZnVuY3Rpb24oKSB7XG5cdCAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG5cdCAgICBwcmV2aW91cyA9IDA7XG5cdCAgICB0aW1lb3V0ID0gY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuXHQgIH07XG5cdFxuXHQgIHJldHVybiB0aHJvdHRsZWQ7XG5cdH07XG5cdFxuXHRcblx0LyoqXG5cdCAqIOmqjOivgWhhc2hfdmFsdWXmmK/lkKblnKhcImFwbHVzLl9hY0hhc2hNYXBcIuS4re+8jFwiYXBsdXMuX2FjSGFzaE1hcFwi5qC85byP5aaC5LiLXG5cdCAqIEBwYXJhbSBvcHRzIHtcblx0ICogICBsb2drZXk6ICcvYXV0b2xvZy5haWd1YW5namllLmhvbWVfYmFubmVyX2FwcCcsXG5cdCAqICAgaGFzaF92YWx1ZTogJzU4MTU1NWI4J1xuXHQgKiAgIGEzMTBwXzc0MDMzNzBfaXNob3BwaW5nX2luZGV4X2kwXzMxYTc2NmY4WE9zaHBvXypbZGF0YS1zcG09aXNob3BwaW5nX2luZGV4XSAuaXNob3BwaW5nX3NsaWRlX1xuXHQgKiAgIGFwbHVzS2V5OiAnX2FwbHVzX2F1dG9fZXhwJyB8fCAnX2FwbHVzX2FjJ1xuXHQgKiB9XG5cdCAqL1xuXHRleHBvcnRzLmNoZWNrSXNJbkhhc2hNYXAgPSBmdW5jdGlvbiAob3B0cykge1xuXHQgIHZhciBHTSA9IHV0aWxHb2xkbG9nLmdldEdvbGRsb2dWYWwob3B0cy5hcGx1c0tleSkgfHwge307XG5cdCAgdmFyIF9oYXNocyA9IEdNLmhhc2hfdmFsdWUgfHwge307XG5cdCAgdmFyIF9sb2drZXlIYXNocyA9IF9oYXNoc1tvcHRzLmxvZ2tleV0gfHwgKHdpbi5NYXAgPyBuZXcgd2luLk1hcCgpIDoge30pO1xuXHRcblx0ICB2YXIgciA9IF9sb2drZXlIYXNocyAmJiBfbG9na2V5SGFzaHMuZ2V0ID8gX2xvZ2tleUhhc2hzLmdldChvcHRzLmhhc2hfdmFsdWUpIDogX2xvZ2tleUhhc2hzW29wdHMuaGFzaF92YWx1ZV07XG5cdCAgaWYgKHIgPiAxKSB7XG5cdCAgICByZXR1cm4gdHJ1ZTtcblx0ICB9XG5cdCAgdmFyIF9hY0hhc2hNYXAgPSBHTS5fYWNIYXNoTWFwIHx8IHt9O1xuXHQgIHZhciB2YWx1ZXMgPSBfYWNIYXNoTWFwW29wdHMubG9na2V5XSB8fCBbXTtcblx0ICB2YXIgbGVuID0gdmFsdWVzLmxlbmd0aDtcblx0ICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdCAgICBpZiAodmFsdWVzW2ldLmhhc2hfdmFsdWUgPT09IG9wdHMuaGFzaF92YWx1ZSkge1xuXHQgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgIH1cblx0ICB9XG5cdCAgcmV0dXJuIGZhbHNlO1xuXHR9O1xuXHRcblx0XG5cdC8vIOabneWFieaIkOWKn+aJk+S4quagh1xuXHRleHBvcnRzLnNldFJlY29yZFN1Y2Nlc3MgPSBmdW5jdGlvbihlbGVtZW50T2JqLCBhcGx1c0RvbUF0dHJLZXkpIHtcblx0ICB0cnkge1xuXHQgICAgdmFyIGVsZW1lbnQgPSBlbGVtZW50T2JqID8gZWxlbWVudE9iai5lbGVtZW50IDoge307XG5cdCAgICB2YXIgaGFzaF92YWx1ZSA9IGVsZW1lbnRPYmouaGFzaF92YWx1ZSB8fCAnJztcblx0ICAgIGlmIChlbGVtZW50ICYmIGVsZW1lbnQuc2V0QXR0cmlidXRlKSB7XG5cdCAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGFwbHVzRG9tQXR0cktleSwgaGFzaF92YWx1ZSk7XG5cdCAgICB9XG5cdCAgfSBjYXRjaChlKSB7fVxuXHR9O1xuXHRcblx0Ly8gZXhwb3J0cy5lYWNoTWFwID0gZnVuY3Rpb24gKG1hcCwgY2FsbGJhY2spIHtcblx0Ly8gICBpZiAoT2JqZWN0ICYmIE9iamVjdC5rZXlzKSB7XG5cdC8vICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG1hcCk7XG5cdC8vICAgICB2YXIgbGVuID0ga2V5cy5sZW5ndGg7XG5cdC8vICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdC8vICAgICAgIHZhciBrMSA9IGtleXNbaV07XG5cdC8vICAgICAgIGNhbGxiYWNrKGsxLCBtYXBbazFdKTtcblx0Ly8gICAgIH1cblx0Ly8gICB9IGVsc2Uge1xuXHQvLyAgICAgZm9yICh2YXIgayBpbiBtYXApIHtcblx0Ly8gICAgICAgY2FsbGJhY2soaywgbWFwW2tdKTtcblx0Ly8gICAgIH1cblx0Ly8gICB9XG5cdC8vIH07XG5cblxuLyoqKi8gfSksXG4vKiA0MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdC8qKlxuXHQgKiBwcm9qZWN0IC0gZmlsZXBhdGhcblx0ICogZGVzY3JpcHRpb25cblx0ICpcblx0ICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuXHQgKlxuXHQgKiBBdXRob3JzOlxuXHQgKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG5cdCAqL1xuXHQndXNlIHN0cmljdCc7XG5cdFxuXHQvLyDmoLnmja7lr4bpkqVz5a+55a2X56ym5Liyc3Ry6L+b6KGM6L2s5LmJXG5cdGV4cG9ydHMuaGFzaCA9IGZ1bmN0aW9uKHN0ciwgcykge1xuXHQgIHZhciBkZWZfdiA9IDEzMTU0MjM5MTE7XG5cdCAgdmFyIGhhc2ggPSBzIHx8IGRlZl92LCBpLCBjaDtcblx0ICBmb3IgKGkgPSBzdHIubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcblx0ICAgIGNoID0gc3RyLmNoYXJDb2RlQXQoaSk7XG5cdCAgICBoYXNoIF49ICgoaGFzaCA8PCA1KSArIGNoICsgKGhhc2ggPj4gMikpO1xuXHQgIH1cblx0ICB2YXIgcnMgPSAoaGFzaCAmIDB4N0ZGRkZGRkYpLnRvU3RyaW5nKDE2KTtcblx0ICByZXR1cm4gcnM7XG5cdH07XG5cblxuLyoqKi8gfSksXG4vKiA0MiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdC8qKlxuXHQgKiDlj6/op4bljJbln4vngrkgLSB3YXRjaCBTaW5nbGUgUGFnZSBBcHBsaWNhdGlvbiBcblx0ICogd2F0Y2ggU1BBJ3MgaGlzdG9yeSBvciBoYXNoIGNoYW5nZSwgdGhlbiBhdXRvIHNlbmRQVlxuXHQgKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG5cdCAqXG5cdCAqIEF1dGhvcnM6XG5cdCAqICAgUmljaGFyZHzosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuXHQgKi9cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0ZXhwb3J0cy50cnlUb0VuY29kZVVSSUNvbXBvbmVudCA9IGZ1bmN0aW9uICh2YWwpIHtcblx0ICB2YXIgdiA9IHZhbCB8fCAnJztcblx0ICBpZiAodmFsKSB7XG5cdCAgICB0cnkge1xuXHQgICAgICB2ID0gZW5jb2RlVVJJQ29tcG9uZW50KGRlY29kZVVSSUNvbXBvbmVudCh2YWwpKTtcblx0ICAgIH0gY2F0Y2ggKGUpIHtcblx0ICAgIH1cblx0ICB9XG5cdCAgcmV0dXJuIHY7XG5cdH07XG5cbi8qKiovIH0pLFxuLyogNDMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogcHJvamVjdCAtIGZpbGVwYXRoXG5cdCAqIGRlc2NyaXB0aW9uXG5cdCAqXG5cdCAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cblx0ICpcblx0ICogQXV0aG9yczpcblx0ICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuXHQgKi9cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIHV0aWxBcnJheSA9IF9fd2VicGFja19yZXF1aXJlX18oMzUpO1xuXHR2YXIgdXRpbE1ldGEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI5KTtcblx0dmFyIHV0aWxMb2dnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2KTtcblx0XG5cdGV4cG9ydHMuREFUQV9BUExVU19BRV9LRVkgPSAnZGF0YS1hcGx1cy1hZSc7XG5cdGV4cG9ydHMuREFUQV9BUExVU19BQ19LRVkgPSAnZGF0YS1hcGx1cy1jbGsnO1xuXHRcblx0Ly8g5LiN5pSv5oyBb2JzZXJ2ZXLnmoTmg4XlhrXkuIvvvIzova7or6Lpl7TpmpTvvIhtcylcblx0ZXhwb3J0cy5MT09QX1RJTUUgPSAxMDAwO1xuXHRcblx0ZXhwb3J0cy5nZXREZWZhdWx0UmVxdWVzdENmZyA9IGZ1bmN0aW9uICgpIHtcblx0ICByZXR1cm4ge1xuXHQgICAgbWV0aG9kOiAnUE9TVCcsXG5cdCAgICBwa2dTaXplOiAxMFxuXHQgIH07XG5cdH07XG5cdFxuXHRmdW5jdGlvbiBnZXRNZXRhVmFsdWUgKGtleSkge1xuXHQgIGlmIChhcGx1cyAmJiBhcGx1cy5nZXRNZXRhSW5mbykge1xuXHQgICAgcmV0dXJuIGFwbHVzLmdldE1ldGFJbmZvKGtleSk7XG5cdCAgfSBlbHNlIHtcblx0ICAgIHJldHVybiB1dGlsTWV0YS5nZXRNZXRhQ250KGtleSk7XG5cdCAgfVxuXHR9XG5cdFxuXHQvLyDoh6rliqjmm53lhYnmiZPngrkgLSDliKTlrprlj6/op4bnmoTmr5Tkvovnjodcblx0dmFyIGdldEF1dG9FeHBWaWV3UmF0ZSA9IGZ1bmN0aW9uKGRlZmF1bHRfdmFsdWUpIHtcblx0ICB2YXIgcmF0ZSA9IGRlZmF1bHRfdmFsdWU7XG5cdCAgdHJ5IHtcblx0ICAgIHZhciB2aXNpYmxlX3JhdGUgPSBnZXRNZXRhVmFsdWUoJ2FwbHVzLWF1dG8tZXhwLXZpc2libGUnKTtcblx0ICAgIGlmICh2aXNpYmxlX3JhdGUpIHtcblx0ICAgICAgcmF0ZSA9IHBhcnNlRmxvYXQodmlzaWJsZV9yYXRlKTtcblx0ICAgIH1cblx0ICAgIGlmIChyYXRlIDw9IDApIHtcblx0ICAgICAgcmF0ZSA9IGRlZmF1bHRfdmFsdWU7XG5cdCAgICB9XG5cdCAgfSBjYXRjaChlKSB7XG5cdCAgICByYXRlID0gZGVmYXVsdF92YWx1ZTtcblx0ICB9IGZpbmFsbHkge1xuXHQgICAgcmV0dXJuIHJhdGU7XG5cdCAgfVxuXHR9O1xuXHRleHBvcnRzLkFVVE9fQVRfVklFV19SQVRFID0gZ2V0QXV0b0V4cFZpZXdSYXRlKDAuMyk7XG5cdFxuXHQvLyB2YXIgRVhQX0RFQk9VTkNFX0RVUkFUSU9OID0gMTAwOyAvLyBkZWJvdWNlIGR1cmF0aW9uIDEwMG1zXG5cdFxuXHQvKipcblx0ICog5pyJ5pWI5pud5YWJ5pe26ZW/5bqV57q/IC0g5q+r56eS5pWwKG1zKVxuXHQgKiBAcGFyYW1zIHtOdW1iZXJ9IGRlZmF1bHRfdmFsdWUgaXMgMzAwbXNcblx0ICogQHJldHVybiB7TnVtYmVyfSBkdXJhdGlvblxuXHQgKi9cblx0dmFyIGdldEF1dG9FeHBEdXJhdGlvbiA9IGZ1bmN0aW9uKGRlZmF1bHRfdmFsdWUpIHtcblx0ICB2YXIgZHVyYXRpb24gPSBkZWZhdWx0X3ZhbHVlO1xuXHQgIHRyeSB7XG5cdCAgICB2YXIgdG1wX2R1cmF0aW9uID0gZ2V0TWV0YVZhbHVlKCdhcGx1cy1hdXRvLWV4cC1kdXJhdGlvbicpO1xuXHQgICAgdmFyIGR1cmF0aW9uX24gPSBwYXJzZUludCh0bXBfZHVyYXRpb24pO1xuXHQgICAgaWYgKChkdXJhdGlvbl9uICsgJycpICE9PSAnTmFOJykge1xuXHQgICAgICBkdXJhdGlvbiA9IGR1cmF0aW9uX247XG5cdCAgICB9XG5cdCAgfSBjYXRjaChlKSB7XG5cdCAgfSBmaW5hbGx5IHtcblx0ICAgIHJldHVybiBkdXJhdGlvbjtcblx0ICB9XG5cdH07XG5cdGV4cG9ydHMuRVhQX0RVUkFUSU9OID0gZ2V0QXV0b0V4cER1cmF0aW9uKDMwMCk7IC8v6buY6K6kMzAwbXNcblx0XG5cdC8vIGRlYm91Y2UgZHVyYXRpb24gMTAwbXNcblx0Ly8gZXhwb3J0cy5nZXREZWJvdW5jZUR1cmF0aW9uID0gZnVuY3Rpb24gKCkge1xuXHQvLyAgIHJldHVybiBFWFBfREVCT1VOQ0VfRFVSQVRJT047XG5cdC8vIH07XG5cdFxuXHQvKipcblx0ICog6I635Y+W6Ieq5Yqo5pud5YWJ6YWN572u6aG577yM5bm25bCGZmlsdGVy44CBdGFn5ZKMY3NzU2VsZWN0b3LlkIjlubbkuLplbGVtZW50U2VsZWN0b3Jcblx0ICogVE9ETyBKU09OLnBhcnNlIOS7heaUr+aMgUlFOOWPiuS7peS4iua1j+iniOWZqCA9PiBqcyBhcGlcblx0ICogQHBhcmFtcyBrZXkge1N0cmluZ30gJ2FwbHVzLWF1dG8tZXhwJy8nYXBsdXMtYXV0by1jbGsnXG5cdCAqIEByZXR1cm4ge0FycmF5fSBbe1xuXHQgKiAgICBsb2drZXk6IC9hLmIuYzEsXG5cdCAqICAgIGVsZW1lbnRTZWxlY3RvcjogJ2RpdltzY209MTIzNF0nLFxuXHQgKiAgICB0YWc6IGRpdixcblx0ICogICAgZmlsdGVyOiBzY209MTIzNFxuXHQgKiAgICBwb3NpdGlvblNlbGVjdG9yOiB0cnVlLy5wYXJlbnRDbGFzc25hbWUgLy8g55u45a+55a6a5L2N5Lia5Yqh5Z+L54K5XG5cdCAqIH0sIHtcblx0ICogICAgbG9na2V5OiAvYS5iLmMyLFxuXHQgKiAgICBlbGVtZW50U2VsZWN0b3I6ICdwW3NjbT0yMzQ1XS5vbmUnLFxuXHQgKiAgICB0YWc6IHAsXG5cdCAqICAgIGZpbHRlcjogc2NtPTIzNDUsXG5cdCAqICAgIGNzc1NlbGVjdG9yOiAub25lXG5cdCAqIH0sIHtcblx0ICogICAgbG9na2V5OiAvYS5iLmMzLFxuXHQgKiAgICBlbGVtZW50U2VsZWN0b3I6ICdwW2RhdGEtc3BtLWNsaWNrXScsXG5cdCAqICAgIHRhZzogcCxcblx0ICogICAgZmlsdGVyOiBkYXRhLXNwbS1jbGlja1xuXHQgKiB9XVxuXHQgKi9cblx0dmFyIGdldEF1dG9Db25maWcgPSBmdW5jdGlvbihjb25maWdLZXksIG1ldGFPYmopIHtcblx0ICB2YXIgY29uZmlncyA9IFtdO1xuXHQgIC8vIHZhciB0bXBfbG9na2V5cyA9IFtdO1xuXHQgIHZhciB0bXBfdGFnX2ZpbHRlciA9IFtdO1xuXHQgIHZhciBhcGx1c0F1dG9FeHA7XG5cdCAgdHJ5IHtcblx0ICAgIGFwbHVzQXV0b0V4cCA9IG1ldGFPYmogfHwgZ2V0TWV0YVZhbHVlKGNvbmZpZ0tleSk7XG5cdCAgICB2YXIgdGVtcHMgPSBbXTtcblx0ICAgIGlmIChhcGx1c0F1dG9FeHAgJiYgdHlwZW9mIGFwbHVzQXV0b0V4cCA9PT0gJ3N0cmluZycpIHtcblx0ICAgICAgdHJ5IHtcblx0ICAgICAgICB0ZW1wcyA9IEpTT04ucGFyc2UoYXBsdXNBdXRvRXhwKTtcblx0ICAgICAgfSBjYXRjaCAoZSkge1xuXHQgICAgICAgIHRlbXBzID0gSlNPTi5wYXJzZShhcGx1c0F1dG9FeHAucmVwbGFjZSgvJy9nLCAnXCInKSk7XG5cdCAgICAgIH1cblx0ICAgIH0gZWxzZSBpZiAodHlwZW9mIGFwbHVzQXV0b0V4cCA9PT0gJ29iamVjdCcgJiYgYXBsdXNBdXRvRXhwLmNvbnN0cnVjdG9yID09PSBBcnJheSkge1xuXHQgICAgICB0ZW1wcyA9IGFwbHVzQXV0b0V4cDtcblx0ICAgIH1cblx0ICAgIGlmICh0ZW1wcyAmJiB0ZW1wcy5jb25zdHJ1Y3RvciA9PT0gQXJyYXkpIHtcblx0ICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0ZW1wcy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgIHZhciB0bXAgPSB0ZW1wc1tpXSB8fCB7fTtcblx0ICAgICAgICB2YXIgbG9na2V5ID0gdG1wLmxvZ2tleSB8fCAnJztcblx0ICAgICAgICB2YXIgdGFnID0gdG1wLnRhZyA/IHRtcC50YWcgOiAnJztcblx0ICAgICAgICB2YXIgZmlsdGVyID0gdG1wLmZpbHRlcjtcblx0ICAgICAgICB2YXIgY3NzU2VsZWN0b3IgPSB0bXAuY3NzU2VsZWN0b3I7XG5cdCAgICAgICAgdmFyIHdob2xlU2VsZWN0b3IgPSBjc3NTZWxlY3RvciB8fCAodGFnICYmIGZpbHRlcik7XG5cdCAgICAgICAgaWYgKCFsb2drZXkgfHwgIXdob2xlU2VsZWN0b3IpIHtcblx0ICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbWV0YSAnICsgY29uZmlnS2V5ICsgJyBjb25maWcgZXJyb3IsICcgKyBKU09OLnN0cmluZ2lmeSh0bXApKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgLy8gMjAxNy0xMS0yMyDmiYvmt5jmjqXlhaXlkoxsYXphZGHkuJrliqHpnIDmsYLvvIzlhYHorrhsb2drZXnph43lpI1cblx0ICAgICAgICAvLyBpZiAodXRpbEFycmF5LmluZGV4b2YodG1wX2xvZ2tleXMsIGxvZ2tleSkgPiAtMSkge1xuXHQgICAgICAgIC8vICAgdGhyb3cgbmV3IEVycm9yKCdtZXRhICcgKyBjb25maWdLZXkgKyAnIGNvbmZpZyBlcnJvciwgbG9na2V5ICcgKyBsb2drZXkgKyAnIHJlcGVhdGVkJyk7XG5cdCAgICAgICAgLy8gfVxuXHQgICAgICAgIGZpbHRlciA9IHR5cGVvZiBmaWx0ZXIgPT09ICdzdHJpbmcnID8gZmlsdGVyLnNwbGl0KFwiPVwiKSA6IFtdO1xuXHQgICAgICAgIHZhciB0YWdfZmlsdGVyID0gdGFnO1xuXHQgICAgICAgIGlmIChmaWx0ZXIubGVuZ3RoID49IDIpIHtcblx0ICAgICAgICAgIHRhZ19maWx0ZXIgKz0gJ1snICsgZmlsdGVyLnNoaWZ0KCkgKyAnPVwiJyArIGRlY29kZVVSSUNvbXBvbmVudChmaWx0ZXIuam9pbignJykpICsgJ1wiXSc7XG5cdCAgICAgICAgfSBlbHNlIGlmIChmaWx0ZXIubGVuZ3RoID09IDEgJiYgZmlsdGVyWzBdKSB7XG5cdCAgICAgICAgICB0YWdfZmlsdGVyICs9ICdbJyArIGRlY29kZVVSSUNvbXBvbmVudChmaWx0ZXJbMF0pICsgJ10nO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoY3NzU2VsZWN0b3IpIHtcblx0ICAgICAgICAgIHRhZ19maWx0ZXIgKz0gY3NzU2VsZWN0b3I7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICB0bXAuZWxlbWVudFNlbGVjdG9yID0gdGFnX2ZpbHRlcjtcblx0ICAgICAgICBpZiAodXRpbEFycmF5LmluZGV4b2YodG1wX3RhZ19maWx0ZXIsIHRhZ19maWx0ZXIpID4gLTEpIHtcblx0ICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbWV0YSAnICsgY29uZmlnS2V5ICsgJyBjb25maWcgZXJyb3IsIHRhZ19maWx0ZXJfY3NzU2VsZWN0b3IgJyArIHRhZ19maWx0ZXIgKyAnIHJlcGVhdGVkJyk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIC8vIHRtcF9sb2drZXlzLnB1c2gobG9na2V5KTtcblx0ICAgICAgICB0bXBfdGFnX2ZpbHRlci5wdXNoKHRhZ19maWx0ZXIpO1xuXHQgICAgICAgIGNvbmZpZ3MucHVzaCh0bXApO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSBjYXRjaCAoZXJyKSB7XG5cdCAgICAvLyBUT0RPIOebkeaOp+i/meWdl+WGheWuuVxuXHQgICAgdXRpbExvZ2dlci5sb2dnZXIoe1xuXHQgICAgICBtc2c6IGVyclxuXHQgICAgfSk7XG5cdCAgfSBmaW5hbGx5IHtcblx0ICAgIHJldHVybiBjb25maWdzO1xuXHQgIH1cblx0fTtcblx0XG5cdC8qKlxuXHQgKiDojrflj5bmm53lhYnoh6rliqjph4fpm4bnmoTphY3nva7poblcblx0ICovXG5cdGV4cG9ydHMuZ2V0QXV0b0V4cENvbmZpZyA9IGZ1bmN0aW9uKG1ldGFPYmopIHtcblx0ICByZXR1cm4gZ2V0QXV0b0NvbmZpZygnYXBsdXMtYXV0by1leHAnLCBtZXRhT2JqKSB8fCBbXTtcblx0fTtcblx0LyoqXG5cdCAqIOiOt+WPluabneWFieiHquWKqOmHh+mbhueahOmFjee9rumhuVxuXHQgKi9cblx0ZXhwb3J0cy5nZXRBdXRvRXhwVXNlckZuID0gZnVuY3Rpb24oKSB7XG5cdCAgdmFyIGFlQXV0b1VzZXJGbiA9IGdldE1ldGFWYWx1ZSgnYXBsdXMtYXV0by1leHAtdXNlcmZuJyk7XG5cdCAgaWYgKGFlQXV0b1VzZXJGbikge1xuXHQgICAgdmFyIGZuID0gd2luZG93W2FlQXV0b1VzZXJGbl0gfHwgYWVBdXRvVXNlckZuO1xuXHQgICAgaWYgKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICByZXR1cm4gZm47XG5cdCAgICB9XG5cdCAgfVxuXHQgIHJldHVybiBudWxsO1xuXHR9O1xuXHRcblx0Ly8gPG1ldGEgbmFtZT1cImFwbHVzLWF1dG8tZXhwLXdhdGNoZG9tXCIgY29udGVudD1cInRocm90dGxlXCIgLz5cblx0ZXhwb3J0cy5pc1Rocm90dGxlV2F0Y2hEb20gPSBmdW5jdGlvbiAoKSB7XG5cdCAgdmFyIHJzID0gZmFsc2U7XG5cdCAgdHJ5IHtcblx0ICAgIHJzID0gZ2V0TWV0YVZhbHVlKCdhcGx1cy1hdXRvLWV4cC13YXRjaGRvbScpID09PSAndGhyb3R0bGUnO1xuXHQgIH0gY2F0Y2ggKGUpIHtcblx0ICB9XG5cdCAgcmV0dXJuIHJzO1xuXHR9O1xuXHQvKipcblx0ICog6I635Y+W54K55Ye76Ieq5Yqo6YeH6ZuG55qE6YWN572u6aG5XG5cdCAqL1xuXHRleHBvcnRzLmdldEF1dG9DbGtDb25maWcgPSBmdW5jdGlvbihtZXRhT2JqKSB7XG5cdCAgcmV0dXJuIGdldEF1dG9Db25maWcoJ2FwbHVzLWF1dG8tY2xrJywgbWV0YU9iaikgfHwgW107XG5cdH07XG5cdC8qKlxuXHQgKiDojrflj5bngrnlh7voh6rliqjph4fpm4bnmoTphY3nva7poblcblx0ICovXG5cdGV4cG9ydHMuZ2V0QXV0b0Nsa1VzZXJGbiA9IGZ1bmN0aW9uKCkge1xuXHQgIHZhciBhY0F1dG9Vc2VyRm4gPSBnZXRNZXRhVmFsdWUoJ2FwbHVzLWF1dG8tY2xrLXVzZXJmbicpO1xuXHQgIGlmKCBhY0F1dG9Vc2VyRm4gKXtcblx0ICAgIHZhciBmbiA9IHdpbmRvd1thY0F1dG9Vc2VyRm5dIHx8IGFjQXV0b1VzZXJGbjtcblx0ICAgIGlmKCB0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicgKXtcblx0ICAgICAgcmV0dXJuIGZuO1xuXHQgICAgfVxuXHQgIH1cblx0ICByZXR1cm4gbnVsbDtcblx0fTtcblxuXG4vKioqLyB9KSxcbi8qIDQ0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIHByb2plY3QgLSBmaWxlcGF0aFxuXHQgKiDnm5HlkKxkb23lj5jljJbvvIzmlLbpm4blvoXmm53lhYnlhYPntKBcblx0ICpcblx0ICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuXHQgKlxuXHQgKiBBdXRob3JzOlxuXHQgKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG5cdCAqL1xuXHQndXNlIHN0cmljdCc7XG5cdFxuXHR2YXIgQmFzZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xuXHRcblx0dmFyIHRyYWNrZXJVdGlsID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMyk7XG5cdHZhciB1dGlsTG9nZ2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNik7XG5cdFxuXHR2YXIgdXRpbEV2ZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOCk7XG5cdHZhciB1dGlsX2FjX2FlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MCk7XG5cdHZhciBjb25maWcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQzKTtcblx0XG5cdHZhciB3aW4gPSB3aW5kb3c7XG5cdHZhciBkb2MgPSBkb2N1bWVudDtcblx0XG5cdC8qKlxuXHQgKiDlhoXpg6jlr7nosaFcblx0ICogQG9iamVjdCAgdGhpcy5fb2JzZXJ2ZXIgICAgICAvLyBNdXRhdGlvbk9ic2VydmVy55uR5ZCs6ICFXG5cdCAqIEBvYmplY3QgIHRoaXMuX2xvb3Bfb2JzZXJ2ZXIgLy8g5LiN5pSv5oyBTXV0YXRpb25PYnNlcnZlcueahOa1j+iniOWZqO+8jOi9ruivouebkeWQrOiAhVxuXHQgKiBAb2JqZWN0ICB0aGlzLmF1dG9DbGtDb25maWcgIC8vIOmFjee9ruWPguaVsFxuXHQgKlxuXHQgKiBAcGFyYW0ge2hhbmRsZXJfZG9tX2NoYW5nZX0gY2Jcblx0ICovXG5cdHZhciBXYXRjaERvbSA9IEJhc2UuZXh0ZW5kKHtcblx0ICBlYWNoRWxlbWVudHM6IGZ1bmN0aW9uIChlbGVtZW50cywgY2xrQ29uZmlnKSB7XG5cdCAgICAvLyBjb25zb2xlLmxvZygnY2xrQ29uZmlnID09PT0gJywgY2xrQ29uZmlnKTtcblx0ICAgIHZhciBsb2drZXkgPSBjbGtDb25maWcubG9na2V5IHx8ICcnO1xuXHQgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuXHQgICAgICB2YXIgZWxlID0gZWxlbWVudHNbaV07XG5cdCAgICAgIGlmIChjbGtDb25maWcuX3Bvc19pZCAmJiAhZWxlLmdldEF0dHJpYnV0ZSgnZGF0YS1hcGx1cy1wb3MtaWQnKSkge1xuXHQgICAgICAgIGVsZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtYXBsdXMtcG9zLWlkJywgY2xrQ29uZmlnLl9wb3NfaWQpO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciBfaW5kZXggPSBlbGUuZ2V0QXR0cmlidXRlKGNvbmZpZy5EQVRBX0FQTFVTX0FDX0tFWSk7XG5cdCAgICAgIGlmIChfaW5kZXggJiYgX2luZGV4LmluZGV4T2YoJ18nKSA+IDApIHtcblx0ICAgICAgICBjb250aW51ZTtcblx0ICAgICAgfVxuXHQgICAgICBpZiAoaXNOYU4ocGFyc2VJbnQoX2luZGV4KSkpIHtcblx0ICAgICAgICBfaW5kZXggPSBhcGx1cy5fYXBsdXNfYWMuZWxlbWVudFNlbGVjdG9yU2l6ZU1hcFtjbGtDb25maWcuZWxlbWVudFNlbGVjdG9yXSsrO1xuXHQgICAgICAgIGVsZS5zZXRBdHRyaWJ1dGUoY29uZmlnLkRBVEFfQVBMVVNfQUNfS0VZLCBfaW5kZXgpO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciBoYXNoX3ZhbHVlID0gdXRpbF9hY19hZS5nZXRFbGVtZW50SGFzaChjbGtDb25maWcsIHtcblx0ICAgICAgICBpZ25vcmVfYXR0cjogZmFsc2UsXG5cdCAgICAgICAgaW5kZXg6IF9pbmRleCxcblx0ICAgICAgICBlbGU6IGVsZVxuXHQgICAgICB9KTtcblx0XG5cdCAgICAgIC8vIOmqjOivgeaYr+WQpuW3sue7j+iusOW9lei/h+S6hu+8jOWmguaenOayoeacieiusOW9leaJjee7p+e7rVxuXHQgICAgICAvLyB2YXIgaXNSZWNvcmQgPSB1dGlsRWxlbWVudEFjLmNoZWNrSXNSZWNvcmQoZWxlLCBoYXNoX3ZhbHVlLCBjb25maWcuREFUQV9BUExVU19BQ19LRVkpO1xuXHQgICAgICBpZiAoIXV0aWxfYWNfYWUuY2hlY2tJc0luSGFzaE1hcCh7XG5cdCAgICAgICAgbG9na2V5OiBsb2drZXksXG5cdCAgICAgICAgaGFzaF92YWx1ZTogaGFzaF92YWx1ZSxcblx0ICAgICAgICBhcGx1c0tleTogJ19hcGx1c19hYydcblx0ICAgICAgfSkpIHtcblx0ICAgICAgICB2YXIgX29iaiA9IHtcblx0ICAgICAgICAgIGNsa0NvbmZpZzogY2xrQ29uZmlnLFxuXHQgICAgICAgICAgaGFzaF92YWx1ZTogaGFzaF92YWx1ZSxcblx0ICAgICAgICAgIGVsZW1lbnQ6IGVsZSxcblx0ICAgICAgICAgIHN0YXR1czogMCwgICAvLyDliJ3lp4vnirbmgIFcblx0ICAgICAgICAgIGVsZW1lbnRTZWxlY3RvcjogY2xrQ29uZmlnLmVsZW1lbnRTZWxlY3RvclxuXHQgICAgICAgIH07XG5cdCAgICAgICAgLy8g5bCG5b6F54K55Ye75YWD57Sg5a2Y5YWlYXBsdXMuX2FwbHVzX2FjLl9hY0hhc2hNYXBcblx0ICAgICAgICB1dGlsX2FjX2FlLnVwZGF0ZUNsa0hhc2hNYXAobG9na2V5LCBfb2JqLCAnQUREJyk7XG5cdCAgICAgICAgdXRpbF9hY19hZS5zZXRSZWNvcmRTdWNjZXNzKF9vYmosIGNvbmZpZy5EQVRBX0FQTFVTX0FDX0tFWSk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9LFxuXHQgIC8qKlxuXHQgICAqIOivpeaWueazleiiq29ic2VydmVy5oiW6L2u6K+i6LCD55SoXG5cdCAgICog5aKe6YeP5pu05paw5b6F5pud5YWJ55qE5YWD57Sg77yM5Yid5aeL5YyW5YWD57Sg5Z2Q5qCHXG5cdCAgICog5bm25bCG5b6F5pud5YWJ5YWD57Sg5a2Y5YWlYXBsdXMuX2FwbHVzX2FjLl90b2RvX2FjX2VsZW1lbnRz77yI5bmz6KGM55qEd2F0Y2hFeHBvc3VyZS5qc+S8muebkeWQrOeql+WPo+WPmOWMluadpeebkeaOp+i/meS6m+W+heabneWFieWFg+e0oOaYr+WQpuabneWFie+8iVxuXHQgICAqL1xuXHQgIGhhbmRsZXJfZG9tX2NoYW5nZTogZnVuY3Rpb24oKSB7XG5cdCAgICB2YXIgX3NlbGYgPSB0aGlzO1xuXHQgICAgdmFyIGF1dG9DbGtDb25maWcgPSBfc2VsZi5hdXRvQ2xrQ29uZmlnIHx8IFtdO1xuXHQgICAgZm9yICh2YXIgaiA9IDA7IGogPCBhdXRvQ2xrQ29uZmlnLmxlbmd0aDsgaisrKSB7XG5cdCAgICAgIHZhciBjbGtDb25maWcgPSBhdXRvQ2xrQ29uZmlnW2pdO1xuXHQgICAgICBpZiAoIWFwbHVzLl9hcGx1c19hYy5lbGVtZW50U2VsZWN0b3JTaXplTWFwW2Nsa0NvbmZpZy5lbGVtZW50U2VsZWN0b3JdKSB7XG5cdCAgICAgICAgYXBsdXMuX2FwbHVzX2FjLmVsZW1lbnRTZWxlY3RvclNpemVNYXBbY2xrQ29uZmlnLmVsZW1lbnRTZWxlY3Rvcl0gPSAxO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciBlbGVtZW50cyA9IHV0aWxfYWNfYWUuZ2V0RWxlbWVudHMoY2xrQ29uZmlnLCBkb2MpOyAvLyDojrflj5bmiYDmnIl4eHjmoIfnrb7kuIvluKbmnIl5eXnlsZ7mgKfnmoTlhYPntKBcblx0ICAgICAgX3NlbGYuZWFjaEVsZW1lbnRzKGVsZW1lbnRzLCBjbGtDb25maWcpO1xuXHQgICAgfVxuXHQgIH0sXG5cdFxuXHQgIHRocm90dGxlX2hhbmRsZXJfZG9tX2NoYW5nZTogdXRpbF9hY19hZS50aHJvdHRsZShmdW5jdGlvbiAoKSB7XG5cdCAgICB0aGlzLmhhbmRsZXJfZG9tX2NoYW5nZSgpO1xuXHQgIH0sIDIwMCksXG5cdFxuXHQgIC8qKlxuXHQgICAqIOWIneWni+WMlm9ic2VydmVy55uR5ZCs77yM55uR5ZCsZG9t5Y+Y5YyWXG5cdCAgICogQHBhcmFtIHtNT2JzZXJ2ZXJ9IE1PYnNlcnZlclxuXHQgICAqIEBwYXJhbSB7aGFuZGxlcl9kb21fY2hhbmdlfSBjYlxuXHQgICAqL1xuXHQgIGluaXRfb2JzZXJ2ZXI6IGZ1bmN0aW9uKE1PYnNlcnZlciwgY2IpIHtcblx0ICAgIC8vIOWIm+W7uuinguWvn+iAheWvueixoVxuXHQgICAgdmFyIF9vYnNlcnZlciA9IG5ldyBNT2JzZXJ2ZXIoZnVuY3Rpb24oKSB7IC8vIFRPRE/lvaLlj4JtdXRhdGlvbnNcblx0ICAgICAgLy8gVE9ET+WinumHj+abtOaWsCBWUyDlhajph4/mm7TmlrBcblx0ICAgICAgLy8gbXV0YXRpb25zLmZvckVhY2goZnVuY3Rpb24obXV0YXRpb24pIHtcblx0ICAgICAgLy8gfSk7XG5cdCAgICAgIHRyYWNrZXJVdGlsLndyYXAoZnVuY3Rpb24oKXtcblx0ICAgICAgICB2YXIgX2FwbHVzX2FjID0gYXBsdXMuX2FwbHVzX2FjIHx8IHt9O1xuXHQgICAgICAgICsrX2FwbHVzX2FjLm9ic2VydmVyX3RpbWVzO1xuXHQgICAgICAgIGNiKCk7XG5cdCAgICAgIH0sICdpbml0X29ic2VydmVyX2luaXRfZWxlbWVudHMnKTtcblx0ICAgIH0pO1xuXHQgICAgLy8g6YWN572u6KeC5a+f6YCJ6aG5OlxuXHQgICAgdmFyIGNvbmZpZyA9IHtcblx0ICAgICAgYXR0cmlidXRlczogdHJ1ZSwgICAgLy8g5bGe5oCn55qE5Y+Y5YqoICBUT0RPIOmqjOivgWFwbHVz6Ieq6Lqr5o+S5YWl55qE55qE5LiA5Lqb5bGe5oCn5Y+Y5YyWXG5cdCAgICAgIGNoaWxkTGlzdDogdHJ1ZSwgICAgIC8vIOWtkOiKgueCueeahOWPmOWKqFxuXHQgICAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlLCAvLyDoioLngrnlhoXlrrnmiJboioLngrnmlofmnKznmoTlj5jliqhcblx0ICAgICAgc3VidHJlZTogdHJ1ZSwgICAgICAgLy8g5omA5pyJ5ZCO5Luj6IqC54K555qE5Y+Y5YqoXG5cdCAgICB9O1xuXHRcblx0ICAgIC8vIOS8oOWFpeebruagh+iKgueCueWSjOinguWvn+mAiemhuVxuXHQgICAgX29ic2VydmVyLm9ic2VydmUoZG9jLmJvZHksIGNvbmZpZyk7XG5cdCAgICBpZiAodXRpbF9hY19hZS5JU19ERUJVRykge1xuXHQgICAgICB1dGlsTG9nZ2VyLmxvZ2dlcih7XG5cdCAgICAgICAgbXNnOiAnYXBsdXNfYWMgaW5pdCBNdXRhdGlvbk9ic2VydmVyIHN1Y2Nlc3MhJ1xuXHQgICAgICB9KTtcblx0ICAgIH1cblx0ICAgIHRoaXMuX29ic2VydmVyID0gX29ic2VydmVyO1xuXHQgIH0sXG5cdFxuXHQgIC8qKlxuXHQgICAqIOmSiOWvueS4jeaUr+aMgW9ic2VydmVy55qE5rWP6KeI5Zmo55So6L2u6K+i55qE5pa55byP55uR5ZCsZG9t5Y+Y5YyWXG5cdCAgICogQHBhcmFtIHtoYW5kbGVyX2RvbV9jaGFuZ2V9IGNiXG5cdCAgICovXG5cdCAgaW5pdF93YXRjaF9kb206IGZ1bmN0aW9uKCkge1xuXHQgICAgdmFyIF9zZWxmID0gdGhpcztcblx0ICAgIHZhciBfYXBsdXNfYWMgPSBhcGx1cy5fYXBsdXNfYWMgfHwge307XG5cdCAgICBfc2VsZi5fbG9vcF9vYnNlcnZlciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcblx0ICAgICAgaWYgKF9hcGx1c19hYy5jdXJyZW50X3dpbl9zdGF0dXMgIT09ICdibHVyJykge1xuXHQgICAgICAgIGlmICh1dGlsX2FjX2FlLklTX0RFQlVHKSB7XG5cdCAgICAgICAgICB1dGlsTG9nZ2VyLmxvZ2dlcih7XG5cdCAgICAgICAgICAgIG1zZzogJ3dhdGNoX2RvbSBpbiBhYyBMT09QX1RJTUUgaXMgJyArIGNvbmZpZy5MT09QX1RJTUUgKyAnbXMgdG90YWw6ICcgKyArK19hcGx1c19hYy53YXRjaF90aW1lc1xuXHQgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIF9zZWxmLnRocm90dGxlX2hhbmRsZXJfZG9tX2NoYW5nZSgpOyAvLyDlop7ph4/mm7TmlrDlvoXmm53lhYnnmoTlhYPntKDvvIzlubbliJ3lp4vljJblhYPntKDlnZDmoIdcblx0ICAgICAgICBfc2VsZi5pbml0X3dhdGNoX2RvbSgpO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIF9hcGx1c19hYy53YXRjaF9kb21fcnVubmluZyA9IGZhbHNlO1xuXHQgICAgICB9XG5cdFxuXHQgICAgfSwgY29uZmlnLkxPT1BfVElNRSk7XG5cdCAgfSxcblx0XG5cdCAgb25Gb2N1c0hhbmRsZXI6IGZ1bmN0aW9uICgpIHtcblx0ICAgIHZhciBfc2VsZiA9IHRoaXM7XG5cdCAgICB2YXIgX2FwbHVzX2FjID0gYXBsdXMuX2FwbHVzX2FjIHx8IHt9O1xuXHQgICAgX2FwbHVzX2FjLmN1cnJlbnRfd2luX3N0YXR1cyA9ICdmb2N1cyc7XG5cdCAgICBpZiAoIV9hcGx1c19hYy53YXRjaF9kb21fcnVubmluZykge1xuXHQgICAgICBfc2VsZi5pbml0X3dhdGNoX2RvbSgpO1xuXHQgICAgfVxuXHQgIH0sXG5cdFxuXHQgIG9uQmx1ckhhbmRsZXI6IGZ1bmN0aW9uICgpIHtcblx0ICAgIHZhciBfYXBsdXNfYWMgPSBhcGx1cy5fYXBsdXNfYWMgfHwge307XG5cdCAgICBfYXBsdXNfYWMuY3VycmVudF93aW5fc3RhdHVzID0gJ2JsdXInO1xuXHQgIH0sXG5cdFxuXHQgIG9uVmlzaWJpbGl0eUNoYW5nZTogZnVuY3Rpb24oKSB7XG5cdCAgICB2YXIgX3NlbGYgPSB0aGlzO1xuXHQgICAgaWYgKGRvYy52aXNpYmlsaXR5U3RhdGUgPT09ICd2aXNpYmxlJykge1xuXHQgICAgICBfc2VsZi5vbkZvY3VzSGFuZGxlcigpO1xuXHQgICAgfSBlbHNlIGlmIChkb2MudmlzaWJpbGl0eVN0YXRlID09PSAnaGlkZGVuJykge1xuXHQgICAgICBfc2VsZi5vbkJsdXJIYW5kbGVyKCk7XG5cdCAgICB9XG5cdCAgfSxcblx0XG5cdCAgLy8g5aKe5Yqg5ZCE56eN55uR5ZCsXG5cdCAgYWRkQWxsTGlzdGVuZXI6IGZ1bmN0aW9uICgpIHtcblx0ICAgIHZhciBfc2VsZiA9IHRoaXM7XG5cdCAgICB2YXIgX2FwbHVzX2FjID0gYXBsdXMuX2FwbHVzX2FjIHx8IHt9O1xuXHRcblx0ICAgIF9hcGx1c19hYy53YXRjaF90aW1lcyA9IDA7XG5cdCAgICBfYXBsdXNfYWMud2F0Y2hfZG9tX3J1bm5pbmcgPSB0cnVlO1xuXHQgICAgX3NlbGYuaW5pdF93YXRjaF9kb20oKTtcblx0XG5cdCAgICAvLyDpkojlr7nmiYvmt5jjgIHmiYvnjKvnmoTnibnmrorlpITnkIbpgLvovpFcblx0ICAgIGlmICh3aW4uV2luZFZhbmUgJiYgZG9jLmFkZEV2ZW50TGlzdGVuZXIpIHtcblx0ICAgICAgdXRpbEV2ZW50Lm9uKGRvYywgJ1dWLkV2ZW50LkFQUC5BY3RpdmUnLCBfc2VsZi5vbkZvY3VzSGFuZGxlciwgZmFsc2UpO1xuXHQgICAgICB1dGlsRXZlbnQub24oZG9jLCAnV1YuRXZlbnQuQVBQLkJhY2tncm91bmQnLCBfc2VsZi5vbkJsdXJIYW5kbGVyLCBmYWxzZSk7XG5cdCAgICB9XG5cdFxuXHQgICAgLy8g5rWP6KeI5Zmo5LiN5pSv5oyBTXV0YXRpb25PYnNlcnZlcu+8jOaUueeUqOi9ruivoueahOiAgeWKnuazle+8jOS9huWPquacieWcqOeql+WPo+a/gOa0u+aXtuaJjeaJp+ihjFxuXHQgICAgaWYgKCdoaWRkZW4nIGluIGRvYykge1xuXHQgICAgICAvLyB3ZWJraXTlhoXmoLhcblx0ICAgICAgdXRpbEV2ZW50Lm9uKHdpbiwgJ3Zpc2liaWxpdHljaGFuZ2UnLCBfc2VsZi5vblZpc2liaWxpdHlDaGFuZ2UpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgLy8gSUXlhoXmoLhcblx0ICAgICAgdXRpbEV2ZW50Lm9uKHdpbiwgJ2JsdXInLCBfc2VsZi5vbkJsdXJIYW5kbGVyKTtcblx0ICAgICAgdXRpbEV2ZW50Lm9uKHdpbiwgJ2ZvY3VzJywgX3NlbGYub25Gb2N1c0hhbmRsZXIpO1xuXHQgICAgfVxuXHQgIH0sXG5cdFxuXHQgIC8vIOenu+mZpOWQhOenjeebkeWQrFxuXHQgIHJlbW92ZUFsbExpc3RlbmVyOiBmdW5jdGlvbiAoKSB7XG5cdCAgICB2YXIgX3NlbGYgPSB0aGlzO1xuXHQgICAgLy8g6ZKI5a+55omL5reY44CB5omL54yr55qE54m55q6K5aSE55CG6YC76L6RXG5cdCAgICBpZiAod2luLldpbmRWYW5lICYmIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKSB7XG5cdCAgICAgIHV0aWxFdmVudC51bihkb2MsICdXVi5FdmVudC5BUFAuQWN0aXZlJywgX3NlbGYub25Gb2N1c0hhbmRsZXIsIGZhbHNlKTtcblx0ICAgICAgdXRpbEV2ZW50LnVuKGRvYywgJ1dWLkV2ZW50LkFQUC5CYWNrZ3JvdW5kJywgX3NlbGYub25CbHVySGFuZGxlciwgZmFsc2UpO1xuXHQgICAgfVxuXHRcblx0ICAgIC8vIOa1j+iniOWZqOS4jeaUr+aMgU11dGF0aW9uT2JzZXJ2ZXLvvIzmlLnnlKjova7or6LnmoTogIHlip7ms5XvvIzkvYblj6rmnInlnKjnqpflj6Pmv4DmtLvml7bmiY3miafooYxcblx0ICAgIGlmICgnaGlkZGVuJyBpbiBkb2MpIHtcblx0ICAgICAgLy8gd2Via2l05YaF5qC4XG5cdCAgICAgIHV0aWxFdmVudC51bih3aW4sICd2aXNpYmlsaXR5Y2hhbmdlJywgX3NlbGYub25WaXNpYmlsaXR5Q2hhbmdlKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIC8vIElF5YaF5qC4XG5cdCAgICAgIHV0aWxFdmVudC51bih3aW4sICdibHVyJywgX3NlbGYub25CbHVySGFuZGxlcik7XG5cdCAgICAgIHV0aWxFdmVudC51bih3aW4sICdmb2N1cycsIF9zZWxmLm9uRm9jdXNIYW5kbGVyKTtcblx0ICAgIH1cblx0ICB9LFxuXHRcblx0ICAvKipcblx0ICAgKiDnm5HlkKxkb23lj5jljJbvvIzmnInlj5jljJbmiafooYzlm57osINcblx0ICAgKiBAcGFyYW0ge2hhbmRsZXJfZG9tX2NoYW5nZX0gY2Jcblx0ICAgKi9cblx0ICBpbml0OiBmdW5jdGlvbigpIHtcblx0ICAgIHZhciBfc2VsZiA9IHRoaXM7XG5cdCAgICB2YXIgX2FwbHVzX2FjID0gYXBsdXMuX2FwbHVzX2FjIHx8IHt9O1xuXHQgICAgLy8gc3RlcDFcblx0ICAgIF9zZWxmLnRocm90dGxlX2hhbmRsZXJfZG9tX2NoYW5nZSgpO1xuXHQgICAgLy8gc3RlcDIg55uR5ZCsZG9t5Y+Y5YyWXG5cdCAgICB2YXIgTU9ic2VydmVyID0gd2luLk11dGF0aW9uT2JzZXJ2ZXIgfHwgd2luLldlYktpdE11dGF0aW9uT2JzZXJ2ZXIgfHwgd2luLk1vek11dGF0aW9uT2JzZXJ2ZXI7XG5cdCAgICBpZiAoTU9ic2VydmVyKSB7XG5cdCAgICAgIF9hcGx1c19hYy5vYnNlcnZlcl90aW1lcyA9IDA7XG5cdCAgICAgIF9zZWxmLmluaXRfb2JzZXJ2ZXIoTU9ic2VydmVyLCBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgX3NlbGYudGhyb3R0bGVfaGFuZGxlcl9kb21fY2hhbmdlKCk7XG5cdCAgICAgIH0pOyAvLyDlop7ph4/mm7TmlrDlvoXmm53lhYnnmoTlhYPntKDvvIzlubbliJ3lp4vljJblhYPntKDlnZDmoIdcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIC8vIOWinuWKoOWQhOenjeebkeWQrFxuXHQgICAgICBfc2VsZi5hZGRBbGxMaXN0ZW5lcigpO1xuXHQgICAgfVxuXHQgIH0sXG5cdFxuXHQgIGNsZWFyRG9tOiBmdW5jdGlvbihvYmosIG9wdHMpIHtcblx0ICAgIHZhciBfY2xrQ29uZmlnID0gdGhpcy5hdXRvQ2xrQ29uZmlnIHx8IFtdO1xuXHQgICAgaWYgKG9wdHMgJiYgb3B0cy5mcm9tICE9PSAnYXBwZW5kTWV0YUluZm8nKSB7XG5cdCAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgX2Nsa0NvbmZpZy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICB2YXIgZWxlbWVudFNlbGVjdG9yID0gX2Nsa0NvbmZpZ1tpXS5lbGVtZW50U2VsZWN0b3I7XG5cdCAgICAgICAgICB2YXIgX2RvY3MgPSBkb2MucXVlcnlTZWxlY3RvckFsbChlbGVtZW50U2VsZWN0b3IpO1xuXHQgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBfZG9jcy5sZW5ndGg7IGorKykge1xuXHQgICAgICAgICAgICBfZG9jc1tqXS5zZXRBdHRyaWJ1dGUoY29uZmlnLkRBVEFfQVBMVVNfQUNfS0VZLCAnJyk7ICBcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9IGNhdGNoIChlKSB7fVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICB0aGlzLmF1dG9DbGtDb25maWcgPSBvYmogJiYgb2JqLmF1dG9DbGtDb25maWc7XG5cdCAgfSxcblx0XG5cdCAgY2xlYXI6IGZ1bmN0aW9uIChvcHRzKSB7XG5cdCAgICBpZiAob3B0cyAmJiBvcHRzLmZyb20gPT09ICdhcHBlbmRNZXRhSW5mbycpIHtcblx0ICAgICAgcmV0dXJuO1xuXHQgICAgfVxuXHQgICAgdmFyIF9hcGx1c19hYyA9IGFwbHVzLl9hcGx1c19hYyB8fCB7fTtcblx0ICAgIGlmIChfYXBsdXNfYWMuX2FjSGFzaE1hcCkge1xuXHQgICAgICBfYXBsdXNfYWMuX2FjSGFzaE1hcCA9IHt9O1xuXHQgICAgfVxuXHQgICAgaWYgKF9hcGx1c19hYy5oYXNoX3ZhbHVlKSB7XG5cdCAgICAgIF9hcGx1c19hYy5oYXNoX3ZhbHVlID0ge307XG5cdCAgICB9XG5cdCAgICBhcGx1cy5fYXBsdXNfYWMgPSBfYXBsdXNfYWM7XG5cdCAgICAvLyDmuIXpmaTova7or6Lnm5HlkKxcblx0ICAgIGlmICh0aGlzLl9sb29wX29ic2VydmVyKSB7XG5cdCAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9sb29wX29ic2VydmVyKTtcblx0ICAgICAgdGhpcy5fbG9vcF9vYnNlcnZlciA9IG51bGw7XG5cdCAgICB9XG5cdCAgICAvLyDorqnor6Xop4Llr5/ogIXlr7nosaHlgZzmraLop4Llr5/mjIflrprnm67moIfnmoRET03lj5jljJYu55u05Yiw5YaN5qyh6LCD55So5YW2b2JzZXJ2ZSgp5pa55rOVLOivpeinguWvn+iAheWvueixoeWMheWQq+eahOWbnuiwg+WHveaVsOmDveS4jeS8muWGjeiiq+iwg+eUqC5cblx0ICAgIGlmICh0aGlzLl9vYnNlcnZlcikge1xuXHQgICAgICB0aGlzLl9vYnNlcnZlci5kaXNjb25uZWN0KCk7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVyKCk7XG5cdCAgICB9XG5cdCAgfSxcblx0XG5cdCAgLy8g5Y+C5pWw5pu05pS577yM5YGa5LiA5Lqb6YeN572u5bel5L2cXG5cdCAgcmVzZXQ6IGZ1bmN0aW9uIChvYmosIG9wdHMpIHtcblx0ICAgIHRoaXMuY2xlYXJEb20ob2JqLCBvcHRzKTtcblx0ICAgIHRoaXMuaW5pdCgpO1xuXHQgIH1cblx0XG5cdH0pO1xuXHRtb2R1bGUuZXhwb3J0cyA9IFdhdGNoRG9tO1xuXG5cbi8qKiovIH0pLFxuLyogNDUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogYWxpbG9nL3MgLSBzcmMvYXBsdXNfYXV0b19leHAuanNcblx0ICogYXBsdXPkuJPpobnph4fpm4Y6IOmhtemdouWFg+e0oOabneWFieiHquWKqOmHh+mbhlxuXHQgKiDkvp3otZZhcGx1c+WSjGFwbHVzX3BsdWdpbl9zcG0uanPmj5Lku7Zcblx0ICpcblx0ICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuXHQgKlxuXHQgKiBBdXRob3JzOlxuXHQgKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG5cdCAqL1xuXHQndXNlIHN0cmljdCc7XG5cdFxuXHQvLyA8bWV0YSBuYW1lPVwiYXBsdXMtYXV0by1leHBcIiBjb250ZW50PVwie3tsb2drZXk6XCIvYS5iLmNcIix0YWc6XCJkaXZcIixmaWx0ZXI6XCJzY209MTIzNFwifX1cIj5cblx0XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuXHQgIHJldHVybiB7XG5cdCAgICAvKipcblx0ICAgICAqIEBwYXJhbXMge09iamVjdH0gb3B0aW9ucyB7XG5cdCAgICAgKiAgIGxvZ0NvbmZpZzoge2xvZ0NvbmZpZ31cblx0ICAgICAqIH1cblx0ICAgICAqL1xuXHQgICAgLy8gaW5pdDogZnVuY3Rpb24ob3B0aW9ucykge1xuXHQgICAgLy8gICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHQgICAgLy8gfSxcblx0XG5cdCAgICBydW46IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgX193ZWJwYWNrX3JlcXVpcmVfXyg0NikoKTtcblx0ICAgIH1cblx0ICB9O1xuXHR9O1xuXG4vKioqLyB9KSxcbi8qIDQ2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIHByb2plY3QgLSBmaWxlcGF0aFxuXHQgKiBkZXNjcmlwdGlvblxuXHQgKlxuXHQgKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG5cdCAqXG5cdCAqIEF1dGhvcnM6XG5cdCAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cblx0ICovXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciB0cmFja2VyVXRpbCA9IF9fd2VicGFja19yZXF1aXJlX18oMzMpO1xuXHR2YXIgYXBsdXNTdGF0aWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXHR2YXIgZGVidWcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ3KTtcblx0dmFyIHV0aWxMb2dnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2KTtcblx0XG5cdHZhciBXYXRjaERPTTtcblx0dmFyIHdhdGNoRXhwb3N1cmU7XG5cdHZhciB3YXRjaFJlY29yZDtcblx0dmFyIGNvbmZpZztcblx0XG5cdGZ1bmN0aW9uIGluaXRGbiAoKSB7XG5cdCAgV2F0Y2hET00gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ4KTtcblx0ICBpZiAod2luZG93LkludGVyc2VjdGlvbk9ic2VydmVyKSB7XG5cdCAgICB3YXRjaEV4cG9zdXJlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MCk7XG5cdCAgfSBlbHNlIHtcblx0ICAgIHdhdGNoRXhwb3N1cmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUyKTtcblx0ICB9XG5cdCAgd2F0Y2hSZWNvcmQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUzKTtcblx0ICBjb25maWcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQzKTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gaW5pdCAoY2IpIHtcblx0ICB2YXIgYXBsdXMgPSAod2luZG93LmFwbHVzIHx8ICh3aW5kb3cuYXBsdXMgPSB7fSkpO1xuXHRcblx0ICB2YXIgYXBsdXNfYXV0b19leHBfaW5pdCA9IGZhbHNlO1xuXHQgIHZhciBkb19pbml0X2ZsYWcgPSBmYWxzZTtcblx0ICB2YXIgX2NvbmZpZzsgLy8gbGFzdENvbmZpZ1xuXHRcblx0ICB2YXIgZG9faW5pdCA9IGZ1bmN0aW9uIChmbGFnKSB7XG5cdCAgICBpZiAoZG9faW5pdF9mbGFnKSB7XG5cdCAgICAgIHJldHVybjtcblx0ICAgIH1cblx0ICAgIGRvX2luaXRfZmxhZyA9IGZsYWc7XG5cdCAgICBpZiAoIWFwbHVzX2F1dG9fZXhwX2luaXQpIHtcblx0ICAgICAgdHJhY2tlclV0aWwud3JhcChmdW5jdGlvbigpe1xuXHQgICAgICAgIC8vIOmhuuW6j+S4jeiDveS5se+8jOeOr+eOr+ebuOaJoyFcblx0ICAgICAgICAvLyAw44CB6I635Y+W6YWN572u5bm25Yik5pat6YWN572u5q2j56Gu5oCn77yMZ2V0QXV0b0V4cENvbmZpZ+WGheWBmuS6huW8uuagoemqjO+8jOWHuumUmeWQjuS8muaJk+WNsOmUmeivr+S/oeaBr1xuXHQgICAgICAgIF9jb25maWcgPSBjb25maWcuZ2V0QXV0b0V4cENvbmZpZygpIHx8IFtdO1xuXHQgICAgICAgIGlmIChkZWJ1Zy5pc0RlYnVnQXBsdXMoKSkge1xuXHQgICAgICAgICAgdXRpbExvZ2dlci5sb2dnZXIoe1xuXHQgICAgICAgICAgICBtc2c6ICdhcGx1cy1hdXRvLWV4cCBtZXRhVmF1ZSBpbml0OiAnICsgSlNPTi5zdHJpbmdpZnkoX2NvbmZpZylcblx0ICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB2YXIgd2F0Y2hET007XG5cdFxuXHQgICAgICAgIGlmIChfY29uZmlnICYmIF9jb25maWcubGVuZ3RoID4gMCkge1xuXHQgICAgICAgICAgLy8gMeOAgeebkeWQrOaXpeW/l+WPkemAgVxuXHQgICAgICAgICAgd2F0Y2hSZWNvcmQud2F0Y2hfZGF0YV9jaGFuZ2UoKTtcblx0ICAgICAgICAgIC8vIDLjgIHnm5HlkKzmm53lhYlcblx0ICAgICAgICAgIHdhdGNoRXhwb3N1cmUud2F0Y2hfZXhwb3N1cmVfY2hhbmdlKF9jb25maWcpO1xuXHQgICAgICAgICAgLy8gM+OAgeebkeWQrGRvbeWPmOWMllxuXHQgICAgICAgICAgd2F0Y2hET00gPSBXYXRjaERPTS5jcmVhdGUoe1xuXHQgICAgICAgICAgICBpc1Rocm90dGxlV2F0Y2g6IGNvbmZpZy5pc1Rocm90dGxlV2F0Y2hEb20oKSxcblx0ICAgICAgICAgICAgYXV0b0V4cENvbmZpZzogX2NvbmZpZ1xuXHQgICAgICAgICAgfSk7XG5cdCAgICAgICAgICB3YXRjaERPTS5pbml0KHt0eXBlOiAnaW5pdCd9KTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIGFwbHVzLmFwbHVzX3B1YnN1Yi5zdWJzY3JpYmUoJ3NldE1ldGFJbmZvJywgZnVuY3Rpb24gKG1ldGFLZXksIG1ldGFWYXVlLCBvcHRzKSB7XG5cdCAgICAgICAgICBpZiAobWV0YUtleSA9PT0gJ2FwbHVzLWF1dG8tZXhwJykge1xuXHQgICAgICAgICAgICBpZiAoZGVidWcuaXNEZWJ1Z0FwbHVzKCkpIHtcblx0ICAgICAgICAgICAgICB1dGlsTG9nZ2VyLmxvZ2dlcih7XG5cdCAgICAgICAgICAgICAgICBtc2c6ICdhcGx1cy1hdXRvLWV4cCBtZXRhVmF1ZSBjaGFuZ2U6ICcgKyBKU09OLnN0cmluZ2lmeShtZXRhVmF1ZSlcblx0ICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgLy8gMuOAgeiOt+WPlumFjee9ruW5tuWIpOaWremFjee9ruato+ehruaAp++8jGdldEF1dG9FeHBDb25maWflhoXlgZrkuoblvLrmoKHpqozvvIzlh7rplJnlkI7kvJrmiZPljbDplJnor6/kv6Hmga9cblx0ICAgICAgICAgICAgdmFyIF9jb25maWcyID0gY29uZmlnLmdldEF1dG9FeHBDb25maWcobWV0YVZhdWUpO1xuXHQgICAgICAgICAgICBpZiAoSlNPTi5zdHJpbmdpZnkoX2NvbmZpZzIpID09PSBKU09OLnN0cmluZ2lmeShfY29uZmlnKSkge1xuXHQgICAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICBfY29uZmlnID0gX2NvbmZpZzI7XG5cdCAgICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICAgIC8vIDHjgIFjbGVhciAtIOWFgeiuuOe9ruepum1ldGFWYWx1ZeS7peWBnOatouabneWFieebkeWQrFxuXHQgICAgICAgICAgICB3YXRjaFJlY29yZC5jbGVhcigpO1xuXHQgICAgICAgICAgICBpZiAoIW9wdHMpIHtcblx0ICAgICAgICAgICAgICBvcHRzID0ge1xuXHQgICAgICAgICAgICAgICAgZnJvbTogJ3NldE1ldGFJbmZvJ1xuXHQgICAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgd2F0Y2hFeHBvc3VyZS5jbGVhcihfY29uZmlnLCBvcHRzKTtcblx0ICAgICAgICAgICAgd2F0Y2hET00gJiYgd2F0Y2hET00uY2xlYXIob3B0cyk7XG5cdFxuXHQgICAgICAgICAgICBpZiAobWV0YVZhdWUgJiYgX2NvbmZpZyAmJiBfY29uZmlnLmxlbmd0aCA+IDApIHtcblx0ICAgICAgICAgICAgICAvLyAyLjHjgIHnm5HlkKzml6Xlv5flj5HpgIFcblx0ICAgICAgICAgICAgICB3YXRjaFJlY29yZC53YXRjaF9kYXRhX2NoYW5nZSgpO1xuXHQgICAgICAgICAgICAgIC8vIDIuMuOAgeebkeWQrOabneWFiVxuXHQgICAgICAgICAgICAgIHdhdGNoRXhwb3N1cmUud2F0Y2hfZXhwb3N1cmVfY2hhbmdlKF9jb25maWcpO1xuXHRcblx0ICAgICAgICAgICAgICB2YXIgX3dhdGNoX2RvbV9jZmcgPSB7XG5cdCAgICAgICAgICAgICAgICBpc1Rocm90dGxlV2F0Y2g6IGNvbmZpZy5pc1Rocm90dGxlV2F0Y2hEb20oKSxcblx0ICAgICAgICAgICAgICAgIGF1dG9FeHBDb25maWc6IF9jb25maWdcblx0ICAgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICAgIGlmICh3YXRjaERPTSkge1xuXHQgICAgICAgICAgICAgICAgd2F0Y2hET00ucmVzZXQoX3dhdGNoX2RvbV9jZmcsIG9wdHMpO1xuXHQgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB3YXRjaERPTSA9IFdhdGNoRE9NLmNyZWF0ZShfd2F0Y2hfZG9tX2NmZyk7XG5cdCAgICAgICAgICAgICAgICB3YXRjaERPTS5pbml0KHt0eXBlOiAnaW5pdCd9KTtcblx0ICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblx0ICAgICAgfSwgJ2RvX2luaXQnKTtcblx0ICAgICAgYXBsdXNfYXV0b19leHBfaW5pdCA9IHRydWU7XG5cdCAgICB9XG5cdCAgfTtcblx0XG5cdCAgLy8gdXRpbEV2ZW50LkRPTVJlYWR5KGZ1bmN0aW9uKCkge1xuXHQgIC8vIDVz5ZCO6L+Y5rKh5pyJ5a6M5oiQ5Yqg6L2977yM5o6n5Yi25Y+w5omT5Ye65LiA5p2h6K2m5ZGK77yMVE9ETyDnm5Hmjqfov5nlnZflhoXlrrlcblx0ICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG5cdCAgICBpZiAoIWFwbHVzX2F1dG9fZXhwX2luaXQpIHtcblx0ICAgICAgdXRpbExvZ2dlci5sb2dnZXIoe1xuXHQgICAgICAgIG1zZzogJ2FwbHVzX2F1dG9fZXhwX2luaXQgZmFpbGVkISBwbGVhc2UgY2hlY2sgd2hldGhlciBhcGx1c0pzIGlzIGxvYWRlZCBjb3JyZWN0bHkhJ1xuXHQgICAgICB9KTtcblx0ICAgIH1cblx0ICB9LCA1MDAwKTtcblx0ICAvLyDmnIlhcGx1c19wdWJzdWLkuovku7bnm5HlkKzogIXmqKHlnovnmoTmg4XlhrXkuIvvvIznm5HlkKxhcGx1c1JlYWR55LqL5Lu2XG5cdCAgdmFyIF8kID0gYXBsdXMuXyQgfHwge307XG5cdCAgdmFyIGdfc3BtID0gd2luZG93LmdfU1BNIHx8IHt9O1xuXHQgIGlmIChfJC5zdGF0dXMgPT09ICdjb21wbGV0ZScgJiYgZ19zcG0uc3BtKSB7XG5cdCAgICBkb19pbml0KCk7XG5cdCAgfVxuXHQgIC8vIGFwbHVzLmFwbHVzX3B1YnN1Yi5zdWJzY3JpYmUoJ2FwbHVzUmVhZHknLCBmdW5jdGlvbihzdGF0dXMpIHtcblx0ICAvLyAgIGlmIChzdGF0dXMgPT09ICdjb21wbGV0ZScpIHtcblx0ICAvLyAgICAgZG9faW5pdCgnYXBsdXNSZWFkeScpO1xuXHQgIC8vICAgfVxuXHQgIC8vIH0pO1xuXHQgIHZhciBxID0gKHdpbmRvdy5hcGx1c19xdWV1ZSB8fCAod2luZG93LmFwbHVzX3F1ZXVlID0gW10pKTtcblx0ICBxLnB1c2goe1xuXHQgICAgYWN0aW9uOiBhcGx1c1N0YXRpYy5TVUJTQ1JJQkUsXG5cdCAgICBhcmd1bWVudHM6IFsnYXBsdXNSZWFkeScsIGZ1bmN0aW9uIChzdGF0dXMpIHtcblx0ICAgICAgaWYgKHN0YXR1cyA9PT0gJ2NvbXBsZXRlJykge1xuXHQgICAgICAgIGRvX2luaXQoJ2FwbHVzUmVhZHknKTtcblx0ICAgICAgfVxuXHQgICAgfV1cblx0ICB9KTtcblx0ICBpZiAodHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICBjYigpO1xuXHQgIH1cblx0ICAvLyB9KTtcblx0fVxuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG5cdCAgdmFyIGFwbHVzID0gKHdpbmRvdy5hcGx1cyB8fCAod2luZG93LmFwbHVzID0ge30pKTtcblx0ICBpZiAoYXBsdXMuX2FwbHVzX2F1dG9fZXhwKSB7XG5cdCAgICByZXR1cm47XG5cdCAgfSBlbHNlIHtcblx0ICAgIGFwbHVzLl9hcGx1c19hdXRvX2V4cCA9IHtcblx0ICAgICAgdGFnczoge30sXG5cdCAgICAgIHN0YXR1czogJ2luaXQnLFxuXHQgICAgICBleHBfdGltZXM6IDAsXG5cdCAgICAgIGVsZW1lbnRTZWxlY3RvclNpemVNYXA6IHt9XG5cdCAgICB9OyAgICBcblx0ICAgIGluaXRGbigpO1xuXHQgICAgaW5pdChmdW5jdGlvbiAoKSB7XG5cdCAgICAgIGFwbHVzLl9hcGx1c19hdXRvX2V4cC5zdGF0dXMgPSAnY29tcGxldGUnO1xuXHQgICAgfSk7XG5cdCAgfSAgXG5cdH07XG5cblxuLyoqKi8gfSksXG4vKiA0NyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBwcm9qZWN0IC0gZmlsZXBhdGhcblx0ICogZG9t5pON5L2c5bel5YW357G777yM6L+Z5Liq5Z+656GA5bel5YW357G75Lya6KKr5YW25LuW5bel5YW357G75byV55So77yM5pWF5Lil56aB5Zyo6L+Z6YeM5YaN5byV55So5YW25LuW5qih5Z2X5Lul5YWN5Ye6546w6Zeu6aKYXG5cdCAqXG5cdCAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cblx0ICpcblx0ICogQXV0aG9yczpcblx0ICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuXHQgKi9cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIHV0aWxHb2xkbG9nID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0XG5cdHZhciBpc0RlYnVnO1xuXHRcblx0LyoqXG5cdCAqIOaYr+WQpuW8gOWQr2RlYnVn5qih5byP5YWl5Y+j77yM5ZyodXJs5Lit5Yqg5YWlZGVidWdBcGx1cz10cnVlXG5cdCAqL1xuXHRleHBvcnRzLmlzRGVidWdBcGx1cyA9IGZ1bmN0aW9uIChkZWJ1Zykge1xuXHQgIGlmICh0eXBlb2YgaXNEZWJ1ZyA9PT0gJ2Jvb2xlYW4nKSB7XG5cdCAgICByZXR1cm4gaXNEZWJ1Zztcblx0ICB9XG5cdCAgaWYgKHR5cGVvZiBkZWJ1ZyA9PT0gJ2Jvb2xlYW4nKSB7XG5cdCAgICBpc0RlYnVnID0gZGVidWc7XG5cdCAgfVxuXHQgIGlmIChsb2NhbFN0b3JhZ2UgJiYgbG9jYXRpb24pIHtcblx0ICAgIHZhciBtYXRjaF92YWx1ZSA9IGxvY2F0aW9uLmhyZWYubWF0Y2goL2FwbHVzRGVidWc9KHRydWV8ZmFsc2UpLyk7XG5cdCAgICBpZiAobWF0Y2hfdmFsdWUgJiYgbWF0Y2hfdmFsdWUubGVuZ3RoID4gMCkge1xuXHQgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnYXBsdXNEZWJ1ZycsIG1hdGNoX3ZhbHVlWzFdKTtcblx0ICAgIH1cblx0ICAgIGlzRGVidWcgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnYXBsdXNEZWJ1ZycpID09PSAndHJ1ZSc7XG5cdCAgfSBlbHNlIHtcblx0ICAgIGlzRGVidWcgPSBmYWxzZTtcblx0ICB9XG5cdCAgdXRpbEdvbGRsb2cuc2V0R29sZGxvZ1ZhbCgnYXBsdXNEZWJ1ZycsIGlzRGVidWcpOyAgXG5cdCAgcmV0dXJuIGlzRGVidWc7XG5cdH07XG5cblxuLyoqKi8gfSksXG4vKiA0OCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBwcm9qZWN0IC0gZmlsZXBhdGhcblx0ICog55uR5ZCsZG9t5Y+Y5YyW77yM5pS26ZuG5b6F5pud5YWJ5YWD57SgXG5cdCAqXG5cdCAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cblx0ICpcblx0ICogQXV0aG9yczpcblx0ICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuXHQgKi9cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIEJhc2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKTtcblx0dmFyIHRyYWNrZXJVdGlsID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMyk7XG5cdHZhciB1dGlsTG9nZ2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNik7XG5cdFxuXHR2YXIgdXRpbEV2ZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOCk7XG5cdHZhciB1dGlsRWxlbWVudEFjID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OSk7XG5cdFxuXHR2YXIgdXRpbF9hY19hZSA9IF9fd2VicGFja19yZXF1aXJlX18oNDApO1xuXHR2YXIgY29uZmlnID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0Myk7XG5cdFxuXHR2YXIgd2luID0gd2luZG93O1xuXHR2YXIgZG9jID0gZG9jdW1lbnQ7XG5cdFxuXHQvKipcblx0ICog5YaF6YOo5a+56LGhXG5cdCAqIEBvYmplY3QgIHRoaXMuX29ic2VydmVyICAgICAgLy8gTXV0YXRpb25PYnNlcnZlcuebkeWQrOiAhVxuXHQgKiBAb2JqZWN0ICB0aGlzLl9sb29wX29ic2VydmVyIC8vIOS4jeaUr+aMgU11dGF0aW9uT2JzZXJ2ZXLnmoTmtY/op4jlmajvvIzova7or6Lnm5HlkKzogIVcblx0ICogQG9iamVjdCAgdGhpcy5hdXRvRXhwQ29uZmlnICAvLyDphY3nva7lj4LmlbBcblx0ICpcblx0ICogQHBhcmFtIHtoYW5kbGVyX2RvbV9jaGFuZ2V9IGNiXG5cdCAqL1xuXHRcblx0XG5cdHZhciBXYXRjaERvbSA9IEJhc2UuZXh0ZW5kKHtcblx0XG5cdCAgZWFjaEVsZW1lbnRzOiBmdW5jdGlvbiAoZWxlbWVudHMsIGV4cENvbmZpZykge1xuXHQgICAgdmFyIGxvZ2tleSA9IGV4cENvbmZpZy5sb2drZXkgfHwgJyc7XG5cdCAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgIHZhciBlbGUgPSBlbGVtZW50c1tpXTtcblx0ICAgICAgdmFyIF9pbmRleCA9IGVsZS5nZXRBdHRyaWJ1dGUoY29uZmlnLkRBVEFfQVBMVVNfQUVfS0VZKTtcblx0ICAgICAgaWYgKF9pbmRleCAmJiBfaW5kZXguaW5kZXhPZignXycpID4gMCkge1xuXHQgICAgICAgIGNvbnRpbnVlO1xuXHQgICAgICB9XG5cdCAgICAgIGlmIChpc05hTihwYXJzZUludChfaW5kZXgpKSkge1xuXHQgICAgICAgIF9pbmRleCA9IGFwbHVzLl9hcGx1c19hdXRvX2V4cC5lbGVtZW50U2VsZWN0b3JTaXplTWFwW2V4cENvbmZpZy5lbGVtZW50U2VsZWN0b3JdKys7XG5cdCAgICAgICAgZWxlLnNldEF0dHJpYnV0ZShjb25maWcuREFUQV9BUExVU19BRV9LRVksIF9pbmRleCk7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHZhciBoYXNoX3ZhbHVlID0gdXRpbF9hY19hZS5nZXRFbGVtZW50SGFzaChleHBDb25maWcsIHtcblx0ICAgICAgICBpZ25vcmVfYXR0cjogZmFsc2UsXG5cdCAgICAgICAgaW5kZXg6IF9pbmRleCxcblx0ICAgICAgICBlbGU6IGVsZVxuXHQgICAgICB9KTtcblx0ICAgICAgLy8g6aqM6K+B5piv5ZCm5bey57uP6K6w5b2V6L+H5LqG77yM5aaC5p6c5rKh5pyJ6K6w5b2V5omN57un57utXG5cdCAgICAgIHZhciBpc1JlY29yZCA9IHV0aWxFbGVtZW50QWMuY2hlY2tJc1JlY29yZChlbGUsIGhhc2hfdmFsdWUsIGNvbmZpZy5EQVRBX0FQTFVTX0FFX0tFWSk7XG5cdCAgICAgIHZhciBpc0luSGFzaE1hcCA9IHV0aWxfYWNfYWUuY2hlY2tJc0luSGFzaE1hcCh7XG5cdCAgICAgICAgbG9na2V5OiBsb2drZXksXG5cdCAgICAgICAgaGFzaF92YWx1ZTogaGFzaF92YWx1ZSxcblx0ICAgICAgICBhcGx1c0tleTogJ19hcGx1c19hdXRvX2V4cCdcblx0ICAgICAgfSk7XG5cdCAgICAgIGlmICghaXNSZWNvcmQgJiYgIWlzSW5IYXNoTWFwKSB7XG5cdCAgICAgICAgdmFyIF9vYmogPSB7XG5cdCAgICAgICAgICBleHBDb25maWc6IGV4cENvbmZpZyxcblx0ICAgICAgICAgIGhhc2hfdmFsdWU6IGhhc2hfdmFsdWUsXG5cdCAgICAgICAgICBlbGVtZW50OiBlbGUsXG5cdCAgICAgICAgICBzdGF0dXM6IDAsICAgLy8g5Yid5aeL54q25oCBXG5cdCAgICAgICAgICBlbGVtZW50U2VsZWN0b3I6IGV4cENvbmZpZy5lbGVtZW50U2VsZWN0b3Jcblx0ICAgICAgICB9O1xuXHQgICAgICAgIC8vIOWwhuW+heabneWFieWFg+e0oOWtmOWFpWFwbHVzLl9hcGx1c19hdXRvX2V4cC5fYWNIYXNoTWFwXG5cdCAgICAgICAgdXRpbF9hY19hZS51cGRhdGVFeHBIYXNoTWFwKGxvZ2tleSwgX29iaiwgJ0FERCcpO1xuXHQgICAgICB9XG5cdCAgICAgIC8vIGlmICghZWxlLmdldEF0dHJpYnV0ZShjb25maWcuREFUQV9BUExVU19BRV9LRVkpKSB7XG5cdCAgICAgIC8vICAgY29uc29sZS5lcnJvcignaXNSZWNvcmQgPSAnICsgaXNSZWNvcmQgKyAnLCBpc0luSGFzaE1hcCA9ICcgKyBpc0luSGFzaE1hcCArICcsIF9pbmRleCA9ICcgKyBfaW5kZXgpO1xuXHQgICAgICAvLyAgIGNvbnNvbGUubG9nKGVsZSk7XG5cdCAgICAgIC8vIH1cblx0ICAgIH1cblx0ICB9LFxuXHRcblx0ICAvKipcblx0ICAgKiDor6Xmlrnms5XooqtvYnNlcnZlcuaIlui9ruivouiwg+eUqFxuXHQgICAqIOWinumHj+abtOaWsOW+heabneWFieeahOWFg+e0oO+8jOWIneWni+WMluWFg+e0oOWdkOagh1xuXHQgICAqIOW5tuWwhuW+heabneWFieWFg+e0oOWtmOWFpWFwbHVzLl9hcGx1c19hdXRvX2V4cC5fdG9kb19hY19lbGVtZW50c++8iOW5s+ihjOeahHdhdGNoRXhwb3N1cmUuanPkvJrnm5HlkKznqpflj6Plj5jljJbmnaXnm5Hmjqfov5nkupvlvoXmm53lhYnlhYPntKDmmK/lkKbmm53lhYnvvIlcblx0ICAgKiBAcGFyYW1zIF9lbGUge0VsZW1lbnR9XG5cdCAgICogQHBhcmFtcyBvcHRzIHtPYmplY3R9IHtcblx0ICAgKiAgIHR5cGU6ICdwb2xsaW5nJy8nY2hpbGRMaXN0Jy8nY2hhcmFjdGVyRGF0YScvJ3N1YnRyZWUnLydhdHRyaWJ1dGVzXyhjbGFzc3xzdHlsZSknXG5cdCAgICogfVxuXHQgICAqL1xuXHQgIGhhbmRsZXJfZG9tX2NoYW5nZTogZnVuY3Rpb24oX2VsZSwgb3B0cykge1xuXHQgICAgdHJ5IHtcblx0ICAgICAgdmFyIGV4cENvbmZpZ3MgPSB0aGlzLmF1dG9FeHBDb25maWcgfHwgW107XG5cdCAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZXhwQ29uZmlncy5sZW5ndGg7IGorKykge1xuXHQgICAgICAgIHZhciBleHBDb25maWcgPSBleHBDb25maWdzW2pdO1xuXHQgICAgICAgIHZhciBlbGVtZW50cyA9IHV0aWxfYWNfYWUuZ2V0RWxlbWVudHMoZXhwQ29uZmlnLCBkb2MpOyAvLyDojrflj5bmiYDmnIl4eHjmoIfnrb7kuIvluKbmnIl5eXnlsZ7mgKfnmoTlhYPntKBcblx0XG5cdCAgICAgICAgaWYgKCFhcGx1cy5fYXBsdXNfYXV0b19leHAuZWxlbWVudFNlbGVjdG9yU2l6ZU1hcFtleHBDb25maWcuZWxlbWVudFNlbGVjdG9yXSkge1xuXHQgICAgICAgICAgYXBsdXMuX2FwbHVzX2F1dG9fZXhwLmVsZW1lbnRTZWxlY3RvclNpemVNYXBbZXhwQ29uZmlnLmVsZW1lbnRTZWxlY3Rvcl0gPSAxO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLmVhY2hFbGVtZW50cyhlbGVtZW50cywgZXhwQ29uZmlnKTtcblx0ICAgICAgfVxuXHQgICAgICBhcGx1cy5hcGx1c19wdWJzdWIucHVibGlzaCgnQVBMVVNfQUVfRE9NX0NIQU5HRScsIG9wdHMgfHwge30pO1xuXHQgICAgfSBjYXRjaCAoZSkge1xuXHQgICAgICB1dGlsTG9nZ2VyLmxvZ2dlcih7XG5cdCAgICAgICAgbXNnOiBlICYmIGUubWVzc2FnZVxuXHQgICAgICB9KTtcblx0ICAgIH1cblx0ICB9LFxuXHRcblx0ICB0aHJvdHRsZV9oYW5kbGVyX2RvbV9jaGFuZ2U6IHV0aWxfYWNfYWUudGhyb3R0bGUoZnVuY3Rpb24gKF9lbGUsIG9wdHMpIHtcblx0ICAgIHRoaXMuaGFuZGxlcl9kb21fY2hhbmdlKF9lbGUsIG9wdHMpO1xuXHQgIH0sIDIwMCksXG5cdFxuXHQgIC8qKlxuXHQgICAqIOmSiOWvueS4jeaUr+aMgW9ic2VydmVy55qE5rWP6KeI5Zmo55So6L2u6K+i55qE5pa55byP55uR5ZCsZG9t5Y+Y5YyWXG5cdCAgICogQHBhcmFtIHtoYW5kbGVyX2RvbV9jaGFuZ2V9IGNiXG5cdCAgICovXG5cdCAgaW5pdF93YXRjaF9kb206IGZ1bmN0aW9uKCkge1xuXHQgICAgdmFyIF9zZWxmID0gdGhpcztcblx0ICAgIHZhciBfYXBsdXNfYXV0b19leHAgPSBhcGx1cy5fYXBsdXNfYXV0b19leHAgfHwge307XG5cdCAgICBfc2VsZi5fbG9vcF9vYnNlcnZlciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcblx0ICAgICAgaWYgKF9hcGx1c19hdXRvX2V4cC5jdXJyZW50X3dpbl9zdGF0dXMgIT09ICdibHVyJykge1xuXHQgICAgICAgIGlmIChhcGx1cy5hcGx1c0RlYnVnKSB7XG5cdCAgICAgICAgICB1dGlsTG9nZ2VyLmxvZ2dlcih7XG5cdCAgICAgICAgICAgIG1zZzogJ3dhdGNoX2RvbSBpbiBhZSBMT09QX1RJTUUgaXMgJyArIGNvbmZpZy5MT09QX1RJTUUgKyAnbXMgdG90YWw6ICcgKyArK19hcGx1c19hdXRvX2V4cC53YXRjaF90aW1lc1xuXHQgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIF9zZWxmLmhhbmRsZXJfZG9tX2NoYW5nZShudWxsLCB7XG5cdCAgICAgICAgICB0eXBlOiAncG9sbGluZydcblx0ICAgICAgICB9KTsgLy8g5aKe6YeP5pu05paw5b6F5pud5YWJ55qE5YWD57Sg77yM5bm25Yid5aeL5YyW5YWD57Sg5Z2Q5qCHXG5cdCAgICAgICAgX3NlbGYuaW5pdF93YXRjaF9kb20oKTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBfYXBsdXNfYXV0b19leHAud2F0Y2hfZG9tX3J1bm5pbmcgPSBmYWxzZTtcblx0ICAgICAgfVxuXHRcblx0ICAgIH0sIGNvbmZpZy5MT09QX1RJTUUpO1xuXHQgIH0sXG5cdFxuXHQgIG9uRm9jdXNIYW5kbGVyOiBmdW5jdGlvbiAoKSB7XG5cdCAgICB2YXIgX3NlbGYgPSB0aGlzO1xuXHQgICAgdmFyIF9hZSA9IGFwbHVzLl9hcGx1c19hdXRvX2V4cCB8fCB7fTtcblx0ICAgIF9hZS5jdXJyZW50X3dpbl9zdGF0dXMgPSAnZm9jdXMnO1xuXHQgICAgaWYgKCFfYWUud2F0Y2hfZG9tX3J1bm5pbmcpIHtcblx0ICAgICAgX3NlbGYuaW5pdF93YXRjaF9kb20oKTtcblx0ICAgIH1cblx0ICB9LFxuXHRcblx0ICBvbkJsdXJIYW5kbGVyOiBmdW5jdGlvbiAoKSB7XG5cdCAgICB2YXIgX2FlID0gYXBsdXMuX2FwbHVzX2F1dG9fZXhwIHx8IHt9O1xuXHQgICAgX2FlLmN1cnJlbnRfd2luX3N0YXR1cyA9ICdibHVyJztcblx0ICB9LFxuXHRcblx0ICBvblZpc2liaWxpdHlDaGFuZ2U6IGZ1bmN0aW9uKCkge1xuXHQgICAgdmFyIF9zZWxmID0gdGhpcztcblx0ICAgIGlmIChkb2MudmlzaWJpbGl0eVN0YXRlID09PSAndmlzaWJsZScpIHtcblx0ICAgICAgX3NlbGYub25Gb2N1c0hhbmRsZXIoKTtcblx0ICAgIH0gZWxzZSBpZiAoZG9jLnZpc2liaWxpdHlTdGF0ZSA9PT0gJ2hpZGRlbicpIHtcblx0ICAgICAgX3NlbGYub25CbHVySGFuZGxlcigpO1xuXHQgICAgfVxuXHQgIH0sXG5cdFxuXHQgIC8vIOWinuWKoOWQhOenjeebkeWQrFxuXHQgIGFkZEFsbExpc3RlbmVyOiBmdW5jdGlvbiAoKSB7XG5cdCAgICB2YXIgX3NlbGYgPSB0aGlzO1xuXHQgICAgdmFyIF9hZSA9IGFwbHVzLl9hcGx1c19hdXRvX2V4cCB8fCB7fTtcblx0ICAgIF9hZS53YXRjaF90aW1lcyA9IDA7XG5cdCAgICBfYWUud2F0Y2hfZG9tX3J1bm5pbmcgPSB0cnVlO1xuXHQgICAgX3NlbGYuaW5pdF93YXRjaF9kb20oKTtcblx0XG5cdCAgICAvLyDpkojlr7nmiYvmt5jjgIHmiYvnjKvnmoTnibnmrorlpITnkIbpgLvovpFcblx0ICAgIGlmICh3aW4uV2luZFZhbmUgJiYgZG9jLmFkZEV2ZW50TGlzdGVuZXIpIHtcblx0ICAgICAgdXRpbEV2ZW50Lm9uKGRvYywgJ1dWLkV2ZW50LkFQUC5BY3RpdmUnLCBfc2VsZi5vbkZvY3VzSGFuZGxlciwgZmFsc2UpO1xuXHQgICAgICB1dGlsRXZlbnQub24oZG9jLCAnV1YuRXZlbnQuQVBQLkJhY2tncm91bmQnLCBfc2VsZi5vbkJsdXJIYW5kbGVyLCBmYWxzZSk7XG5cdCAgICB9XG5cdFxuXHQgICAgLy8g5rWP6KeI5Zmo5LiN5pSv5oyBTXV0YXRpb25PYnNlcnZlcu+8jOaUueeUqOi9ruivoueahOiAgeWKnuazle+8jOS9huWPquacieWcqOeql+WPo+a/gOa0u+aXtuaJjeaJp+ihjFxuXHQgICAgaWYgKCdoaWRkZW4nIGluIGRvYykge1xuXHQgICAgICAvLyB3ZWJraXTlhoXmoLhcblx0ICAgICAgdXRpbEV2ZW50Lm9uKHdpbiwgJ3Zpc2liaWxpdHljaGFuZ2UnLCBfc2VsZi5vblZpc2liaWxpdHlDaGFuZ2UpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgLy8gSUXlhoXmoLhcblx0ICAgICAgdXRpbEV2ZW50Lm9uKHdpbiwgJ2JsdXInLCBfc2VsZi5vbkJsdXJIYW5kbGVyKTtcblx0ICAgICAgdXRpbEV2ZW50Lm9uKHdpbiwgJ2ZvY3VzJywgX3NlbGYub25Gb2N1c0hhbmRsZXIpO1xuXHQgICAgfVxuXHQgIH0sXG5cdFxuXHQgIC8vIOenu+mZpOWQhOenjeebkeWQrFxuXHQgIHJlbW92ZUFsbExpc3RlbmVyOiBmdW5jdGlvbiAoKSB7XG5cdCAgICB2YXIgX3NlbGYgPSB0aGlzO1xuXHQgICAgLy8g6ZKI5a+55omL5reY44CB5omL54yr55qE54m55q6K5aSE55CG6YC76L6RXG5cdCAgICBpZiAod2luLldpbmRWYW5lICYmIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKSB7XG5cdCAgICAgIHV0aWxFdmVudC51bihkb2MsICdXVi5FdmVudC5BUFAuQWN0aXZlJywgX3NlbGYub25Gb2N1c0hhbmRsZXIsIGZhbHNlKTtcblx0ICAgICAgdXRpbEV2ZW50LnVuKGRvYywgJ1dWLkV2ZW50LkFQUC5CYWNrZ3JvdW5kJywgX3NlbGYub25CbHVySGFuZGxlciwgZmFsc2UpO1xuXHQgICAgfVxuXHRcblx0ICAgIC8vIOa1j+iniOWZqOS4jeaUr+aMgU11dGF0aW9uT2JzZXJ2ZXLvvIzmlLnnlKjova7or6LnmoTogIHlip7ms5XvvIzkvYblj6rmnInlnKjnqpflj6Pmv4DmtLvml7bmiY3miafooYxcblx0ICAgIGlmICgnaGlkZGVuJyBpbiBkb2MpIHtcblx0ICAgICAgLy8gd2Via2l05YaF5qC4XG5cdCAgICAgIHV0aWxFdmVudC51bih3aW4sICd2aXNpYmlsaXR5Y2hhbmdlJywgX3NlbGYub25WaXNpYmlsaXR5Q2hhbmdlKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIC8vIElF5YaF5qC4XG5cdCAgICAgIHV0aWxFdmVudC51bih3aW4sICdibHVyJywgX3NlbGYub25CbHVySGFuZGxlcik7XG5cdCAgICAgIHV0aWxFdmVudC51bih3aW4sICdmb2N1cycsIF9zZWxmLm9uRm9jdXNIYW5kbGVyKTtcblx0ICAgIH1cblx0ICB9LFxuXHRcblx0ICAvKipcblx0ICAgKiDliJ3lp4vljJZvYnNlcnZlcuebkeWQrO+8jOebkeWQrGRvbeWPmOWMllxuXHQgICAqIEBwYXJhbSB7TU9ic2VydmVyfSBNT2JzZXJ2ZXJcblx0ICAgKiBAcGFyYW0ge2hhbmRsZXJfZG9tX2NoYW5nZX0gY2Jcblx0ICAgKi9cblx0ICBpbml0X29ic2VydmVyOiBmdW5jdGlvbihNT2JzZXJ2ZXIsIGNhbGxiYWNrKSB7XG5cdCAgICB2YXIgaWdub3JlcyA9IFsnSUZSQU1FJywgJ0JPRFknLCAnT0JKRUNUJywgJ1NDUklQVCcsICdOT1NDUklQVCcsICdMSU5LJywgJ1NUWUxFJ107XG5cdCAgICB2YXIgYXR0cnMgPSBbJ2NsYXNzJywgJ3N0eWxlJ107XG5cdFxuXHQgICAgdmFyIGdldEF0dHJzQ2hhcnNOb2RlcyA9IGZ1bmN0aW9uIChtdXRhdGlvbikge1xuXHQgICAgICBpZiAobXV0YXRpb24udHlwZSA9PT0gJ2NoYXJhY3RlckRhdGEnKSB7XG5cdCAgICAgICAgcmV0dXJuIFttdXRhdGlvbi50YXJnZXRdO1xuXHQgICAgICB9IGVsc2UgaWYgKG11dGF0aW9uLnR5cGUgPT09ICdhdHRyaWJ1dGVzJyAmJiBhdHRycy5pbmRleE9mKG11dGF0aW9uLmF0dHJpYnV0ZU5hbWUpID4gLTEpIHtcblx0ICAgICAgICByZXR1cm4gW211dGF0aW9uLnRhcmdldF07XG5cdCAgICAgIH0gZWxzZSBpZiAobXV0YXRpb24udHlwZSAhPT0gJ2NoaWxkTGlzdCcpIHtcblx0ICAgICAgICAvLyBsb2dnZXIoJ2lnbm9yZSBhdXRvLWV4cCBtdXRhdGlvbi50eXBlID0gJyArIG11dGF0aW9uLnR5cGUgKyAnLCBtdXRhdGlvbi5hdHRyaWJ1dGVOYW1lID0gJyArIG11dGF0aW9uLmF0dHJpYnV0ZU5hbWUpO1xuXHQgICAgICAgIHJldHVybiBbXTtcblx0ICAgICAgfVxuXHQgICAgfTtcblx0XG5cdCAgICB2YXIgZWFjaF9ub2RlcyA9IGZ1bmN0aW9uIChub2RlcywgbXV0YXRpb24pIHtcblx0ICAgICAgaWYgKG5vZGVzICYmIG5vZGVzLmxlbmd0aCA+IDApIHtcblx0ICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG5vZGVzLmxlbmd0aDsgaisrKSB7XG5cdCAgICAgICAgICB2YXIgZWxlID0gbm9kZXNbal0gfHwge307XG5cdCAgICAgICAgICB2YXIgX25vZGVOYW1lID0gZWxlLm5vZGVOYW1lO1xuXHQgICAgICAgICAgdmFyIHRhZ3MgPSBhcGx1cy5fYXBsdXNfYXV0b19leHAudGFncyB8fCB7fTtcblx0ICAgICAgICAgIGlmKCF0YWdzW19ub2RlTmFtZV0pe1xuXHQgICAgICAgICAgICB0YWdzW19ub2RlTmFtZV0gPSAwO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgdGFnc1tfbm9kZU5hbWVdKys7XG5cdCAgICAgICAgICBhcGx1cy5fYXBsdXNfYXV0b19leHAudGFncyA9IHRhZ3M7XG5cdCAgICAgICAgICBpZiAoaWdub3Jlcy5pbmRleE9mKF9ub2RlTmFtZSkgPT09IC0xKSB7XG5cdCAgICAgICAgICAgIHRyYWNrZXJVdGlsLndyYXAoZnVuY3Rpb24oKXtcblx0ICAgICAgICAgICAgICB2YXIgX2FwbHVzX2F1dG9fZXhwID0gYXBsdXMuX2FwbHVzX2F1dG9fZXhwIHx8IHt9O1xuXHQgICAgICAgICAgICAgICsrX2FwbHVzX2F1dG9fZXhwLm9ic2VydmVyX3RpbWVzO1xuXHQgICAgICAgICAgICAgIHZhciBhdHRyTmFtZSA9IG11dGF0aW9uLmF0dHJpYnV0ZU5hbWU7XG5cdCAgICAgICAgICAgICAgY2FsbGJhY2soZWxlLCB7XG5cdCAgICAgICAgICAgICAgICB0eXBlOiBtdXRhdGlvbi50eXBlICsgKGF0dHJOYW1lID8gJ18nICsgYXR0ck5hbWUgOiAnJylcblx0ICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgfSwgJ2luaXRfb2JzZXJ2ZXJfaW5pdF9lbGVtZW50cycpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfTtcblx0XG5cdCAgICAvLyDliJvlu7rop4Llr5/ogIXlr7nosaHvvIzms6jmhI/kuI3og73lpJrmrKFuZXcgTU9ic2VydmVy77yM5Lya5pyJ5oCn6IO96Zeu6aKYIEDosIvlo6sgMjAxOC0wNC0xMFxuXHQgICAgaWYgKCF0aGlzLl9vYnNlcnZlcikge1xuXHQgICAgICB0aGlzLl9vYnNlcnZlciA9IG5ldyBNT2JzZXJ2ZXIoZnVuY3Rpb24gKG11dGF0aW9ucykge1xuXHQgICAgICAgIC8vIOWinumHj+abtOaWsCBpbiAyMDE3LTExLTE3XG5cdCAgICAgICAgaWYgKG11dGF0aW9ucyAmJiBtdXRhdGlvbnMubGVuZ3RoID4gMCkge1xuXHQgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtdXRhdGlvbnMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgdmFyIG11dGF0aW9uID0gbXV0YXRpb25zW2ldIHx8IHt9O1xuXHQgICAgICAgICAgICAvLyDlop7ph4/mm7TmlrAg55uR5ZCs5bGe5oCn5Y+Y5YyW5Lul5YW85a65ZGlzcGxheTpub25lL2Jsb2Nr562J5YWD57Sg5Y+Y5YyWIGluIDIwMTctMTEtMjdcblx0ICAgICAgICAgICAgdmFyIG5vZGVzID0gdXRpbF9hY19hZS5ub2RlbGlzdFRvQXJyYXkobXV0YXRpb24uYWRkZWROb2RlcyB8fCBbXSk7XG5cdCAgICAgICAgICAgIG5vZGVzID0gdXRpbF9hY19hZS5ub2RlbGlzdFRvQXJyYXkoZ2V0QXR0cnNDaGFyc05vZGVzKG11dGF0aW9uKSwgbm9kZXMpO1xuXHQgICAgICAgICAgICBlYWNoX25vZGVzKG5vZGVzLCBtdXRhdGlvbik7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICB9KTsgIFxuXHQgICAgfVxuXHQgICAgXG5cdCAgICAvLyDphY3nva7op4Llr5/pgInpobk6XG5cdCAgICB2YXIgX2NmZyA9IHtcblx0ICAgICAgYXR0cmlidXRlczogdHJ1ZSwgICAgLy8g5bGe5oCn55qE5Y+Y5YqoXG5cdCAgICAgIGNoaWxkTGlzdDogdHJ1ZSwgICAgIC8vIOWtkOiKgueCueeahOWPmOWKqFxuXHQgICAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlLCAvLyDoioLngrnlhoXlrrnmiJboioLngrnmlofmnKznmoTlj5jliqhcblx0ICAgICAgc3VidHJlZTogdHJ1ZSwgICAgICAgLy8g5omA5pyJ5ZCO5Luj6IqC54K555qE5Y+Y5YqoXG5cdCAgICB9O1xuXHRcblx0ICAgIC8vIOS8oOWFpeebruagh+iKgueCueWSjOinguWvn+mAiemhuVxuXHQgICAgdGhpcy5fb2JzZXJ2ZXIub2JzZXJ2ZShkb2MuYm9keSwgX2NmZyk7XG5cdCAgICBpZiAodXRpbF9hY19hZS5JU19ERUJVRykge1xuXHQgICAgICB1dGlsTG9nZ2VyLmxvZ2dlcih7XG5cdCAgICAgICAgbXNnOiAnYXBsdXNfYXV0b19leHAgaW5pdCBNdXRhdGlvbk9ic2VydmVyIHN1Y2Nlc3MhJ1xuXHQgICAgICB9KTtcblx0ICAgIH1cblx0ICB9LFxuXHRcblx0ICBpbml0OiBmdW5jdGlvbihvcHRzKSB7XG5cdCAgICB2YXIgX3NlbGYgPSB0aGlzO1xuXHQgICAgdmFyIF9hZSA9IGFwbHVzLl9hcGx1c19hdXRvX2V4cCB8fCB7fTtcblx0ICAgIGlmIChvcHRzICYmIG9wdHMudHlwZSAhPT0gJ3Jlc2V0JyAmJiAhX2FlLmhhc2hfdmFsdWUpIHtcblx0ICAgICAgX2FlLmhhc2hfdmFsdWUgPSB7fTtcblx0ICAgIH1cblx0XG5cdCAgICBfc2VsZi5oYW5kbGVyX2RvbV9jaGFuZ2UobnVsbCwge1xuXHQgICAgICB0eXBlOiAnYXBsdXNfaW5pdCdcblx0ICAgIH0pO1xuXHRcblx0ICAgIC8vIHN0ZXAyIOebkeWQrGRvbeWPmOWMllxuXHQgICAgdmFyIE1PYnNlcnZlciA9IHdpbi5NdXRhdGlvbk9ic2VydmVyIHx8IHdpbi5XZWJLaXRNdXRhdGlvbk9ic2VydmVyIHx8IHdpbi5Nb3pNdXRhdGlvbk9ic2VydmVyO1xuXHQgICAgaWYgKE1PYnNlcnZlcikge1xuXHQgICAgICBfYWUub2JzZXJ2ZXJfdGltZXMgPSAwO1xuXHQgICAgICAvLyDlop7ph4/mm7TmlrDlvoXmm53lhYnnmoTlhYPntKDvvIzlubbliJ3lp4vljJblhYPntKDlnZDmoIdcblx0ICAgICAgX3NlbGYuaW5pdF9vYnNlcnZlcihNT2JzZXJ2ZXIsIGZ1bmN0aW9uIChlbGUsIG9wdHMpIHtcblx0ICAgICAgICB2YXIgX2VsZSA9IGVsZSAmJiBlbGUucGFyZW50RWxlbWVudCA/IGVsZS5wYXJlbnRFbGVtZW50IDogZWxlO1xuXHQgICAgICAgIC8vIGNvbnNvbGUubG9nKCdfc2VsZi5pc1Rocm90dGxlV2F0Y2ggPSAnICsgX3NlbGYuaXNUaHJvdHRsZVdhdGNoKTtcblx0ICAgICAgICAvLyBpZiAoX3NlbGYuaXNUaHJvdHRsZVdhdGNoKSB7XG5cdCAgICAgICAgX3NlbGYudGhyb3R0bGVfaGFuZGxlcl9kb21fY2hhbmdlKF9lbGUsIG9wdHMpO1xuXHQgICAgICAgIC8vIH0gZWxzZSB7XG5cdCAgICAgICAgLy8gICBfc2VsZi5oYW5kbGVyX2RvbV9jaGFuZ2UoX2VsZSwgb3B0cyk7XG5cdCAgICAgICAgLy8gfVxuXHQgICAgICB9KTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIC8vIOWinuWKoOWQhOenjeebkeWQrFxuXHQgICAgICBfc2VsZi5hZGRBbGxMaXN0ZW5lcigpO1xuXHQgICAgfVxuXHQgIH0sXG5cdFxuXHQgIGNsZWFyOiBmdW5jdGlvbihvcHRzKSB7XG5cdCAgICBpZiAob3B0cyAmJiBvcHRzLmZyb20gPT09ICdhcHBlbmRNZXRhSW5mbycpIHtcblx0ICAgICAgcmV0dXJuO1xuXHQgICAgfVxuXHQgICAgdmFyIF9hcGx1c19hdXRvX2V4cCA9IGFwbHVzLl9hcGx1c19hdXRvX2V4cCB8fCB7fTtcblx0ICAgIGlmIChfYXBsdXNfYXV0b19leHAuX2FjSGFzaE1hcCkge1xuXHQgICAgICBfYXBsdXNfYXV0b19leHAuX2FjSGFzaE1hcCA9IHt9O1xuXHQgICAgfVxuXHQgICAgaWYgKF9hcGx1c19hdXRvX2V4cC5oYXNoX3ZhbHVlKSB7XG5cdCAgICAgIF9hcGx1c19hdXRvX2V4cC5oYXNoX3ZhbHVlID0ge307XG5cdCAgICB9XG5cdCAgICBhcGx1cy5fYXBsdXNfYXV0b19leHAgPSBfYXBsdXNfYXV0b19leHA7XG5cdCAgICAvLyDmuIXpmaTova7or6Lnm5HlkKxcblx0ICAgIGlmICh0aGlzLl9sb29wX29ic2VydmVyKSB7XG5cdCAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9sb29wX29ic2VydmVyKTtcblx0ICAgICAgdGhpcy5fbG9vcF9vYnNlcnZlciA9IG51bGw7XG5cdCAgICB9XG5cdCAgICAvLyDorqnor6Xop4Llr5/ogIXlr7nosaHlgZzmraLop4Llr5/mjIflrprnm67moIfnmoRET03lj5jljJYu55u05Yiw5YaN5qyh6LCD55So5YW2b2JzZXJ2ZSgp5pa55rOVLOivpeinguWvn+iAheWvueixoeWMheWQq+eahOWbnuiwg+WHveaVsOmDveS4jeS8muWGjeiiq+iwg+eUqC5cblx0ICAgIGlmICh0aGlzLl9vYnNlcnZlcikge1xuXHQgICAgICB0aGlzLl9vYnNlcnZlci50YWtlUmVjb3JkcygpOyAvLyDmuIXnqbrop4Llr5/ogIXlr7nosaHnmoTorrDlvZXpmJ/liJcs5bm26L+U5Zue6YeM6Z2i55qE5YaF5a65LlxuXHQgICAgICB0aGlzLl9vYnNlcnZlci5kaXNjb25uZWN0KCk7IC8vIOWBnOatouinguWvn+aMh+Wumuebruagh+eahERPTeWPmOWMli7nm7TliLDlho3mrKHosIPnlKjlhbZvYnNlcnZlKCnmlrnms5Vcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIC8vIOenu+mZpOWQhOenjeebkeWQrFxuXHQgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVyKCk7XG5cdCAgICB9XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICog5bCd6K+V5Zyo6Z2e5aKe6YeP5pu05paw6Ieq5Yqo5pud5YWJ5Z+L54K56YWN572u5Zy65pmv5LiL5riF55CGZG9t6IqC54K55LiK55qE6Ieq5Yqo5pud5YWJ5qCH5b+XXG5cdCAgICogQHBhcmFtcyBvYmoge09iamVjdH0ge1xuXHQgICAqICAgYXV0b0V4cENvbmZpZzogW3tcblx0ICAgKiAgICAgY3NzU2VsZWN0b3I6IFwiRElWW2xvZ2tleT1cIi9kYWN1LjEuMS4xXCJdXCJcblx0ICAgKiAgICAgZWxlbWVudFNlbGVjdG9yOiBcIkRJVltsb2drZXk9XCIvZGFjdS4xLjEuMVwiXVwiXG5cdCAgICogICAgIGxvZ2tleTogXCIvZGFjdS4xLjEuMVwiXG5cdCAgICogICAgIHByb3BzOiBbXCJfbGthXCJdXG5cdCAgICogICB9XSxcblx0ICAgKiAgIGlzVGhyb3R0bGVXYXRjaDogZmFsc2Vcblx0ICAgKiB9XG5cdCAgICogQHBhcmFtcyBvcHRzIHtPYmplY3R9IHtcblx0ICAgKiAgIGZyb206ICdhcHBlbmRNZXRhSW5mbydcblx0ICAgKiB9XG5cdCAgICovXG5cdCAgY2xlYXJEb206IGZ1bmN0aW9uKG9iaiwgb3B0cykge1xuXHQgICAgdmFyIF9leHBDb25maWcgPSB0aGlzLmF1dG9FeHBDb25maWcgfHwgW107XG5cdCAgICBpZiAob3B0cyAmJiBvcHRzLmZyb20gIT09ICdhcHBlbmRNZXRhSW5mbycpIHtcblx0ICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBfZXhwQ29uZmlnLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgIHZhciBlbGVtZW50U2VsZWN0b3IgPSBfZXhwQ29uZmlnW2ldLmVsZW1lbnRTZWxlY3Rvcjtcblx0ICAgICAgICAgIHZhciBfZG9jcyA9IGRvYy5xdWVyeVNlbGVjdG9yQWxsKGVsZW1lbnRTZWxlY3Rvcik7XG5cdCAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IF9kb2NzLmxlbmd0aDsgaisrKSB7XG5cdCAgICAgICAgICAgIF9kb2NzW2pdLnNldEF0dHJpYnV0ZShjb25maWcuREFUQV9BUExVU19BRV9LRVksICcnKTsgIFxuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIHRoaXMuYXV0b0V4cENvbmZpZyA9IG9iaiAmJiBvYmouYXV0b0V4cENvbmZpZyA/IG9iai5hdXRvRXhwQ29uZmlnIDogW107XG5cdCAgICAvLyB0aGlzLmlzVGhyb3R0bGVXYXRjaCA9IG9iaiA/IG9iai5pc1Rocm90dGxlV2F0Y2ggOiBmYWxzZTtcblx0ICB9LFxuXHRcblx0ICAvKipcblx0ICAgKiDph43nva5kb23oioLngrnkuIrnmoToh6rliqjmm53lhYnmoIflv5cgJiYg6YeN5paw5Yid5aeL5YyWd2F0Y2hET01cblx0ICAgKiBAcGFyYW1zIG9iaiB7T2JqZWN0fSB7XG5cdCAgICogICBhdXRvRXhwQ29uZmlnOiBbe1xuXHQgICAqICAgICBjc3NTZWxlY3RvcjogXCJESVZbbG9na2V5PVwiL2RhY3UuMS4xLjFcIl1cIlxuXHQgICAqICAgICBlbGVtZW50U2VsZWN0b3I6IFwiRElWW2xvZ2tleT1cIi9kYWN1LjEuMS4xXCJdXCJcblx0ICAgKiAgICAgbG9na2V5OiBcIi9kYWN1LjEuMS4xXCJcblx0ICAgKiAgICAgcHJvcHM6IFtcIl9sa2FcIl1cblx0ICAgKiAgIH1dLFxuXHQgICAqICAgaXNUaHJvdHRsZVdhdGNoOiBmYWxzZVxuXHQgICAqIH1cblx0ICAgKiBAcGFyYW1zIG9wdHMge09iamVjdH0ge1xuXHQgICAqICAgZnJvbTogJ2FwcGVuZE1ldGFJbmZvJ1xuXHQgICAqIH1cblx0ICAgKi9cblx0ICByZXNldDogZnVuY3Rpb24gKG9iaiwgb3B0cykge1xuXHQgICAgdGhpcy5jbGVhckRvbShvYmosIG9wdHMpO1xuXHQgICAgdGhpcy5pbml0KHt0eXBlOiAncmVzZXQnfSk7XG5cdCAgfVxuXHR9KTtcblx0bW9kdWxlLmV4cG9ydHMgPSBXYXRjaERvbTtcblxuXG4vKioqLyB9KSxcbi8qIDQ5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0LyoqXG5cdCAqIHByb2plY3QgLSBmaWxlcGF0aFxuXHQgKiBkZXNjcmlwdGlvblxuXHQgKlxuXHQgKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG5cdCAqXG5cdCAqIEF1dGhvcnM6XG5cdCAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cblx0ICovXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdC8vIHZhciBjb25maWcgPSByZXF1aXJlKCcuLi8uLi9saWJfY29tbW9uL2NvbmZpZycpO1xuXHRcblx0dmFyIGRvYyA9IGRvY3VtZW50O1xuXHRcblx0LyoqXG5cdCAqIOWIpOaWreafkOS4gOS4quWdkOagh+aYr+WQpuWcqOWPr+inhueql+WGhe+8jOWPqumcgOimgeWIpOaWreWPr+inhueql+eahOW3puS4iuinkuS4juWPs+S4i+inkuWNs+WPr1xuXHQgKiBAcGFyYW1zIHtPYmplY3R9IHdpblBvc2l0aW9uc1xuXHQgKiBAcGFyYW1zIHtPYmplY3R9IHYgOiB7IHg6IDEsIHkxIH1cblx0ICpcblx0ICogQHJldHVybiB7Qm9vbGVhbn1cblx0ICovXG5cdHZhciBwb3NpdGlvbklzSW5XaW4gPSBmdW5jdGlvbih3aW5Qb3NpdGlvbnMsIHYpIHtcblx0ICBpZiAodi54ID49IHdpblBvc2l0aW9ucy5wTGVmdFRvcFswXVxuXHQgICAmJiB2LnggPD0gd2luUG9zaXRpb25zLnBSaWdodEJvdHRvbVswXVxuXHQgICAmJiB2LnkgPj0gd2luUG9zaXRpb25zLnBMZWZ0VG9wWzFdXG5cdCAgICYmIHYueSA8PSB3aW5Qb3NpdGlvbnMucFJpZ2h0Qm90dG9tWzFdKSB7XG5cdCAgICByZXR1cm4gdHJ1ZTtcblx0ICB9IGVsc2Uge1xuXHQgICAgcmV0dXJuIGZhbHNlO1xuXHQgIH1cblx0fTtcblx0XG5cdC8qKlxuXHQgKiDmoLnmja7lj6/op4bnqpflm5vkuKrpobbngrnnmoTlnZDmoIfpm4blkozlvZPliY3lhYPntKDlgZrorqHnrpfvvIzliKTmlq3lvZPliY3lhYPntKDlnKjlj6/op4bnqpflhoXnmoTpnaLnp6/kuI7lhYPntKDmnKzouqvnmoTpnaLnp6/mr5TkvovvvIzljbPlj6/op4bnjodcblx0ICogQHBhcmFtcyB7T2JqZWN0fSB3aW5Qb3NpdGlvbnNcblx0ICogQHBhcmFtcyB7RWxlbWVudH0gdlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtGbG9hdH0gcmF0ZSAwLjNcXDAuMVxcMC45XFwxIC4uLi4uLlxuXHQgKi9cblx0dmFyIGdldFZpZXdhYmlsaXR5UmF0ZSA9IGZ1bmN0aW9uKHdpblBvc2l0aW9ucywgdikge1xuXHQgIHZhciByYXRlID0gMDtcblx0ICAvLyAx44CB5bem5LiK6KeS5piv5ZCm5Zyo5Y+v6KeG56qX5YaFXG5cdCAgdmFyIGVsZUxlZnRUb3BJc0luV2luID0gcG9zaXRpb25Jc0luV2luKHdpblBvc2l0aW9ucywgdik7XG5cdFxuXHQgIC8vIDLjgIHlj7PkuIrop5LmmK/lkKblnKjlj6/op4bnqpflhoVcblx0ICB2YXIgZWxlUmlnaHRUb3BJc0luV2luID0gcG9zaXRpb25Jc0luV2luKHdpblBvc2l0aW9ucywge1xuXHQgICAgJ3gnOiB2LnggKyB2LndpZHRoLFxuXHQgICAgJ3knOiB2Lnlcblx0ICB9KTtcblx0XG5cdCAgLy8gM+OAgeW3puS4i+inkuaYr+WQpuWcqOWPr+inhueql+WGhVxuXHQgIHZhciBlbGVMZWZ0Qm90dG9tSXNJbldpbiA9IHBvc2l0aW9uSXNJbldpbih3aW5Qb3NpdGlvbnMsIHtcblx0ICAgICd4Jzogdi54LFxuXHQgICAgJ3knOiB2LnkgKyB2LmhlaWdodFxuXHQgIH0pO1xuXHRcblx0ICAvLyA044CB5Y+z5LiL6KeS5piv5ZCm5Zyo5Y+v6KeG56qX5YaFXG5cdCAgdmFyIGVsZVJpZ2h0Qm90dG9tSXNJbldpbiA9IHBvc2l0aW9uSXNJbldpbih3aW5Qb3NpdGlvbnMsIHtcblx0ICAgICd4Jzogdi54ICsgdi53aWR0aCxcblx0ICAgICd5Jzogdi55ICsgdi5oZWlnaHRcblx0ICB9KTtcblx0XG5cdCAgLy8gPT09PT09IDHjgIHmlbTkuKrlh7rnjrAgPT09PT09XG5cdCAgdmFyIGZ1bGwgPSBmdW5jdGlvbigpIHtcblx0ICAgIHZhciBycyA9IDA7XG5cdCAgICBpZiAoZWxlTGVmdFRvcElzSW5XaW4gJiYgZWxlUmlnaHRCb3R0b21Jc0luV2luKSB7XG5cdCAgICAgIC8vIFRPRE8g55u05o6l566X5pud5YWJXG5cdCAgICAgIHJzID0gdi5zaXplIC8gdi5zaXplO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHJzO1xuXHQgIH07XG5cdFxuXHQgIC8vID09PT09PSAy44CB5LiA6L655Ye6546wID09PT09PVxuXHQgIHZhciBoYWxmID0gZnVuY3Rpb24oKSB7XG5cdCAgICB2YXIgd2lkdGggPSAwLCBoZWlnaHQgPSAwO1xuXHQgICAgaWYgKGVsZUxlZnRUb3BJc0luV2luICYmIGVsZVJpZ2h0VG9wSXNJbldpbiAmJiAhZWxlTGVmdEJvdHRvbUlzSW5XaW4gJiYgIWVsZVJpZ2h0Qm90dG9tSXNJbldpbikge1xuXHQgICAgICAvLyAyLjHjgIHkuIrljYrpg6jliIblh7rnjrDlnKjlj6/op4bnqpflhoVcblx0ICAgICAgd2lkdGggPSB2LndpZHRoO1xuXHQgICAgICBoZWlnaHQgPSB3aW5Qb3NpdGlvbnMucExlZnRCb3R0b21bMV0gLSB2Lnk7XG5cdCAgICB9IGVsc2UgaWYgKCFlbGVMZWZ0VG9wSXNJbldpbiAmJiBlbGVSaWdodFRvcElzSW5XaW4gJiYgIWVsZUxlZnRCb3R0b21Jc0luV2luICYmIGVsZVJpZ2h0Qm90dG9tSXNJbldpbikge1xuXHQgICAgICAvLyAyLjLjgIHlj7PljYrpg6jliIblh7rnjrDlnKjlj6/op4bnqpflhoVcblx0ICAgICAgd2lkdGggPSB3aW5Qb3NpdGlvbnMucExlZnRUb3BbMF0gLSB2Lng7XG5cdCAgICAgIGhlaWdodCA9IHYueTtcblx0ICAgIH0gZWxzZSBpZiAoIWVsZUxlZnRUb3BJc0luV2luICYmICFlbGVSaWdodFRvcElzSW5XaW4gJiYgZWxlTGVmdEJvdHRvbUlzSW5XaW4gJiYgZWxlUmlnaHRCb3R0b21Jc0luV2luKSB7XG5cdCAgICAgIC8vIDIuM+OAgeS4i+WNiumDqOWIhuWHuueOsOWcqOWPr+inhueql+WGhVxuXHQgICAgICB3aWR0aCA9IHYud2lkdGg7XG5cdCAgICAgIC8vIGhlaWdodCA9IHdpblBvc2l0aW9ucy5wTGVmdFRvcFsxXSAtIHYueTtcblx0ICAgICAgaGVpZ2h0ID0gdi5oZWlnaHQgLSBNYXRoLmFicyh3aW5Qb3NpdGlvbnMucExlZnRUb3BbMV0gLSB2LnkpO1xuXHQgICAgfSBlbHNlIGlmIChlbGVMZWZ0VG9wSXNJbldpbiAmJiAhZWxlUmlnaHRUb3BJc0luV2luICYmIGVsZUxlZnRCb3R0b21Jc0luV2luICYmICFlbGVSaWdodEJvdHRvbUlzSW5XaW4pIHtcblx0ICAgICAgLy8gMi4044CB5bem5Y2K6YOo5YiG5Ye6546w5Zyo5Y+v6KeG56qX5YaFXG5cdCAgICAgIHdpZHRoID0gd2luUG9zaXRpb25zLnBSaWdodFRvcFswXSAtIHYueDtcblx0ICAgICAgLy8gaGVpZ2h0ID0gdi55O1xuXHQgICAgICBoZWlnaHQgPSB2LmhlaWdodDtcblx0ICAgIH1cblx0ICAgIHJldHVybiB2LnNpemUgPiAwID8gTWF0aC5hYnMod2lkdGggKiBoZWlnaHQpIC8gdi5zaXplIDogMDtcblx0ICB9O1xuXHRcblx0ICAvLyA9PT09PT0gM+OAgeS4gOS4quinkuWHuueOsCA9PT09PT1cblx0ICB2YXIgY29ybmVyID0gZnVuY3Rpb24oKSB7XG5cdCAgICB2YXIgd2lkdGggPSAwLCBoZWlnaHQgPSAwO1xuXHQgICAgaWYgKGVsZUxlZnRUb3BJc0luV2luICYmICFlbGVSaWdodFRvcElzSW5XaW4gJiYgIWVsZUxlZnRCb3R0b21Jc0luV2luICYmICFlbGVSaWdodEJvdHRvbUlzSW5XaW4pIHtcblx0ICAgICAgLy8gMy4x44CB5bem5LiK6KeS5Ye6546w5Zyo5Y+v6KeG56qX5YaFXG5cdCAgICAgIHdpZHRoID0gd2luUG9zaXRpb25zLnBSaWdodEJvdHRvbVswXSAtIHYueDtcblx0ICAgICAgaGVpZ2h0ID0gd2luUG9zaXRpb25zLnBSaWdodEJvdHRvbVsxXSAtIHYueTtcblx0ICAgIH0gZWxzZSBpZiAoIWVsZUxlZnRUb3BJc0luV2luICYmIGVsZVJpZ2h0VG9wSXNJbldpbiAmJiAhZWxlTGVmdEJvdHRvbUlzSW5XaW4gJiYgIWVsZVJpZ2h0Qm90dG9tSXNJbldpbikge1xuXHQgICAgICAvLyAzLjLjgIHlj7PkuIrop5Llh7rnjrDlnKjlj6/op4bnqpflhoVcblx0ICAgICAgd2lkdGggPSB3aW5Qb3NpdGlvbnMucExlZnRCb3R0b21bMF0gLSB2Lng7XG5cdCAgICAgIGhlaWdodCA9IHdpblBvc2l0aW9ucy5wTGVmdEJvdHRvbVsxXSAtIHYueTtcblx0ICAgIH0gZWxzZSBpZiAoIWVsZUxlZnRUb3BJc0luV2luICYmICFlbGVSaWdodFRvcElzSW5XaW4gJiYgZWxlTGVmdEJvdHRvbUlzSW5XaW4gJiYgIWVsZVJpZ2h0Qm90dG9tSXNJbldpbikge1xuXHQgICAgICAvLyAzLjPjgIHlt6bkuIvop5Llh7rnjrDlnKjlj6/op4bnqpflhoVcblx0ICAgICAgd2lkdGggPSB3aW5Qb3NpdGlvbnMucFJpZ2h0VG9wWzBdIC0gdi54O1xuXHQgICAgICBoZWlnaHQgPSB3aW5Qb3NpdGlvbnMucFJpZ2h0VG9wWzFdIC0gdi55O1xuXHQgICAgfSBlbHNlIGlmICghZWxlTGVmdFRvcElzSW5XaW4gJiYgIWVsZVJpZ2h0VG9wSXNJbldpbiAmJiAhZWxlTGVmdEJvdHRvbUlzSW5XaW4gJiYgZWxlUmlnaHRCb3R0b21Jc0luV2luKSB7XG5cdCAgICAgIC8vIDMuNOOAgeWPs+S4i+inkuWHuueOsOWcqOWPr+inhueql+WGhVxuXHQgICAgICB3aWR0aCA9IHdpblBvc2l0aW9ucy5wTGVmdFRvcFswXSAtIHYueDtcblx0ICAgICAgaGVpZ2h0ID0gd2luUG9zaXRpb25zLnBMZWZ0VG9wWzFdIC0gdi55O1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHYuc2l6ZSA+IDAgPyBNYXRoLmFicyh3aWR0aCAqIGhlaWdodCkgLyB2LnNpemUgOiAwO1xuXHQgIH07XG5cdFxuXHQgIC8vIOi/memHjOS7juWkp+WIsOWwj+eahOmhuuW6j+S4jeiDveaUuSAx44CBZnVsbCA9PiAy44CBaGFsZiA9PiAz44CBY29ybmVyXG5cdCAgcmF0ZSA9IGZ1bGwoKTtcblx0ICBpZiAocmF0ZSA+IDApIHtcblx0ICAgIHJldHVybiByYXRlO1xuXHQgIH1cblx0XG5cdCAgcmF0ZSA9IGhhbGYoKTtcblx0ICBpZiAocmF0ZSA+IDApIHtcblx0ICAgIHJldHVybiByYXRlO1xuXHQgIH1cblx0XG5cdCAgcmF0ZSA9IGNvcm5lcigpO1xuXHQgIGlmIChyYXRlID4gMCkge1xuXHQgICAgcmV0dXJuIHJhdGU7XG5cdCAgfVxuXHRcblx0ICByZXR1cm4gcmF0ZTtcblx0fTtcblx0XG5cdGV4cG9ydHMud3JhcFZpZXdhYmlsaXR5UmF0ZSA9IGZ1bmN0aW9uKHdpblBvc2l0aW9ucywgdiwgQUNfUkFURSkge1xuXHQgIHZhciByYXRlID0gMDtcblx0ICBpZiAod2luUG9zaXRpb25zKSB7XG5cdCAgICBmb3IgKHZhciBpID0gMDsgaSA8IHdpblBvc2l0aW9ucy5sZW5ndGg7IGkrKykge1xuXHQgICAgICByYXRlID0gZ2V0Vmlld2FiaWxpdHlSYXRlKHdpblBvc2l0aW9uc1tpXSwgdik7XG5cdCAgICAgIGlmIChyYXRlIDwgQUNfUkFURSkge1xuXHQgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH1cblx0ICByZXR1cm4gcmF0ZTtcblx0fTtcblx0XG5cdC8vIOiOt+WPluW9k+WJjeWFg+e0oOeahFjmiJZZ5Z2Q5qCHLCBUT0RP5rOo5oSPcG9zaXRpb27lrprkvY3pl67pophcblx0Ly8gdmFyIGdldEVsZW1lbnRPZmZzZXQgPSBmdW5jdGlvbihlbGVtZW50LCB0eXBlKSB7XG5cdC8vICAgdmFyIGFjdHVhbE9mZnNldCA9IGVsZW1lbnRbdHlwZV07XG5cdC8vICAgdmFyIGN1cnJlbnQgPSBlbGVtZW50Lm9mZnNldFBhcmVudDtcblx0XG5cdC8vICAgdmFyIHBvc2l0aW9uID0gY3VycmVudCAmJiBjdXJyZW50LnN0eWxlID8gY3VycmVudC5zdHlsZS5wb3NpdGlvbiA6ICdzdGF0aWMnO1xuXHQvLyAgIHdoaWxlIChjdXJyZW50ICE9PSBudWxsICYmIHBvc2l0aW9uICE9PSAncmVsYXRpdmUnKSB7XG5cdC8vICAgICBhY3R1YWxPZmZzZXQgKz0gY3VycmVudFt0eXBlXTtcblx0Ly8gICAgIGN1cnJlbnQgPSBjdXJyZW50Lm9mZnNldFBhcmVudDtcblx0Ly8gICB9XG5cdC8vICAgcmV0dXJuIGFjdHVhbE9mZnNldDtcblx0Ly8gfTtcblx0XG5cdHZhciBpc051bWJlciA9IGZ1bmN0aW9uIChuKSB7XG5cdCAgcmV0dXJuIHR5cGVvZiBuID09PSAnbnVtYmVyJyAmJiBuICE9PSBOYU47XG5cdH07XG5cdFxuXHQvKipcblx0ICogQHBhcmFtcyBlbGVtZW50XG5cdCAqIEByZXR1cm4ge1xuXHQgICAgIHdpZHRoOiAxNTkuOTg0Mzc1LCAvLyBtdXN0XG5cdCAgICAgaGVpZ2h0OiAxNiwgICAgICAgIC8vIG11c3Rcblx0ICAgICB4OiA2OCwgICAgICAgICAgICAgLy8gbXVzdFxuXHQgICAgIHk6IDE0MTksICAgICAgICAgICAvLyBtdXN0XG5cdCAgICAgYm90dG9tOiAxNDM1LCAgICAgIC8vIGVuYWJsZVxuXHQgICAgIGxlZnQ6IDY4LCAgICAgICAgICAvLyBlbmFibGVcblx0ICAgICByaWdodDogMjI3Ljk4NDM3NSwgLy8gZW5hYmxlXG5cdCAgICAgdG9wOiAxNDE5LCAgICAgICAgIC8vIGVuYWJsZVxuXHQgICB9XG5cdCAqL1xuXHR2YXIgZ2V0RWxlbWVudFBvc2l0aW9uID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcblx0ICB2YXIgcG9zID0ge307XG5cdCAgaWYgKGVsZW1lbnQpIHtcblx0ICAgIGlmICh0eXBlb2YgZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QgPT09ICdmdW5jdGlvbicpIHtcblx0ICAgICAgcG9zID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSB8fCB7fTtcblx0ICAgIH1cblx0ICAgIC8vIOaoquWdkOagh1xuXHQgICAgaWYgKCFpc051bWJlcihwb3MueCkpIHtcblx0ICAgICAgaWYgKGlzTnVtYmVyKHBvcy5sZWZ0KSkge1xuXHQgICAgICAgIHBvcy54ID0gcG9zLmxlZnQ7XG5cdCAgICAgIH1cblx0ICAgICAgLy8gZWxzZSB7XG5cdCAgICAgIC8vICAgcG9zLnggPSBnZXRFbGVtZW50T2Zmc2V0KGVsZW1lbnQsICdvZmZzZXRMZWZ0Jyk7XG5cdCAgICAgIC8vIH1cblx0ICAgIH1cblx0ICAgIC8vIOe6teWdkOagh1xuXHQgICAgaWYgKCFpc051bWJlcihwb3MueSkpIHtcblx0ICAgICAgaWYgKGlzTnVtYmVyKHBvcy50b3ApKSB7XG5cdCAgICAgICAgcG9zLnkgPSBwb3MudG9wO1xuXHQgICAgICB9XG5cdCAgICAgIC8vIGVsc2Uge1xuXHQgICAgICAvLyAgIHBvcy55ID0gZ2V0RWxlbWVudE9mZnNldChlbGVtZW50LCAnb2Zmc2V0VG9wJyk7XG5cdCAgICAgIC8vIH1cblx0ICAgIH1cblx0ICAgIGlmICghaXNOdW1iZXIocG9zLndpZHRoKSkge1xuXHQgICAgICBwb3Mud2lkdGggPSBlbGVtZW50Lm9mZnNldFdpZHRoO1xuXHQgICAgfVxuXHQgICAgaWYgKCFpc051bWJlcihwb3MuaGVpZ2h0KSkge1xuXHQgICAgICBwb3MuaGVpZ2h0ID0gZWxlbWVudC5vZmZzZXRIZWlnaHQ7XG5cdCAgICB9XG5cdCAgfVxuXHQgIHJldHVybiBwb3M7XG5cdH07XG5cdGV4cG9ydHMuZ2V0RWxlbWVudFBvc2l0aW9uID0gZ2V0RWxlbWVudFBvc2l0aW9uO1xuXHRcblx0LyoqXG5cdCAqIEBwYXJhbXMge1N0cmluZ30gcG9zaXRpb25TZWxlY3RvciAoZW5hYmxlKSAvLyBlZzogZGl2LmNsYXNzTmFtZVxuXHQgKiDojrflj5blj6/op4bnqpfnmoTlm5vkuKrln7rmnKzlj4LmlbBjbGllbnRXaWR0aOOAgWNsaWVudEhlaWdodOOAgXNjcm9sbFRvcOOAgXNjcm9sbExlZnRcblx0ICpcblx0ICogQHJldHVybiB7T2JqZWN0fVxuXHQgKi9cblx0ZXhwb3J0cy5nZXRXaW5Qb3NpdGlvbnMgPSBmdW5jdGlvbihwb3NpdGlvblNlbGVjdG9yKSB7XG5cdCAgdmFyIHBvc3Rpb25zID0gW107XG5cdCAgaWYgKHBvc2l0aW9uU2VsZWN0b3IgJiYgdHlwZW9mIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IgPT09ICdmdW5jdGlvbicpIHtcblx0ICAgIHZhciBzZWxlY3RvckVsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocG9zaXRpb25TZWxlY3Rvcik7XG5cdCAgICBpZiAoc2VsZWN0b3JFbGUpIHtcblx0ICAgICAgdmFyIF9wb3MgPSBnZXRFbGVtZW50UG9zaXRpb24oc2VsZWN0b3JFbGUpIHx8IHt9O1xuXHQgICAgICBpZiAoaXNOdW1iZXIoX3Bvcy54KSAmJiBpc051bWJlcihfcG9zLnkpICYmIGlzTnVtYmVyKF9wb3Mud2lkdGgpICYmIGlzTnVtYmVyKF9wb3MuaGVpZ2h0KSkge1xuXHQgICAgICAgIHBvc3Rpb25zLnB1c2goe1xuXHQgICAgICAgICAgcExlZnRUb3A6IFtfcG9zLngsIF9wb3MueV0sXG5cdCAgICAgICAgICBwUmlnaHRUb3A6IFtfcG9zLnggKyBfcG9zLndpZHRoLCBfcG9zLnldLFxuXHQgICAgICAgICAgcExlZnRCb3R0b206IFtfcG9zLngsIF9wb3MueSArIF9wb3MuaGVpZ2h0XSxcblx0ICAgICAgICAgIHBSaWdodEJvdHRvbTogW19wb3MueCArIF9wb3Mud2lkdGgsIF9wb3MueSArIF9wb3MuaGVpZ2h0XVxuXHQgICAgICAgIH0pO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfVxuXHQgIHZhciBlbGUxID0gZG9jLmRvY3VtZW50RWxlbWVudDtcblx0ICB2YXIgZWxlMiA9IGRvYy5ib2R5O1xuXHQgIHZhciBjbGllbnRXaWR0aCA9IGVsZTEuY2xpZW50V2lkdGggfHwgZWxlMi5vZmZzZXRXaWR0aCB8fCAwO1xuXHQgIHZhciBjbGllbnRIZWlnaHQgPSBlbGUxLmNsaWVudEhlaWdodCB8fCBlbGUyLm9mZnNldEhlaWdodCB8fCAwO1xuXHQgIHBvc3Rpb25zLnB1c2goe1xuXHQgICAgcExlZnRUb3A6IFswLCAwXSxcblx0ICAgIHBSaWdodFRvcDogW2NsaWVudFdpZHRoLCAwXSxcblx0ICAgIHBMZWZ0Qm90dG9tOiBbMCwgY2xpZW50SGVpZ2h0XSxcblx0ICAgIHBSaWdodEJvdHRvbTogW2NsaWVudFdpZHRoLCBjbGllbnRIZWlnaHRdXG5cdCAgfSk7XG5cdCAgcmV0dXJuIHBvc3Rpb25zO1xuXHR9O1xuXHRcblx0Ly8g6aqM6K+B5piv5ZCm5bey5pud5YWJXG5cdGV4cG9ydHMuY2hlY2tJc1JlY29yZCA9IGZ1bmN0aW9uKGVsZW1lbnQsIG9sZF9oYXNoX3ZhbHVlLCBhcGx1c0RvbUF0dHJLZXkpIHtcblx0ICB2YXIgaXNSZWNvcmQ7XG5cdCAgdHJ5IHtcblx0ICAgIGlmIChlbGVtZW50ICYmIGVsZW1lbnQuZ2V0QXR0cmlidXRlKSB7XG5cdCAgICAgIHZhciBhdHRyX3ZhbHVlID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoYXBsdXNEb21BdHRyS2V5KSB8fCAnJztcblx0ICAgICAgaXNSZWNvcmQgPSBvbGRfaGFzaF92YWx1ZSA/IGF0dHJfdmFsdWUgPT09IG9sZF9oYXNoX3ZhbHVlIDogISFhdHRyX3ZhbHVlO1xuXHQgICAgfVxuXHQgIH0gY2F0Y2goZSkge31cblx0ICAvLyBjb25zb2xlLmxvZygnaXNSZWNvcmQgPSAnICsgaXNSZWNvcmQpO1xuXHQgIHJldHVybiBpc1JlY29yZDtcblx0fTtcblx0XG5cdGV4cG9ydHMuZ2V0Vmlld2FiaWxpdHlSYXRlSW5XaW5kb3cgPSBmdW5jdGlvbih3aW5Qb3NpdGlvbnMsIGVsZW1lbnRBcmVhLCBBQ19SQVRFKSB7XG5cdCAgdmFyIHJhdGUgPSAwO1xuXHQgIGlmICh3aW5Qb3NpdGlvbnMpIHtcblx0ICAgIGZvciAodmFyIGkgPSAwOyBpIDwgd2luUG9zaXRpb25zLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgIHJhdGUgPSBlbGVtZW50QXJlYSAvIHdpblBvc2l0aW9uc1tpXS5zaXplO1xuXHQgICAgICBpZiAocmF0ZSA+PSBBQ19SQVRFKSB7XG5cdCAgICAgICAgcmV0dXJuIHJhdGU7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9XG5cdCAgcmV0dXJuIHJhdGU7XG5cdH07XG5cblxuLyoqKi8gfSksXG4vKiA1MCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBwcm9qZWN0IC0gZmlsZXBhdGhcblx0ICogZGVzY3JpcHRpb25cblx0ICpcblx0ICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuXHQgKlxuXHQgKiBBdXRob3JzOlxuXHQgKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG5cdCAqL1xuXHQndXNlIHN0cmljdCc7XG5cdFxuXHQvLyB2YXIgdXRpbEV2ZW50ID0gcmVxdWlyZSgnLi91dGlsL2V2ZW50Jyk7XG5cdHZhciB1dGlsRGFzaCA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpO1xuXHR2YXIgdXRpbEdvbGRsb2cgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHR2YXIgZWFjaCA9IF9fd2VicGFja19yZXF1aXJlX18oMjcpO1xuXHRcblx0dmFyIHV0aWxFeHBvc3VyZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTEpO1xuXHR2YXIgdXRpbEVsZW1lbnRBYyA9IF9fd2VicGFja19yZXF1aXJlX18oNDkpO1xuXHRcblx0dmFyIGNvbmZpZyA9IF9fd2VicGFja19yZXF1aXJlX18oNDMpO1xuXHR2YXIgdXRpbF9hY19hZSA9IF9fd2VicGFja19yZXF1aXJlX18oNDApO1xuXHQvLyDoh6rliqjmm53lhYnmiZPngrkgLSDliKTlrprlj6/op4bnmoTmr5Tkvovnjodcblx0dmFyIEFDX1JBVEUgPSBjb25maWcuQVVUT19BVF9WSUVXX1JBVEU7XG5cdHZhciBBQ19SQVRFX0lOX1dJTkRPVyA9IGNvbmZpZy5BVVRPX0FUX1ZJRVdfUkFURV9JTl9XSU5ET1c7XG5cdHZhciB3aW4gPSB3aW5kb3c7XG5cdHZhciBJT2JzZXJ2ZXIgPSB3aW4uSW50ZXJzZWN0aW9uT2JzZXJ2ZXI7XG5cdHZhciBpb2JzZXJ2ZXJNYXAgPSB7fTtcblx0XG5cdC8vIHZhciBhcGx1cyA9ICh3aW5kb3cuYXBsdXMgfHwgKHdpbmRvdy5hcGx1cyA9IHt9KSk7XG5cdGFwbHVzLl9hcGx1c19hdXRvX2V4cC5pb2JzZXJ2ZXJNYXAgPSBpb2JzZXJ2ZXJNYXA7XG5cdC8qKlxuXHQgKiDmoLnmja7lvoXmm53lhYnnmoTlhYPntKDliJfooajmo4Dmn6XmnKzmrKHmu5rova7miJbogIXnqpflj6PlpKflsI/lj5jljJbop6blj5HnmoTlhYPntKDmmK/lkKblnKjlj6/op4bnqpflhoXvvIjmm53lhYnvvIlcblx0ICog5bCG5p+l6K+i5Yiw55qE5aSE5LqO5pud5YWJ54q25oCB55qE5YWD57Sg54q25oCB77yIc3RhdHVz77yJ5bGe5oCn5YC85pS55Li64oCcMeKAne+8jOiuvue9ruWIneWni+abneWFieaXtumXtGV4cG9zdXJlVGltZVxuXHQgKiDlubbov5Tlm57mnKzmrKHkuovku7bop6blj5HnmoTmm53lhYnlhYPntKDnmoTmnaHmlbBcblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IG9wdHMge1xuXHQgKiAgYm91bmRpbmdDbGllbnRSZWN0OiB7XG5cdCAqICAgICBib3R0b206IDE0MVxuXHQgKiAgICAgaGVpZ2h0OiA0NTJcblx0ICogICAgIGxlZnQ6IDRcblx0ICogICAgIHJpZ2h0OiAxODhcblx0ICogICAgIHRvcDogLTMxMVxuXHQgKiAgICAgd2lkdGg6IDE4NFxuXHQgKiAgICAgeDogNFxuXHQgKiAgICAgeTogLTMxMVxuXHQgKiAgfSxcblx0ICogIGludGVyc2VjdGlvblJhdGlvOiAwLjMxMTk0Njg5ODY5ODgwNjc2LFxuXHQgKiAgaW50ZXJzZWN0aW9uUmVjdDoge1xuXHQgKiAgICAgYm90dG9tOiA1MjFcblx0ICogICAgIGhlaWdodDogNDAwXG5cdCAqICAgICBsZWZ0OiAwXG5cdCAqICAgICByaWdodDogMzc1XG5cdCAqICAgICB0b3A6IDEyMVxuXHQgKiAgICAgd2lkdGg6IDM3NVxuXHQgKiAgICAgeDogMFxuXHQgKiAgICAgeTogMTIxXG5cdCAqICB9LFxuXHQgKiAgaXNJbnRlcnNlY3Rpbmc6IHRydWUgfHwgZmFsc2UsXG5cdCAqICByb290Qm91bmRzOiB7XG5cdCAqICAgICBib3R0b206IDgxMlxuXHQgKiAgICAgaGVpZ2h0OiA4MTJcblx0ICogICAgIGxlZnQ6IDBcblx0ICogICAgIHJpZ2h0OiAzNzVcblx0ICogICAgIHRvcDogMFxuXHQgKiAgICAgd2lkdGg6IDM3NVxuXHQgKiAgICAgeDogMFxuXHQgKiAgICAgeTogMFxuXHQgKiAgfSxcblx0ICogIHRhcmdldDogRWxlbWVudCxcblx0ICogIHRpbWU6IDE4NzcuNDk5OTk5OTQ0MTIwNlxuXHQgKiB9XG5cdCAqIEByZXR1cm4ge051bWJlcn0gc2l6ZSAvLyDmnKzmrKHkuovku7bop6blj5HnmoTmm53lhYnlhYPntKDnmoTmnaHmlbBcblx0ICovXG5cdGZ1bmN0aW9uIGZpbHRlclN0YXJ0RXhwb3N1cmVTaXplKGV4cG9zdXJlVGltZSwgb3B0cywgbW92ZU9yU2Nyb2xsKSB7XG5cdCAgdmFyIHdpblBvc2l0aW9ucyA9IHV0aWxFbGVtZW50QWMuZ2V0V2luUG9zaXRpb25zKCk7XG5cdCAgdmFyIHNpemUgPSAwO1xuXHQgIHZhciBfYXBsdXNfYXV0b19leHAgPSB1dGlsR29sZGxvZy5nZXRHb2xkbG9nVmFsKCdfYXBsdXNfYXV0b19leHAnKSB8fCB7fTtcblx0ICB2YXIgX2FjSGFzaE1hcCA9IF9hcGx1c19hdXRvX2V4cC5fYWNIYXNoTWFwIHx8IHt9O1xuXHQgIGZvciAodmFyIGxvZ2tleSBpbiBfYWNIYXNoTWFwKSB7XG5cdCAgICB2YXIgZWxlX3MgPSBfYWNIYXNoTWFwW2xvZ2tleV0gfHwgW107XG5cdCAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZV9zLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgIHZhciB2ID0gZWxlX3NbaV0gfHwge307XG5cdCAgICAgIHYuZXZlbnRUeXBlID0gJ0lPYnNlcnZlcic7XG5cdCAgICAgIHZhciBpc1RhcmdldCA9ICFtb3ZlT3JTY3JvbGwgPyB2LmVsZW1lbnQgPT09IG9wdHMudGFyZ2V0IDogdHJ1ZTtcblx0ICAgICAgaWYgKHYuc3RhdHVzID09PSAwICYmIHYuZXhwQ29uZmlnICYmIGlzVGFyZ2V0KSB7XG5cdCAgICAgICAgdmFyIF9lbGVQb3MgPSBvcHRzLmJvdW5kaW5nQ2xpZW50UmVjdCB8fCB7fTtcblx0ICAgICAgICBpZiAoIV9lbGVQb3Mud2lkdGggJiYgIV9lbGVQb3MuaGVpZ2h0KSB7XG5cdCAgICAgICAgICBfZWxlUG9zID0gb3B0cy50YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgfHwge307XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChfZWxlUG9zLndpZHRoICYmIF9lbGVQb3MuaGVpZ2h0KSB7XG5cdCAgICAgICAgICB2ID0gdXRpbERhc2guYXNzaWduKHYsIF9lbGVQb3MpO1xuXHQgICAgICAgICAgdi54ID0gX2VsZVBvcy54IHx8IF9lbGVQb3MubGVmdDtcblx0ICAgICAgICAgIHYueSA9IF9lbGVQb3MueSB8fCBfZWxlUG9zLnRvcDtcblx0ICAgICAgICAgIHYud2lkdGggPSBfZWxlUG9zLndpZHRoO1xuXHQgICAgICAgICAgdi5oZWlnaHQgPSBfZWxlUG9zLmhlaWdodDtcblx0ICAgICAgICAgIHYuc2l6ZSA9IF9lbGVQb3Mud2lkdGggKiBfZWxlUG9zLmhlaWdodDtcblx0ICAgICAgICAgIHZhciBpc1JlY29yZCA9IHV0aWxFbGVtZW50QWMuY2hlY2tJc1JlY29yZCh2LmVsZW1lbnQsIHYuaGFzaF92YWx1ZSwgJ19hcGx1c19hdXRvX2V4cCcpO1xuXHQgICAgICAgICAgLy8g5Zyo5Y+v6KeG56qX5YaF77yM5LiUZG9t6IqC54K55LiK5rKh5pyJ5bey5pud5YWJ5qCH6K+G77yM5LiU5LiN5Zyo5YaF5a2Y5Lit5oiW5Zyo5YaF5a2Y5Lit5L2G54q25oCB5pivMO+8iDDkuLrliJ3lp4vnirbmgIHvvIlcblx0ICAgICAgICAgIC8vIOWPr+inhuWMlumdouenr+ebuOWvueavlOS4juWxj+W5lemdouenr+avlOS+i1xuXHQgICAgICAgICAgdmFyIGVsZW1lbnRBcmVhID0gdi53aWR0aCAqIHYuaGVpZ2h0ICogb3B0cy5pbnRlcnNlY3Rpb25SYXRpbztcblx0ICAgICAgICAgIHZhciB2aWV3YWJpbGl0eVJhdGVJbldpbmRvdyA9IHV0aWxFbGVtZW50QWMuZ2V0Vmlld2FiaWxpdHlSYXRlSW5XaW5kb3cod2luUG9zaXRpb25zLCBlbGVtZW50QXJlYSwgQUNfUkFURV9JTl9XSU5ET1cpO1xuXHQgICAgICAgICAgaWYgKCFpc1JlY29yZCkge1xuXHQgICAgICAgICAgICB2YXIgaXNSZWxhdGVpdmVSYXRpbyA9IG9wdHMuaW50ZXJzZWN0aW9uUmF0aW8gPj0gQUNfUkFURTtcblx0ICAgICAgICAgICAgaWYgKGlzUmVsYXRlaXZlUmF0aW8gfHwgdmlld2FiaWxpdHlSYXRlSW5XaW5kb3cgPj0gQUNfUkFURV9JTl9XSU5ET1cpIHtcblx0ICAgICAgICAgICAgICB2LmV4cG9zdXJlVGltZSA9IGV4cG9zdXJlVGltZTtcblx0ICAgICAgICAgICAgICB2LnN0YXR1cyA9IDE7IC8vIOWIneingeWFieeKtuaAgVxuXHQgICAgICAgICAgICAgIHZhciBhZUF1dG9Vc2VyRm4gPSBjb25maWcuZ2V0QXV0b0V4cFVzZXJGbigpO1xuXHQgICAgICAgICAgICAgIGlmIChhZUF1dG9Vc2VyRm4pIHtcblx0ICAgICAgICAgICAgICAgIHYudXNlclBhcmFtcyA9IHV0aWxfYWNfYWUuYXV0b1VzZXJGbkhhbmRsZXIoYWVBdXRvVXNlckZuLCB2LmVsZW1lbnQsIHYuZWxlbWVudFNlbGVjdG9yKTtcblx0ICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgdi52aWV3YWJpbGl0eVJhdGUgPSBpc1JlbGF0ZWl2ZVJhdGlvID8gb3B0cy5pbnRlcnNlY3Rpb25SYXRpbyA6IHZpZXdhYmlsaXR5UmF0ZUluV2luZG93O1xuXHQgICAgICAgICAgICAgIHYudmlld2FiaWxpdHkgPSBpc1JlbGF0ZWl2ZVJhdGlvID8gJ2ludGVyc2VjdGlvbicgOiAnZmlsbHdpbmRvdyc7XG5cdCAgICAgICAgICAgICAgLy8g5LiN6K6+572u5pud5YWJ5pe26ZW/5pe25bCx55u05o6l5Y+R5Ye65pel5b+XXG5cdCAgICAgICAgICAgICAgaWYgKCFjb25maWcuRVhQX0RVUkFUSU9OKSB7XG5cdCAgICAgICAgICAgICAgICB2LnN0YXR1cyA9IDI7XG5cdCAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgIHV0aWxfYWNfYWUudXBkYXRlRXhwSGFzaE1hcChsb2drZXksIHYsICdVUERBVEUnKTtcblx0ICAgICAgICAgICAgICArK3NpemU7XG5cdCAgICAgICAgICAgIH0gZWxzZSBpZiAodmlld2FiaWxpdHlSYXRlSW5XaW5kb3cpIHtcblx0ICAgICAgICAgICAgICAvLyDooqtpbnNlY3Rpb25PYnNlcnZl5oqT5Y+W5Yiw5bm25Zyo5bGP5bmV5Lit5Ye6546w6L+H55qE5YWD57Sg5omTbGFzdEV2ZW50VHlwZeagh++8jOaWueS+v+WQjue7rW1vdmXjgIFzY3JvbGzkuovku7blho3mrKHmipPlj5Zcblx0ICAgICAgICAgICAgICB1dGlsX2FjX2FlLnVwZGF0ZUV4cEhhc2hNYXAobG9na2V5LCBPYmplY3QuYXNzaWduKHt9LCBlbGVfc1tpXSwge1xuXHQgICAgICAgICAgICAgICAgbGFzdEV2ZW50VHlwZTogdi5ldmVudFR5cGVcblx0ICAgICAgICAgICAgICB9KSwgJ1VQREFURScpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfVxuXHQgIHJldHVybiBzaXplO1xuXHR9XG5cdFxuXHQvKipcblx0ICog6K+l5pa55rOV6KKrb25zY3JvbGws5oiW6KKrb25yZXNpemXlm57osIPlh73mlbDosIPnlKjvvIzmo4DpqozlhYPntKDmmK/lkKbmm53lhYlcblx0ICovXG5cdGZ1bmN0aW9uIGhhbmRsZXJfZG9tX2V4cG9zdXJlIChlbnRyeSwgaXNGaXJzdCkge1xuXHQgIHZhciBQVUJfS0VZID0gJ0FQTFVTX0FFX0VYUE9TVVJFX0NIQU5HRSc7XG5cdCAgdmFyIGV2ZW50VHlwZSA9IGVudHJ5ICYmIGVudHJ5LnR5cGUgPyBlbnRyeS50eXBlIDogJ0lPYnNlcnZlcic7XG5cdCAgdmFyIGV4cG9zdXJlVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXHQgIHZhciBzaXplID0gMDtcblx0ICBpZiAoaXNGaXJzdCkge1xuXHQgICAgLy8gd2luZG93LmNvbnNvbGUuY291bnQoJ2lzRmlyc3QnKTtcblx0ICAgIHNpemUgPSB1dGlsRXhwb3N1cmUuZmlsdGVyU3RhcnRFeHBvc3VyZVNpemUoZXhwb3N1cmVUaW1lLCBlbnRyeSk7XG5cdCAgfSBlbHNlIHtcblx0ICAgIC8vIHdpbmRvdy5jb25zb2xlLmNvdW50KCdpc1NlY29uZCcpO1xuXHQgICAgc2l6ZSA9IGZpbHRlclN0YXJ0RXhwb3N1cmVTaXplKGV4cG9zdXJlVGltZSwgZW50cnkpO1xuXHQgIH1cblx0ICAvLyDlrZjlnKjmm53lhYnlhYPntKDvvIznrYnlvoUgeCDmr6vnp5LlkI7kuozmrKHliKTmlq3mm53lhYnmnInmlYjmgKdcblx0ICBpZiAoc2l6ZSA+IDApIHtcblx0ICAgIGlmIChjb25maWcuRVhQX0RVUkFUSU9OKSB7XG5cdCAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcblx0ICAgICAgICBzaXplID0gdXRpbEV4cG9zdXJlLmZpbHRlckVuZEV4cG9zdXJlU2l6ZShleHBvc3VyZVRpbWUsIGV2ZW50VHlwZSk7XG5cdCAgICAgICAgaWYgKHNpemUgPiAwKSB7XG5cdCAgICAgICAgICAvLyDlrZjlnKjmnInmlYjmm53lhYnlhYPntKDnmoTmg4XlhrXkuIvvvIzlj5HlsITmm53lhYnkuovku7bvvIznu5l3YXRjaFJlY29yZC5qc+i/meS4queOr+iKguWkhOeQhlxuXHQgICAgICAgICAgYXBsdXMuYXBsdXNfcHVic3ViLnB1Ymxpc2goUFVCX0tFWSwge1xuXHQgICAgICAgICAgICBzaXplOiBzaXplLFxuXHQgICAgICAgICAgICBldmVudFR5cGU6IGV2ZW50VHlwZVxuXHQgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9LCBjb25maWcuRVhQX0RVUkFUSU9OKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGFwbHVzLmFwbHVzX3B1YnN1Yi5wdWJsaXNoKFBVQl9LRVksIHtcblx0ICAgICAgICBzaXplOiBzaXplLFxuXHQgICAgICAgIGV2ZW50VHlwZTogZXZlbnRUeXBlXG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgIH1cblx0fVxuXHRcblx0ZnVuY3Rpb24gY3JlYXRlSU9ic2VydmVyIChvcHRpb25zKSB7XG5cdCAgdmFyIGRlZmF1bHRPcHRzID0ge1xuXHQgICAgcm9vdDogbnVsbCwgLy8gZGVmYXVsdCB2YWx1ZSBpcyB3aW5kb3csIHlvdSBjYW4gcmV3cml0ZSBpdCBieSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc2Nyb2xsQXJlYScpLFxuXHQgICAgcm9vdE1hcmdpbjogJzBweCcsXG5cdCAgICB0aHJlc2hvbGQ6IEFDX1JBVEVcblx0ICB9O1xuXHQgIHJldHVybiBuZXcgSU9ic2VydmVyKGZ1bmN0aW9uIChlbnRyaWVzKSB7XG5cdCAgICBlYWNoKGVudHJpZXMsIGZ1bmN0aW9uKGVudHJ5KXtcblx0ICAgICAgaWYgKGVudHJ5LmludGVyc2VjdGlvblJhdGlvID4gMCkge1xuXHQgICAgICAgIGhhbmRsZXJfZG9tX2V4cG9zdXJlKGVudHJ5KTtcblx0ICAgICAgfSAgXG5cdCAgICB9KTtcblx0ICB9LCB1dGlsRGFzaC5hc3NpZ24oZGVmYXVsdE9wdHMsIG9wdGlvbnMpKTtcblx0fVxuXHRcblx0LyoqXG5cdCAqIHdhdGNoSW50ZXJzZWN0aW9uT2JzZXJ2ZXJcblx0ICogQHBhcmFtcyBvYmoge09iamVjdH0ge1xuXHQgKiAgIGV4cENvbmZpZzogW3tcblx0ICogICAgIGNzc1NlbGVjdG9yOiBcIkRJVltsb2drZXk9XCIvZGFjdS4xLjEuMVwiXVwiXG5cdCAqICAgICBlbGVtZW50U2VsZWN0b3I6IFwiRElWW2xvZ2tleT1cIi9kYWN1LjEuMS4xXCJdXCJcblx0ICogICAgIGxvZ2tleTogXCIvZGFjdS4xLjEuMVwiXG5cdCAqICAgICBwcm9wczogW1wiX2xrYVwiXVxuXHQgKiAgIH1dLFxuXHQgKiAgIGlzVGhyb3R0bGVXYXRjaDogZmFsc2Vcblx0ICogfVxuXHQgKiBAcGFyYW1zIG9wdHMge09iamVjdH0ge1xuXHQgKiAgIGZyb206ICdhcHBlbmRNZXRhSW5mbydcblx0ICogfVxuXHQgKi9cblx0ZnVuY3Rpb24gd2F0Y2hJbnRlcnNlY3Rpb25PYnNlcnZlciAoZXhwQ29uZmlnKSB7XG5cdCAgLy8gY29uc29sZS5jb3VudCgnd2F0Y2hJbnRlcnNlY3Rpb25PYnNlcnZlcicpO1xuXHQgIGlmIChJT2JzZXJ2ZXIpIHtcblx0ICAgIGlmICghaW9ic2VydmVyTWFwLmlvX2Jhc2UpIHtcblx0ICAgICAgaW9ic2VydmVyTWFwLmlvX2Jhc2UgPSBjcmVhdGVJT2JzZXJ2ZXIoKTtcblx0ICAgIH1cblx0ICAgIHZhciBfYXBsdXNfYXV0b19leHAgPSB1dGlsR29sZGxvZy5nZXRHb2xkbG9nVmFsKCdfYXBsdXNfYXV0b19leHAnKSB8fCB7fTtcblx0ICAgIHZhciBfYWNIYXNoTWFwID0gX2FwbHVzX2F1dG9fZXhwLl9hY0hhc2hNYXAgfHwge307XG5cdCAgICBmb3IgKHZhciBsb2drZXkgaW4gX2FjSGFzaE1hcCkge1xuXHQgICAgICB2YXIgZWxlX3MgPSBfYWNIYXNoTWFwW2xvZ2tleV0gfHwgW107XG5cdCAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlX3MubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICB2YXIgdiA9IGVsZV9zW2ldIHx8IHt9O1xuXHQgICAgICAgIGlmICghdi5pbk9ic2VydmVyKSB7XG5cdCAgICAgICAgICB2YXIga2V5ID0gJ2lvX3ZfJyArIGVuY29kZVVSSUNvbXBvbmVudCh2LnBvc2l0aW9uU2VsZWN0b3IpO1xuXHQgICAgICAgICAgdmFyIGlvX3Y7XG5cdCAgICAgICAgICBpZiAodi5wb3NpdGlvblNlbGVjdG9yICYmICFpb2JzZXJ2ZXJNYXBba2V5XSkge1xuXHQgICAgICAgICAgICBpb192ID0gY3JlYXRlSU9ic2VydmVyKHtcblx0ICAgICAgICAgICAgICByb290OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHYucG9zaXRpb25TZWxlY3RvciksXG5cdCAgICAgICAgICAgICAgZXhwQ29uZmlnOiBleHBDb25maWdcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIGlvYnNlcnZlck1hcFtrZXldID0gaW9fdjtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIGlmIChpb192KSB7XG5cdCAgICAgICAgICAgIGlvX3Yub2JzZXJ2ZSh2LmVsZW1lbnQpO1xuXHQgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgaW9ic2VydmVyTWFwLmlvX2Jhc2Uub2JzZXJ2ZSh2LmVsZW1lbnQpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgdi5pbk9ic2VydmVyID0gdHJ1ZTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9XG5cdCAgcmV0dXJuIHRydWU7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiDnm5HlkKxkb23lj5jljJbvvIzmnInlj5jljJbmiafooYzlm57osINcblx0ICogQHBhcmFtIHtoYW5kbGVyX2RvbV9jaGFuZ2V9IGNiXG5cdCAqL1xuXHRleHBvcnRzLndhdGNoX2V4cG9zdXJlX2NoYW5nZSA9IGZ1bmN0aW9uKGV4cENvbmZpZykge1xuXHQgIC8vIHN0ZXAxIOebkeWQrOesrOS4gOasoWRvbWNoYW5nZeWPkeWwhOeahOa2iOaBr++8jOWBmuesrOS4gOasoemqjOivgeabneWFieeahOWkhOeQhlxuXHQgIGFwbHVzLmFwbHVzX3B1YnN1Yi5zdWJzY3JpYmUoJ0FQTFVTX0FFX0RPTV9DSEFOR0UnLCBmdW5jdGlvbiAoKSB7XG5cdCAgICB3YXRjaEludGVyc2VjdGlvbk9ic2VydmVyKGV4cENvbmZpZyk7XG5cdCAgfSk7XG5cdCAgLy8gc3RlcDIg55uR5ZCs5YWD57Sg5pud5YWJXG5cdCAgd2F0Y2hJbnRlcnNlY3Rpb25PYnNlcnZlcihleHBDb25maWcpO1xuXHR9O1xuXHRcblx0LyoqXG5cdCAqIHdhdGNoSW50ZXJzZWN0aW9uT2JzZXJ2ZXJcblx0ICogQHBhcmFtcyBvYmoge09iamVjdH0ge1xuXHQgKiAgIGV4cENvbmZpZzogW3tcblx0ICogICAgIGNzc1NlbGVjdG9yOiBcIkRJVltsb2drZXk9XCIvZGFjdS4xLjEuMVwiXVwiXG5cdCAqICAgICBlbGVtZW50U2VsZWN0b3I6IFwiRElWW2xvZ2tleT1cIi9kYWN1LjEuMS4xXCJdXCJcblx0ICogICAgIGxvZ2tleTogXCIvZGFjdS4xLjEuMVwiXG5cdCAqICAgICBwcm9wczogW1wiX2xrYVwiXVxuXHQgKiAgIH1dLFxuXHQgKiAgIGlzVGhyb3R0bGVXYXRjaDogZmFsc2Vcblx0ICogfVxuXHQgKi9cblx0ZXhwb3J0cy5jbGVhciA9IGZ1bmN0aW9uIChfY29uZmlnLCBvcHRzKSB7XG5cdCAgaWYgKG9wdHMgJiYgb3B0cy5mcm9tICE9PSAnYXBwZW5kTWV0YUluZm8nKSB7XG5cdCAgICBmb3IgKHZhciBrIGluIGlvYnNlcnZlck1hcCkge1xuXHQgICAgICB2YXIgaW8gPSBpb2JzZXJ2ZXJNYXBba107XG5cdCAgICAgIC8vIC8vIOWBnOatouinguWvn1xuXHQgICAgICAvLyBpby51bm9ic2VydmUoZWxlbWVudCk7XG5cdCAgICAgIC8vIOWFs+mXreinguWvn+WZqFxuXHQgICAgICBpby5kaXNjb25uZWN0KCk7XG5cdCAgICB9XG5cdCAgfVxuXHR9O1xuXG4vKioqLyB9KSxcbi8qIDUxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIHByb2plY3QgLSBmaWxlcGF0aFxuXHQgKiBkZXNjcmlwdGlvblxuXHQgKlxuXHQgKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG5cdCAqXG5cdCAqIEF1dGhvcnM6XG5cdCAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cblx0ICovXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciB1dGlsR29sZGxvZyA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdFxuXHR2YXIgdXRpbEVsZW1lbnRBYyA9IF9fd2VicGFja19yZXF1aXJlX18oNDkpO1xuXHR2YXIgY29uZmlnID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0Myk7XG5cdHZhciB1dGlsX2FjX2FlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MCk7XG5cdC8vIOiHquWKqOabneWFieaJk+eCuSAtIOWIpOWumuWPr+inhueahOavlOS+i+eOh1xuXHR2YXIgQUNfUkFURSA9IGNvbmZpZy5BVVRPX0FUX1ZJRVdfUkFURTtcblx0dmFyIEFDX1JBVEVfSU5fV0lORE9XID0gY29uZmlnLkFVVE9fQVRfVklFV19SQVRFX0lOX1dJTkRPVztcblx0dmFyIHdpblBvc2l0aW9ucztcblx0XG5cdHZhciBpc0Rpc3BsYXlOb25lID0gZnVuY3Rpb24gKGVsKSB7XG5cdCAgdmFyIGlzTm9uZTtcblx0ICB3aGlsZSAoZWwgJiYgZWwudGFnTmFtZSAhPT0gJ0hUTUwnKSB7XG5cdCAgICBpc05vbmUgPSBlbC5zdHlsZS5kaXNwbGF5O1xuXHQgICAgaWYgKGlzTm9uZSAhPT0gJ25vbmUnKSB7XG5cdCAgICAgIGVsID0gZWwucGFyZW50Tm9kZTtcblx0ICAgICAgY29udGludWU7XG5cdCAgICB9XG5cdCAgICBicmVhaztcblx0ICB9XG5cdCAgcmV0dXJuIGlzTm9uZSA9PT0gJ25vbmUnO1xuXHR9O1xuXHRcblx0XG5cdC8qKlxuXHQgKiDmoLnmja7lvoXmm53lhYnnmoTlhYPntKDliJfooajmo4Dmn6XmnKzmrKHmu5rova7miJbogIXnqpflj6PlpKflsI/lj5jljJbop6blj5HnmoTlhYPntKDmmK/lkKblnKjlj6/op4bnqpflhoXvvIjmm53lhYnvvIlcblx0ICog5bCG5p+l6K+i5Yiw55qE5aSE5LqO5pud5YWJ54q25oCB55qE5YWD57Sg54q25oCB77yIc3RhdHVz77yJ5bGe5oCn5YC85pS55Li64oCcMeKAne+8jOiuvue9ruWIneWni+abneWFieaXtumXtGV4cG9zdXJlVGltZVxuXHQgKiDlubbov5Tlm57mnKzmrKHkuovku7bop6blj5HnmoTmm53lhYnlhYPntKDnmoTmnaHmlbBcblx0ICpcblx0ICogQHBhcmFtIHtTdHJpbmd9IGV4cG9zdXJlVGltZSAvLyBvbnNjcm9sbCxvbnJlc2l6ZeWIneWni+abneWFieaXtumXtFxuXHQgKiBAcmV0dXJuIHtOdW1iZXJ9IHNpemUgLy8g5pys5qyh5LqL5Lu26Kem5Y+R55qE5pud5YWJ5YWD57Sg55qE5p2h5pWwXG5cdCAqL1xuXHRleHBvcnRzLmZpbHRlclN0YXJ0RXhwb3N1cmVTaXplID0gZnVuY3Rpb24oZXhwb3N1cmVUaW1lLCBldmVudFR5cGUpIHtcblx0ICB2YXIgc2l6ZSA9IDA7XG5cdCAgLy8gdmFyIHdpblBhcmFtcyA9IHV0aWxFbGVtZW50QWMuZ2V0V2luUGFyYW1zKCk7IC8vIFRPRE8gLSDpqozor4HmgKfog73pl67popjvvIzlgZrmiJDlj6/phY3vvIzpg6jliIbkuJrliqHlpoLmraTlpITnkIZcblx0ICAvLyB2YXIgd2luUG9zaXRpb25zID0gdXRpbEVsZW1lbnRBYy5nZXRXaW5Qb3NpdGlvbnMod2luUGFyYW1zKTtcblx0ICB2YXIgd2luUG9zaXRpb25zID0gdXRpbEVsZW1lbnRBYy5nZXRXaW5Qb3NpdGlvbnMoKTtcblx0XG5cdCAgdmFyIF9hcGx1c19hdXRvX2V4cCA9IHV0aWxHb2xkbG9nLmdldEdvbGRsb2dWYWwoJ19hcGx1c19hdXRvX2V4cCcpIHx8IHt9O1xuXHQgIHZhciBfYWNIYXNoTWFwID0gX2FwbHVzX2F1dG9fZXhwLl9hY0hhc2hNYXAgfHwge307XG5cdCAgZm9yICh2YXIgbG9na2V5IGluIF9hY0hhc2hNYXApIHtcblx0ICAgIHZhciBlbGVfcyA9IF9hY0hhc2hNYXBbbG9na2V5XSB8fCBbXTtcblx0ICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlX3MubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgdmFyIHYgPSBlbGVfc1tpXSB8fCB7fTtcblx0ICAgICAgaWYgKHYuc3RhdHVzID09PSAwICYmIHYuZXhwQ29uZmlnKSB7XG5cdCAgICAgICAgaWYgKCFpc0Rpc3BsYXlOb25lKHYuZWxlbWVudCkpIHtcblx0ICAgICAgICAgIHZhciBfZWxlUG9zID0gdXRpbEVsZW1lbnRBYy5nZXRFbGVtZW50UG9zaXRpb24odi5lbGVtZW50KTtcblx0ICAgICAgICAgIGlmIChfZWxlUG9zLndpZHRoICYmIF9lbGVQb3MuaGVpZ2h0KSB7XG5cdCAgICAgICAgICAgIHYueCA9IF9lbGVQb3MueDtcblx0ICAgICAgICAgICAgdi55ID0gX2VsZVBvcy55O1xuXHQgICAgICAgICAgICB2LmV2ZW50VHlwZSA9IGV2ZW50VHlwZTtcblx0ICAgICAgICAgICAgdi53aWR0aCA9IF9lbGVQb3Mud2lkdGg7XG5cdCAgICAgICAgICAgIHYuaGVpZ2h0ID0gX2VsZVBvcy5oZWlnaHQ7XG5cdCAgICAgICAgICAgIHYuc2l6ZSA9IF9lbGVQb3Mud2lkdGggKiBfZWxlUG9zLmhlaWdodDtcblx0ICAgICAgICAgICAgXG5cdCAgICAgICAgICAgIC8vIOWIpOaWreWIsOaciXBvc2l0aW9uU2VsZWN0b3LvvIzlubbkuJTlvZPliY3lhYPntKDlpITkuo7nm7jlr7nlrprkvY3jgIHnu53lr7nlrprkvY3nrYnlhYPntKDlhoXmu5rliqjml7bvvIhjbGllbnRIZWlnaHQgPiBzY3JvbGxIZWlnaHQpXG5cdCAgICAgICAgICAgIHZhciByZWxhdGl2ZVNlbGVjdG9yUG9zaXRpb25zO1xuXHQgICAgICAgICAgICBpZiAodi5leHBDb25maWcucG9zaXRpb25TZWxlY3Rvcikge1xuXHQgICAgICAgICAgICAgIHJlbGF0aXZlU2VsZWN0b3JQb3NpdGlvbnMgPSB1dGlsRWxlbWVudEFjLmdldFdpblBvc2l0aW9ucyh2LmV4cENvbmZpZy5wb3NpdGlvblNlbGVjdG9yKTtcblx0ICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgLy8g6I635Y+W5YWD57Sg55qE5Y+v6KeG546H77yI5Zyo5Y+v6KeG56qX5YaF55qE5Y+v6KeB5q+U5L6L77yJXG5cdCAgICAgICAgICAgIHZhciB2aWV3YWJpbGl0eVJhdGUgPSB1dGlsRWxlbWVudEFjLndyYXBWaWV3YWJpbGl0eVJhdGUocmVsYXRpdmVTZWxlY3RvclBvc2l0aW9ucyB8fCB3aW5Qb3NpdGlvbnMsIHYsIEFDX1JBVEUpO1xuXHQgICAgICAgICAgICB2YXIgaXNWaWV3YWJpbGl0eVJhdGUgPSB2aWV3YWJpbGl0eVJhdGUgPj0gQUNfUkFURTtcblx0XG5cdCAgICAgICAgICAgIHZhciB2aWV3YWJpbGl0eUluV2luZG93UmF0ZSA9IHZpZXdhYmlsaXR5UmF0ZTtcblx0ICAgICAgICAgICAgaWYgKHJlbGF0aXZlU2VsZWN0b3JQb3NpdGlvbnMpIHtcblx0ICAgICAgICAgICAgICB2aWV3YWJpbGl0eUluV2luZG93UmF0ZSA9IHV0aWxFbGVtZW50QWMud3JhcFZpZXdhYmlsaXR5UmF0ZSh3aW5Qb3NpdGlvbnMsIHYsIEFDX1JBVEUpO1xuXHQgICAgICAgICAgICB9XG5cdFxuXHQgICAgICAgICAgICB2YXIgZWxlbWVudEFyZWEgPSB2LndpZHRoICogdi5oZWlnaHQgKiB2aWV3YWJpbGl0eUluV2luZG93UmF0ZTtcblx0ICAgICAgICAgICAgdmFyIHZpZXdhYmlsaXR5UmF0ZUluV2luZG93ID0gdXRpbEVsZW1lbnRBYy5nZXRWaWV3YWJpbGl0eVJhdGVJbldpbmRvdyh3aW5Qb3NpdGlvbnMsIGVsZW1lbnRBcmVhLCBBQ19SQVRFX0lOX1dJTkRPVyk7XG5cdCAgICAgICAgICAgIFxuXHQgICAgICAgICAgICB2YXIgaXNSZWNvcmQgPSB1dGlsRWxlbWVudEFjLmNoZWNrSXNSZWNvcmQodi5lbGVtZW50LCB2Lmhhc2hfdmFsdWUsICdfYXBsdXNfYXV0b19leHAnKTtcblx0ICAgICAgICAgICAgLy8g5Zyo5Y+v6KeG56qX5YaF77yM5LiUZG9t6IqC54K55LiK5rKh5pyJ5bey5pud5YWJ5qCH6K+G77yM5LiU5LiN5Zyo5YaF5a2Y5Lit5oiW5Zyo5YaF5a2Y5Lit5L2G54q25oCB5pivMO+8iDDkuLrliJ3lp4vnirbmgIHvvIlcblx0ICAgICAgICAgICAgaWYgKChpc1ZpZXdhYmlsaXR5UmF0ZSB8fCB2aWV3YWJpbGl0eVJhdGVJbldpbmRvdyA+PSBBQ19SQVRFX0lOX1dJTkRPVykgJiYgIWlzUmVjb3JkKSB7XG5cdCAgICAgICAgICAgICAgdi5leHBvc3VyZVRpbWUgPSBleHBvc3VyZVRpbWU7XG5cdCAgICAgICAgICAgICAgdi5zdGF0dXMgPSAxOyAvLyDliJ3op4HlhYnnirbmgIFcblx0ICAgICAgICAgICAgICB2YXIgYWVBdXRvVXNlckZuID0gY29uZmlnLmdldEF1dG9FeHBVc2VyRm4oKTtcblx0ICAgICAgICAgICAgICBpZiAoYWVBdXRvVXNlckZuKSB7XG5cdCAgICAgICAgICAgICAgICB2LnVzZXJQYXJhbXMgPSB1dGlsX2FjX2FlLmF1dG9Vc2VyRm5IYW5kbGVyKGFlQXV0b1VzZXJGbiwgdi5lbGVtZW50LCB2LmVsZW1lbnRTZWxlY3Rvcik7XG5cdCAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgIC8vIOS4jeiuvue9ruabneWFieaXtumVv+aXtuWwseebtOaOpeWPkeWHuuaXpeW/l1xuXHQgICAgICAgICAgICAgIGlmICghY29uZmlnLkVYUF9EVVJBVElPTikge1xuXHQgICAgICAgICAgICAgICAgdi52aWV3YWJpbGl0eVJhdGUgPSBpc1ZpZXdhYmlsaXR5UmF0ZSA/IHZpZXdhYmlsaXR5UmF0ZSA6IHZpZXdhYmlsaXR5UmF0ZUluV2luZG93O1xuXHQgICAgICAgICAgICAgICAgdi52aWV3YWJpbGl0eSA9IGlzVmlld2FiaWxpdHlSYXRlID8gJ2ludGVyc2VjdGlvbicgOiAnZmlsbHdpbmRvdyc7XG5cdCAgICAgICAgICAgICAgICB2LnN0YXR1cyA9IDI7XG5cdCAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgIHV0aWxfYWNfYWUudXBkYXRlRXhwSGFzaE1hcChsb2drZXksIHYsICdVUERBVEUnKTtcblx0ICAgICAgICAgICAgICArK3NpemU7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9XG5cdCAgcmV0dXJuIHNpemU7XG5cdH07XG5cdFxuXHQvKipcblx0ICog5ZyoZmlsdGVyU3RhcnRFeHBvc3VyZVNpemXmi7/liLDliLDnmoTliJ3lp4vmm53lhYnlhYPntKDliJfooajln7rnoYDkuIrvvIzkuozmrKHliKTmlq3mm53lhYnlhYPntKDmmK/lkKbmmK/mnInmlYjmm53lhYnvvIzlpoLmjIHnu63mm53lhYkyMDDmr6vnp5Jcblx0ICog5pyJ5pWI5pud5YWJ55qE5YWD57Sg54q25oCB77yIc3RhdHVz77yJ5bGe5oCn5YC85pS55Li64oCcMuKAne+8jOaXoOaViOabneWFieeahOWFg+e0oOeKtuaAgeWxnuaAp+WAvOaUueS4uuKAnDDigJ1cblx0ICog5bm26L+U5Zue5pys5qyh5LqL5Lu26Kem5Y+R55qE5pud5YWJ5YWD57Sg55qE5p2h5pWwXG5cdCAqXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBleHBvc3VyZVRpbWUgLy8gb25zY3JvbGwsb25yZXNpemXliJ3lp4vmm53lhYnml7bpl7Rcblx0ICogQHJldHVybiB7TnVtYmVyfSBzaXplIC8vIOacrOasoeS6i+S7tuinpuWPkeeahOabneWFieWFg+e0oOeahOadoeaVsFxuXHQgKi9cblx0ZXhwb3J0cy5maWx0ZXJFbmRFeHBvc3VyZVNpemUgPSBmdW5jdGlvbihleHBvc3VyZVRpbWUsIGV2ZW50VHlwZSkge1xuXHQgIHZhciBzaXplID0gMDtcblx0ICAvLyB2YXIgd2luUGFyYW1zID0gdXRpbEVsZW1lbnRBYy5nZXRXaW5QYXJhbXMoKTsgLy8gVE9ETyAtIOmqjOivgeaAp+iDvemXrumimO+8jOWBmuaIkOWPr+mFje+8jOmDqOWIhuS4muWKoeWmguatpOWkhOeQhlxuXHQgIC8vIHZhciB3aW5Qb3NpdGlvbnMgPSB1dGlsRWxlbWVudEFjLmdldFdpblBvc2l0aW9ucyh3aW5QYXJhbXMpO1xuXHQgIGlmICghd2luUG9zaXRpb25zKSB7XG5cdCAgICB3aW5Qb3NpdGlvbnMgPSB1dGlsRWxlbWVudEFjLmdldFdpblBvc2l0aW9ucygpO1xuXHQgIH1cblx0XG5cdCAgdmFyIF9hcGx1c19hdXRvX2V4cCA9IHV0aWxHb2xkbG9nLmdldEdvbGRsb2dWYWwoJ19hcGx1c19hdXRvX2V4cCcpIHx8IHt9O1xuXHQgIHZhciBfYWNIYXNoTWFwID0gX2FwbHVzX2F1dG9fZXhwLl9hY0hhc2hNYXAgfHwge307XG5cdCAgZm9yICh2YXIgbG9na2V5IGluIF9hY0hhc2hNYXApIHtcblx0ICAgIHZhciBlbGVfcyA9IF9hY0hhc2hNYXBbbG9na2V5XSB8fCBbXTtcblx0ICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlX3MubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgdmFyIHYgPSBlbGVfc1tpXSB8fCB7fTtcblx0ICAgICAgaWYgKHYuc3RhdHVzID09PSAxICYmIHYuZXhwb3N1cmVUaW1lID09PSBleHBvc3VyZVRpbWUgJiYgdi5leHBDb25maWcpIHtcblx0ICAgICAgICB2LmV2ZW50VHlwZSA9IGV2ZW50VHlwZTtcblx0ICAgICAgICAvLyDliKTmlq3liLDmnIlwb3NpdGlvblNlbGVjdG9y77yM5bm25LiU5b2T5YmN5YWD57Sg5aSE5LqO55u45a+55a6a5L2N44CB57ud5a+55a6a5L2N562J5YWD57Sg5YaF5rua5Yqo5pe277yIY2xpZW50SGVpZ2h0ID4gc2Nyb2xsSGVpZ2h0KVxuXHQgICAgICAgIGlmICh2LmV4cENvbmZpZy5wb3NpdGlvblNlbGVjdG9yKSB7XG5cdCAgICAgICAgICAvLyB3aW5QYXJhbXMgPSB1dGlsRWxlbWVudEFjLmdldFdpblBhcmFtcyh2LmV4cENvbmZpZy5wb3NpdGlvblNlbGVjdG9yKTsgLy8gVE9ETyAtIOmqjOivgeaAp+iDvemXrumimO+8jOWBmuaIkOWPr+mFje+8jOmDqOWIhuS4muWKoeWmguatpOWkhOeQhlxuXHQgICAgICAgICAgLy8gd2luUG9zaXRpb25zID0gdXRpbEVsZW1lbnRBYy5nZXRXaW5Qb3NpdGlvbnMod2luUGFyYW1zKTtcblx0ICAgICAgICAgIHdpblBvc2l0aW9ucyA9IHV0aWxFbGVtZW50QWMuZ2V0V2luUG9zaXRpb25zKHYuZXhwQ29uZmlnLnBvc2l0aW9uU2VsZWN0b3IpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICAvLyDojrflj5blhYPntKDnmoTlj6/op4bnjofvvIjlnKjlj6/op4bnqpflhoXnmoTlj6/op4Hmr5TkvovvvIlcblx0ICAgICAgICB2YXIgdmlld2FiaWxpdHlSYXRlID0gdXRpbEVsZW1lbnRBYy53cmFwVmlld2FiaWxpdHlSYXRlKHdpblBvc2l0aW9ucywgdiwgQUNfUkFURSk7XG5cdCAgICAgICAgdmFyIGlzUmVjb3JkID0gdXRpbEVsZW1lbnRBYy5jaGVja0lzUmVjb3JkKHYuZWxlbWVudCwgdi5oYXNoX3ZhbHVlLCAnX2FwbHVzX2F1dG9fZXhwJyk7XG5cdCAgICAgICAgLy8g5Zyo5Y+v6KeG56qX5YaF77yM5LiUZG9t6IqC54K55LiK5rKh5pyJ5bey5pud5YWJ5qCH6K+G77yM5LiU5LiN5Zyo5YaF5a2Y5Lit5oiW5Zyo5YaF5a2Y5Lit5L2G54q25oCB5pivMO+8iDDkuLrliJ3lp4vnirbmgIHvvIlcblx0ICAgICAgICBpZiAodmlld2FiaWxpdHlSYXRlICYmICFpc1JlY29yZCkge1xuXHQgICAgICAgICAgdi52aWV3YWJpbGl0eVJhdGUgPSB2aWV3YWJpbGl0eVJhdGU7XG5cdCAgICAgICAgICB2LnN0YXR1cyA9IDI7IC8vIOWIneingeWFiXh4eOavq+enkuWQjuS+neeEtuingeWFieeKtuaAgVxuXHQgICAgICAgICAgdXRpbF9hY19hZS51cGRhdGVFeHBIYXNoTWFwKGxvZ2tleSwgdiwgJ1VQREFURScpO1xuXHQgICAgICAgICAgKytzaXplO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICB2LnN0YXR1cyA9IDA7IC8vIOWIneingeWFiXh4eOavq+enkuWQjuS4jeWGjeingeWFie+8jOaUueS4uuWIneWni+eKtuaAgVxuXHQgICAgICAgICAgdi5leHBvc3VyZVRpbWUgPSAnJztcblx0ICAgICAgICAgIHV0aWxfYWNfYWUudXBkYXRlRXhwSGFzaE1hcChsb2drZXksIHYsICdVUERBVEUnKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9XG5cdCAgcmV0dXJuIHNpemU7XG5cdH07XG5cblxuLyoqKi8gfSksXG4vKiA1MiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBwcm9qZWN0IC0gZmlsZXBhdGhcblx0ICogZGVzY3JpcHRpb25cblx0ICpcblx0ICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuXHQgKlxuXHQgKiBBdXRob3JzOlxuXHQgKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG5cdCAqL1xuXHQndXNlIHN0cmljdCc7XG5cdFxuXHR2YXIgdXRpbEV2ZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOCk7XG5cdHZhciB1dGlsRXhwb3N1cmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUxKTtcblx0dmFyIHV0aWxfYWNfYWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQwKTtcblx0dmFyIGNvbmZpZyA9IF9fd2VicGFja19yZXF1aXJlX18oNDMpO1xuXHRcblx0LyoqXG5cdCAqIOivpeaWueazleiiq29uc2Nyb2xsLOaIluiiq29ucmVzaXpl5Zue6LCD5Ye95pWw6LCD55So77yM5qOA6aqM5YWD57Sg5piv5ZCm5pud5YWJXG5cdCAqL1xuXHR2YXIgaGFuZGxlcl9kb21fZXhwb3N1cmUgPSBmdW5jdGlvbihlKSB7XG5cdCAgdmFyIFBVQl9LRVkgPSAnQVBMVVNfQUVfRVhQT1NVUkVfQ0hBTkdFJztcblx0ICB2YXIgZXZlbnRUeXBlID0gZSAmJiBlLnR5cGUgPyBlLnR5cGUgOiAnaW5pdCc7XG5cdCAgdmFyIGV4cG9zdXJlVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXHQgIHZhciBzaXplID0gdXRpbEV4cG9zdXJlLmZpbHRlclN0YXJ0RXhwb3N1cmVTaXplKGV4cG9zdXJlVGltZSwgZXZlbnRUeXBlKTtcblx0ICAvLyDlrZjlnKjmm53lhYnlhYPntKDvvIznrYnlvoUgeCDmr6vnp5LlkI7kuozmrKHliKTmlq3mm53lhYnmnInmlYjmgKdcblx0ICBpZiAoc2l6ZSA+IDAgKSB7XG5cdCAgICBpZiAoY29uZmlnLkVYUF9EVVJBVElPTikge1xuXHQgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG5cdCAgICAgICAgc2l6ZSA9IHV0aWxFeHBvc3VyZS5maWx0ZXJFbmRFeHBvc3VyZVNpemUoZXhwb3N1cmVUaW1lLCBldmVudFR5cGUpO1xuXHQgICAgICAgIGlmIChzaXplID4gMCkge1xuXHQgICAgICAgICAgLy8g5a2Y5Zyo5pyJ5pWI5pud5YWJ5YWD57Sg55qE5oOF5Ya15LiL77yM5Y+R5bCE5pud5YWJ5LqL5Lu277yM57uZd2F0Y2hSZWNvcmQuanPov5nkuKrnjq/oioLlpITnkIZcblx0ICAgICAgICAgIGFwbHVzLmFwbHVzX3B1YnN1Yi5wdWJsaXNoKFBVQl9LRVksIHtcblx0ICAgICAgICAgICAgc2l6ZTogc2l6ZSxcblx0ICAgICAgICAgICAgZXZlbnRUeXBlOiBldmVudFR5cGVcblx0ICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSwgY29uZmlnLkVYUF9EVVJBVElPTik7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBhcGx1cy5hcGx1c19wdWJzdWIucHVibGlzaChQVUJfS0VZLCB7XG5cdCAgICAgICAgc2l6ZTogc2l6ZSxcblx0ICAgICAgICBldmVudFR5cGU6IGV2ZW50VHlwZVxuXHQgICAgICB9KTtcblx0ICAgIH1cblx0ICB9XG5cdH07XG5cdFxuXHR2YXIgdGhyb3R0bGVfaGFuZGxlcl9leHBvc3VyZSA9IHV0aWxfYWNfYWUudGhyb3R0bGUoZnVuY3Rpb24gKGUpIHtcblx0ICBoYW5kbGVyX2RvbV9leHBvc3VyZShlKTtcblx0fSwgMTAwKTtcblx0XG5cdHZhciBzZWxlY3RvcnMgPSB7fTtcblx0XG5cdC8qKlxuXHQgKiDnm5HlkKxkb23lj5jljJbvvIzmnInlj5jljJbmiafooYzlm57osINcblx0ICogQHBhcmFtIHtoYW5kbGVyX2RvbV9jaGFuZ2V9IGNiXG5cdCAqL1xuXHR2YXIgd2F0Y2hfcG9zaXRpb25zZWxlY3Rvcl9jaGFuZ2UgPSBmdW5jdGlvbiAoZXhwQ29uZmlnLCB0eXBlKSB7XG5cdCAgaWYgKGV4cENvbmZpZyAmJiBleHBDb25maWcuZm9yRWFjaCAmJiBPYmplY3Qua2V5cyAmJiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKSB7XG5cdCAgICBleHBDb25maWcuZm9yRWFjaChmdW5jdGlvbih2KXtcblx0ICAgICAgaWYgKHYucG9zaXRpb25TZWxlY3RvciAmJiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHYucG9zaXRpb25TZWxlY3RvcikpIHtcblx0ICAgICAgICBzZWxlY3RvcnNbdi5wb3NpdGlvblNlbGVjdG9yXSA9IHRydWU7XG5cdCAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgdmFyIHRtcF9zZWxlY3RvcnMgPSBPYmplY3Qua2V5cyhzZWxlY3RvcnMpO1xuXHQgICAgdG1wX3NlbGVjdG9ycy5mb3JFYWNoKGZ1bmN0aW9uKHMpe1xuXHQgICAgICBpZiAodXRpbEV2ZW50W3R5cGVdKSB7XG5cdCAgICAgICAgdXRpbEV2ZW50W3R5cGVdKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocyksICdzY3JvbGwnLCBmdW5jdGlvbiAoZSkge1xuXHQgICAgICAgICAgdGhyb3R0bGVfaGFuZGxlcl9leHBvc3VyZShlKTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgfVxuXHQgICAgfSk7XG5cdCAgfVxuXHR9O1xuXHRcblx0LyoqXG5cdCAqIOebkeWQrGRvbeWPmOWMlu+8jOacieWPmOWMluaJp+ihjOWbnuiwg1xuXHQgKiBAcGFyYW0ge2hhbmRsZXJfZG9tX2NoYW5nZX0gY2Jcblx0ICovXG5cdGV4cG9ydHMud2F0Y2hfZXhwb3N1cmVfY2hhbmdlID0gZnVuY3Rpb24oZXhwQ29uZmlnKSB7XG5cdCAgLy8gc3RlcDEg55uR5ZCs56ys5LiA5qyhZG9tY2hhbmdl5Y+R5bCE55qE5raI5oGv77yM5YGa56ys5LiA5qyh6aqM6K+B5pud5YWJ55qE5aSE55CGXG5cdCAgYXBsdXMuYXBsdXNfcHVic3ViLnN1YnNjcmliZSgnQVBMVVNfQUVfRE9NX0NIQU5HRScsIGhhbmRsZXJfZG9tX2V4cG9zdXJlKTtcblx0XG5cdCAgLy8gc3RlcDIg55uR5ZCs5YWD57Sg5pud5YWJXG5cdCAgdXRpbEV2ZW50Lm9uKHdpbmRvdywgJ3RvdWNobW92ZScsIHRocm90dGxlX2hhbmRsZXJfZXhwb3N1cmUpO1xuXHQgIHV0aWxFdmVudC5vbih3aW5kb3csICdzY3JvbGwnLCB0aHJvdHRsZV9oYW5kbGVyX2V4cG9zdXJlKTtcblx0ICB1dGlsRXZlbnQub24od2luZG93LCAncmVzaXplJywgaGFuZGxlcl9kb21fZXhwb3N1cmUpO1xuXHQgIHdhdGNoX3Bvc2l0aW9uc2VsZWN0b3JfY2hhbmdlKGV4cENvbmZpZywgJ29uJyk7XG5cdH07XG5cdFxuXHRleHBvcnRzLmNsZWFyID0gZnVuY3Rpb24oZXhwQ29uZmlnKSB7XG5cdCAgdXRpbEV2ZW50LnVuKHdpbmRvdywgJ3RvdWNobW92ZScsIHRocm90dGxlX2hhbmRsZXJfZXhwb3N1cmUpO1xuXHQgIHV0aWxFdmVudC51bih3aW5kb3csICdzY3JvbGwnLCB0aHJvdHRsZV9oYW5kbGVyX2V4cG9zdXJlKTtcblx0ICB1dGlsRXZlbnQudW4od2luZG93LCAncmVzaXplJywgaGFuZGxlcl9kb21fZXhwb3N1cmUpO1xuXHQgIHdhdGNoX3Bvc2l0aW9uc2VsZWN0b3JfY2hhbmdlKGV4cENvbmZpZywgJ3VuJyk7XG5cdH07XG5cdFxuXG5cbi8qKiovIH0pLFxuLyogNTMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogcHJvamVjdCAtIGZpbGVwYXRoXG5cdCAqIGRlc2NyaXB0aW9uXG5cdCAqXG5cdCAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cblx0ICpcblx0ICogQXV0aG9yczpcblx0ICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuXHQgKi9cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIHRyYWNrZXJVdGlsID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMyk7XG5cdHZhciB1dGlsRGFzaCA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpO1xuXHR2YXIgdXRpbEdvbGRsb2cgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHR2YXIgdXRpbExvZ2dlciA9IF9fd2VicGFja19yZXF1aXJlX18oMjYpO1xuXHR2YXIgZWFjaE1hcCA9IF9fd2VicGFja19yZXF1aXJlX18oMzcpO1xuXHRcblx0Ly8gdmFyIHV0aWxFbGVtZW50QWMgPSByZXF1aXJlKCcuL3V0aWwvdXRpbEVsZW1lbnRBYycpO1xuXHR2YXIgdXRpbF9hY19hZSA9IF9fd2VicGFja19yZXF1aXJlX18oNDApO1xuXHR2YXIgY29uZmlnID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0Myk7XG5cdFxuXHQvLyBzcG3ljLrlnZfoh6rliqjmm53lhYnorr7nva4gaHR0cHM6Ly9hb25lLmFsaWJhYmEtaW5jLmNvbS9yZXEvMjE4MDMzOTlcblx0ZnVuY3Rpb24gcHJvY2Vzc1NQTUNEIChlbHR5cGUsIGVsZW1lbnQsIHNwbSkge1xuXHQgIHZhciBzcG1DID0gJzAnO1xuXHQgIGlmIChzcG0pIHtcblx0ICAgIGlmIChlbHR5cGUgPT09ICdzcG1jJykge1xuXHQgICAgICB2YXIgc3BtQXJyID0gc3BtLnNwbGl0KCcuJyk7XG5cdCAgICAgIHNwbUMgPSBzcG1BcnJbMl0gPyBzcG1BcnJbMl0gOiBzcG1BcnJbM107XG5cdCAgICAgIC8vIOWPr+inhuWMluWfi+eCueWcuuaZr+S4i+WkmuWIpOaWreS4gOatpeS4jeiDveaYr2nmiJbogIVk5byA5aS05ou85o6l5pWw5a2X55qE5oOF5Ya177yM5Zug5Li66L+Z5Liq5pivc3BtRFxuXHQgICAgICBpZiAoL14oXFxpfFxcZClbMC05XSskLy50ZXN0KHNwbUMpKSB7XG5cdCAgICAgICAgc3BtQyA9ICcwJztcblx0ICAgICAgfVxuXHQgICAgICBzcG0gPSBbc3BtQXJyWzBdLCBzcG1BcnJbMV0sIHNwbUNdLmpvaW4oJy4nKTtcblx0ICAgIH1cblx0ICB9IGVsc2Uge1xuXHQgICAgc3BtID0gJyc7XG5cdCAgICB2YXIgZ19TUE0gPSB3aW5kb3cuZ19TUE0gfHwge307XG5cdCAgICBpZiAodHlwZW9mIGdfU1BNLmdldFBhcmFtID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgIHZhciBzcG1PYmogPSBnX1NQTS5nZXRQYXJhbShlbGVtZW50KTtcblx0ICAgICAgLy8gaHR0cHM6Ly9hb25lLmFsaWJhYmEtaW5jLmNvbS9yZXEvMjE4MDMzOTkgQOS6keadsCAyMDE5LTA4LTA56ZyA5rGCXG5cdCAgICAgIGlmIChlbHR5cGUgPT09ICdzcG1jJykge1xuXHQgICAgICAgIHNwbUMgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1zcG0nKSB8fCAnMCc7XG5cdCAgICAgICAgc3BtID0gW3NwbU9iai5hLCBzcG1PYmouYiwgc3BtQ10uam9pbignLicpO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHNwbSA9IFtzcG1PYmouYSwgc3BtT2JqLmIsIHNwbU9iai5jLCBzcG1PYmouZF0uam9pbignLicpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfVxuXHQgIHJldHVybiBzcG07XG5cdH1cblx0XG5cdC8qKlxuXHQgKiDnu4Too4XmiZPngrnlj4LmlbBcblx0ICogbG9na2V5Q29udGFpbmVy5pWw5o2u5qC85byPXG5cdCAqIGxvZ2tleTE6IFtwYXJhbU9iajExLCBwYXJhbU9iajEyLCAuLi5dXG5cdCAqIGxvZ2tleTI6IFtwYXJhbU9iajIxLCBwYXJhbU9iajIyLCAuLi5dXG5cdCAqIEByZXR1cm4ge09iamVjdH0gbG9na2V5Q29udGFpbmVyXG5cdCAqL1xuXHR2YXIgZmlsdGVyUmVjb3JkcyA9IGZ1bmN0aW9uKCkge1xuXHQgIHZhciBpc0FwbHVzRGVidWcgPSBhcGx1cy5hcGx1c0RlYnVnO1xuXHQgIHZhciBsb2drZXlDb250YWluZXIgPSB7fTtcblx0ICB2YXIgcmVxdWVzdF9jZmcgPSBjb25maWcuZ2V0RGVmYXVsdFJlcXVlc3RDZmcoKTtcblx0XG5cdCAgdmFyIF9hcGx1c19hdXRvX2V4cCA9IHV0aWxHb2xkbG9nLmdldEdvbGRsb2dWYWwoJ19hcGx1c19hdXRvX2V4cCcpIHx8IHt9O1xuXHQgIHZhciBfYWNIYXNoTWFwID0gX2FwbHVzX2F1dG9fZXhwLl9hY0hhc2hNYXAgfHwge307XG5cdCAgZWFjaE1hcChfYWNIYXNoTWFwLCBmdW5jdGlvbiAobG9na2V5LCBhcnIpIHtcblx0ICAgIC8vIOafpeivouacieaViOabneWFieWFg+e0oO+8iOeKtuaAgeS4uuKAnDLigJ3vvInvvIzmlL7lhaXlvoXmiZPngrnpm4blkIhsb2drZXlDb250YWluZXJcblx0ICAgIHZhciBlbGVfcyA9IGFyciB8fCBbXTtcblx0ICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBlbGVfcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuXHQgICAgICB2YXIgdiA9IGVsZV9zW2ldIHx8IHt9O1xuXHQgICAgICBpZiAodi5zdGF0dXMgPT09IDIpIHtcblx0ICAgICAgICB2LnN0YXR1cyA9IDM7IC8vIOWHhuWkh+aJk+eCueeKtuaAgVxuXHQgICAgICAgIHV0aWxfYWNfYWUudXBkYXRlRXhwSGFzaE1hcChsb2drZXksIHYsICdVUERBVEUnKTtcblx0ICAgICAgICBfYXBsdXNfYXV0b19leHAuZXhwX3RpbWVzKys7XG5cdFxuXHQgICAgICAgIC8vIOivu+WPluiiq+abneWFieWFg+e0oOS4iueahOeJueWumuWxnuaAp++8jOi/meS6m+eJueWumuWxnuaAp+aYr+mAmui/h+abneWFieWfi+eCueS6i+WFiOWfi+i/m+WOu+eahFxuXHQgICAgICAgIHZhciBleHBDb25maWcgPSB2LmV4cENvbmZpZyB8fCB7fTtcblx0ICAgICAgICB2YXIgc3BtX2FiID0gZ29sZGxvZy5zcG1fYWIgPyBnb2xkbG9nLnNwbV9hYi5qb2luKCcuJykgOiAnMC4wLjAuMCc7IC8vIOS/neW6lXNwbUFCXG5cdCAgICAgICAgdmFyIHNwbSA9IHByb2Nlc3NTUE1DRChleHBDb25maWcuZWx0eXBlLCB2LmVsZW1lbnQpIHx8IHNwbV9hYjtcblx0ICAgICAgICBcblx0ICAgICAgICB2YXIgc2NtID0gJyc7XG5cdCAgICAgICAgdmFyIF9yYXRlO1xuXHQgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICB2YXIgX3JhdGVOdW0gPSBuZXcgTnVtYmVyKHYudmlld2FiaWxpdHlSYXRlKTtcblx0ICAgICAgICAgIF9yYXRlID0gX3JhdGVOdW0udG9GaXhlZCgyKTtcblx0ICAgICAgICB9IGNhdGNoIChlKSB7XG5cdCAgICAgICAgICBfcmF0ZSA9IHYudmlld2FiaWxpdHlSYXRlO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB2YXIgZXhhcmdzX29yaWdpbiA9IHtcblx0ICAgICAgICAgIC8vICdfeHBhdGgnOiB1dGlsX2FjX2FlLmdldFhQYXRoKHYuZWxlbWVudCksXG5cdCAgICAgICAgICAnX3cnOiB2LndpZHRoLFxuXHQgICAgICAgICAgJ19oJzogdi5oZWlnaHQsXG5cdCAgICAgICAgICAnX3gnOiB2LngsXG5cdCAgICAgICAgICAnX3knOiB2LnksXG5cdCAgICAgICAgICAnX3JhdGUnOiBfcmF0ZSxcblx0ICAgICAgICAgICdfdmlld2FiaWxpdHknOiB2LnZpZXdhYmlsaXR5XG5cdCAgICAgICAgfTtcblx0ICAgICAgICBpZiAodHlwZW9mIHYudXNlclBhcmFtcyA9PT0gJ29iamVjdCcpIHtcblx0ICAgICAgICAgIGlmICh0eXBlb2Ygdi51c2VyUGFyYW1zLnVzZXJkYXRhID09PSAnb2JqZWN0Jykge1xuXHQgICAgICAgICAgICBleGFyZ3Nfb3JpZ2luID0gdXRpbERhc2guYXNzaWduKGV4YXJnc19vcmlnaW4sIHYudXNlclBhcmFtcy51c2VyZGF0YSk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICAvLyDlj6/op4bljJbln4vngrnkvJrliqjmgIHms6jlhaVzcG3jgIFzY23vvIzor6bop4EgL3Mvc3JjL2FwbHVzX3BsdWdpbi9saWJfd2VidnQvTG9nRy5qczogZ2V0QXR0ckFyZ3Ncblx0ICAgICAgICAgIGlmICh2LnVzZXJQYXJhbXMuc3BtKSB7XG5cdCAgICAgICAgICAgIHNwbSA9IHByb2Nlc3NTUE1DRChleHBDb25maWcuZWx0eXBlLCAnJywgdi51c2VyUGFyYW1zLnNwbSk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBpZiAodi51c2VyUGFyYW1zLnNjbSkge1xuXHQgICAgICAgICAgICBzY20gPSB2LnVzZXJQYXJhbXMuc2NtO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBcblx0ICAgICAgICBpZiAodXRpbF9hY19hZS5pc01ldGhvZChleHBDb25maWcubWV0aG9kKSB8fCB1dGlsX2FjX2FlLmlzUGtnU2l6ZShleHBDb25maWcucGtnU2l6ZSkpIHtcblx0ICAgICAgICAgIHJlcXVlc3RfY2ZnID0gdXRpbF9hY19hZS5maWx0ZXJFeHBDb25maWdSZXF1ZXN0Q2ZnKGV4cENvbmZpZyk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHZhciBwYXJhbXMgPSB7XG5cdCAgICAgICAgICBzY206IHNjbSxcblx0ICAgICAgICAgIHNwbTogc3BtLFxuXHQgICAgICAgICAgYXBsdXNDb250ZW50SWQ6ICcnXG5cdCAgICAgICAgfTtcblx0ICAgICAgICB2YXIgZXhhcmdzID0gdXRpbF9hY19hZS5maWxsUHJvcHNEYXRhKGV4cENvbmZpZywgdi5lbGVtZW50LCBleGFyZ3Nfb3JpZ2luKTtcblx0ICAgICAgICBleGFyZ3MgPSB1dGlsX2FjX2FlLmZpbGxGaWx0ZXJEYXRhKGV4cENvbmZpZywgdi5lbGVtZW50LCBleGFyZ3Nfb3JpZ2luKTtcblx0ICAgICAgICBpZiAoYXBsdXMuZ2xvYmFsQ29uZmlnLmlzQWxpKSB7XG5cdCAgICAgICAgICBwYXJhbXMuZXhhcmdzID0gZXhhcmdzO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBwYXJhbXMgPSBleGFyZ3M7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICghbG9na2V5Q29udGFpbmVyW2xvZ2tleV0pIHtcblx0ICAgICAgICAgIGxvZ2tleUNvbnRhaW5lcltsb2drZXldID0gW107XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGxvZ2tleUNvbnRhaW5lcltsb2drZXldLnB1c2gocGFyYW1zKTtcblx0ICAgICAgICBpc0FwbHVzRGVidWcgJiYgdXRpbExvZ2dlci5sb2dnZXIoe1xuXHQgICAgICAgICAgbXNnOiAnbG9na2V5ID0gJyArIGxvZ2tleSArICcsIHBhcmFtcyA9ICcgKyBkZWNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkocGFyYW1zKSlcblx0ICAgICAgICB9KTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0pO1xuXHQgIHJldHVybiB7XG5cdCAgICBsb2drZXlDb250YWluZXI6IGxvZ2tleUNvbnRhaW5lcixcblx0ICAgIHJlcXVlc3RfY2ZnOiByZXF1ZXN0X2NmZ1xuXHQgIH07XG5cdH07XG5cdFxuXHR2YXIgZG9fY2xvbmVfYXJyID0gZnVuY3Rpb24gKGVsZXMpIHtcblx0ICB2YXIgcnMgPSBbXTtcblx0ICBmb3IgKHZhciBpID0gMCwgbGVuID0gZWxlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuXHQgICAgdmFyIG9iaiA9IGVsZXNbaV0gfHwge307XG5cdCAgICB2YXIgdG1wID0ge307XG5cdCAgICBlYWNoTWFwKG9iaiwgZnVuY3Rpb24gKGssIHZhbHVlKSB7XG5cdCAgICAgIGlmIChrICE9PSAnZWxlbWVudCcpIHtcblx0ICAgICAgICB0bXBba10gPSB2YWx1ZTtcblx0ICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICB2YXIgdG1wMiA9IHV0aWxEYXNoLmNsb25lRGVlcCh0bXApO1xuXHQgICAgdG1wMi5lbGVtZW50ID0gb2JqLmVsZW1lbnQ7XG5cdCAgICBycy5wdXNoKHRtcDIpO1xuXHQgIH1cblx0ICByZXR1cm4gcnM7XG5cdH07XG5cdFxuXHQvKipcblx0ICogQHBhcmFtcyBvcHRpb25zXG5cdCAqL1xuXHR2YXIgaGFuZGxlclJlY29yZCA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcblx0ICB2YXIgX2FwbHVzX2F1dG9fZXhwID0gdXRpbEdvbGRsb2cuZ2V0R29sZGxvZ1ZhbCgnX2FwbHVzX2F1dG9fZXhwJykgfHwge307XG5cdCAgdmFyIF9hY0hhc2hNYXAgPSBfYXBsdXNfYXV0b19leHAuX2FjSGFzaE1hcCB8fCB7fTtcblx0ICB2YXIgY2xlYXJfbGlzdCA9IFtdO1xuXHQgIGVhY2hNYXAoX2FjSGFzaE1hcCwgZnVuY3Rpb24gKGxvZ2tleSwgb2JqKSB7XG5cdCAgICAvLyDmn6Xor6LmnInmlYjmm53lhYnlhYPntKDvvIjnirbmgIHkuLrigJwy4oCd77yJ77yM5pS+5YWl5b6F5omT54K56ZuG5ZCIbG9na2V5Q29udGFpbmVyXG5cdCAgICB2YXIgZWxlX3MgPSBkb19jbG9uZV9hcnIob2JqKSB8fCBbXTtcblx0ICAgIGZvciAodmFyIHggPSAwLCBsZW4gPSBlbGVfcy5sZW5ndGg7IHggPCBsZW47IHgrKykge1xuXHQgICAgICB2YXIgdiA9IGVsZV9zW3hdIHx8IHt9O1xuXHQgICAgICB2YXIgdl9vcmlnaW4gPSBvYmpbeF0gfHwge307XG5cdCAgICAgIC8vIOafpeivouW3suaIkOWKn+aJk+eCueeahOWFg+e0oO+8jOWwhuWFtuS7jmhhc2htYXDkuK3np7vpmaTvvIzlubbkv67mlLlkb23oioLngrlcblx0ICAgICAgaWYgKHYuc3RhdHVzID09PSAzKSB7XG5cdCAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgIC8vIOabtOaWsOWFg+e0oOWxnuaAp1xuXHQgICAgICAgICAgdXRpbF9hY19hZS5zZXRSZWNvcmRTdWNjZXNzKHZfb3JpZ2luLCBjb25maWcuREFUQV9BUExVU19BRV9LRVkpO1xuXHQgICAgICAgICAgYXBsdXMuYXBsdXNfcHVic3ViLnB1Ymxpc2goJ0FQTFVTX0VMRU1FTlRfRVhQT1NVUkUnLCB7XG5cdCAgICAgICAgICAgIGxvZ2tleTogbG9na2V5LFxuXHQgICAgICAgICAgICB2X29yaWdpbjogdl9vcmlnaW4sXG5cdCAgICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnNcblx0ICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgY2xlYXJfbGlzdC5wdXNoKHZfb3JpZ2luKTtcblx0ICAgICAgICB9IGNhdGNoIChlcnIpe1xuXHQgICAgICAgICAgdXRpbExvZ2dlci5sb2dnZXIoe1xuXHQgICAgICAgICAgICBtc2c6IGVyciAmJiBlcnIubWVzc2FnZVxuXHQgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICB3aGlsZSAoY2xlYXJfbGlzdC5sZW5ndGggPiAwKSB7XG5cdCAgICAgIHV0aWxfYWNfYWUudXBkYXRlRXhwSGFzaE1hcChsb2drZXksIGNsZWFyX2xpc3QucG9wKCksICdDTEVBUicpO1xuXHQgICAgfVxuXHQgIH0pO1xuXHR9O1xuXHRcblx0dmFyIGhhbmRsZXI7XG5cdHZhciByZWNvcmRRdWV1ZSA9IFtdO1xuXHR2YXIgcHJvY2Vzc1JlY29yZFF1ZXVlID0gZnVuY3Rpb24gKCkge1xuXHQgIGhhbmRsZXIgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG5cdCAgICBpZiAocmVjb3JkUXVldWUubGVuZ3RoID4gMCkge1xuXHQgICAgICBhcGx1c19xdWV1ZS5wdXNoKHJlY29yZFF1ZXVlLnBvcCgpKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGNsZWFySW50ZXJ2YWwoaGFuZGxlcik7XG5cdCAgICAgIGhhbmRsZXIgPSBudWxsO1xuXHQgICAgfVxuXHQgIH0sIDIwMCk7XG5cdH07XG5cdFxuXHR2YXIgZmxhZztcblx0ZnVuY3Rpb24gd2F0Y2hVbmxvYWRSZWNvcmQgKCkge1xuXHQgIGlmICghZmxhZykge1xuXHQgICAgZmxhZyA9IHRydWU7XG5cdCAgICBhcGx1cy5vbih3aW5kb3csICdiZWZvcmV1bmxvYWQnLCBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIGNsZWFySW50ZXJ2YWwoaGFuZGxlcik7XG5cdCAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVjb3JkUXVldWUubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICBhcGx1c19xdWV1ZS5wdXNoKHJlY29yZFF1ZXVlW2ldKTtcblx0ICAgICAgfVxuXHQgICAgfSk7XG5cdCAgfVxuXHR9XG5cdFxuXHQvKipcblx0ICog6K6w5b2V5pud5YWJ5YWD57Sg77yM5omT5YyF5Y+R6YCB5pel5b+XKOavjzEw5Liq5LiA57uEKVxuXHQgKiBtb2RpZnkgYnkgQFJpY2hhcmR86LCL5aOrIGluIDIwMTctMTEtMjgg5aKe5Yqg5LiA5Liq5YWl5Y+C77yaXG5cdCAqICAgICAgcmVxdWVzdF9jZmfvvJog5o+Q5L6b77ya4oCdMeOAgeaXpeW/l+aJk+WMheadoeaVsHBrZ1NpemUsIDLjgIHml6Xlv5flj5HpgIHmlrnlvI9tZXRob2TkuKTkuKrphY3nva7pobnigJxcblx0ICogQHBhcmFtcyBwYXJhbXMge1xuXHQgKiAgICBsb2drZXlDb250YWluZXIge0FycmF5fVxuXHQgKiAgICByZXF1ZXN0X2NmZyB7T2JqZWN0fVxuXHQgKiAgfVxuXHQgKiBAcGFyYW1zIG9wdGlvbnMge1xuXHQgKiAgIHNpemUge051bWJlcn0gZXhwb3VzZSBlbGVtZW50cyBudW1iZXJcblx0ICogICBldmVudFR5cGUge051bWJlcn0gZXhwb3VzZSBldmVudCB0eXBlIChpbml0OndhdGNoRE9NLCBzY3JvbGwsIHRvdWNobW92ZSAuLi4pXG5cdCAqIH1cblx0ICpcblx0ICovXG5cdHZhciByZWNvcmRBcGx1c0F0ID0gZnVuY3Rpb24ocGFyYW1zLCBvcHRpb25zLCBjYikge1xuXHQgIHZhciBsb2drZXlDb250YWluZXIgPSBwYXJhbXMubG9na2V5Q29udGFpbmVyIHx8IFtdO1xuXHQgIHZhciByZXF1ZXN0X2NmZyA9IHBhcmFtcy5yZXF1ZXN0X2NmZyB8fCB7fTtcblx0ICB0cmFja2VyVXRpbC53cmFwKGZ1bmN0aW9uKCl7XG5cdCAgICBlYWNoTWFwKGxvZ2tleUNvbnRhaW5lciwgZnVuY3Rpb24gKF9sb2drZXksIGxvZ2tleV92YWx1ZXMpIHtcblx0ICAgICAgaWYgKGxvZ2tleV92YWx1ZXMgJiYgbG9na2V5X3ZhbHVlcy5sZW5ndGggPiAwKSB7XG5cdCAgICAgICAgdmFyIGkgPSAwO1xuXHQgICAgICAgIHdoaWxlIChpIDwgbG9na2V5X3ZhbHVlcy5sZW5ndGgpIHtcblx0ICAgICAgICAgIHZhciBnb2tleSA9IFtdO1xuXHQgICAgICAgICAgLy8gdmFyIGV4cG91c3VyZVBhcmFtcyA9IEpTT04uc3RyaW5naWZ5KGxvZ2tleV92YWx1ZXMpOyAvLyhsb2drZXlfdmFsdWVzLnNsaWNlKGksIGkgKyBTSVpFKSk7XG5cdCAgICAgICAgICB2YXIgZXhwb3VzdXJlUGFyYW1zID0gSlNPTi5zdHJpbmdpZnkobG9na2V5X3ZhbHVlcy5zbGljZShpLCBpICsgcmVxdWVzdF9jZmcucGtnU2l6ZSkpO1xuXHQgICAgICAgICAgZ29rZXkucHVzaCgnZXhwZGF0YT0nICsgZXhwb3VzdXJlUGFyYW1zKTtcblx0ICAgICAgICAgIGdva2V5LnB1c2goJ19pc19hdXRvX2V4cD0xJyk7XG5cdCAgICAgICAgICBnb2tleS5wdXNoKCdfZXZlbnRUeXBlPScgKyBvcHRpb25zLmV2ZW50VHlwZSk7XG5cdCAgICAgICAgICBnb2tleS5wdXNoKCdfbWV0aG9kPScgKyByZXF1ZXN0X2NmZy5tZXRob2QpO1xuXHQgICAgICAgICAgZ29rZXkucHVzaCgnX3BrZ1NpemU9JyArIHJlcXVlc3RfY2ZnLnBrZ1NpemUpO1xuXHRcblx0ICAgICAgICAgIHZhciBtZXRob2QgPSByZXF1ZXN0X2NmZy5tZXRob2QgfHwgJ1BPU1QnO1xuXHQgICAgICAgICAgaWYgKGFwbHVzLmdsb2JhbENvbmZpZy5pc0FsaSAmJiBtZXRob2QgPT09ICdQT1NUJyAmJiBuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLnNlbmRCZWFjb24gJiYgcmVjb3JkUXVldWUubGVuZ3RoIDwgMTApIHtcblx0ICAgICAgICAgICAgcmVjb3JkUXVldWUucHVzaCh7XG5cdCAgICAgICAgICAgICAgYWN0aW9uOiAnYXBsdXMucmVjb3JkJyxcblx0ICAgICAgICAgICAgICBhcmd1bWVudHM6IFtfbG9na2V5LCAnRVhQJywgZ29rZXkuam9pbignJicpLCBtZXRob2RdXG5cdCAgICAgICAgICAgIH0pOyAgXG5cdCAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICBhcGx1c19xdWV1ZS5wdXNoKHtcblx0ICAgICAgICAgICAgICBhY3Rpb246ICdhcGx1cy5yZWNvcmQnLFxuXHQgICAgICAgICAgICAgIGFyZ3VtZW50czogW19sb2drZXksICdFWFAnLCBnb2tleS5qb2luKCcmJyksICdHRVQnXVxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIGkgKz0gcmVxdWVzdF9jZmcucGtnU2l6ZTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgY2Iob3B0aW9ucyk7XG5cdCAgICAgIH1cblx0ICAgIH0pO1xuXHQgIH0sICdyZWNvcmRBcGx1c0F0Jyk7XG5cdH07XG5cdFxuXHR2YXIgcmVjb3JkQXBsdXNBdEZvckFsaXl1biA9IGZ1bmN0aW9uIChwYXJhbXMsIG9wdGlvbnMsIGNiKSB7XG5cdCAgdmFyIGxvZ2tleUNvbnRhaW5lciA9IHBhcmFtcy5sb2drZXlDb250YWluZXIgfHwgW107XG5cdCAgdmFyIHJlcXVlc3RfY2ZnID0gcGFyYW1zLnJlcXVlc3RfY2ZnIHx8IHt9O1xuXHQgIHRyYWNrZXJVdGlsLndyYXAoZnVuY3Rpb24oKXtcblx0ICAgIGVhY2hNYXAobG9na2V5Q29udGFpbmVyLCBmdW5jdGlvbiAoX2xvZ2tleSwgbG9na2V5X3ZhbHVlcykge1xuXHQgICAgICBpZiAobG9na2V5X3ZhbHVlcyAmJiBsb2drZXlfdmFsdWVzLmxlbmd0aCA+IDApIHtcblx0ICAgICAgICB2YXIgaSA9IDA7XG5cdCAgICAgICAgd2hpbGUgKGkgPCBsb2drZXlfdmFsdWVzLmxlbmd0aCkge1xuXHQgICAgICAgICAgdmFyIGdva2V5ID0gW107XG5cdCAgICAgICAgICB2YXIgZXhwb3VzdXJlUGFyYW1zID0gbG9na2V5X3ZhbHVlc1tpXTtcblx0ICAgICAgICAgIGZvciAodmFyIGsgaW4gZXhwb3VzdXJlUGFyYW1zKSB7XG5cdCAgICAgICAgICAgIGdva2V5LnB1c2goayArICc9JyArIGV4cG91c3VyZVBhcmFtc1trXSk7ICBcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIFxuXHQgICAgICAgICAgZ29rZXkucHVzaCgnX2lzX2F1dG9fZXhwPTEnKTtcblx0ICAgICAgICAgIGdva2V5LnB1c2goJ19ldmVudFR5cGU9JyArIG9wdGlvbnMuZXZlbnRUeXBlKTtcblx0ICAgICAgICAgIGdva2V5LnB1c2goJ19tZXRob2Q9JyArIHJlcXVlc3RfY2ZnLm1ldGhvZCk7XG5cdFxuXHQgICAgICAgICAgdmFyIG1ldGhvZCA9IHJlcXVlc3RfY2ZnLm1ldGhvZCB8fCAnUE9TVCc7XG5cdCAgICAgICAgICBpZiAoYXBsdXMuZ2xvYmFsQ29uZmlnLmlzQWxpICYmIG1ldGhvZCA9PT0gJ1BPU1QnICYmIG5hdmlnYXRvciAmJiBuYXZpZ2F0b3Iuc2VuZEJlYWNvbiAmJiByZWNvcmRRdWV1ZS5sZW5ndGggPCAxMCkge1xuXHQgICAgICAgICAgICByZWNvcmRRdWV1ZS5wdXNoKHtcblx0ICAgICAgICAgICAgICBhY3Rpb246ICdhcGx1cy5yZWNvcmQnLFxuXHQgICAgICAgICAgICAgIGFyZ3VtZW50czogW19sb2drZXksICdFWFAnLCBnb2tleS5qb2luKCcmJyksIG1ldGhvZF1cblx0ICAgICAgICAgICAgfSk7ICBcblx0ICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIGFwbHVzX3F1ZXVlLnB1c2goe1xuXHQgICAgICAgICAgICAgIGFjdGlvbjogJ2FwbHVzLnJlY29yZCcsXG5cdCAgICAgICAgICAgICAgYXJndW1lbnRzOiBbX2xvZ2tleSwgJ0VYUCcsIGdva2V5LmpvaW4oJyYnKSwgJ0dFVCddXG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgaSArPSAxO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBjYihvcHRpb25zKTtcblx0ICAgICAgfVxuXHQgICAgfSk7XG5cdCAgfSwgJ3JlY29yZEFwbHVzQXQnKTtcblx0fTtcblx0XG5cdC8qKlxuXHQgKiBAcGFyYW1zIG9wdGlvbnMge1xuXHQgKiAgIHNpemUge051bWJlcn0gZXhwb3VzZSBlbGVtZW50cyBudW1iZXJcblx0ICogICBldmVudFR5cGUge051bWJlcn0gZXhwb3VzZSBldmVudFR5cGUgKGluaXQ6d2F0Y2hET00sIHNjcm9sbCwgdG91Y2htb3ZlIC4uLilcblx0ICogfVxuXHQgKi9cblx0dmFyIGhhbmRsZXJFeHBvc3VyZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcblx0ICBpZiAob3B0aW9ucy5zaXplID4gMCkge1xuXHQgICAgaWYgKCFoYW5kbGVyKSB7XG5cdCAgICAgIHByb2Nlc3NSZWNvcmRRdWV1ZSgpO1xuXHQgICAgfVxuXHQgICAgdmFyIHJlc3VsdCA9IGZpbHRlclJlY29yZHMoKSB8fCB7fTtcblx0ICAgIGlmIChhcGx1cy5nbG9iYWxDb25maWcuaXNBbGkpIHtcblx0ICAgICAgcmVjb3JkQXBsdXNBdChyZXN1bHQsIG9wdGlvbnMsIGhhbmRsZXJSZWNvcmQpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgcmVjb3JkQXBsdXNBdEZvckFsaXl1bihyZXN1bHQsIG9wdGlvbnMsIGhhbmRsZXJSZWNvcmQpO1xuXHQgICAgfVxuXHQgIH1cblx0fTtcblx0XG5cdGV4cG9ydHMud2F0Y2hfZGF0YV9jaGFuZ2UgPSBmdW5jdGlvbigpIHtcblx0ICBhcGx1cy5hcGx1c19wdWJzdWIuc3Vic2NyaWJlKCdBUExVU19BRV9FWFBPU1VSRV9DSEFOR0UnLCBoYW5kbGVyRXhwb3N1cmUpO1xuXHQgIHdhdGNoVW5sb2FkUmVjb3JkKCk7XG5cdH07XG5cdFxuXHRleHBvcnRzLmNsZWFyID0gZnVuY3Rpb24oKSB7XG5cdCAgYXBsdXMuYXBsdXNfcHVic3ViLnVuc3Vic2NyaWJlKCdBUExVU19BRV9FWFBPU1VSRV9DSEFOR0UnLCBoYW5kbGVyRXhwb3N1cmUpO1xuXHR9O1xuXG5cbi8qKiovIH0pLFxuLyogNTQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogYWxpbG9nL2FwbHVzX2NwbHVnaW4vc3JjL2xpYl9tb25pdG9yL3RyYWNrZXJfbG9zdHB2LmpzXG5cdCAqIOiusOW9leS4ouWksXB255qE5Zy65pmvXG5cdCAqXG5cdCAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cblx0ICpcblx0ICogQXV0aG9yczpcblx0ICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuXHQgKi9cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIHV0aWxFdmVudCA9IF9fd2VicGFja19yZXF1aXJlX18oNTUpO1xuXHR2YXIgYXBsdXNTdGF0aWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXHR2YXIgbmFtZVN0b3JhZ2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KS5uYW1lU3RvcmFnZTtcblx0dmFyIHV0aWxSZWZlcnJlciA9IF9fd2VicGFja19yZXF1aXJlX18oMzApO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcblx0ICByZXR1cm4ge1xuXHQgICAgLyoqXG5cdCAgICAgKiBAcGFyYW1zIHtPYmplY3R9IG9wdGlvbnMge1xuXHQgICAgICogICBsb2dDb25maWc6IHtsb2dDb25maWd9XG5cdCAgICAgKiB9XG5cdCAgICAgKi9cblx0ICAgIC8vIGluaXQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcblx0ICAgIC8vICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0ICAgIC8vIH0sXG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiDlhpkgcmVmZXJyZXJcblx0ICAgICAqXG5cdCAgICAgKiDlnKggd2luZG93Lm5hbWUg5Lit6K6w5b2V5b2T5YmN6aG16Z2i55qEIHVybO+8jOS7peS+v+S4i+S4gOS4qumhtemdouivu+WPllxuXHQgICAgICogd2luZG93Lm5hbWUg55qE6K+75YaZIEFQSSDlkowgbmFtZSDlgLznmoTop4TojIPlrprkuYnpg73ph4fnlKggbmFtZVN0b3JhZ2Vcblx0ICAgICAqIGh0dHA6Ly9naXRsYWIuYWxpYmFiYS1pbmMuY29tL2NvZGV2L25hbWUtc3RvcmFnZS90cmVlL21hc3RlclxuXHQgICAgICovXG5cdCAgICByZWNvcmRWYWxJbldpbmRvd05hbWU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgdmFyIGlzX2h0dHBzID0gYXBsdXNTdGF0aWMuSFRUUFMgPT0gbG9jYXRpb24ucHJvdG9jb2w7XG5cdCAgICAgIHZhciBOQU1FU1RPUkFHRV9LRVlTID0gYXBsdXMuZ2xvYmFsQ29uZmlnLk5BTUVTVE9SQUdFX0tFWVMgfHwge307XG5cdCAgICAgIHZhciByZWZlcnJlcjtcblx0ICAgICAgdmFyIHJlZmVycmVyX3B2X2lkO1xuXHRcblx0ICAgICAgLy8g5LuF5ZyoIHRvcCDpobXpnaLmiY3lgZrov5nkuKrmk43kvZxcblx0ICAgICAgLy8g5LuF5ZyoIGh0dHBzIOmhtemdouWcqCB3aW5kb3cubmFtZSDkuK3orrDlvZXkuIsgcmVmZXJyZXIg55qE5YC8XG5cdCAgICAgIHZhciBpc19pbl9pZnJhbWUgPSBwYXJlbnQgIT09IHNlbGY7ICAvLyDlvZPliY3pobXpnaLmmK/lkKblnKggaWZyYW1lIOS4rVxuXHQgICAgICBpZiAoaXNfaW5faWZyYW1lIHx8ICFpc19odHRwcykge1xuXHQgICAgICAgIHJldHVybjtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgdmFyIHBhZ2VfdXJsID0gbG9jYXRpb24uaHJlZjtcblx0ICAgICAgLy8g5piv5ZCm5Zyo55m75b2V6aG16Z2i5LiKXG5cdCAgICAgIHZhciBpc19sb2dpbl9wYWdlID0gaXNfaHR0cHMgJiYgKHBhZ2VfdXJsLmluZGV4T2YoJ2xvZ2luLnRhb2Jhby5jb20nKSA+PSAwIHx8IHBhZ2VfdXJsLmluZGV4T2YoJ2xvZ2luLnRtYWxsLmNvbScpID49IDApO1xuXHQgICAgICB2YXIgcGFnZV9yZWZlcnJlciA9IHV0aWxSZWZlcnJlci5nZXRSZWZlcihOQU1FU1RPUkFHRV9LRVlTKTtcblx0XG5cdCAgICAgIC8qKlxuXHQgICAgICAgKiDlpoLmnpzmmK/lnKjnmbvlvZXpobXpnaLkuIrvvIzlubbkuJTlt7Lnu4/orrDlvZXkuobkuIDkuKogcmVmZXJyZXLvvIzliJnov5nlhL/ljrvmjokgcmVmZXJyZXIg5Y+C5pWwXG5cdCAgICAgICAqIOWboOS4uu+8jOWmguaenOeUqOaIt+aYr+S7jiBBIOmhtemdoueCueWHu+WIsCBCIOmhtemdou+8jOS4remXtOe7j+i/h+S6hueZu+W9lemhtemdou+8jFxuXHQgICAgICAgKiDlkI7lj7DlnKjov5jljp/ot6/lvoTml7bvvIzlj6rpnIDopoHnn6XpgZMgQSAtPiBC77yM6ICM5LiN6ZyA6KaB55+l6YGTIEEgLT4gbG9naW4gLT4gQlxuXHQgICAgICAgKi9cblx0ICAgICAgaWYgKGlzX2xvZ2luX3BhZ2UgJiYgcGFnZV9yZWZlcnJlcikge1xuXHQgICAgICAgIHJlZmVycmVyID0gcGFnZV9yZWZlcnJlcjtcblx0ICAgICAgICByZWZlcnJlcl9wdl9pZCA9IG5hbWVTdG9yYWdlLmdldEl0ZW0oTkFNRVNUT1JBR0VfS0VZU1snUkVGRVJSRVJfUFZfSUQnXSk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgcmVmZXJyZXIgPSBwYWdlX3VybDtcblx0ICAgICAgICByZWZlcnJlcl9wdl9pZCA9IGFwbHVzLnB2aWQ7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIG5hbWVTdG9yYWdlLnNldEl0ZW0oTkFNRVNUT1JBR0VfS0VZU1snUkVGRVJSRVInXSwgcmVmZXJyZXIpO1xuXHQgICAgICBuYW1lU3RvcmFnZS5zZXRJdGVtKE5BTUVTVE9SQUdFX0tFWVNbJ1JFRkVSUkVSX1BWX0lEJ10sIHJlZmVycmVyX3B2X2lkKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgcnVuOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIHZhciBfc2VsZiA9IHRoaXM7XG5cdCAgICAgIHV0aWxFdmVudC5vbih3aW5kb3csICdiZWZvcmV1bmxvYWQnLCBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgX3NlbGYucmVjb3JkVmFsSW5XaW5kb3dOYW1lKCk7XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgIH07XG5cdH07XG5cblxuLyoqKi8gfSksXG4vKiA1NSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBwcm9qZWN0IC0gZmlsZXBhdGhcblx0ICog5LqL5Lu257G75bel5YW36ZuG5ZCIXG5cdCAqXG5cdCAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cblx0ICpcblx0ICogQXV0aG9yczpcblx0ICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuXHQgKi9cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIHBhc3NpdmVTdXBwb3J0ZWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU2KTtcblx0dmFyIGFwbHVzVGFwID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOSk7XG5cdFxuXHQvKipcblx0ICogdGFwIG1ldGhvZHNcblx0ICogdGh4IHRvIEDngbXnjolcblx0ICovXG5cdGZ1bmN0aW9uIHRhcEV2ZW50QmluZCAoZWxlbWVudCwgZm4sIGV2ZW50X3R5cGUpIHtcblx0ICB2YXIgXyQgPSBhcGx1cy5fJCB8fCB7fTtcblx0ICB2YXIgbWV0YV9pbmZvID0gXyQubWV0YV9pbmZvIHx8IHt9O1xuXHQgIHZhciBhcGx1c19jdGFwID0gbWV0YV9pbmZvLmFwbHVzX2N0YXAgfHwge307XG5cdCAgdmFyIGFwbHVzVG91Y2ggPSBtZXRhX2luZm9bJ2FwbHVzLXRvdWNoJ107XG5cdCAgLy8g5aaC5p6c5Lia5Yqh5pa55pyJ6Ieq5a6a5LmJ5a6e546w55qEdGFw5LqL5Lu25o+S5Lu277yM5LyY5YWI5oyJ6K+l5LqL5Lu25omn6KGMXG5cdCAgaWYgKGFwbHVzX2N0YXAgJiYgdHlwZW9mIGFwbHVzX2N0YXAub24gPT09ICdmdW5jdGlvbicpIHtcblx0ICAgIGFwbHVzX2N0YXAub24oZWxlbWVudCwgZm4pO1xuXHQgIH0gZWxzZSB7XG5cdCAgICB2YXIgaXNUb3VjaCA9ICdvbnRvdWNoZW5kJyBpbiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0ICAgIGlmIChpc1RvdWNoICYmIChhcGx1c1RvdWNoID09PSAndGFwJyB8fCBldmVudF90eXBlID09PSAndGFwU3BtJyB8fCBldmVudF90eXBlID09PSAndGFwJykpIHtcblx0ICAgICAgYXBsdXNUYXAub24oZWxlbWVudCwgZm4pO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgb24oZWxlbWVudCwgaXNUb3VjaCA/ICd0b3VjaHN0YXJ0JyA6ICdtb3VzZWRvd24nLCBmbik7XG5cdCAgICB9XG5cdCAgfVxuXHR9O1xuXHRcblx0ZnVuY3Rpb24gZG9TY3JvbGxDaGVjayAoY2IpIHtcblx0ICB0cnkge1xuXHQgICAgLy8gSWYgSUUgaXMgdXNlZCwgdXNlIHRoZSB0cmljayBieSBEaWVnbyBQZXJpbmlcblx0ICAgIC8vIGh0dHA6Ly9qYXZhc2NyaXB0Lm53Ym94LmNvbS9JRUNvbnRlbnRMb2FkZWQvXG5cdCAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwoJ2xlZnQnKTtcblx0ICB9IGNhdGNoKGUpIHtcblx0ICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdCAgICAgIGRvU2Nyb2xsQ2hlY2soY2IpO1xuXHQgICAgfSwgMSk7XG5cdCAgICByZXR1cm47XG5cdCAgfVxuXHQgIC8vIGFuZCBleGVjdXRlIGFueSB3YWl0aW5nIGZ1bmN0aW9uc1xuXHQgIGNiKCk7XG5cdH07XG5cdFxuXHQvLyB0aGFua3MgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvYmxvYi8xLjEyLjQvc3JjL2NvcmUvcmVhZHkuanNcblx0ZnVuY3Rpb24gRE9NUmVhZHkgKGNhbGxiYWNrKSB7XG5cdCAgdmFyIGkgPSAwO1xuXHQgIHZhciBjYiA9IGZ1bmN0aW9uKCkge1xuXHQgICAgaWYgKGkgPT09IDApIHtcblx0ICAgICAgY2FsbGJhY2soKTtcblx0ICAgIH1cblx0ICAgIGkrKztcblx0ICB9O1xuXHQgIC8vIENhdGNoIGNhc2VzIHdoZXJlICQoZG9jKS5yZWFkeSgpIGlzIGNhbGxlZCBhZnRlciB0aGVcblx0ICAvLyBicm93c2VyIGV2ZW50IGhhcyBhbHJlYWR5IG9jY3VycmVkLlxuXHQgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG5cdCAgICAvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcblx0ICAgIGNiKCk7XG5cdCAgfVxuXHQgIHZhciBsb2FkZWQ7XG5cdCAgLy8gTW96aWxsYSwgT3BlcmEgYW5kIHdlYmtpdCBuaWdodGxpZXMgY3VycmVudGx5IHN1cHBvcnQgdGhpcyBldmVudFxuXHQgIGlmIChkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKSB7XG5cdCAgICAvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNiXG5cdCAgICBsb2FkZWQgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGxvYWRlZCwgZmFsc2UpO1xuXHQgICAgICBjYigpO1xuXHQgICAgfTtcblx0ICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBsb2FkZWQsIGZhbHNlKTtcblx0XG5cdCAgICAvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xuXHQgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBjYiwgZmFsc2UpO1xuXHRcblx0ICAgIC8vIElmIElFIGV2ZW50IG1vZGVsIGlzIHVzZWRcblx0ICB9IGVsc2UgaWYgKGRvY3VtZW50LmF0dGFjaEV2ZW50KSB7XG5cdCAgICBsb2FkZWQgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgLy8gTWFrZSBzdXJlIGJvZHkgZXhpc3RzLCBhdCBsZWFzdCwgaW4gY2FzZSBJRSBnZXRzIGEgbGl0dGxlIG92ZXJ6ZWFsb3VzICh0aWNrZXQgIzU0NDMpLlxuXHQgICAgICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJykge1xuXHQgICAgICAgIGRvY3VtZW50LmRldGFjaEV2ZW50KCdvbnJlYWR5c3RhdGVjaGFuZ2UnLCBsb2FkZWQpO1xuXHQgICAgICAgIGNiKCk7XG5cdCAgICAgIH1cblx0ICAgIH07XG5cdCAgICAvLyBlbnN1cmUgZmlyaW5nIGJlZm9yZSBvbmxvYWQsXG5cdCAgICAvLyBtYXliZSBsYXRlIGJ1dCBzYWZlIGFsc28gZm9yIGlmcmFtZXNcblx0ICAgIGRvY3VtZW50LmF0dGFjaEV2ZW50KCdvbnJlYWR5c3RhdGVjaGFuZ2UnLCBsb2FkZWQpO1xuXHRcblx0ICAgIC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXG5cdCAgICB3aW5kb3cuYXR0YWNoRXZlbnQoJ29ubG9hZCcsIGNiKTtcblx0XG5cdCAgICAvLyBJZiBJRSBhbmQgbm90IGEgZnJhbWVcblx0ICAgIC8vIGNvbnRpbnVhbGx5IGNoZWNrIHRvIHNlZSBpZiB0aGUgZG9jIGlzIHJlYWR5XG5cdCAgICB2YXIgdG9wbGV2ZWwgPSBmYWxzZTtcblx0XG5cdCAgICB0cnkge1xuXHQgICAgICB0b3BsZXZlbCA9IHdpbmRvdy5mcmFtZUVsZW1lbnQgPT09IG51bGw7XG5cdCAgICB9IGNhdGNoKGUpIHt9XG5cdFxuXHQgICAgaWYgKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCAmJiB0b3BsZXZlbCkge1xuXHQgICAgICBkb1Njcm9sbENoZWNrKGNiKTtcblx0ICAgIH1cblx0ICB9XG5cdH07XG5cdC8vIOebtOaOpeeUqOWOn+eUn+eahERPTXJlYWR577yM5LiN5Y675L6d6LWW5aSW6YOo55qEanF1ZXJ577yMa2lzc3kgQOiwi+WjqyBpbiAyMDE2LTEyLTI3XG5cdGV4cG9ydHMuRE9NUmVhZHkgPSBET01SZWFkeTtcblx0XG5cdGZ1bmN0aW9uIG9ubG9hZCAoY2FsbGJhY2spIHtcblx0ICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJykge1xuXHQgICAgY2FsbGJhY2soKTtcblx0ICB9IGVsc2Uge1xuXHQgICAgb24od2luZG93LCAnbG9hZCcsIGNhbGxiYWNrKTtcblx0ICB9XG5cdH07XG5cdGV4cG9ydHMub25sb2FkID0gb25sb2FkO1xuXHRcblx0LyoqXG5cdCAqIOe7keWumuS6i+S7tlxuXHQgKiBAcGFyYW0gb2JqIHtXaW5kb3d8RWxlbWVudH0gRE9NIOWFg+e0oFxuXHQgKiBAcGFyYW0gZXZlbnRfdHlwZVxuXHQgKiBAcGFyYW0gZlxuXHQgKi9cblx0ZnVuY3Rpb24gb24gKCkge1xuXHQgIHZhciB3aW4gPSB3aW5kb3c7XG5cdCAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG5cdCAgaWYgKGFyZ3MubGVuZ3RoID09PSAyKSB7XG5cdCAgICBpZiAoYXJnc1swXSA9PT0gJ0RPTVJlYWR5Jykge1xuXHQgICAgICBET01SZWFkeShhcmdzWzFdKTtcblx0ICAgIH1cblx0ICAgIGlmIChhcmdzWzBdID09PSAnb25sb2FkJykge1xuXHQgICAgICBvbmxvYWQoYXJnc1sxXSk7XG5cdCAgICB9XG5cdCAgfSBlbHNlIGlmIChhcmdzLmxlbmd0aCA9PT0gMykge1xuXHQgICAgdmFyIG9iaiA9IGFyZ3NbMF07XG5cdCAgICB2YXIgZXZlbnRfdHlwZSA9IGFyZ3NbMV07XG5cdCAgICB2YXIgZiA9IGFyZ3NbMl07XG5cdCAgICBpZiAoZXZlbnRfdHlwZSA9PT0gJ3RhcCcgfHwgZXZlbnRfdHlwZSA9PT0gJ3RhcFNwbScpIHtcblx0ICAgICAgdGFwRXZlbnRCaW5kKG9iaiwgZiwgZXZlbnRfdHlwZSk7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICAvLyDlvZPliY3mtY/op4jlmajmmK/lkKbkuLogSUXvvIjmmK/lkKbmlK/mjIEgZG9jdW1lbnQuYXR0YWNoRXZlbnTvvIlcblx0ICAgICAgdmFyIG9uZXZlbnQgPSAhIWRvY3VtZW50LmF0dGFjaEV2ZW50ID8gJ2F0dGFjaEV2ZW50JyA6ICdhZGRFdmVudExpc3RlbmVyJztcblx0ICAgICAgdmFyIGF0dGEgPSAhIWRvY3VtZW50LmF0dGFjaEV2ZW50O1xuXHQgICAgICBvYmpbb25ldmVudF0oXG5cdCAgICAgICAgKGF0dGEgPyAnb24nIDogJycpICsgZXZlbnRfdHlwZSxcblx0ICAgICAgICBmdW5jdGlvbiAoZSkge1xuXHQgICAgICAgICAgZSA9IGUgfHwgd2luLmV2ZW50O1xuXHQgICAgICAgICAgdmFyIGVsID0gZS50YXJnZXQgfHwgZS5zcmNFbGVtZW50O1xuXHQgICAgICAgICAgaWYgKHR5cGVvZiBmID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgICAgICAgIGYoZSwgZWwpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0sXG5cdCAgICAgICAgcGFzc2l2ZVN1cHBvcnRlZChldmVudF90eXBlKSA/IHsgcGFzc2l2ZTogdHJ1ZSB9IDogZmFsc2Vcblx0ICAgICAgKTtcblx0ICAgIH1cblx0ICB9XG5cdH07XG5cdGV4cG9ydHMub24gPSBvbjtcblxuXG4vKioqLyB9KSxcbi8qIDU2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0LyoqXG5cdCAqIOmAmui/h+iiq+WKqOS6i+S7tuS+puWQrOWZqOaPkOWNh+a7muWKqOaAp+iDvVxuXHQgKiBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS93ZWIvdXBkYXRlcy8yMDE2LzA2L3Bhc3NpdmUtZXZlbnQtbGlzdGVuZXJzP2hsPXpoLWNuXG5cdCAqIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL3dlYi90b29scy9saWdodGhvdXNlL2F1ZGl0cy9wYXNzaXZlLWV2ZW50LWxpc3RlbmVycz9obD16aC1jblxuXHQgKi9cblx0dmFyIHN1cHBvcnRlZDtcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXZlbnRfdHlwZSkge1xuXHQgIGlmICh0eXBlb2Ygc3VwcG9ydGVkID09PSAnYm9vbGVhbicpIHtcblx0ICAgIHJldHVybiBzdXBwb3J0ZWQ7XG5cdCAgfSBlbHNlIHtcblx0ICAgIC8vIOS7hXRvdWNo44CBbW91c2XjgIFzY3JvbGzjgIF3aGVlbOebuOWFs+eahOS6i+S7tumcgOimgeWwneivleW8gOWQrydwYXNzaXZlJ1xuXHQgICAgaWYgKCEvdG91Y2h8bW91c2V8c2Nyb2xsfHdoZWVsL2kudGVzdChldmVudF90eXBlKSkge1xuXHQgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICB9XG5cdCAgICBzdXBwb3J0ZWQgPSBmYWxzZTtcblx0ICAgIHRyeSB7XG5cdCAgICAgIHZhciBvcHRpb25zID0gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAncGFzc2l2ZScsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICAgc3VwcG9ydGVkID0gdHJ1ZTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0pO1xuXHQgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdCcsIG51bGwsIG9wdGlvbnMpO1xuXHQgICAgfSBjYXRjaChlcnIpIHt9XG5cdCAgICByZXR1cm4gc3VwcG9ydGVkO1xuXHQgIH1cblx0fTtcblxuXG4vKioqLyB9KSxcbi8qIDU3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIHVt6YCa6YGT77yMYXBsdXPlj5HpgIFodHRw6K+35rGC5pel5b+X5o+S5Lu2XG5cdCAqXG5cdCAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cblx0ICpcblx0ICogQXV0aG9yczpcblx0ICogICDpkrDmmK0gPGNoYW5nbGlhbmcubGNsQHVtZW5nLmNvbT5cblx0ICovXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdC8vIHZhciBtaW5pID0gcmVxdWlyZSgnLi4vbGliX3UvdXRpbHMvbWluaScpO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcblx0ICByZXR1cm4ge1xuXHQgICAgLyoqXG5cdCAgICAgKiBAcGFyYW1zIHtPYmplY3R9IG9wdGlvbnMge1xuXHQgICAgICogICBsb2dDb25maWc6IHtsb2dDb25maWd9XG5cdCAgICAgKiB9XG5cdCAgICAgKi9cblx0XG5cdCAgICBydW46IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgdmFyIE1haW4gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU4KTtcblx0ICAgICAgdmFyIG1haW4gPSBNYWluLmNyZWF0ZSh7XG5cdCAgICAgICAgV1M6IG51bGwsXG5cdCAgICAgICAgQ1RYOiB3aW5kb3csXG5cdCAgICAgICAgQ1RYX1RZUEU6ICdXRUInXG5cdCAgICAgIH0pO1xuXHQgICAgICBtYWluLnJ1bih0aGlzLm9wdGlvbnMpO1xuXHQgICAgfVxuXHQgIH07XG5cdH07XG5cblxuLyoqKi8gfSksXG4vKiA1OCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiB1bemAmumBk++8jOaLpuaIquW5tuaMiWh0dHDljY/orq7lj5HpgIHml6Xlv5dcblx0ICpcblx0ICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuXHQgKlxuXHQgKiBBdXRob3JzOlxuXHQgKiAgIEFhcm9ufOmSsOaYrSA8Y2hhbmdsaWFuZy5sY2xAdW1lbmcuY29tPlxuXHQgKi9cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIGxvZ19jbG91ZCA9IF9fd2VicGFja19yZXF1aXJlX18oNTkpO1xuXHR2YXIgdXRpbEdvbGRsb2cgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHR2YXIgYXBsdXMgPSB1dGlsR29sZGxvZy5nZXRHbG9iYWxWYWx1ZSgnYXBsdXMnKTtcblx0dmFyIG1haW5fYmFzZV9odHRwID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MCk7XG5cdHZhciBib2R5QnVpbGQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYyKTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gbWFpbl9iYXNlX2h0dHAuZXh0ZW5kKHtcblx0ICAvKipcblx0ICAgKiBAcGFyYW1zIHtPYmplY3R9IGRhdGFcblx0ICAgKiAqLyBcblx0ICBoYW5kbGVyTWlkZGxld2FyZTogZnVuY3Rpb24gKGRhdGEpIHtcblx0ICAgIHZhciBwYXJhbXMgPSBsb2dfY2xvdWQuY2hhbmdlVG9PYmooZGF0YS53aGF0X3RvX3NlbmQubG9nZGF0YSk7XG5cdFxuXHQgICAgdmFyIG1ldGhvZCA9IGRhdGEud2hlcmVfdG9fc2VuZC5tZXRob2Q7XG5cdCAgICBcblx0ICAgIHZhciBwb3N0RGF0YSA9IGJvZHlCdWlsZChwYXJhbXMsIGRhdGEudXNlcmRhdGEpO1xuXHRcblx0ICAgIGlmIChtZXRob2QgIT09ICdQT1NUJyB8fCAhISEobmF2aWdhdG9yICYmIG5hdmlnYXRvci5zZW5kQmVhY29uKSkge1xuXHQgICAgICBwb3N0RGF0YSA9IFwiZD1cIiArIGVuY29kZVVSSUNvbXBvbmVudChwb3N0RGF0YSk7XG5cdCAgICB9IFxuXHRcblx0ICAgIGFwbHVzLnNlbmQoZGF0YS53aGVyZV90b19zZW5kLnVybCwgcG9zdERhdGEsIG1ldGhvZCwgZnVuY3Rpb24oKSB7XG5cdCAgICAgIC8vIGNvbnNvbGUubG9nKCdhcGx1cy5zZW5kIHN1Y2Nlc3MgJywgcmVzKTtcblx0ICAgIH0sIGZ1bmN0aW9uKCkge1xuXHQgICAgICAvLyBjb25zb2xlLmxvZygnYXBsdXMuc2VuZCBmYWlsdXJlICcsIGVyclJlcyk7XG5cdCAgICB9KTtcblx0ICB9XG5cdH0pO1xuXG4vKioqLyB9KSxcbi8qIDU5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIHdlYnNvY2tldCB1dGlsc1xuXHQgKlxuXHQgKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG5cdCAqXG5cdCAqIEF1dGhvcnM6XG5cdCAqICAgUmljaGFyZHzosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuXHQgKi9cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIHV0aWxHb2xkbG9nID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0dmFyIGFwbHVzID0gdXRpbEdvbGRsb2cuZ2V0R2xvYmFsVmFsdWUoJ2FwbHVzJyk7XG5cdFxuXHRleHBvcnRzLmdldEtleUluZGV4ID0gZnVuY3Rpb24gKGtleSkge1xuXHQgIHZhciBtYXAgPSB7XG5cdCAgICBwcm90b2NvbDogMSxcblx0ICAgIGV2ZW50X2FyZ3M6IDI1LFxuXHQgIH07XG5cdCAgcmV0dXJuIG1hcFtrZXldO1xuXHR9O1xuXHR2YXIgSEwgPSAnLSc7XG5cdGV4cG9ydHMuY2hhbmdlVG9BcnJheSA9IGZ1bmN0aW9uIChmb3JtYXQsIGRhdGEpIHtcblx0ICB2YXIgdGltZSA9IGRhdGEuZXZlbnRfdGltZXN0YW1wLmdldFRpbWUoKS50b1N0cmluZygpO1xuXHQgIHZhciBjbGllbnQgPSBkYXRhLmNsaWVudCB8fCB7fTtcblx0ICB2YXIgd2lkdGggPSBjbGllbnQuc2NyZWVuV2lkdGggfHwgJyc7XG5cdCAgdmFyIGhlaWdodCA9IGNsaWVudC5zY3JlZW5IZWlnaHQgfHwgJyc7XG5cdFxuXHQgIHZhciBfcmVzb2x1dGlvbiA9IHdpZHRoICsgJyonICsgaGVpZ2h0O1xuXHQgIHZhciByZXNvbHV0aW9uID0gd2lkdGggJiYgaGVpZ2h0ID8gX3Jlc29sdXRpb24gOiBITDtcblx0XG5cdCAgdmFyIFVBID0gY2xpZW50LnVzZXJBZ2VudCB8fCBITDtcblx0ICB2YXIgTEFORyA9IGNsaWVudC5sYW5ndWFnZSB8fCBITDtcblx0ICB2YXIgZ29rZXkgPSBkYXRhLmdva2V5IHx8IHt9O1xuXHQgIHZhciBldmVudF9hcmdzID0gSlNPTi5zdHJpbmdpZnkoZ29rZXkpO1xuXHQgIHZhciBzZGtfaW5mbyA9IEpTT04uc3RyaW5naWZ5KHtcblx0ICAgIGN1c3RvbVNka0lkOiBkYXRhLnNka19pbmZvLmN1c3RvbVNka0lkIHx8ICcnLFxuXHQgICAgcGxhdGZvcm1fdHlwZTogZGF0YS5zZGtfaW5mby5wbGF0Zm9ybVR5cGUgfHwgJycsIC8vd2VjaGF0LCAnYWxpcGF5JywgJ2JhaWR1JywgJ3Rhb2Jhbydcblx0ICB9KTtcblx0ICB2YXIgYXBwS2V5ID0gZGF0YS5hcHBLZXkgfHwgZGF0YS5hcHBJZCB8fCBITDtcblx0ICAvLyDkuJrliqHlupTnlKjnmoTmianlsZXkv6Hmga9cblx0ICB2YXIgYXBwX2V4dF9pbmZvID0gSlNPTi5zdHJpbmdpZnkoe1xuXHQgICAgLy8gYXBwSWQ6IGNsaWVudC5hcHBJZCB8fCAnJ1xuXHQgICAgYXBwSWQ6IGNsaWVudC5hcHBJZCB8fCBhcGx1cy5nZXRNZXRhSW5mbygnbWluaUFwcElkJykgfHwgJydcblx0ICB9KTtcblx0ICB2YXIgc2Vzc2lvbl9hcmdzID0gSlNPTi5zdHJpbmdpZnkoZGF0YS5zZXNzaW9uQXJncyB8fCB7fSk7XG5cdCAgdmFyIGdsb2JhbF9hcmdzID0gSlNPTi5zdHJpbmdpZnkoZGF0YS5nbG9iYWxBcmdzIHx8IHt9KTsgLy8gMjAyMS0wMS0xNEDkuZ3plKHpnIDmsYJcblx0ICB2YXIgYXJnMSA9IGRhdGEuYXJnMSB8fCBkYXRhLmxvZ2tleSB8fCBITDtcblx0ICBpZiAoYXJnMS5pbmRleE9mKCcvJCRfJykgPT09IDApIHtcblx0ICAgIGFyZzEgPSBhcmcxLnN1YnN0cmluZygxLCBhcmcxLmxlbmd0aCk7XG5cdCAgfVxuXHQgIGlmIChkYXRhLmV2ZW50X2NvZGUgPT09ICcyMDAxJyAmJiBkYXRhLnRyYWNrZXJFdmVudENvZGUpIHtcblx0ICAgIGFyZzEgPSBkYXRhLnRyYWNrZXJFdmVudENvZGU7XG5cdCAgfVxuXHQgIHZhciBtb2RlbCA9IFtcblx0ICAgIGRhdGEuY2FjaGUsICAgICAgICAgICAgICAgICAvLyBsb2dfaWQg5qCH6K+G6K+l5p2h5pel5b+X55qE5ZSv5LiASURcblx0ICAgIGRhdGEubWV0aG9kIHx8ICdHRVQnLCAgICAgICAvLyBwcm90b2NvbF9pbmZvIOWNj+iuruS/oeaBryDkuInpgInkuYvkuIDvvJpXUy9QT1NUL0dFVFxuXHQgICAgVUEsICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHVzZXJfYWdlbnQgLSDlrqLmiLfnq69VQeS/oeaBr1xuXHQgICAgcmVzb2x1dGlvbiwgICAgICAgICAgICAgICAgIC8vIHJlc29sdXRpb24g5bGP5bmV5a695bqmKuWxj+W5lemrmOW6piBcblx0ICAgIGFwcEtleSwgICAgICAgICAgICAgICAgICAgICAvLyBhcHBfa2V5XG5cdCAgICBhcHBfZXh0X2luZm8sICAgICAgICAgICAgICAgLy8gYXBwX2V4dF9pbmZvIEFwcOaJqeWxleS/oeaBr1xuXHQgICAgZGF0YS5fZGV2X2lkIHx8IEhMLCAgICAgICAgIC8vIGJpel9kZXZpY2VfaWQg5Lia5Yqh5LiK5Lyg55qE6K6+5aSH6K+G5YirSURcblx0ICAgICd7fScsICAgICAgICAgICAgICAgICAgICAgICAvLyBkZXZpY2VfZXh0X2luZm8g6K6+5aSH5omp5bGV5L+h5oGvKOWPguingeS4i+aWh+ivtOaYjikgVE9ETyDlvoXlrpogay12IGpzb27kuLJcblx0ICAgIGRhdGEuX3VzZXJfbmljayB8fCBITCwgICAgICAvLyBiaXpfdXNlcl9uaWNrIOS4muWKoeerr+eUqOS6juivhuWIq+W3sueZu+W9leeUqOaIt+eahOS8muWRmOagh+ivhiBUT0RPIOS4muWKoeS8oOWFpVxuXHQgICAgZGF0YS5fdXNlcl9pZCB8fCBITCwgICAgICAgIC8vIGJpel91c2VyX2lkIOS4muWKoeerr+eUqOS6juivhuWIq+W3sueZu+W9leeUqOaIt+eahOS8muWRmElEXG5cdCAgICBkYXRhLl9hbm9ueV9pZCB8fCBITCwgICAgICAgLy8gYml6X2Fub255X2lkIOS4muWKoeerr+eUqOS6juivhuWIq+mdnueZu+W9leeUqOaIt+eahOWMv+WQjUlEXG5cdCAgICAne30nLCAgICAgICAgICAgICAgICAgICAgICAgLy8gYml6X3VzZXJfZXh0X2luZm8g5Lia5Yqh56uv5LiK5Lyg55qE5omp5bGV55So5oi35L+h5oGvIFRPRE9cblx0ICAgIExBTkcsICAgICAgICAgICAgICAgICAgICAgICAvLyBsb2NhbGUg5Zyw5Yy6LeivreiogOS/oeaBr1xuXHQgICAgZGF0YS50aW1lWm9uZSB8fCBITCwgICAgICAgIC8vIHRpbWV6b25lIOiuvuWkh+S9v+eUqOeahOaXtuWMulxuXHQgICAgY2xpZW50Lm9zIHx8IEhMLCAgICAgICAgICAgIC8vIG9zIOaTjeS9nOezu+e7nyDlpoLvvJpcIk9TIFhcIlxuXHQgICAgY2xpZW50Lm9zX3ZlcnNpb24gfHwgSEwsICAgIC8vIG9zX3ZlcnNpb24g5pON5L2c57O757uf54mI5pys5Y+3L0J1aWxk56CB77yM5aaC77yaXCIxMF8xNF80XCJcblx0ICAgIHNka19pbmZvLCAgICAgICAgICAgICAgICAgICAvLyBzZGtfaW5mbyBTREvkv6Hmga8o5Y+C6KeB6K+05piOKSBrLXbnu5PmnoTvvIzpnIDop6PmnpAgXCJqc3Zlcj1hcGx1c191LmpzJmx2ZXI9OC4xMS41XCIgVE9ET1xuXHQgICAgZGF0YS5fc2Vzc2lvbl9pZCB8fCBITCwgICAgIC8vIGJpel9zZXNzaW9uX2lkIOS4muWKoeerr+e7tOaKpOeahHNlc3Npb24gaWRcblx0ICAgIGRhdGEuY25hIHx8IEhMLCAgICAgICAgICAgICAvLyB1dGRpZFxuXHQgICAgdGltZSwgICAgICAgICAgICAgICAgICAgICAgIC8vIGV2ZW50X3RpbWVzdGFtcCDkuovku7bml6Xlv5fnlJ/miJDml7bpl7Qo5pys5ZywKSwgcHbkuLrpobXpnaLov5vlhaXml7bpl7Rcblx0ICAgIGVuY29kZVVSSUNvbXBvbmVudChkYXRhLnVybCkgfHwgSEwsICAgICAgICAgICAgLy8gcGFnZSDlrozmlbTnmoRVUkzmiJbogIVTY3JlZW4gTmFtZVxuXHQgICAgZGF0YS5ldmVudF9jb2RlIHx8IEhMLCAgICAgIC8vIGV2ZW50X2lkIOS6i+S7tuexu+Wei0lEIFRPRE8gQOS6keadsFxuXHQgICAgZW5jb2RlVVJJQ29tcG9uZW50KGRhdGEucHJlKSB8fCBITCwgICAgICAgICAgICAvLyByZWZlcl9wYWdlIOadpea6kHBhZ2Vcblx0ICAgIGdsb2JhbF9hcmdzLCAgICAgICAgICAgICAgICAvLyBnbG9iYWxfYXJncyDnlKjmiLforr7nva7nmoTlhajlsYDlj4LmlbAsIOeUn+WRveWRqOacn+e6p+WIq1xuXHQgICAgc2Vzc2lvbl9hcmdzLCAgICAgICAgICAgICAgIC8vIHNlc3Npb25fYXJncyDnlKjmiLforr7nva7nmoRTZXNzaW9u57qn5Y+C5pWwLOi3qFNlc3Npb27muIXnqbpcblx0ICAgIGV2ZW50X2FyZ3MsICAgICAgICAgICAgICAgICAvLyBldmVudF9hcmdzIOeUqOaIt+iuvue9rueahFBW57qn5Y+C5pWwLOi3qFBW5riF56m6IGstdue7k+aehCBA5LqR5p2wXG5cdCAgICBhcmcxLCAgICAgICAgICAgICAgICAgICAgICAgLy8gYXJnMSDnlKjmiLfmianlsZXpooTnlZlcblx0ICAgIGRhdGEuc2RrX2luZm8uanN2ZXIsICAgICAgICAvLyBUT0RPIHNka190eXBlIChhcGx1c19taW5pLmpzKSByZXNlcnZlXzEg5LqL5Lu25bGe5oCn77yaUFbnuqfnmoTml6Xlv5flj4LmlbAs6LeoUFboh6rliqjmuIXnqbrvvIzov5nph4zmmK9qc+Wkp+eJiOacrOWPt++8jGFwbHVzLmpzIHx8IGFwbHVzX21pbmkuanNcblx0ICAgIGRhdGEuc2RrX2luZm8ubHZlciwgICAgICAgICAvLyBzZGtfdmVyc2lvbiAgU0RL54mI5pys77yM6L+Z6YeM5a+55bqUYXBsdXNKU+eahOWFt+S9k+eJiOacrOWPt++8jOWmgjEuMC4wXG5cdCAgICBjbGllbnQuYXBwVmVyc2lvbiB8fCAnZGV2dG9vbHMnIHx8IEhMLCAgICAgICAgIC8vIGFwcF92ZXJzaW9uXG5cdCAgICBjbGllbnQuYnJhbmQgfHwgSEwsICAgICAgICAgLy8gYnJhbmQg5omL5py65ZOB54mMXG5cdCAgICBITCwgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FycmllciDov5DokKXllYbvvIjliY3nq6/kuZ/lj5bkuI3liLDvvIlcblx0ICAgIGNsaWVudC5uZXR3b3JrVHlwZSB8fCBITCwgICAvLyBhY2Nlc3Mg572R57uc57G75Z6LXG5cdCAgXTtcblx0ICAvLyBjb25zb2xlLmxvZyhtb2RlbCk7XG5cdCAgcmV0dXJuIG1vZGVsO1xuXHR9O1xuXHRcblx0ZXhwb3J0cy5jaGFuZ2VUb09iaiA9IGZ1bmN0aW9uKGRhdGEpIHtcblx0ICB2YXIgdGltZSA9IGRhdGEuZXZlbnRfdGltZXN0YW1wLmdldFRpbWUoKS50b1N0cmluZygpO1xuXHQgIHZhciBjbGllbnQgPSBkYXRhLmNsaWVudCB8fCB7fTtcblx0XG5cdCAgdmFyIFVBID0gY2xpZW50LnVzZXJBZ2VudCB8fCBITDtcblx0ICB2YXIgTEFORyA9IGNsaWVudC5sYW5ndWFnZSB8fCBITDtcblx0ICB2YXIgZ29rZXkgPSBkYXRhLmdva2V5IHx8IHt9O1xuXHQgIHZhciBldmVudF9hcmdzID0gSlNPTi5zdHJpbmdpZnkoZ29rZXkpO1xuXHQgIHZhciBzZGtfaW5mbyA9IEpTT04uc3RyaW5naWZ5KHtcblx0ICAgIGN1c3RvbVNka0lkOiBkYXRhLnNka19pbmZvLmN1c3RvbVNka0lkIHx8ICcnLFxuXHQgICAgcGxhdGZvcm1fdHlwZTogZGF0YS5zZGtfaW5mby5wbGF0Zm9ybVR5cGUgfHwgJycsIC8vd2VjaGF0LCAnYWxpcGF5JywgJ2JhaWR1JywgJ3Rhb2Jhbydcblx0ICB9KTtcblx0ICBcblx0ICB2YXIgYXBwS2V5ID0gZGF0YS5hcHBLZXkgfHwgZGF0YS5hcHBJZCB8fCBITDtcblx0ICAvLyDkuJrliqHlupTnlKjnmoTmianlsZXkv6Hmga9cblx0ICB2YXIgYXBwX2V4dF9pbmZvID0gSlNPTi5zdHJpbmdpZnkoe1xuXHQgICAgLy8gYXBwSWQ6IGNsaWVudC5hcHBJZCB8fCAnJ1xuXHQgICAgYXBwSWQ6IGNsaWVudC5hcHBJZCB8fCBhcGx1cy5nZXRNZXRhSW5mbygnbWluaUFwcElkJykgfHwgJydcblx0ICB9KTtcblx0ICB2YXIgc2Vzc2lvbl9hcmdzID0gSlNPTi5zdHJpbmdpZnkoZGF0YS5zZXNzaW9uQXJncyB8fCB7fSk7XG5cdCAgdmFyIGdsb2JhbF9hcmdzID0gSlNPTi5zdHJpbmdpZnkoZGF0YS5nbG9iYWxBcmdzIHx8IHt9KTsgLy8gMjAyMS0wMS0xNEDkuZ3plKHpnIDmsYJcblx0ICB2YXIgYXJnMSA9IGRhdGEuYXJnMSB8fCBkYXRhLmxvZ2tleSB8fCBITDtcblx0ICBpZiAoYXJnMS5pbmRleE9mKCcvJCRfJykgPT09IDApIHtcblx0ICAgIGFyZzEgPSBhcmcxLnN1YnN0cmluZygxLCBhcmcxLmxlbmd0aCk7XG5cdCAgfVxuXHQgIGlmIChkYXRhLmV2ZW50X2NvZGUgPT09ICcyMDAxJyAmJiBkYXRhLnRyYWNrZXJFdmVudENvZGUpIHtcblx0ICAgIGFyZzEgPSBkYXRhLnRyYWNrZXJFdmVudENvZGU7XG5cdCAgfVxuXHRcblx0ICB2YXIgT2JqID0ge307XG5cdCAgT2JqLnBsYXRmb3JtID0gIGRhdGEuc2RrX2luZm8ucGxhdGZvcm1UeXBlIHx8ICcnO1xuXHQgIE9iai5zZGtfdHlwZSA9IE9iai5wbGF0Zm9ybSA/IE9iai5wbGF0Zm9ybSArICdtcCcgOiAnJztcblx0ICBPYmouYXBwa2V5ID0gYXBwS2V5O1xuXHQgIE9iai5zZGtfdmVyc2lvbiA9IGRhdGEuc2RrX2luZm8ubHZlcjsgLy8gc2RrX3ZlcnNpb24gIFNES+eJiOacrO+8jOi/memHjOWvueW6lGFwbHVzSlPnmoTlhbfkvZPniYjmnKzlj7fvvIzlpoIxLjAuMFxuXHQgIHZhciBtb2Rlcm5PUyA9IFVBLm1hdGNoKC9pcGhvbmV8aXBhZHxhbmRyb2lkfG1hY2ludG9zaC9pKTtcblx0ICBPYmouZGV2aWNlX3R5cGUgPSBtb2Rlcm5PU1swXSB8fCAnJztcblx0ICBPYmoub3MgPSBjbGllbnQub3MgfHwgJyc7XG5cdCAgT2JqLm9zX3ZlcnNpb24gPSBjbGllbnQub3NfdmVyc2lvbiB8fCAnJztcblx0ICBPYmouanN2ZXIgPSBkYXRhLnNka19pbmZvLmpzdmVyOyAvLyBzZGtfdHlwZSAoYXBsdXNfbWluaS5qcykgcmVzZXJ2ZV8xIOS6i+S7tuWxnuaAp++8mlBW57qn55qE5pel5b+X5Y+C5pWwLOi3qFBW6Ieq5Yqo5riF56m677yM6L+Z6YeM5pivanPlpKfniYjmnKzlj7fvvIxhcGx1cy5qcyB8fCBhcGx1c19taW5pLmpzIHx8IGFwbHVzX2Nsb3VkLmpzO1xuXHQgIC8vIE9iai5kZXZpY2VfbW9kZWwgPSBVQTsgLy8gc2VydmVyIOerr+mAmui/hyBIVFRQIHJlcXVlc3QgaGVhZGVyIOiOt+WPllxuXHQgIE9iai5waXhlbF9yYXRpbyA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIHx8ICcnO1xuXHQgIHZhciB3ID0gTWF0aC5yb3VuZChjbGllbnQuc2NyZWVuV2lkdGggKiAod2luZG93LmRldmljZVBpeGVsUmF0aW8gfHwgMSkpO1xuXHQgIHZhciBoID0gTWF0aC5yb3VuZChjbGllbnQuc2NyZWVuSGVpZ2h0ICogKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIHx8IDEpKTtcblx0ICBPYmoucmVzb2x1dGlvbiA9IHcgPiBoID8gdyArICcqJyArIGggOiBoICsgJyonICsgdztcblx0ICBPYmoubGFuZ3VhZ2UgPSBMQU5HO1xuXHQgIE9iai5hcHBfdmVyc2lvbiA9IGFwbHVzLmdldE1ldGFJbmZvKCdhcHBWZXJzaW9uJykgfHwgJ2RldnRvb2xzJztcblx0ICAvLyBla3Yg6ZyA6KaB5a2X5q61XG5cdCAgT2JqLmFyZzEgPSBhcmcxO1xuXHQgIE9iai5ldmVudF9hcmdzID0gZXZlbnRfYXJnczsgLy9ldmVudF9hcmdzIOeUqOaIt+iuvue9rueahFBW57qn5Y+C5pWwLOi3qFBW5riF56m6IGstdue7k+aehCBA5LqR5p2wXG5cdCAgT2JqLmV2ZW50X2NvZGUgPSBkYXRhLmV2ZW50X2NvZGUgfHwgJyc7XG5cdCAgT2JqLnNlc3Npb25BcmdzID0gc2Vzc2lvbl9hcmdzOyAvLyBzZXNzaW9uX2FyZ3Mg55So5oi36K6+572u55qEU2Vzc2lvbue6p+WPguaVsCzot6hTZXNzaW9u5riF56m6XG5cdCAgT2JqLmdsb2JhbF9hcmdzID0gZ2xvYmFsX2FyZ3M7IC8vIGdsb2JhbF9hcmdzIOeUqOaIt+iuvue9rueahOWFqOWxgOWPguaVsCwg55Sf5ZG95ZGo5pyf57qn5YirXG5cdCAgT2JqLmFwcF9leHRfaW5mbyA9IGFwcF9leHRfaW5mbzsgLy8gYXBwX2V4dF9pbmZvIEFwcOaJqeWxleS/oeaBr1xuXHQgIE9iai50aW1lID0gdGltZTsgLy9ldmVudF90aW1lc3RhbXAg5LqL5Lu25pel5b+X55Sf5oiQ5pe26Ze0KOacrOWcsCksIHB25Li66aG16Z2i6L+b5YWl5pe26Ze0XG5cdCAgT2JqLmNuYSA9IGRhdGEuY25hIHx8ICcnO1xuXHQgIE9iai51cmwgPSBkYXRhLnVybCB8fCAnJztcblx0ICBPYmoucHJlID0gZGF0YS5wcmUgfHwgJyc7XG5cdCAgT2JqLm1ldGhvZCA9IGRhdGEubWV0aG9kIHx8ICdHRVQnO1xuXHQgIE9iai5sb2dfaWQgPSBkYXRhLmNhY2hlIHx8ICcnOyAvLyBsb2dfaWQg5qCH6K+G6K+l5p2h5pel5b+X55qE5ZSv5LiASURcblx0ICBPYmouc2RrX2luZm8gPSBzZGtfaW5mbztcblx0XG5cdCAgdmFyIGV4ZGF0YSA9IGFwbHVzLmdldE1ldGFJbmZvKCdhcGx1cy1leGRhdGEnKTtcblx0ICBpZiAoZXhkYXRhICYmIGV4ZGF0YS5hcGx1c190cmFja19kZWJ1Z19pZCkge1xuXHQgICAgT2JqLnRyYWNrX2RlYnVnX2lkID0gZXhkYXRhLmFwbHVzX3RyYWNrX2RlYnVnX2lkO1xuXHQgIH1cblx0ICByZXR1cm4gT2JqO1xuXHR9O1xuXG4vKioqLyB9KSxcbi8qIDYwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIOaLpuaIquW5tuaMiWh0dHDljY/orq7lj5HpgIHml6Xlv5dcblx0ICpcblx0ICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuXHQgKlxuXHQgKiBBdXRob3JzOlxuXHQgKiAgIFJpY2hhcmR86LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cblx0ICovXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciBCYXNlID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSk7XG5cdC8vIHZhciBsb2dfY2xvdWQgPSByZXF1aXJlKCcuL2xvZ19jbG91ZCcpO1xuXHR2YXIgdXRpbEdRID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MSk7XG5cdHZhciBhcGx1c1N0YXRpYyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cdC8vIHZhciB1dGlsR29sZGxvZyA9IHJlcXVpcmUoJ0B1dGlscy91dGlsR29sZGxvZycpO1xuXHQvLyB2YXIgYXBsdXMgPSB1dGlsR29sZGxvZy5nZXRHbG9iYWxWYWx1ZSgnYXBsdXMnKTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gQmFzZS5leHRlbmQoe1xuXHRcblx0ICBzdWJzY3JpYmVMb2dzOiBmdW5jdGlvbiAoYWN0aW9uLCBjYWxsYmFjaykge1xuXHQgICAgdXRpbEdRLnB1c2hJbnRvR29sZGxvZ1F1ZXVlKGFwbHVzU3RhdGljLlNVQlNDUklCRSwgW2FjdGlvbiwgZnVuY3Rpb24gKG9yaURhdGFzKSB7XG5cdCAgICAgIGlmIChvcmlEYXRhcy5zdGF0dXMgPT09IGFwbHVzU3RhdGljLkNPTVBMRVRFKSB7XG5cdCAgICAgICAgY2FsbGJhY2sob3JpRGF0YXMpO1xuXHQgICAgICB9XG5cdCAgICB9XSk7XG5cdCAgfSxcblx0XG5cdCAgZ2V0TG9naWNTeW1ib2w6IGZ1bmN0aW9uICgpIHtcblx0ICAgIHJldHVybiB0aGlzLmZvcm1hdCA9PT0gJ0FMSScgPyAnJicgOiAnfHwnO1xuXHQgIH0sXG5cdFxuXHQgIC8qKlxuXHQgICAqIOWcqOWtkOexu+S4reWunueOsFxuXHQgICAqIEBwYXJhbXMge09iamVjdH0gZGF0YVxuXHQgICAqL1xuXHQgIGhhbmRsZXJNaWRkbGV3YXJlOiBmdW5jdGlvbiAoKSB7fSxcblx0ICBcblx0XG5cdCAgd2F0Y2hMT0c6IGZ1bmN0aW9uICgpIHtcblx0ICAgIHZhciBfc2VsZiA9IHRoaXM7XG5cdCAgICBcblx0ICAgIC8vIOiuoumYhXB25LqL5Lu2XG5cdCAgICBfc2VsZi5zdWJzY3JpYmVMb2dzKGFwbHVzU3RhdGljLk1XX0NIQU5HRV9QViwgZnVuY3Rpb24gKGRhdGEpIHtcblx0ICAgICAgX3NlbGYuaGFuZGxlck1pZGRsZXdhcmUoZGF0YSwgJ3B2Jyk7XG5cdCAgICB9KTtcblx0XG5cdCAgICAvLyDorqLpmIVoamxqL2FwbHVz5LqL5Lu2XG5cdCAgICBfc2VsZi5zdWJzY3JpYmVMb2dzKGFwbHVzU3RhdGljLk1XX0NIQU5HRV9ISkxKLCBmdW5jdGlvbiAoZGF0YSkge1xuXHQgICAgICBfc2VsZi5oYW5kbGVyTWlkZGxld2FyZShkYXRhLCBhcGx1c1N0YXRpYy5BUExVUyk7XG5cdCAgICB9KTtcblx0ICB9LFxuXHRcblx0ICBydW46IGZ1bmN0aW9uICgpIHtcblx0ICAgIHRoaXMud2F0Y2hMT0coKTtcblx0ICB9XG5cdH0pO1xuXG5cbi8qKiovIH0pLFxuLyogNjEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogYWxpbG9nL3Mvc3JjL2xpYl91L3V0aWxzL3V0aWxHUS5qc1xuXHQgKiDmk43kvZxhcGx1c19xdWV1ZeeahOW3peWFt+exu1xuXHQgKlxuXHQgKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG5cdCAqXG5cdCAqIEF1dGhvcnM6XG5cdCAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cblx0ICovXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciB1dGlsR29sZGxvZyA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdFxuXHRleHBvcnRzLnB1c2hJbnRvR29sZGxvZ1F1ZXVlID0gZnVuY3Rpb24gKGFjdGlvbiwgYXJncykge1xuXHQgIHZhciBhcGx1c19xdWV1ZSA9IHV0aWxHb2xkbG9nLmdldEdsb2JhbFZhbHVlKCdhcGx1c19xdWV1ZScpO1xuXHQgIHZhciBhcGx1cyA9IHV0aWxHb2xkbG9nLmdldEdsb2JhbFZhbHVlKCdhcGx1cycpO1xuXHQgIHZhciBuYW1lcyA9IGFjdGlvbi5zcGxpdCgnLicpO1xuXHQgIHZhciBhcGx1c18xID0gYXBsdXNbbmFtZXNbMV1dO1xuXHQgIHZhciBhcGx1c18yID0gYXBsdXNfMSA/IGFwbHVzXzFbbmFtZXNbMl1dIDogbnVsbDtcblx0XG5cdCAgaWYgKGFwbHVzICYmIG5hbWVzLmxlbmd0aCA9PT0gMiAmJiBhcGx1c18xKSB7XG5cdCAgICBhcGx1c18xLmFwcGx5KGFwbHVzLCBhcmdzKTtcblx0ICB9IGVsc2UgaWYgKG5hbWVzLmxlbmd0aCA9PT0gMyAmJiBhcGx1c18yKSB7XG5cdCAgICBhcGx1c18yLmFwcGx5KGFwbHVzXzEsIGFyZ3MpOyAgXG5cdCAgfSBlbHNlIHtcblx0ICAgIGFwbHVzX3F1ZXVlLnB1c2goe1xuXHQgICAgICBhY3Rpb246IGFjdGlvbixcblx0ICAgICAgYXJndW1lbnRzOiBhcmdzXG5cdCAgICB9KTtcblx0ICB9XG5cdH07XG5cblxuLyoqKi8gfSksXG4vKiA2MiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiB1bSDpgJrpgZPvvIzmlLbmlbDor7fmsYLkuIrmiqXmlbDmja5cblx0ICpcblx0ICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuXHQgKlxuXHQgKiBBdXRob3JzOlxuXHQgKiAgIEFhcm9ufOmSsOaYrSA8Y2hhbmdsaWFuZy5sY2xAdW1lbmcuY29tPlxuXHQgKi9cblx0dmFyIGNsb25lRGVlcCA9IF9fd2VicGFja19yZXF1aXJlX18oNjMpO1xuXHR2YXIgYnVpbGRIZWFkZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY0KTtcblx0dmFyIHV0aWxHb2xkbG9nID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0dmFyIHV0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NSk7XG5cdHZhciBtYW5nbGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY3KTtcblx0dmFyIGJhc2U2NCA9IF9fd2VicGFja19yZXF1aXJlX18oNjgpO1xuXHR2YXIgYXBsdXNTdGF0aWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXHR2YXIgYXBsdXMgPSB1dGlsR29sZGxvZy5nZXRHbG9iYWxWYWx1ZSgnYXBsdXMnKTtcblx0dmFyIGpzb25VdGlsID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2OSk7XG5cdHZhciBjcmVhdGVFdmVudCA9IF9fd2VicGFja19yZXF1aXJlX18oNzApO1xuXHQvKipcblx0ICog5ZCMdW3pgJrpgZPniYjmnKznmoTlsI/nqIvluo/mlLbmlbDkuIrmiqXmlbDmja7kvZPnm7jmr5TvvIzkuI3pnIDopoEgc2Vzc2lvbu+8jHNlc3Npb24g55Sx5pyN5Yqh56uv6Kej5YazXG5cdCAqIOW5tuS4lCBla3Yg5rKh5pyJ57yT5a2Y5py65Yi2XG5cdCovXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxvZ2RhdGEsIHVzZXJkYXRhKSB7XG5cdCAgaWYgKCFsb2dkYXRhIHx8ICF1c2VyZGF0YSB8fCB1dGlscy5jaGVja0VtcHR5T2JqKGxvZ2RhdGEpIHx8IHV0aWxzLmNoZWNrRW1wdHlPYmoodXNlcmRhdGEpKSB7XG5cdCAgICByZXR1cm4ge307XG5cdCAgfVxuXHQgIHZhciBkYXRhID0ge307XG5cdCAgdmFyIGhlYWRlciA9IGNsb25lRGVlcChidWlsZEhlYWRlcihsb2dkYXRhKSk7XG5cdCAgdmFyIGFfYW5vbnlfaWQgPSBhcGx1cy5nZXRNZXRhSW5mbyhhcGx1c1N0YXRpYy5fQU5PTllfSUQpIHx8IGxvZ2RhdGEuY25hO1xuXHQgIGlmIChhX2Fub255X2lkKSB7XG5cdCAgICBoZWFkZXIuYW5vbnlfaWQgPSBhX2Fub255X2lkO1xuXHQgICAgaGVhZGVyLmlkX3RyYWNraW5nLmFub255X2lkID0gYV9hbm9ueV9pZDtcblx0ICB9XG5cdCAgLy8gZml4IGlkdHJhY2luZyBidWcsIGlmIHVzZXIgZG9uJ3Qgc2V0IF9kZXZfaWRcblx0ICB2YXIgYV9kZXZfaWQgPSBhcGx1cy5nZXRNZXRhSW5mbygnX2Rldl9pZCcpIHx8IGxvZ2RhdGEuY25hO1xuXHQgIGlmIChhX2Rldl9pZCkge1xuXHQgICAgaGVhZGVyLmRldl9pZCA9IGFfZGV2X2lkO1xuXHQgICAgaGVhZGVyLmlkX3RyYWNraW5nLmRldl9pZCA9IGFfZGV2X2lkO1xuXHQgIH1cblx0ICB2YXIgZWt2ID0gbnVsbDtcblx0ICBcblx0ICBpZiAobG9nZGF0YS5ldmVudF9jb2RlID09PSAnMjAwMScpIHtcblx0ICAgIGVrdiA9IF9idWlsZFBWRXZlbnQobG9nZGF0YSwgdXNlcmRhdGEpO1xuXHQgIH0gZWxzZSB7XG5cdCAgICBla3YgPSBfYnVpbGRISkxKRXZlbnQobG9nZGF0YSwgdXNlcmRhdGEpO1xuXHQgIH1cblx0ICBpZiAoZWt2KSB7XG5cdCAgICBkYXRhID0ge1xuXHQgICAgICBhbmFseXRpY3M6IHtcblx0ICAgICAgICBla3ZzOiB7XCJzZXNzaW9uaWRcIiA6IFtjbG9uZURlZXAoZWt2KV19XG5cdCAgICAgIH1cblx0ICAgIH07XG5cdCAgfVxuXHRcblx0ICB2YXIgdXNlcklkID0gYXBsdXMuZ2V0TWV0YUluZm8oYXBsdXNTdGF0aWMuX1VTRVJfSUQpO1xuXHQgIGlmICh1c2VySWQgJiYgZGF0YS5hbmFseXRpY3MpIHtcblx0ICAgIGRhdGEuYW5hbHl0aWNzLmFjdGl2ZV91c2VyID0ge1xuXHQgICAgICBwdWlkOiB1c2VySWQsXG5cdCAgICAgIHByb3ZpZGVyOiBhcGx1cy5nZXRNZXRhSW5mbygnX3VzZXJfbmljaycpXG5cdCAgICB9O1xuXHQgIH1cblx0XG5cdCAgZGF0YS5oZWFkZXIgPSB1dGlscy5hc3NpZ24oaGVhZGVyLCBkYXRhLmhlYWRlciwge1xuXHQgICAgdHM6IERhdGUubm93KCksXG5cdCAgICB0cmFjZUlkOiB1dGlscy5nZXRSYW5kb21TdHIoMTApICsgRGF0ZS5ub3coKSArIHV0aWxzLmdldFJhbmRvbVN0cig5KVxuXHQgIH0pO1xuXHQgIHZhciBtYW5nbGVEYXRhID0gbWFuZ2xlKGRhdGEpO1xuXHQgIHZhciByZXF1ZXN0RGF0YSA9IGpzb25VdGlsLnN0cmluZ2Z5KG1hbmdsZURhdGEpO1xuXHRcblx0ICByZXR1cm4gYmFzZTY0LmVuY29kZShyZXF1ZXN0RGF0YSk7XG5cdH07XG5cdFxuXHRmdW5jdGlvbiBfYnVpbGRISkxKRXZlbnQobG9nZGF0YSwgdXNlcmRhdGEpIHtcblx0ICB0cnkge1xuXHQgICAgdmFyIGV2ZW50QXJncyA9IHt9O1xuXHQgICAgdmFyIGdwID0gYXBsdXMuZ2V0TWV0YUluZm8oJ2dsb2JhbHByb3BlcnR5Jyk7XG5cdCAgICBpZiAoZ3ApIHtcblx0ICAgICAgZXZlbnRBcmdzLmdwID0gZ3A7XG5cdCAgICB9XG5cdFxuXHQgICAgaWYgKGxvZ2RhdGEudXJsICYmIGxvZ2RhdGEudXJsLmxlbmd0aCA+IDApIHtcblx0ICAgICAgdmFyIHVybEFyciA9IGxvZ2RhdGEudXJsLnNwbGl0KCc/Jyk7XG5cdCAgICAgIGV2ZW50QXJncy5wYWdlX25hbWUgPSB1cmxBcnJbMF0gfHwgJy0nO1xuXHQgICAgICBldmVudEFyZ3MudXJsX3AgPSB1cmxBcnJbMV0gfHwgJy0nO1xuXHQgICAgfVxuXHRcblx0ICAgIGlmIChsb2dkYXRhLnByZSAmJiBsb2dkYXRhLnByZS5sZW5ndGggPiAwKSB7XG5cdCAgICAgIHZhciBwcmVVcmxBcnIgPSBsb2dkYXRhLnByZS5zcGxpdCgnPycpO1xuXHQgICAgICBldmVudEFyZ3MucmVmX3BhZ2VfbmFtZSA9IHByZVVybEFyclswXSB8fCAnLSc7XG5cdCAgICAgIGV2ZW50QXJncy5yZWZlcl9wID0gcHJlVXJsQXJyWzFdIHx8ICctJztcblx0ICAgIH1cblx0XG5cdCAgICBldmVudEFyZ3MuaXNfYXV0byA9IGxvZ2RhdGEuaXNfYXV0byA/IDEgOiAwO1xuXHRcblx0ICAgIHZhciBnb2tleSA9IHVzZXJkYXRhLmdva2V5O1xuXHQgICAgLy8gY29udmVydCB1cmwgcGFyYW1ldGVyIHRvIGEgamF2YXNjcmlwdCBvYmplY3Rcblx0ICAgIHZhciBwcm9wZXJ0aWVzO1xuXHQgICAgaWYgKHR5cGVvZiBnb2tleSA9PT0gJ3N0cmluZycpIHtcblx0ICAgICAgcHJvcGVydGllcyA9IEpTT04ucGFyc2UoJ3tcIicgKyBnb2tleS5yZXBsYWNlKC9cXCYvZywgJ1wiLFwiJykucmVwbGFjZSgvXFw9L2csJ1wiOlwiJykgKyAnXCJ9JywgZnVuY3Rpb24oa2V5LCB2YWx1ZSkgeyBcblx0ICAgICAgICByZXR1cm4ga2V5ID09PSBcIlwiID8gdmFsdWUgOiBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpOyBcblx0ICAgICAgfSk7XG5cdCAgICB9IGVsc2UgaWYgKHR5cGVvZiBnb2tleSA9PT0gJ29iamVjdCcpIHtcblx0ICAgICAgcHJvcGVydGllcyA9IGdva2V5O1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgcHJvcGVydGllcyA9IHt9O1xuXHQgICAgfVxuXHQgICAgdmFyIGV2ZW50ID0gY3JlYXRlRXZlbnQodXNlcmRhdGEubG9na2V5LCBPYmplY3QuYXNzaWduKHt9LCBldmVudEFyZ3MsIHsgY3VzcDogcHJvcGVydGllc30gKSk7XG5cdCAgICByZXR1cm4gZXZlbnQ7XG5cdCAgfSBjYXRjaCAoZSkgeyBcblx0ICAgIGNvbnNvbGUud2FybignSlNPTiBwYXJzZSBmYWlsZWQnLCBlKTtcblx0ICAgIHJldHVybiB7fTtcblx0ICB9XG5cdH07XG5cdFxuXHRmdW5jdGlvbiBfYnVpbGRQVkV2ZW50KGxvZ2RhdGEsIHVzZXJkYXRhKSB7XG5cdCAgdmFyIGdwID0gYXBsdXMuZ2V0TWV0YUluZm8oJ2dsb2JhbHByb3BlcnR5Jyk7XG5cdCAgdmFyIHB2YXJncyA9IHt9O1xuXHQgIHB2YXJncy5yID0gbG9nZGF0YS5hcmcxO1xuXHQgIGlmIChncCkge1xuXHQgICAgcHZhcmdzLmdwID0gZ3A7XG5cdCAgfVxuXHQgIFxuXHQgIGlmIChsb2dkYXRhLnVybCAmJiBsb2dkYXRhLnVybC5sZW5ndGggPiAwKSB7XG5cdCAgICB2YXIgdXJsQXJyID0gbG9nZGF0YS51cmwuc3BsaXQoJz8nKTtcblx0ICAgIHB2YXJncy5wYWdlX25hbWUgPSB1cmxBcnJbMF0gfHwgJy0nO1xuXHQgICAgcHZhcmdzLnVybF9wID0gdXJsQXJyWzFdIHx8ICctJztcblx0ICB9XG5cdFxuXHQgIGlmIChsb2dkYXRhLnByZSAmJiBsb2dkYXRhLnByZS5sZW5ndGggPiAwKSB7XG5cdCAgICB2YXIgcHJlVXJsQXJyID0gbG9nZGF0YS5wcmUuc3BsaXQoJz8nKTtcblx0ICAgIHB2YXJncy5yZWZfcGFnZV9uYW1lID0gcHJlVXJsQXJyWzBdIHx8ICctJztcblx0ICAgIHB2YXJncy5yZWZlcl9wID0gcHJlVXJsQXJyWzFdIHx8ICctJztcblx0ICB9XG5cdFxuXHQgIHB2YXJncy5pc19hdXRvID0gbG9nZGF0YS5pc19hdXRvID8gMSA6IDA7XG5cdFxuXHQgIHZhciBhcmdzID0gdXNlcmRhdGE7XG5cdCAgdmFyIHByb3BlcnRpZXMgPSB1dGlscy5kZWxldGVJbmZvKGFyZ3MsIFsnX2Fub255X2lkJywgJ19kZXZfaWQnLCAnX3Nlc3Npb25faWQnLCAnX3VzZXJfaWQnLCAnX3VzZXJfbmljaycsICdfc3JjX3Bvc19pZCddKTtcblx0XG5cdCAgcmV0dXJuIGNyZWF0ZUV2ZW50KGFwbHVzU3RhdGljLlBBR0VfU1RBUlQsIE9iamVjdC5hc3NpZ24oe30sIHB2YXJncywgeyBjdXNwOiBwcm9wZXJ0aWVzIH0pKTtcblx0fVxuXG5cbi8qKiovIH0pLFxuLyogNjMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQvKipcblx0ICog5YWL6ZqG5LiA5Liqb2JqZWN0XG5cdCAqL1xuXHRmdW5jdGlvbiBjbG9uZURlZXAgKG9iaikge1xuXHQgIHZhciBzdHI7XG5cdCAgdmFyIG5ld29iaiA9IEFycmF5LmlzQXJyYXkob2JqKSA/IFtdIDoge307IC8vRml4IG9iai5jb250cnVjdG9yIHR5cGVFcnJvciBjb25zdHJ1Y3RvciB1bmRlZmluZWRcblx0ICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcblx0ICAgIHJldHVybjtcblx0ICB9IGVsc2UgaWYgKEpTT04gJiYgSlNPTi5wYXJzZSkge1xuXHQgICAgc3RyID0gSlNPTi5zdHJpbmdpZnkob2JqKTsgLy/ns7vliJfljJblr7nosaFcblx0ICAgIG5ld29iaiA9IEpTT04ucGFyc2Uoc3RyKTsgLy/ov5jljp9cblx0ICB9IGVsc2Uge1xuXHQgICAgZm9yICh2YXIgaSBpbiBvYmopIHtcblx0ICAgICAgbmV3b2JqW2ldID0gdHlwZW9mIG9ialtpXSA9PT0gJ29iamVjdCcgPyBjbG9uZURlZXAob2JqW2ldKSA6IG9ialtpXTtcblx0ICAgIH1cblx0ICB9XG5cdCAgcmV0dXJuIG5ld29iajtcblx0fVxuXHRtb2R1bGUuZXhwb3J0cyA9IGNsb25lRGVlcDtcblxuLyoqKi8gfSksXG4vKiA2NCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZGF0YSkge1xuXHQgIHZhciBoZWFkZXIgPSB7fTtcblx0ICBoZWFkZXIuc2RrX3R5cGUgPSBkYXRhLnNka190eXBlO1xuXHQgIGhlYWRlci5hcHBrZXkgPSBkYXRhLmFwcGtleTtcblx0ICBoZWFkZXIuc2RrX3ZlcnNpb24gPSBkYXRhLnNka192ZXJzaW9uO1xuXHQgIGhlYWRlci5kZXZpY2VfdHlwZSA9IGRhdGEuZGV2aWNlX3R5cGU7XG5cdCAgaGVhZGVyLm9zID0gZGF0YS5vcztcblx0ICBoZWFkZXIub3NfdmVyc2lvbiA9IGRhdGEub3NfdmVyc2lvbjtcblx0ICBoZWFkZXIucGxhdGZvcm0gPSBkYXRhLnBsYXRmb3JtO1xuXHQgIGhlYWRlci5waXhlbF9yYXRpbyA9IGRhdGEucGl4ZWxfcmF0aW87XG5cdCAgaGVhZGVyLnJlc29sdXRpb24gPSBkYXRhLnJlc29sdXRpb247XG5cdCAgaGVhZGVyLmxhbmd1YWdlID0gZGF0YS5sYW5ndWFnZTtcblx0ICBoZWFkZXIuYXBwX3ZlcnNpb24gPSBkYXRhLmFwcF92ZXJzaW9uO1xuXHQgIGhlYWRlci5qc3ZlciA9IGRhdGEuanN2ZXI7XG5cdCAgaGVhZGVyLnByZSA9IGRhdGEucHJlO1xuXHQgIGhlYWRlci51cmwgPSBkYXRhLnVybDtcblx0ICBoZWFkZXIuZGVidWdJZCA9IGRhdGEudHJhY2tfZGVidWdfaWQ7XG5cdCAgaGVhZGVyLmlkX3RyYWNraW5nID0ge307XG5cdCAgcmV0dXJuIGhlYWRlcjtcblx0fTtcblxuLyoqKi8gfSksXG4vKiA2NSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdGV4cG9ydHMuZ2V0UmFuZG9tU3RyID0gZnVuY3Rpb24obGVuKSB7XG5cdCAgdmFyIHN0ciA9ICcnO1xuXHQgIHZhciBhcnIgPSBbJzAnLCAnMScsICcyJywgJzMnLCAnNCcsICc1JywgJzYnLCAnNycsICc4JywgJzknLCAnYScsICdiJywgJ2MnLCAnZCcsICdlJywgJ2YnLCAnZycsICdoJywgJ2knLCAnaicsICdrJywgJ2wnLCAnbScsICduJywgJ28nLCAncCcsICdxJywgJ3InLCAncycsICd0JywgJ3UnLCAndicsICd3JywgJ3gnLCAneScsICd6JywgJ0EnLCAnQicsICdDJywgJ0QnLCAnRScsICdGJywgJ0cnLCAnSCcsICdJJywgJ0onLCAnSycsICdMJywgJ00nLCAnTicsICdPJywgJ1AnLCAnUScsICdSJywgJ1MnLCAnVCcsICdVJywgJ1YnLCAnVycsICdYJywgJ1knLCAnWiddO1xuXHQgIGZvciAodmFyIGkgPSAwOyBpIDwgTnVtYmVyKGxlbik7IGkrKykge1xuXHQgICAgdmFyIHBvcyA9IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIChhcnIubGVuZ3RoIC0gMSkpO1xuXHQgICAgc3RyICs9IGFycltwb3NdO1xuXHQgIH1cblx0ICByZXR1cm4gc3RyO1xuXHR9O1xuXHRcblx0ZXhwb3J0cy5zdGFydHNXaXRoID0gZnVuY3Rpb24oc3RyLCBzZWFyY2hWYWwpIHtcblx0ICBpZiAoIXN0ciB8fCAhc2VhcmNoVmFsIHx8IHNlYXJjaFZhbC5sZW5ndGggPT09IDAgfHwgc2VhcmNoVmFsLmxlbmd0aCA+IHN0ci5sZW5ndGgpIHtcblx0ICAgIHJldHVybiBmYWxzZTtcblx0ICB9XG5cdCAgcmV0dXJuIHN0ci5zdWJzdHIoMCwgc2VhcmNoVmFsLmxlbmd0aCkgPT09IHNlYXJjaFZhbDtcblx0fTtcblx0XG5cdGV4cG9ydHMuYXNzaWduID0gZnVuY3Rpb24odGFyZ2V0KSB7XG5cdCAgaWYgKHRhcmdldCA9PT0gdW5kZWZpbmVkIHx8IHRhcmdldCA9PT0gbnVsbCkge1xuXHQgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNvbnZlcnQgdW5kZWZpbmVkIG9yIG51bGwgdG8gb2JqZWN0Jyk7XG5cdCAgfVxuXHRcblx0ICB2YXIgb3V0cHV0ID0gT2JqZWN0KHRhcmdldCk7XG5cdCAgZm9yICh2YXIgaW5kZXggPSAxOyBpbmRleCA8IGFyZ3VtZW50cy5sZW5ndGg7IGluZGV4KyspIHtcblx0ICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaW5kZXhdO1xuXHQgICAgaWYgKHNvdXJjZSkge1xuXHQgICAgICBmb3IgKHZhciBuZXh0S2V5IGluIHNvdXJjZSkge1xuXHQgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBuZXh0S2V5KSkge1xuXHQgICAgICAgICAgb3V0cHV0W25leHRLZXldID0gc291cmNlW25leHRLZXldO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH1cblx0ICByZXR1cm4gb3V0cHV0O1xuXHR9O1xuXHRcblx0ZXhwb3J0cy5zaG91bGRTZW5kRXZlbnRzID0gZnVuY3Rpb24obm93LCBpbnRlcnZhbCwgbGFzdFNlbmRUaW1lKSB7XG5cdCAgaWYgKHR5cGVvZiBsYXN0U2VuZFRpbWUgIT09ICdudW1iZXInIHx8IHR5cGVvZiBpbnRlcnZhbCAhPT0gJ251bWJlcicpIHtcblx0ICAgIHJldHVybiB0cnVlO1xuXHQgIH1cblx0ICBpZiAobGFzdFNlbmRUaW1lIDw9IDApIHtcblx0ICAgIHJldHVybiB0cnVlO1xuXHQgIH1cblx0ICByZXR1cm4gbm93IC0gbGFzdFNlbmRUaW1lID4gaW50ZXJ2YWw7XG5cdH07XG5cdFxuXHQvLyAxLmVrduS4reWtmOWcqOinhOWImeS4jeWQiOazleaDheWGte+8jOS4ouW8g+aVtOadoeS6i+S7tlxuXHQvLyAyLmV2ZW50aWTplb/luqbkuI3og73otoXov4cxMjjkuKrlrZfnrKZcblx0Ly8gMy5rZXnplb/luqbkuI3og73otoXov4cyNTbkuKrlrZfnrKZcblx0Ly8gNC7mr4/kuKpldmVudOaQuuW4pmtleeS4quaVsOS4jeiDvei2hei/hzEwMOS4qlxuXHRleHBvcnRzLmNoZWNrRXZlbnQgPSBmdW5jdGlvbihldmVudElkLCBwcm9wZXJ0aWVzKSB7XG5cdCAgdmFyIGFwbHVzU3RhdGljID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblx0ICB2YXIgdWxvZyA9IF9fd2VicGFja19yZXF1aXJlX18oNjYpO1xuXHQgIGlmICghKGV2ZW50SWQgJiYgdHlwZW9mIGV2ZW50SWQgPT09ICdzdHJpbmcnKSkge1xuXHQgICAgdWxvZygpLmUoJ3BsZWFzZSBjaGVjayB0cmFja0V2ZW50IGlkLiBpZCBzaG91bGQgYmUgXCJzdHJpbmdcIiBhbmQgbm90IG51bGwnKTtcblx0ICAgIHJldHVybiBmYWxzZTtcblx0ICB9XG5cdFxuXHQgIC8vIOS/neeVmeWFs+mUruWtl1xuXHQgIHZhciByZXNlcnZlV29yZHMgPSBbJ2lkJywgJ2R1J107XG5cdCAgdmFyIHJlc2VydmVXb3JkTWFwID0ge307XG5cdFxuXHQgIHJlc2VydmVXb3Jkcy5mb3JFYWNoKGZ1bmN0aW9uICh3b3JkKSB7XG5cdCAgICByZXNlcnZlV29yZE1hcFt3b3JkXSA9IDE7XG5cdCAgfSk7XG5cdFxuXHQgIC8vIOajgOafpWV2ZW50SWTmmK/lkKbkuI7kv53nlZnlhbPplK7lrZflhrLnqoFcblx0ICBpZiAocmVzZXJ2ZVdvcmRNYXBbZXZlbnRJZF0pIHtcblx0ICAgIHVsb2coKS5lKCdldmVudElk5LiN6IO95LiO5Lul5LiL5L+d55WZ5a2X5Yay56qBOiAnICsgcmVzZXJ2ZVdvcmRzLmpvaW4oJywnKSk7XG5cdCAgICByZXR1cm4gZmFsc2U7XG5cdCAgfVxuXHRcblx0ICBpZiAoZXZlbnRJZC5sZW5ndGggPiBhcGx1c1N0YXRpYy5NQVhfRVZFTlRJRF9MRU5HVEgpIHtcblx0ICAgIHVsb2coKS5lKCdUaGUgbWF4aW11bSBsZW5ndGggb2YgZXZlbnQgaWQgc2hhbGwgbm90IGV4Y2VlZCAnICsgYXBsdXNTdGF0aWMuTUFYX0VWRU5USURfTEVOR1RIKTtcblx0ICAgIHJldHVybiBmYWxzZTtcblx0ICB9XG5cdFxuXHQgIC8vIHByb3BlcnRpZXPnmoTlkIjms5XnsbvlnovkuLogc3RyaW5nIHwgb2JqZWN0KG5vdCBpbmNsdWRlIEFycmF5KVxuXHQgIGlmIChwcm9wZXJ0aWVzXG5cdCAgICAmJiAodHlwZW9mIHByb3BlcnRpZXMgIT09ICdvYmplY3QnIHx8IEFycmF5LmlzQXJyYXkocHJvcGVydGllcykpXG5cdCAgICAmJiB0eXBlb2YgcHJvcGVydGllcyAhPT0gJ3N0cmluZycpIHtcblx0ICAgIHVsb2coKS5lKCdwbGVhc2UgY2hlY2sgdHJhY2tFdmVudCBwcm9wZXJ0aWVzLiBwcm9wZXJ0aWVzIHNob3VsZCBiZSBzdHJpbmcgb3Igb2JqZWN0KG5vdCBpbmNsdWRlIEFycmF5KScpO1xuXHQgICAgcmV0dXJuIGZhbHNlO1xuXHQgIH1cblx0XG5cdCAgaWYgKHR5cGVvZiBwcm9wZXJ0aWVzID09PSAnb2JqZWN0Jykge1xuXHQgICAgdmFyIGNvdW50ID0gMDtcblx0ICAgIGZvciAodmFyIGtleSBpbiBwcm9wZXJ0aWVzKSB7XG5cdCAgICAgIGlmICh7fS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3BlcnRpZXMsIGtleSkpIHtcblx0ICAgICAgICBpZiAoa2V5Lmxlbmd0aCA+IGFwbHVzU3RhdGljLk1BWF9QUk9QRVJUWV9LRVlfTEVOR1RIKSB7XG5cdCAgICAgICAgICB1bG9nKCkuZSgnVGhlIG1heGltdW0gbGVuZ3RoIG9mIHByb3BlcnR5IGtleSBzaGFsbCBub3QgZXhjZWVkICcgKyBhcGx1c1N0YXRpYy5NQVhfUFJPUEVSVFlfS0VZX0xFTkdUSCk7XG5cdCAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBpZiAoY291bnQgPj0gYXBsdXNTdGF0aWMuTUFYX1BST1BFUlRZX0tFWVNfQ09VTlQpIHtcblx0ICAgICAgICAgIHVsb2coKS5lKCdUaGUgbWF4aW11bSBjb3VudCBvZiBwcm9wZXJ0aWVzIHNoYWxsIG5vdCBleGNlZWQgJyArIGFwbHVzU3RhdGljLk1BWF9QUk9QRVJUWV9LRVlTX0NPVU5UKTtcblx0ICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIGlmIChyZXNlcnZlV29yZE1hcFtrZXldKSB7XG5cdCAgICAgICAgICB1bG9nKCkuZSgn5bGe5oCn5Lit55qEa2V55LiN6IO95LiO5Lul5LiL5L+d55WZ5a2X5Yay56qBOiAnICsgcmVzZXJ2ZVdvcmRzLmpvaW4oJywnKSk7XG5cdCAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBjb3VudCArPSAxO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICByZXR1cm4gdHJ1ZTtcblx0fTtcblx0XG5cdFxuXHR2YXIgZWFjaCA9IF9fd2VicGFja19yZXF1aXJlX18oMjcpO1xuXHRcblx0ZXhwb3J0cy5kZWxldGVJbmZvID0gZnVuY3Rpb24oZ29rZXksIGFycikge1xuXHQgIGVhY2goYXJyLCBmdW5jdGlvbih2KSB7XG5cdCAgICBkZWxldGUgZ29rZXlbdl07XG5cdCAgfSk7XG5cdCAgcmV0dXJuIGdva2V5O1xuXHR9O1xuXHRcblx0ZXhwb3J0cy5jaGVja0VtcHR5T2JqID0gZnVuY3Rpb24oZGF0YSkge1xuXHQgIGlmICh0eXBlb2YgZGF0YSAhPT0gJ29iamVjdCcgfHwgKE9iamVjdC5rZXlzKGRhdGEpLmxlbmd0aCA9PT0gMCkpIHtcblx0ICAgIHJldHVybiB0cnVlO1xuXHQgIH1cblx0ICByZXR1cm4gZmFsc2U7XG5cdH07XG5cdFxuXHRcblx0ZXhwb3J0cy5EYXRhVHlwZSA9IHtcblx0ICBIQUxGX1NFU1NJT046ICdoYWxmX3Nlc3Npb24nLFxuXHQgIENMT1NFX1NFU1NJT046ICdjbG9zZV9zZXNzaW9uJyxcblx0ICBFS1Y6ICdla3YnLFxuXHQgIEVOVEVSX1BBR0U6ICdlbnRlcl9wYWdlJyxcblx0ICBMRUFWRV9QQUdFOiAnbGVhdmVfcGFnZSdcblx0fTtcblx0XG5cdGV4cG9ydHMuQWNjZXNzVHlwZSA9IHtcblx0ICBNT0JJTEVfTkVUV09SS18yRzogJzJnJyxcblx0ICBNT0JJTEVfTkVUV09SS18zRzogJzNnJyxcblx0ICBNT0JJTEVfTkVUV09SS180RzogJzRnJyxcblx0ICBNT0JJTEVfTkVUV09SS19OT05FOiAnbm9uZSdcblx0fTtcblxuLyoqKi8gfSksXG4vKiA2NiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdHZhciBMT0dfUFJFRklYID0gJ1tBUExVU10gLS0gJztcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uICgpIHtcblx0ICB2YXIgX2luc3RhbmNlID0gbnVsbDtcblx0ICB2YXIgX2RlYnVnID0gZmFsc2U7XG5cdFxuXHQgIGZ1bmN0aW9uIFVMb2coKSB7XG5cdCAgICB0aGlzLnNldERlYnVnID0gZnVuY3Rpb24gKGRlYnVnKSB7XG5cdCAgICAgIF9kZWJ1ZyA9IGRlYnVnO1xuXHQgICAgfTtcblx0XG5cdCAgICB0aGlzLmQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIGlmIChfZGVidWcpIHtcblx0ICAgICAgICB0cnkge1xuXHQgICAgICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMF0gPT09ICdzdHJpbmcnKSB7XG5cdCAgICAgICAgICAgIGFyZ3VtZW50c1swXSA9IExPR19QUkVGSVggKyBhcmd1bWVudHNbMF07XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBjb25zb2xlLmRlYnVnLmFwcGx5KGNvbnNvbGUsIGFyZ3VtZW50cyk7XG5cdCAgICAgICAgfSBjYXRjaCAoZSkge1xuXHQgICAgICAgICAgLy8gZVxuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfTtcblx0XG5cdCAgICB0aGlzLmkgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIHRyeSB7XG5cdCAgICAgICAgaWYgKF9kZWJ1Zykge1xuXHQgICAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMF0gPT09ICdzdHJpbmcnKSB7XG5cdCAgICAgICAgICAgICAgYXJndW1lbnRzWzBdID0gTE9HX1BSRUZJWCArIGFyZ3VtZW50c1swXTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBjb25zb2xlLmluZm8uYXBwbHkoY29uc29sZSwgYXJndW1lbnRzKTtcblx0ICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcblx0ICAgICAgICAgICAgLy8gZVxuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgfSBjYXRjaCAoZSkge1xuXHQgICAgICAgIC8vIGVtcHR5XG5cdCAgICAgIH1cblx0ICAgIH07XG5cdFxuXHQgICAgdGhpcy5lID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICBpZiAoX2RlYnVnKSB7XG5cdCAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgIGlmICh0eXBlb2YgYXJndW1lbnRzWzBdID09PSAnc3RyaW5nJykge1xuXHQgICAgICAgICAgICBhcmd1bWVudHNbMF0gPSBMT0dfUFJFRklYICsgYXJndW1lbnRzWzBdO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgY29uc29sZS5lcnJvci5hcHBseShjb25zb2xlLCBhcmd1bWVudHMpO1xuXHQgICAgICAgIH0gY2F0Y2ggKGUpIHtcblx0ICAgICAgICAgIC8vIGVcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH07XG5cdFxuXHQgICAgdGhpcy53ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICBpZiAoX2RlYnVnKSB7XG5cdCAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgIGlmICh0eXBlb2YgYXJndW1lbnRzWzBdID09PSAnc3RyaW5nJykge1xuXHQgICAgICAgICAgICBhcmd1bWVudHNbMF0gPSBMT0dfUFJFRklYICsgYXJndW1lbnRzWzBdO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgY29uc29sZS53YXJuLmFwcGx5KGNvbnNvbGUsIGFyZ3VtZW50cyk7XG5cdCAgICAgICAgfSBjYXRjaCAoZSkge1xuXHQgICAgICAgICAgLy8gZVxuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfTtcblx0XG5cdCAgICB0aGlzLnYgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIGlmIChfZGVidWcpIHtcblx0ICAgICAgICB0cnkge1xuXHQgICAgICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMF0gPT09ICdzdHJpbmcnKSB7XG5cdCAgICAgICAgICAgIGFyZ3VtZW50c1swXSA9IExPR19QUkVGSVggKyBhcmd1bWVudHNbMF07XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLCBhcmd1bWVudHMpO1xuXHQgICAgICAgIH0gY2F0Y2ggKGUpIHtcblx0ICAgICAgICAgIC8vIGVcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH07XG5cdFxuXHQgICAgdGhpcy50ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICBpZiAoX2RlYnVnKSB7XG5cdCAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgIGNvbnNvbGUudGFibGUuYXBwbHkoY29uc29sZSwgYXJndW1lbnRzKTtcblx0ICAgICAgICB9IGNhdGNoIChlKSB7XG5cdCAgICAgICAgICAvLyBlXG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9O1xuXHRcblx0ICAgIHRoaXMudGlwID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICB0cnkge1xuXHQgICAgICAgIGlmICh0eXBlb2YgYXJndW1lbnRzWzBdID09PSAnc3RyaW5nJykge1xuXHQgICAgICAgICAgYXJndW1lbnRzWzBdID0gTE9HX1BSRUZJWCArIGFyZ3VtZW50c1swXTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgYXJndW1lbnRzKTtcblx0ICAgICAgfSBjYXRjaCAoZSkge1xuXHQgICAgICAgIC8vIGVcblx0ICAgICAgfVxuXHQgICAgfTtcblx0XG5cdCAgICB0aGlzLnRpcF93ID0gZnVuY3Rpb24gKG1zZykge1xuXHQgICAgICB0cnkge1xuXHQgICAgICAgIGNvbnNvbGUubG9nKFxuXHQgICAgICAgICAgJyVjICcgKyBMT0dfUFJFRklYICsgbXNnLFxuXHQgICAgICAgICAgJ2JhY2tncm91bmQ6cmVkOyBwYWRkaW5nOiA0cHg7IHBhZGRpbmctcmlnaHQ6IDhweDsgYm9yZGVyLXJhZGl1czogNHB4OyBjb2xvcjogI2ZmZjsnXG5cdCAgICAgICAgKTtcblx0ICAgICAgfSBjYXRjaCAoZSkge1xuXHQgICAgICAgIC8vIGVcblx0ICAgICAgfVxuXHQgICAgfTtcblx0XG5cdCAgICB0aGlzLmVyciA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgdHJ5IHtcblx0ICAgICAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1swXSA9PT0gJ3N0cmluZycpIHtcblx0ICAgICAgICAgIGFyZ3VtZW50c1swXSA9IExPR19QUkVGSVggKyBhcmd1bWVudHNbMF07XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBjb25zb2xlLmVycm9yLmFwcGx5KGNvbnNvbGUsIGFyZ3VtZW50cyk7XG5cdCAgICAgIH0gY2F0Y2ggKGUpIHtcblx0ICAgICAgICAvLyBlXG5cdCAgICAgIH1cblx0ICAgIH07XG5cdCAgICB0aGlzLnJlcGVhdCA9IGZ1bmN0aW9uKGNoYXIpIHtcblx0ICAgICAgdmFyIHJlcyA9IGNoYXI7XG5cdCAgICAgIHdoaWxlIChyZXMubGVuZ3RoIDwgODYpIHtcblx0ICAgICAgICByZXMgPSByZXMgKyBjaGFyO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiByZXM7XG5cdCAgICB9O1xuXHQgIH1cblx0XG5cdCAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0ICAgIGlmIChfaW5zdGFuY2UgPT09IG51bGwpIHtcblx0ICAgICAgX2luc3RhbmNlID0gbmV3IFVMb2coKTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBfaW5zdGFuY2U7XG5cdCAgfTtcblx0fSkoKTtcblxuLyoqKi8gfSksXG4vKiA2NyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdHZhciBhbmFseXRpY3NNYXAgPSB7XG5cdCAgZWt2czogJ2UnLFxuXHQgIGFjdGl2ZV91c2VyOiAnYWN0aXZlX3VzZXInXG5cdH07XG5cdFxuXHR2YXIgaGVhZGVyTWFwID0ge1xuXHQgIHNka190eXBlOiAnc2R0Jyxcblx0ICBkZXZpY2VfbW9kZWw6ICdkbScsXG5cdCAgbGFuZ3VhZ2U6ICdsYW5nJyxcblx0ICBkZXZpY2VfdHlwZTogJ2R0Jyxcblx0ICBvc192ZXJzaW9uOiAnb3YnLFxuXHQgIGFwcGtleTogJ2FrJyxcblx0ICBzZGtfdmVyc2lvbjogJ3N2Jyxcblx0ICByZXNvbHV0aW9uOiAncmwnLFxuXHQgIHRlc3RUb2tlbjogJ3R0bicsXG5cdCAgcGl4ZWxfcmF0aW86ICdwcicsXG5cdCAgX2lkOiAnaWQnLFxuXHQgIGlkX3R5cGU6ICdpdCcsXG5cdCAgaWRfdHJhY2tpbmc6ICdpdHInLFxuXHQgIGltcHJpbnQ6ICdpbXAnLFxuXHQgIGRlYnVnSWQ6ICdkaydcblx0fTtcblx0XG5cdHZhciBpZE1hcCA9IHtcblx0ICB1dWlkOiAndWQnLFxuXHQgIHVuaW9uaWQ6ICd1bmQnLFxuXHQgIG9wZW5pZDogJ29kJyxcblx0ICBhbm9ueW1vdXNpZDogJ25kJyxcblx0ICBhbGlwYXlfaWQ6ICdhZCcsXG5cdCAgZGV2aWNlX2lkOiAnZGQnLFxuXHQgIHVzZXJpZDogJ3B1aWQnXG5cdH07XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGRhdGEpIHtcblx0ICByZXR1cm4ge1xuXHQgICAgaDogX21hbmdsZUhlYWRlcihkYXRhLmhlYWRlciwgaGVhZGVyTWFwKSxcblx0ICAgIGE6IF9tYW5nbGVBbmFseXRpY3MoZGF0YS5hbmFseXRpY3MsIGFuYWx5dGljc01hcClcblx0ICB9O1xuXHR9O1xuXHRcblx0ZnVuY3Rpb24gX21hbmdsZUhlYWRlcihoZWFkZXIsIG1hcCkge1xuXHQgIHZhciByZXN1bHQgPSBfbWFuZ2xlT2JqKGhlYWRlciwgbWFwKTtcblx0XG5cdCAgaWYgKGhlYWRlciAmJiBoZWFkZXIuaWRfdHJhY2tpbmcpIHtcblx0ICAgIHJlc3VsdFttYXAuaWRfdHJhY2tpbmcgfHwgJ2lkX3RyYWNraW5nJ10gPSBfbWFuZ2xlT2JqKGhlYWRlci5pZF90cmFja2luZywgaWRNYXApO1xuXHQgIH1cblx0XG5cdCAgcmV0dXJuIHJlc3VsdDtcblx0fTtcblx0XG5cdGZ1bmN0aW9uIF9tYW5nbGVPYmoob2JqLCBtYXApIHtcblx0ICB2YXIgcmVzdWx0ID0ge307XG5cdFxuXHQgIGZvciAodmFyIGtleSBpbiBvYmopIHtcblx0ICAgIGlmIChtYXBba2V5XSkge1xuXHQgICAgICByZXN1bHRbbWFwW2tleV1dID0gb2JqW2tleV07XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICByZXN1bHRba2V5XSA9IG9ialtrZXldO1xuXHQgICAgfVxuXHQgIH1cblx0XG5cdCAgcmV0dXJuIHJlc3VsdDtcblx0fTtcblx0XG5cdGZ1bmN0aW9uIF9tYW5nbGVBbmFseXRpY3MoYW5hbHl0aWNzLCBtYXApIHtcblx0ICB2YXIgcmVzdWx0ID0ge307XG5cdFxuXHQgIGlmIChhbmFseXRpY3MpIHtcblx0ICAgIGZvciAodmFyIHByb3AgaW4gYW5hbHl0aWNzKSB7XG5cdCAgICAgIGlmIChhbmFseXRpY3NbcHJvcF0pIHtcblx0ICAgICAgICByZXN1bHRbbWFwW3Byb3BdXSA9IGFuYWx5dGljc1twcm9wXTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH1cblx0XG5cdCAgcmV0dXJuIHJlc3VsdDtcblx0fVxuXG4vKioqLyB9KSxcbi8qIDY4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0dmFyIGI2NGNoYXJzID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nO1xuXHR2YXIgYjY0dGFiID0gKGZ1bmN0aW9uIChiaW4pIHtcblx0ICB2YXIgdCA9IHt9O1xuXHQgIGZvciAodmFyIGkgPSAwLCBsID0gYmluLmxlbmd0aDsgaSA8IGw7IGkrKykgdFtiaW4uY2hhckF0KGkpXSA9IGk7XG5cdCAgcmV0dXJuIHQ7XG5cdH0pKGI2NGNoYXJzKTtcblx0dmFyIGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG5cdHZhciBjYl91dG9iID0gZnVuY3Rpb24gKGMpIHtcblx0ICB2YXIgY2M7XG5cdCAgaWYgKGMubGVuZ3RoIDwgMikge1xuXHQgICAgY2MgPSBjLmNoYXJDb2RlQXQoMCk7XG5cdCAgICByZXR1cm4gY2MgPCAxMjggPyBjIDogY2MgPCAyMDQ4ID8gZnJvbUNoYXJDb2RlKDE5MiB8IGNjID4+PiA2KSArIGZyb21DaGFyQ29kZSgxMjggfCBjYyAmIDYzKSA6IGZyb21DaGFyQ29kZSgyMjQgfCBjYyA+Pj4gMTIgJiAxNSkgKyBmcm9tQ2hhckNvZGUoMTI4IHwgY2MgPj4+IDYgJiA2MykgKyBmcm9tQ2hhckNvZGUoMTI4IHwgY2MgJiA2Myk7XG5cdCAgfSBlbHNlIHtcblx0ICAgIGNjID0gNjU1MzYgKyAoYy5jaGFyQ29kZUF0KDApIC0gNTUyOTYpICogMTAyNCArIChjLmNoYXJDb2RlQXQoMSkgLSA1NjMyMCk7XG5cdCAgICByZXR1cm4gZnJvbUNoYXJDb2RlKDI0MCB8IGNjID4+PiAxOCAmIDcpICsgZnJvbUNoYXJDb2RlKDEyOCB8IGNjID4+PiAxMiAmIDYzKSArIGZyb21DaGFyQ29kZSgxMjggfCBjYyA+Pj4gNiAmIDYzKSArIGZyb21DaGFyQ29kZSgxMjggfCBjYyAmIDYzKTtcblx0ICB9XG5cdH07XG5cdHZhciByZV91dG9iID0gL1tcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRkZdfFteXFx4MDAtXFx4N0ZdL2c7XG5cdHZhciB1dG9iID0gZnVuY3Rpb24gKHUpIHtcblx0ICByZXR1cm4gdS5yZXBsYWNlKHJlX3V0b2IsIGNiX3V0b2IpO1xuXHR9O1xuXHR2YXIgY2JfZW5jb2RlID0gZnVuY3Rpb24gKGNjYykge1xuXHQgIHZhciBwYWRsZW4gPSBbMCwgMiwgMV1bY2NjLmxlbmd0aCAlIDNdLFxuXHQgICAgb3JkID0gY2NjLmNoYXJDb2RlQXQoMCkgPDwgMTYgfCAoY2NjLmxlbmd0aCA+IDEgPyBjY2MuY2hhckNvZGVBdCgxKSA6IDApIDw8IDggfCAoY2NjLmxlbmd0aCA+IDIgPyBjY2MuY2hhckNvZGVBdCgyKSA6IDApLFxuXHQgICAgY2hhcnMgPSBbYjY0Y2hhcnMuY2hhckF0KG9yZCA+Pj4gMTgpLCBiNjRjaGFycy5jaGFyQXQob3JkID4+PiAxMiAmIDYzKSwgcGFkbGVuID49IDIgPyAnPScgOiBiNjRjaGFycy5jaGFyQXQob3JkID4+PiA2ICYgNjMpLCBwYWRsZW4gPj0gMSA/ICc9JyA6IGI2NGNoYXJzLmNoYXJBdChvcmQgJiA2MyldO1xuXHQgIHJldHVybiBjaGFycy5qb2luKCcnKTtcblx0fTtcblx0dmFyIGJ0b2EgPSBmdW5jdGlvbiAoYikge1xuXHQgIHJldHVybiBiLnJlcGxhY2UoL1tcXHNcXFNdezEsM30vZywgY2JfZW5jb2RlKTtcblx0fTtcblx0dmFyIF9lbmNvZGUgPSBmdW5jdGlvbiAodSkge1xuXHQgIHJldHVybiBidG9hKHV0b2IodSkpO1xuXHR9O1xuXHR2YXIgZW5jb2RlID0gZnVuY3Rpb24gKHUsIHVyaXNhZmUpIHtcblx0ICByZXR1cm4gIXVyaXNhZmUgPyBfZW5jb2RlKFN0cmluZyh1KSkgOiBfZW5jb2RlKFN0cmluZyh1KSkucmVwbGFjZSgvWytcXC9dL2csIGZ1bmN0aW9uIChtMCkge1xuXHQgICAgcmV0dXJuIG0wID09ICcrJyA/ICctJyA6ICdfJztcblx0ICB9KS5yZXBsYWNlKC9cXD0vZywgJycpO1xuXHR9O1xuXHQvLyB2YXIgZW5jb2RlVVJJID0gZnVuY3Rpb24gKHUpIHtcblx0Ly8gICByZXR1cm4gZW5jb2RlKHUsIHRydWUpO1xuXHQvLyB9O1xuXHR2YXIgcmVfYnRvdSA9IG5ldyBSZWdFeHAoWydbw4Atw59dW8KALcK/XScsICdbw6Atw69dW8KALcK/XXsyfScsICdbw7Atw7ddW8KALcK/XXszfSddLmpvaW4oJ3wnKSwgJ2cnKTtcblx0dmFyIGNiX2J0b3UgPSBmdW5jdGlvbiAoY2NjYykge1xuXHQgIHN3aXRjaCAoY2NjYy5sZW5ndGgpIHtcblx0ICBjYXNlIDQ6XG5cdCAgICB2YXIgY3AgPSAoNyAmIGNjY2MuY2hhckNvZGVBdCgwKSkgPDwgMTggfCAoNjMgJiBjY2NjLmNoYXJDb2RlQXQoMSkpIDw8IDEyIHwgKDYzICYgY2NjYy5jaGFyQ29kZUF0KDIpKSA8PCA2IHwgNjMgJiBjY2NjLmNoYXJDb2RlQXQoMyksIG9mZnNldCA9IGNwIC0gNjU1MzY7XG5cdCAgICByZXR1cm4gZnJvbUNoYXJDb2RlKChvZmZzZXQgPj4+IDEwKSArIDU1Mjk2KSArIGZyb21DaGFyQ29kZSgob2Zmc2V0ICYgMTAyMykgKyA1NjMyMCk7XG5cdCAgY2FzZSAzOlxuXHQgICAgcmV0dXJuIGZyb21DaGFyQ29kZSgoMTUgJiBjY2NjLmNoYXJDb2RlQXQoMCkpIDw8IDEyIHwgKDYzICYgY2NjYy5jaGFyQ29kZUF0KDEpKSA8PCA2IHwgNjMgJiBjY2NjLmNoYXJDb2RlQXQoMikpO1xuXHQgIGRlZmF1bHQ6XG5cdCAgICByZXR1cm4gZnJvbUNoYXJDb2RlKCgzMSAmIGNjY2MuY2hhckNvZGVBdCgwKSkgPDwgNiB8IDYzICYgY2NjYy5jaGFyQ29kZUF0KDEpKTtcblx0ICB9XG5cdH07XG5cdHZhciBidG91ID0gZnVuY3Rpb24gKGIpIHtcblx0ICByZXR1cm4gYi5yZXBsYWNlKHJlX2J0b3UsIGNiX2J0b3UpO1xuXHR9O1xuXHR2YXIgY2JfZGVjb2RlID0gZnVuY3Rpb24gKGNjY2MpIHtcblx0ICB2YXIgbGVuID0gY2NjYy5sZW5ndGgsXG5cdCAgICBwYWRsZW4gPSBsZW4gJSA0LFxuXHQgICAgbiA9IChsZW4gPiAwID8gYjY0dGFiW2NjY2MuY2hhckF0KDApXSA8PCAxOCA6IDApIHwgKGxlbiA+IDEgPyBiNjR0YWJbY2NjYy5jaGFyQXQoMSldIDw8IDEyIDogMCkgfCAobGVuID4gMiA/IGI2NHRhYltjY2NjLmNoYXJBdCgyKV0gPDwgNiA6IDApIHwgKGxlbiA+IDMgPyBiNjR0YWJbY2NjYy5jaGFyQXQoMyldIDogMCksXG5cdCAgICBjaGFycyA9IFtmcm9tQ2hhckNvZGUobiA+Pj4gMTYpLCBmcm9tQ2hhckNvZGUobiA+Pj4gOCAmIDI1NSksIGZyb21DaGFyQ29kZShuICYgMjU1KV07XG5cdCAgY2hhcnMubGVuZ3RoIC09IFswLCAwLCAyLCAxXVtwYWRsZW5dO1xuXHQgIHJldHVybiBjaGFycy5qb2luKCcnKTtcblx0fTtcblx0dmFyIGF0b2IgPSBmdW5jdGlvbiAoYSkge1xuXHQgIHJldHVybiBhLnJlcGxhY2UoL1tcXHNcXFNdezEsNH0vZywgY2JfZGVjb2RlKTtcblx0fTtcblx0dmFyIF9kZWNvZGUgPSBmdW5jdGlvbiAoYSkge1xuXHQgIHJldHVybiBidG91KGF0b2IoYSkpO1xuXHR9O1xuXHR2YXIgZGVjb2RlID0gZnVuY3Rpb24gKGEpIHtcblx0ICByZXR1cm4gX2RlY29kZShTdHJpbmcoYSkucmVwbGFjZSgvWy1fXS9nLCBmdW5jdGlvbiAobTApIHtcblx0ICAgIHJldHVybiBtMCA9PSAnLScgPyAnKycgOiAnLyc7XG5cdCAgfSkucmVwbGFjZSgvW15BLVphLXowLTlcXCtcXC9dL2csICcnKSk7XG5cdH07XG5cdFxuXHRleHBvcnRzLmVuY29kZSA9IGVuY29kZTtcblx0ZXhwb3J0cy5kZWNvZGUgPSBkZWNvZGU7XG5cbi8qKiovIH0pLFxuLyogNjkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRcblx0ZXhwb3J0cy5zdHJpbmdmeSA9IGZ1bmN0aW9uKGRhdGEpIHtcblx0ICBpZiAoZGF0YSkge1xuXHQgICAgdHJ5IHtcblx0ICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuXHQgICAgfSBjYXRjaCAoZSkge1xuXHQgICAgICAvLyBlbXB0eVxuXHQgICAgfVxuXHQgIH1cblx0ICByZXR1cm4gJyc7XG5cdH07XG5cdFxuXHRleHBvcnRzLnBhcnNlID0gZnVuY3Rpb24oanNvbikge1xuXHQgIGlmIChqc29uKSB7XG5cdCAgICB0cnkge1xuXHQgICAgICByZXR1cm4gSlNPTi5wYXJzZShqc29uKTtcblx0ICAgIH0gY2F0Y2ggKGUpIHtcblx0ICAgICAgLy8gZW1wdHlcblx0ICAgIH1cblx0ICB9XG5cdCAgcmV0dXJuIG51bGw7XG5cdH07XG5cdFxuXHRleHBvcnRzLnBhcnNlVG9BcnJheSA9IGZ1bmN0aW9uKGpzb24pIHtcblx0ICBpZiAoanNvbikge1xuXHQgICAgdHJ5IHtcblx0ICAgICAgcmV0dXJuIEpTT04ucGFyc2UoanNvbik7XG5cdCAgICB9IGNhdGNoIChlKSB7XG5cdCAgICAgIC8vIGVtcHR5XG5cdCAgICB9XG5cdCAgfVxuXHQgIHJldHVybiBbXTtcblx0fTtcblxuLyoqKi8gfSksXG4vKiA3MCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qXG5cdCAqIEZpbGU6IGV2ZW50LmpzXG5cdCAqIFByb2plY3Q6IEBhbGkvYXBsdXNcblx0ICogICAgICBcblx0ICogQXV0aG9yOiDpkrDmmK0gKGNoYW5nbGlhbmcubGNsQHVtZW5nLmNvbSlcblx0ICogICAgICBcblx0ICogQ29weXJpZ2h0IC0gMjAyMSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cblx0ICovXG5cdHZhciB1dGlsR29sZGxvZyA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGlkLCBwcm9wZXJ0aWVzKSB7XG5cdCAgaWYgKHR5cGVvZiBpZCAhPT0gJ3N0cmluZycpIHtcblx0ICAgIHJldHVybiBudWxsO1xuXHQgIH1cblx0ICB2YXIgZXZlbnQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXHQgIGV2ZW50LmlkID0gaWQ7XG5cdCAgaWYgKCFwcm9wZXJ0aWVzLnRzKSB7XG5cdCAgICBldmVudC50cyA9IERhdGUubm93KCk7XG5cdCAgfVxuXHQgIHZhciBwcm9wc1R5cGUgPSB0eXBlb2YgcHJvcGVydGllcztcblx0ICBpZiAocHJvcHNUeXBlID09PSAnc3RyaW5nJyAmJiBwcm9wZXJ0aWVzKSB7XG5cdCAgICBldmVudFtpZF0gPSBwcm9wZXJ0aWVzO1xuXHQgIH0gZWxzZSBpZiAocHJvcHNUeXBlID09PSAnb2JqZWN0Jykge1xuXHQgICAgZm9yICh2YXIga2V5IGluIHByb3BlcnRpZXMpIHtcblx0ICAgICAgaWYgKHt9Lmhhc093blByb3BlcnR5LmNhbGwocHJvcGVydGllcywga2V5KSkge1xuXHQgICAgICAgIGV2ZW50W2tleV0gPSBwcm9wZXJ0aWVzW2tleV07XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9XG5cdCAgdmFyIGFwbHVzID0gdXRpbEdvbGRsb2cuZ2V0R2xvYmFsVmFsdWUoJ2FwbHVzJyk7XG5cdCAgdmFyIGdwID0gYXBsdXMuZ2V0TWV0YUluZm8oJ2dsb2JhbHByb3BlcnR5Jyk7XG5cdCAgaWYgKGdwKSB7XG5cdCAgICBldmVudFsnZ3AnXSA9IGdwOyBcblx0ICB9XG5cdCAgcmV0dXJuIGV2ZW50O1xuXHR9O1xuXG4vKioqLyB9KSxcbi8qIDcxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIGFwbHVz5Y+R6YCBd2Vic29ja2V06K+35rGC5pel5b+X5o+S5Lu2XG5cdCAqXG5cdCAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cblx0ICpcblx0ICogQXV0aG9yczpcblx0ICogICDojYblp5ogPGppbmdhby54eUBhbGliYWJhLWluYy5jb20+XG5cdCAqICAgUmljaGFyZHzosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuXHQgKi9cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcblx0ICByZXR1cm4ge1xuXHQgICAgLyoqXG5cdCAgICAgKiBAcGFyYW1zIHtPYmplY3R9IG9wdGlvbnMge1xuXHQgICAgICogICBsb2dDb25maWc6IHtsb2dDb25maWd9XG5cdCAgICAgKiB9XG5cdCAgICAgKi9cblx0ICAgIC8vIGluaXQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcblx0ICAgIC8vICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0ICAgIC8vIH0sXG5cdFxuXHQgICAgcnVuOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIHZhciB3aW4gPSB3aW5kb3c7XG5cdCAgICAgIHZhciBpc1N1cHBvcnRXUztcblx0ICAgICAgdHJ5IHtcblx0ICAgICAgICB2YXIgRk4gPSAnZnVuY3Rpb24nO1xuXHQgICAgICAgIC8vIOWcqCBBbmRyb2lkIOS4re+8jOWNs+S9v+a1j+iniOWZqOS4jeaUr+aMgSBXZWJTb2NrZXQg77yM5L2G5piv5a6D6L+Y5piv5a2Y5Zyo6L+Z5Liq5bGe5oCn44CCXG5cdCAgICAgICAgaXNTdXBwb3J0V1MgPSB0eXBlb2Ygd2luLldlYlNvY2tldCA9PT0gRk4gJiYgdHlwZW9mIHdpbi5XZWJTb2NrZXQucHJvdG90eXBlLnNlbmQgPT09IEZOO1xuXHQgICAgICB9IGNhdGNoIChlKSB7fVxuXHQgICAgICB2YXIgdXRpbEdvbGRsb2cgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHQgICAgICB2YXIgYXBsdXMgPSB1dGlsR29sZGxvZy5nZXRHbG9iYWxWYWx1ZSgnYXBsdXMnKTtcblx0XG5cdCAgICAgIC8vIOS/neivgeWPquS8muacieS4gOS4qmFwbHVzX3BsdWdpbl9tb25pdG9y6L+Q6KGMXG5cdCAgICAgIGlmIChhcGx1cy5fYXBsdXNfY3BsdWdpbl93cykge1xuXHQgICAgICAgIHJldHVybjtcblx0ICAgICAgfVxuXHQgICAgICBhcGx1cy5fYXBsdXNfY3BsdWdpbl93cyA9IHRydWU7XG5cdCAgICAgIHZhciBNYWluID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3Mik7XG5cdCAgICAgIHZhciBtYWluID0gTWFpbi5jcmVhdGUoe1xuXHQgICAgICAgIFdTOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDc2KSxcblx0ICAgICAgICBDVFg6IHdpbmRvdyxcblx0ICAgICAgICBDVFhfVFlQRTogJ1dFQidcblx0ICAgICAgfSk7XG5cdCAgICAgIG1haW4ucnVuKHRoaXMub3B0aW9ucywgaXNTdXBwb3J0V1MpO1xuXHQgICAgfVxuXHQgIH07XG5cdH07XG5cblxuLyoqKi8gfSksXG4vKiA3MiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiDmi6bmiKrlubbmjIl3ZWJTb2NrZXTljY/orq7lj5HpgIHml6Xlv5dcblx0ICog6L2s5Y+R5YiweHh45pyN5Yqh5ZmoXG5cdCAqIOmAmui/h0FwbHVzSlPml6Xlv5fpqozor4HlubPlj7Dmn6XnnIvlj5Hlh7rnmoTor7fmsYLkv6Hmga9cblx0ICog5Yeg5Liq5pe26Ze0L+aXtuacuueCue+8mlxuXHQgKiAx44CB5bu656uL6L+e5o6l5pe26Ze06LaF6L+HMeenku+8jOe9kee7nOato+W4uOeahOaDheWGteS4i++8jOS8muS7pWh0dHDljY/orq7lj5HpgIFcblx0ICogMuOAgTYw56eS5YaF5rKh5pyJ6YCa5L+h77yM6L+e5o6l5YWz6Zet77yINjBz6L+Z5LmI5LmF77yM5Li76KaB5piv6ICD6JmR5Yiw5YWz6Zet6L+e5o6l5Lmf5Lya6Iqx6LS55Yeg5Y2B56eS55qE5pe26Ze077yJXG5cdCAqIDPjgIHlhYjop6blj5FlcnJvcu+8jOWQjuinpuWPkWNsb3Nl77yM5Y2z5LiA5byA5aeL6L+e5o6l5aSx6LSl77yMMXMo5Lul5YmN55qE5rOo6YeK77yaXCLov5nkuKrml7bpl7TkuZ/mmK/ogIPomZHliLDlhYjmiormg4XlhrUx55qE5pel5b+X5Y+R6YCB5Ye65Y67XCLvvIzlj6/lv73nlaUp5ZCO6YeN5paw5bu656uL6L+e5o6lXG5cdCAqIDTjgIHlhYjop6blj5FjbG9zZe+8jOWQjuWHuuWPkWVycm9y77yM5Y2z6YCa5L+h5Lit5pyN5Yqh56uv5YWz6Zet77yM6Iul572R57uc5q2j5bi477yM5LulaHR0cOWPkemAge+8jOWQpuWImee8k+WtmFxuXHQgKiA144CB5YWz6Zet6aG16Z2i5YmN77yM5Lya5bCG5pyq5Y+R6YCB5Ye65Y6755qE5pyA6L+R5Y2B5p2h5Y+R6YCB5Ye65Y67IDIwMTgtMy0yMlxuXHQgKlxuXHQgKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG5cdCAqXG5cdCAqIEF1dGhvcnM6XG5cdCAqICAg6I2G5aeaIDxqaW5neWFvLnh5QGFsaWJhYmEtaW5jLmNvbT5cblx0ICogICBSaWNoYXJkfOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG5cdCAqL1xuXHQndXNlIHN0cmljdCc7XG5cdFxuXHR2YXIgd2luID0gd2luZG93O1xuXHRcblx0dmFyIEJhc2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKTtcblx0dmFyIGFwbHVzU3RhdGljID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblx0dmFyIHV0aWxFdmVudCA9IF9fd2VicGFja19yZXF1aXJlX18oNTUpO1xuXHR2YXIgZWFjaE1hcCA9IF9fd2VicGFja19yZXF1aXJlX18oMzcpO1xuXHR2YXIgdXRpbERhdGEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIzKTtcblx0dmFyIHV0aWxTdG9yZSA9IF9fd2VicGFja19yZXF1aXJlX18oMjUpO1xuXHR2YXIgZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNzMpO1xuXHR2YXIgY29va2llID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NCk7XG5cdHZhciB1dGlsR1EgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYxKTtcblx0dmFyIGxvZ19jbG91ZCA9IF9fd2VicGFja19yZXF1aXJlX18oNTkpO1xuXHRcblx0Ly8gdmFyIEhUVFAgPSAnaHR0cCc7XG5cdC8qKlxuXHQgKiBgY29udGVudD1cIldTXCJgIOihqOekuuS9v+eUqHdlYnNvY2tldOmAmumBkyvnn63ov57mjqXlj4zpgJrpgZNcblx0ICogYGNvbnRlbnQ9XCJXUy1PTkxZXCJgIOihqOekuuS9v+eUqHdlYnNvY2tldOWNlemAmumBk1xuXHQgKi9cblx0dmFyIFBlcnNpc3RlbnRMaW5rTGlzdCA9IFsnV1MnLCAnV1MtT05MWSddO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBCYXNlLmV4dGVuZCh7XG5cdCAgd3NIYW5kbGVyOiAnJyxcblx0XG5cdCAgbHNDbmFLZXk6ICdBUExVU19DTkEnLFxuXHRcblx0ICB0aW1lb3V0VG9IdHRwOiAzMDAwLFxuXHRcblx0ICBkb21haW46ICdsb2cubW1zdGF0LmNvbScsXG5cdFxuXHQgIHJldHJ5VGltZXNLZXk6ICdhcGx1c3hfcmV0cnlfdGltZXMnLFxuXHRcblx0ICBtYXhSZXRyeVRpbWVzUGVySG91cjogMCxcblx0XG5cdCAgcmV0cnlUaW1lczogMCxcblx0XG5cdCAgcGFnZUxvYWREYXRlSG91cjogJycsXG5cdFxuXHQgIGdldERhdGVIb3VyOiBmdW5jdGlvbiAoKSB7XG5cdCAgICByZXR1cm4gZGF0ZS5nZXRGb3JtYXREYXRlKCkgKyBuZXcgRGF0ZSgpLmdldEhvdXJzKCk7XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICog55Sf5oiQbWluLW1heOeahOmaj+acuuaVtOaVsO+8jOWMheaLrG1pbuWSjG1heFxuXHQgICAqL1xuXHQgIGdldFJhbmRvbTogZnVuY3Rpb24gKG1pbiwgbWF4KSB7XG5cdCAgICByZXR1cm4gbWluICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpKTtcblx0ICB9LFxuXHRcblx0ICBnZXRSZXRyeVRpbWVzOiBmdW5jdGlvbiAoKSB7XG5cdCAgICB2YXIgcmV0cnlUaW1lcyA9IDA7XG5cdCAgICB2YXIgcnMgPSB1dGlsU3RvcmUuZ2V0KHRoaXMucmV0cnlUaW1lc0tleSk7XG5cdCAgICBpZiAocnMpIHtcblx0ICAgICAgdmFyIHRtcHMgPSBycy5zcGxpdCgnLScpO1xuXHQgICAgICBpZiAodG1wcy5sZW5ndGggPT09IDIgJiYgdG1wc1swXSA9PT0gdGhpcy5nZXREYXRlSG91cigpKSB7XG5cdCAgICAgICAgcmV0cnlUaW1lcyA9IHBhcnNlSW50KHRtcHNbMV0pO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICByZXR1cm4gcmV0cnlUaW1lcztcblx0ICB9LFxuXHRcblx0ICBzZXRSZXRyeVRpbWVzOiBmdW5jdGlvbiAodGltZXMpIHtcblx0ICAgIHV0aWxTdG9yZS5zZXQodGhpcy5yZXRyeVRpbWVzS2V5LCB0aGlzLmdldERhdGVIb3VyKCkgKyAnLScgKyB0aW1lcyk7XG5cdCAgfSxcblx0XG5cdCAgZG9TZXRSZXRyeVRpbWVzOiBmdW5jdGlvbiAoKSB7XG5cdCAgICBpZiAodGhpcy5yZXRyeVRpbWVzIDwgdGhpcy5tYXhSZXRyeVRpbWVzUGVySG91cikge1xuXHQgICAgICB0aGlzLnNldFJldHJ5VGltZXMoKyt0aGlzLnJldHJ5VGltZXMpO1xuXHQgICAgfSBlbHNlIGlmICh0aGlzLnJldHJ5VGltZXMgPj0gdGhpcy5tYXhSZXRyeVRpbWVzUGVySG91ciAmJiB0aGlzLnBhZ2VMb2FkRGF0ZUhvdXIgIT09IHRoaXMuZ2V0RGF0ZUhvdXIoKSkge1xuXHQgICAgICB0aGlzLnJldHJ5VGltZXMgPSAwO1xuXHQgICAgICB0aGlzLnNldFJldHJ5VGltZXMoKyt0aGlzLnJldHJ5VGltZXMpO1xuXHQgICAgfVxuXHQgIH0sXG5cdFxuXHQgIGNoZWF0Q2FsbGJhY2s6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG5cdCAgICB1dGlsU3RvcmUuc2V0KGtleS50b1VwcGVyQ2FzZSgpLCB2YWx1ZSk7XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICog55uR5ZCs6buE6YeR5Luk566t5Zue6LCDXG5cdCAgICogQHBhcmFtcyB7T2JqZWN0fSBwb3N0RGF0YSDop4EgcHZfY2FsbGJhY2sgfHwgaGpsal9jYWxsYmFja1xuXHQgICAqIEBwYXJhbXMge1N0cmluZ30gdHlwZSBwdiB8fCBoamxqXG5cdCAgICogQHBhcmFtcyB7U3RyaW5nfSB1cmwgaHR0cHM6Ly9sb2cubW1zdGF0LmNvbS92LmdpZiB8IGh0dHBzOi8vbG9nLm1tc3RhdC5jb20vdGJpbmRleC5wcm9tby5wcm9tb1xuXHQgICAqL1xuXHQgIG5ld1NlbmQ6IGZ1bmN0aW9uIChwb3N0RGF0YSwgdHlwZSwgdXJsLCBtZXRob2QpIHtcblx0ICAgIHZhciBfc2VsZiA9IHRoaXM7XG5cdCAgICBlYWNoTWFwKHBvc3REYXRhLCBmdW5jdGlvbiAoaywgdikge1xuXHQgICAgICBpZiAodHlwZW9mIHYgPT09ICdudW1iZXInIHx8IHR5cGVvZiB2ID09PSAnYm9vbGVhbicpIHtcblx0ICAgICAgICBwb3N0RGF0YVtrXSA9IHYgKyAnJztcblx0ICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICB2YXIgc24gPSB1dGlsU3RvcmUuZ2V0KCdBUExVU19TTicpO1xuXHQgICAgdmFyIHN5ID0gdXRpbFN0b3JlLmdldCgnQVBMVVNfU1knKTtcblx0ICAgIHRyeSB7XG5cdCAgICAgIHNuICYmIChwb3N0RGF0YVsnYXBsdXNfc24nXSA9IHNuKTtcblx0ICAgICAgc3kgJiYgKHBvc3REYXRhWydhcGx1c19zeSddID0gc3kpO1xuXHQgICAgICBwb3N0RGF0YVsndWEnXSA9IG5hdmlnYXRvci51c2VyQWdlbnQ7XG5cdCAgICAgIHBvc3REYXRhWydsYW5nJ10gPSBuYXZpZ2F0b3IubGFuZ3VhZ2U7XG5cdCAgICB9IGNhdGNoIChlKSB7fVxuXHQgICAgdGhpcy53c0hhbmRsZXIuc2VuZCh7XG5cdCAgICAgIGlkOiAnaWQnICsgX3NlbGYuZ2V0UmFuZG9tKDEsIDEwMDAwMDAwMCksXG5cdCAgICAgIHN0YXJ0VGltZTogbmV3IERhdGUoKS5nZXRUaW1lKCksXG5cdCAgICAgIHR5cGU6IHR5cGUsXG5cdCAgICAgIG1zZzoge1xuXHQgICAgICAgIHBvc3REYXRhOiBwb3N0RGF0YSxcblx0ICAgICAgICB1cmw6IHVybFxuXHQgICAgICB9LFxuXHQgICAgICBtZXRob2Q6IG1ldGhvZFxuXHQgICAgfSk7XG5cdCAgfSxcblx0XG5cdCAgZ2V0UHZQb3N0RGF0YTogZnVuY3Rpb24gKG9yaURhdGFzKSB7XG5cdCAgICB2YXIgcHZkYXRhID0gb3JpRGF0YXMud2hhdF90b19zZW5kLmxvZ2RhdGE7XG5cdCAgICB2YXIgbW11cmwgPSBvcmlEYXRhcy53aGVyZV90b19zZW5kLnVybDtcblx0ICAgIHJldHVybiB7XG5cdCAgICAgIHBvc3REYXRhOiBwdmRhdGEsXG5cdCAgICAgIG1tdXJsOiBtbXVybFxuXHQgICAgfTtcblx0ICB9LFxuXHRcblx0ICBnZXRQb3N0RGF0YTogZnVuY3Rpb24gKG9yaURhdGFzKSB7XG5cdCAgICAvLyB2YXIgcG9zdERhdGEgPSB7fTtcblx0ICAgIHZhciBtbXVybCA9IG9yaURhdGFzLndoYXRfdG9fc2VuZC51cmw7XG5cdCAgICB2YXIgbG9nZGF0YSA9IG9yaURhdGFzLndoYXRfdG9fc2VuZC5sb2dkYXRhO1xuXHQgICAgLy8gcG9zdERhdGEubG9na2V5ID0gcG9zdERhdGEubG9na2V5IHx8ICcnO1xuXHQgICAgLy8gcG9zdERhdGEudXJsID0gbG9jYXRpb24gJiYgbG9jYXRpb24uaHJlZjtcblx0ICAgIGlmIChsb2dkYXRhLmdva2V5KSB7XG5cdCAgICAgIGxvZ2RhdGEuZ29rZXkuYXdzID0gMTtcblx0ICAgIH1cblx0ICAgIHJldHVybiB7XG5cdCAgICAgIHBvc3REYXRhOiBsb2dkYXRhLFxuXHQgICAgICBtbXVybDogbW11cmxcblx0ICAgIH07XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICog55uR5ZCs5pel5b+X5Zue6LCD77yM6L2sV1PpgJrpgZNcblx0ICAgKiBAcGFyYW1zIG9yaURhdGFzXG5cdCAgICogQHBhcmFtcyByZWNvcmRUeXBlIHtTdHJpbmd9IHB2IHx8IGFwbHVzXG5cdCAgICpcblx0ICAgKiBAcmV0dXJuIHtPYmplY3R9IG9yaURhdGFzIHtcblx0ICAgKiAgIGxvZ3R5cGU6IDIsXG5cdCAgICogICBjYWNoZTogJzfkvY3pmo/mnLrmlbAnLFxuXHQgICAqICAgc2NyOiAn5bGP5bmV5YiG6L6o546HJyxcblx0ICAgKiAgIGNuYTogJ+acjeWKoeerr+migeWPkeeahOiuv+WuoklEOiBcImh6eUZFL01GS1N3Q0FTcDRTdlJpc2h2dFwiJyxcblx0ICAgKiAgIGdta2V5OiAnQ0xLJyB8ICdFWFAnIHwgJ09USEVSJyB8ICcnLFxuXHQgICAqICAgbG9na2V5OiAnL3RiaW5kZXgucHJvbW8ucHJvbW8nXG5cdCAgICogICBnb2tleTogJ2luZGV4PTImX3Nsb2c9MCZ3cz0xJ1xuXHQgICAqICAgc3BtLWNudCAnYTIxYm8uMjAxNy4wLjAuMTMwMTExZDk4NFJkZjknXG5cdCAgICogfVxuXHQgICAqIFxuXHQgICAqL1xuXHQgIGxvZ19jYWxsYmFjazogZnVuY3Rpb24gKG9yaURhdGFzLCByZWNvcmRUeXBlKSB7XG5cdCAgICB2YXIgcnMgPSB0aGlzLmdldFBvc3REYXRhKG9yaURhdGFzKTtcblx0ICAgIGlmIChycykge1xuXHQgICAgICB0aGlzLm5ld1NlbmQobG9nX2Nsb3VkLmNoYW5nZVRvQXJyYXkodGhpcy5mb3JtYXQsIHJzLnBvc3REYXRhKS5qb2luKHRoaXMuZ2V0TG9naWNTeW1ib2woKSksIHJlY29yZFR5cGUsIHJzLm1tdXJsLCBvcmlEYXRhcy5tZXRob2QpO1xuXHQgICAgfVxuXHQgIH0sXG5cdFxuXHQgIC8qKlxuXHQgICAqIGdldCBjbmEgZnJvbSBsb2NhbFN0b3JhZ2UgYW5kIGNvb2tpZVxuXHQgICAqIGlmIGdldCBpdCBmcm9tIGxvY2FsU3RvcmFnZSByZXR1cm4gbHN0YWcgdGhhdCB2YWx1ZSBpcyAxXG5cdCAgICogQHJldHVybiB7T2JqZWN0fSBycyB7XG5cdCAgICogICBjbmE6ICd4eHh4eHh4eHh4Jyxcblx0ICAgKiAgIHBhcmFtczogWydsc3RhZz0xJ11cblx0ICAgKiB9XG5cdCAgICovXG5cdCAgZ2V0Q25hRGF0YTogZnVuY3Rpb24gKCkge1xuXHQgICAgdmFyIGxzQ25hID0gdXRpbERhdGEuZ2V0THNDbmEodGhpcy5sc0NuYUtleSk7XG5cdCAgICB2YXIgY29va2llQ25hID0gY29va2llLmdldENvb2tpZUNuYSgnY25hJyk7XG5cdCAgICB2YXIgcnMgPSB7XG5cdCAgICAgIGNuYTogbHNDbmEgfHwgY29va2llQ25hLFxuXHQgICAgICBwYXJhbXM6IFtdXG5cdCAgICB9O1xuXHQgICAgaWYgKGxzQ25hICYmICFjb29raWVDbmEpIHtcblx0ICAgICAgcnMucGFyYW1zLnB1c2goJ2xzdGFnPTEnKTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBycztcblx0ICB9LFxuXHRcblx0ICBjbmFDYWxsYmFjazogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcblx0ICAgIHZhciBsc0NuYSA9IHV0aWxEYXRhLmdldExzQ25hKHRoaXMubHNDbmFLZXkpO1xuXHQgICAgdmFyIGNvb2tpZUNuYSA9IGNvb2tpZS5nZXRDb29raWVDbmEoJ2NuYScpO1xuXHQgICAgaWYgKGxzQ25hICE9PSBjb29raWVDbmEgfHwgbHNDbmEgIT09IHZhbHVlIHx8IGNvb2tpZUNuYSAhPT0gdmFsdWUpIHtcblx0ICAgICAgdXRpbERhdGEuc2V0THNDbmEodGhpcy5sc0NuYUtleSwgZGF0ZS5nZXRGb3JtYXREYXRlKCksIHZhbHVlKTtcblx0ICAgICAgY29va2llLnNldENvb2tpZUNuYShrZXksIHZhbHVlLCB7XG5cdCAgICAgICAgJ1NhbWVTaXRlJzogJ25vbmUnXG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgIH0sXG5cdFxuXHQgIHdhdGNoV1NTdGF0dXM6IGZ1bmN0aW9uIChyZXRyeVRpbWVzKSB7XG5cdCAgICB2YXIgX3NlbGYgPSB0aGlzO1xuXHQgICAgdGhpcy53c0hhbmRsZXIuc3Vic2NyaWJlKCdBUExVU19XU19PUEVOJywgZnVuY3Rpb24gKCkge1xuXHQgICAgICBpZiAocmV0cnlUaW1lcyA9PT0gX3NlbGYubWF4UmV0cnlUaW1lc1BlckhvdXIpIHtcblx0ICAgICAgICBfc2VsZi5yZXRyeVRpbWVzID0gMDtcblx0ICAgICAgICBfc2VsZi5zZXRSZXRyeVRpbWVzKF9zZWxmLnJldHJ5VGltZXMpO1xuXHQgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIHRoaXMud3NIYW5kbGVyLnN1YnNjcmliZSgnQVBMVVNfV1NfRVJST1InLCBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIF9zZWxmLmRvU2V0UmV0cnlUaW1lcygpO1xuXHQgICAgICBfc2VsZi5tc2dRdWV1ZVRvSHR0cFJlcXVlc3QoKTtcblx0ICAgIH0pO1xuXHQgICAgdGhpcy53c0hhbmRsZXIuc3Vic2NyaWJlKCdBUExVU19XU19FWENFUFRJT04nLCBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIF9zZWxmLmRvU2V0UmV0cnlUaW1lcygpO1xuXHQgICAgICBfc2VsZi5tc2dRdWV1ZVRvSHR0cFJlcXVlc3QoKTtcblx0ICAgIH0pO1xuXHQgICAgdGhpcy53c0hhbmRsZXIuc3Vic2NyaWJlKCdBUExVU19XU19DTE9TRScsIGZ1bmN0aW9uICgpIHtcblx0ICAgICAgX3NlbGYubXNnUXVldWVUb0h0dHBSZXF1ZXN0KCk7XG5cdCAgICB9KTtcblx0ICB9LFxuXHRcblx0ICBzdGFydFdlYlNvY2tldDogZnVuY3Rpb24gKCkge1xuXHQgICAgdmFyIF9zZWxmID0gdGhpcztcblx0ICAgIC8vIOWQr+WKqHdzXG5cdCAgICB2YXIgZGF0YSA9IHRoaXMuZ2V0Q25hRGF0YSgpO1xuXHQgICAgdGhpcy53c0hhbmRsZXIgPSB0aGlzLldTLmNyZWF0ZSh7XG5cdCAgICAgIGNuYTogZGF0YS5jbmEsXG5cdCAgICAgIHBhcmFtczogZGF0YS5wYXJhbXMsXG5cdCAgICAgIGNyZWF0ZVRpbWU6IG5ldyBEYXRlKCkuZ2V0VGltZSgpLFxuXHQgICAgICBjdHg6IHRoaXMuQ1RYXG5cdCAgICB9KTtcblx0ICAgIHRoaXMud3NIYW5kbGVyLnN0YXJ0V1MoKTtcblx0ICAgIHRoaXMud2F0Y2hXU1N0YXR1cyh0aGlzLmdldFJldHJ5VGltZXMoKSk7XG5cdCAgICAvLyBUT0RPIOacjeWKoeerr+mcgOimgee7meWHuuagvOW8j+WMlueahGRhdGHvvIzmjInnsbvlnovlpITnkIbpgLvovpEgQOW3m+W3nFxuXHQgICAgdGhpcy53c0hhbmRsZXIuc3Vic2NyaWJlKCdBUExVU19XU19TRVJWRVJfTVNHJywgZnVuY3Rpb24gKGRhdGFzdHIpIHtcblx0ICAgICAgaWYgKGRhdGFzdHIpIHtcblx0ICAgICAgICB2YXIgaW5kZXggPSBkYXRhc3RyLmluZGV4T2YoJzonKTtcblx0ICAgICAgICB2YXIga2V5ID0gZGF0YXN0ci5zdWJzdHIoMCwgaW5kZXgpO1xuXHQgICAgICAgIHZhciB2YWx1ZSA9IGRhdGFzdHIuc3Vic3RyKGluZGV4ICsgMSk7XG5cdCAgICAgICAgc3dpdGNoKGtleSkge1xuXHQgICAgICAgIGNhc2UgJ2NuYSc6XG5cdCAgICAgICAgICBfc2VsZi5jbmFDYWxsYmFjayhrZXksIHZhbHVlKTtcblx0ICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgIGNhc2UgJ2FwbHVzX3NuJzpcblx0ICAgICAgICBjYXNlICdhcGx1c19zeSc6XG5cdCAgICAgICAgICBfc2VsZi5jaGVhdENhbGxiYWNrKGtleSwgdmFsdWUpO1xuXHQgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgZGVmYXVsdDpcblx0ICAgICAgICAgIHZhciBkYXRhID0ge307XG5cdCAgICAgICAgICBkYXRhW2tleV0gPSB2YWx1ZTtcblx0ICAgICAgICAgIGFwbHVzLnNlbmQoX3NlbGYuZG9tYWluICsgJy9zJywgZGF0YSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9KTsgIFxuXHQgIH0sXG5cdFxuXHQgIHN1YnNjcmliZUxvZ3M6IGZ1bmN0aW9uIChhY3Rpb24sIGNhbGxiYWNrKSB7XG5cdCAgICB1dGlsR1EucHVzaEludG9Hb2xkbG9nUXVldWUoYXBsdXNTdGF0aWMuU1VCU0NSSUJFLCBbYWN0aW9uLCBmdW5jdGlvbiAob3JpRGF0YXMpIHtcblx0ICAgICAgaWYgKG9yaURhdGFzLnN0YXR1cyA9PT0gYXBsdXNTdGF0aWMuQ09NUExFVEUpIHtcblx0ICAgICAgICBjYWxsYmFjayhvcmlEYXRhcyk7XG5cdCAgICAgIH1cblx0ICAgIH1dKTtcblx0ICB9LFxuXHRcblx0ICBnZXRMb2dpY1N5bWJvbDogZnVuY3Rpb24gKCkge1xuXHQgICAgcmV0dXJuIHRoaXMuZm9ybWF0ID09PSAnQUxJJyA/ICcmJyA6ICd8fCc7XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICogQHBhcmFtcyB7QXJyYXl9IHBhcmFtc1xuXHQgICAqIEBwYXJhbXMge1N0cmluZ30gdXJsXG5cdCAgICogQHBhcmFtcyB7U3RyaW5nfSBtZXRob2QgIEdFVCB8fCBQT1NUIHx8IFdTIHx8IFdTLU9OTFlcblx0ICAgKiBAcGFyYW1zIHtCb29sZWFufSBfalxuXHQgICAqL1xuXHQgIGh0dHBSZXF1ZXN0QmVhY29uOiBmdW5jdGlvbiAocGFyYW1zLCB1cmwsIG1ldGhvZCwgX2opIHtcblx0ICAgIHZhciBQUk9UT0NPTF9JTkRFWCA9IGxvZ19jbG91ZC5nZXRLZXlJbmRleCgncHJvdG9jb2wnKTtcblx0ICAgIHZhciBFVkVOVF9BUkdTX0lOREVYID0gbG9nX2Nsb3VkLmdldEtleUluZGV4KCdldmVudF9hcmdzJyk7XG5cdCAgICB2YXIgZXZlbnRfYXJncyA9IEpTT04ucGFyc2UocGFyYW1zW0VWRU5UX0FSR1NfSU5ERVhdKTtcblx0ICAgIGlmIChfaikge1xuXHQgICAgICBldmVudF9hcmdzLl9qID0gMTsgIFxuXHQgICAgfVxuXHRcblx0ICAgIGRlbGV0ZSBldmVudF9hcmdzWydhcGx1c19zbiddO1xuXHQgICAgZGVsZXRlIGV2ZW50X2FyZ3NbJ2FwbHVzX3N5J107XG5cdCAgICBkZWxldGUgZXZlbnRfYXJnc1sndWEnXTtcblx0ICAgIGRlbGV0ZSBldmVudF9hcmdzWydsYW5nJ107XG5cdCAgICBkZWxldGUgZXZlbnRfYXJnc1snYXdzJ107XG5cdFxuXHQgICAgcGFyYW1zW0VWRU5UX0FSR1NfSU5ERVhdID0gSlNPTi5zdHJpbmdpZnkoZXZlbnRfYXJncyk7XG5cdCAgICBpZiAodGhpcy5pc1BlcnNpc3RlbnRMaW5rKG1ldGhvZCkpIHtcblx0ICAgICAgbWV0aG9kID0gbmF2aWdhdG9yICYmIG5hdmlnYXRvci5zZW5kQmVhY29uID8gJ1BPU1QnIDogJ0dFVCc7XG5cdCAgICB9XG5cdCAgICBwYXJhbXNbUFJPVE9DT0xfSU5ERVhdID0gbWV0aG9kO1xuXHQgICAgYXBsdXMuc2VuZCh1cmwsIHBhcmFtcy5qb2luKHRoaXMuZ2V0TG9naWNTeW1ib2woKSksIG1ldGhvZCk7XG5cdCAgfSxcblx0XG5cdCAgd2F0Y2hMT0c6IGZ1bmN0aW9uIChpc1N1cHBvcnRXUykge1xuXHQgICAgXG5cdCAgICB2YXIgX3NlbGYgPSB0aGlzO1xuXHQgICAgdmFyIGhhbmRsZXJNaWRkbGV3YXJlID0gZnVuY3Rpb24gKGRhdGEsIGxvZ3R5cGUpIHtcblx0ICAgICAgdmFyIG1ldGhvZCA9IGRhdGEud2hlcmVfdG9fc2VuZC5tZXRob2Q7XG5cdCAgICAgIHZhciBwYXJhbXMgPSBsb2dfY2xvdWQuY2hhbmdlVG9BcnJheShfc2VsZi5mb3JtYXQsIGRhdGEud2hhdF90b19zZW5kLmxvZ2RhdGEpO1xuXHQgICAgICBpZiAoaXNTdXBwb3J0V1MgJiYgX3NlbGYuaXNQZXJzaXN0ZW50TGluayhtZXRob2QpKSB7XG5cdCAgICAgICAgaWYgKF9zZWxmLnJldHJ5VGltZXMgPj0gX3NlbGYubWF4UmV0cnlUaW1lc1BlckhvdXIpIHtcblx0ICAgICAgICAgIF9zZWxmLmh0dHBSZXF1ZXN0QmVhY29uKHBhcmFtcywgZGF0YS53aGVyZV90b19zZW5kLnVybCwgbWV0aG9kLCB0cnVlKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgX3NlbGYubG9nX2NhbGxiYWNrKGRhdGEsIGxvZ3R5cGUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBfc2VsZi5odHRwUmVxdWVzdEJlYWNvbihwYXJhbXMsIGRhdGEud2hlcmVfdG9fc2VuZC51cmwsIG1ldGhvZCk7XG5cdCAgICAgIH1cblx0ICAgIH07XG5cdFxuXHQgICAgLy8g6K6i6ZiFcHbkuovku7Zcblx0ICAgIF9zZWxmLnN1YnNjcmliZUxvZ3MoJ213X2NoYW5nZV9wdicsIGZ1bmN0aW9uIChkYXRhKSB7XG5cdCAgICAgIGhhbmRsZXJNaWRkbGV3YXJlKGRhdGEsICdwdicpO1xuXHQgICAgfSk7XG5cdFxuXHQgICAgLy8g6K6i6ZiFaGpsai9hcGx1c+S6i+S7tlxuXHQgICAgX3NlbGYuc3Vic2NyaWJlTG9ncygnbXdfY2hhbmdlX2hqbGonLCBmdW5jdGlvbiAoZGF0YSkge1xuXHQgICAgICBoYW5kbGVyTWlkZGxld2FyZShkYXRhLCAnYXBsdXMnKTtcblx0ICAgIH0pO1xuXHQgIH0sXG5cdFxuXHQgIC8qKlxuXHQgICAqIOS7jndlYnNvY2tldOmZjee6p+S4umh0dHBcblx0ICAgKlxuXHQgICAqIEBwYXJhbXMge0FycmF5fSBtc2dRdWV1ZSBbe1xuXHQgICAqICAgaWQ6ICdpZDE0MzQ2NTExJyxcblx0ICAgKiAgIG1zZzoge1xuXHQgICAqICAgICBwb3N0RGF0YTogXG5cdCAgICogICAgIHVybDogJy8vbG9nLm1tc3RhdC5jb20vdi5naWYnXG5cdCAgICogICB9LFxuXHQgICAqICAgc3RhcnRUaW1lOiAxNTMwODgwMDEzMjQwLFxuXHQgICAqICAgdHlwZTogJ3B2J1xuXHQgICAqIH1dXG5cdCAgICovXG5cdCAgY2hhbmdlVG9IdHRwUmVxdWVzdDogZnVuY3Rpb24gKG1zZ1F1ZXVlKSB7XG5cdCAgICB2YXIgX3NlbGYgPSB0aGlzO1xuXHQgICAgaWYgKG1zZ1F1ZXVlICYmIG1zZ1F1ZXVlLmxlbmd0aCA+IDApIHtcblx0ICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2dRdWV1ZS5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgIHZhciBvYmogPSBtc2dRdWV1ZVtpXTtcblx0ICAgICAgICB2YXIgbXNnID0gb2JqLm1zZztcblx0ICAgICAgICB2YXIgcG9zdERhdGEgPSBtc2cucG9zdERhdGEuc3BsaXQoJ3x8Jyk7IC8vIHR5cGVvZiBtc2cucG9zdERhdGEgPT09ICdvYmplY3QnID8gbXNnLnBvc3REYXRhIDogSlNPTi5wYXJzZShtc2cucG9zdERhdGEpO1xuXHQgICAgICAgIHZhciBtZXRob2QgPSBuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLnNlbmRCZWFjb24gPyAnUE9TVCcgOiAnR0VUJztcblx0ICAgICAgICAvLyBjb25zb2xlLmxvZygnVE9ETyB0ZXN0IGNoYW5nZVRvSHR0cFJlcXVlc3QuLi4nKTtcblx0ICAgICAgICBfc2VsZi5odHRwUmVxdWVzdEJlYWNvbihwb3N0RGF0YSwgbXNnLnVybCwgbWV0aG9kLCB0cnVlKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sXG5cdFxuXHQgIGRhdGFJbkFycmF5OiBmdW5jdGlvbiAoYXJyYXksIGRhdGEpIHtcblx0ICAgIHZhciBmbGFnO1xuXHQgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuXHQgICAgICBpZiAoYXJyYXlbaV0uaWQgPT09IGRhdGEuaWQpIHtcblx0ICAgICAgICBmbGFnID0gdHJ1ZTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgcmV0dXJuIGZsYWc7XG5cdCAgfSxcblx0XG5cdCAgcmVkdWNlRGF0YUluQXJyYXk6IGZ1bmN0aW9uIChhcnJheSwgZGF0YSkge1xuXHQgICAgdmFyIGFyciA9IFtdO1xuXHQgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuXHQgICAgICBpZiAoYXJyYXlbaV0uaWQgIT09IGRhdGEuaWQpIHtcblx0ICAgICAgICBhcnIucHVzaChhcnJheVtpXSk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIHJldHVybiBhcnI7XG5cdCAgfSxcblx0XG5cdCAgbXNnUXVldWVUb0h0dHBSZXF1ZXN0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICB2YXIgbXNnUXVldWUgPSB0aGlzLndzSGFuZGxlci5nZXRNc2dRdWV1ZSgpO1xuXHQgICAgdGhpcy5jaGFuZ2VUb0h0dHBSZXF1ZXN0KG1zZ1F1ZXVlKTtcblx0ICAgIHRoaXMud3NIYW5kbGVyLmNsZWFyTXNnUXVldWUoKTtcblx0ICB9LFxuXHRcblx0ICB3YXRjaFF1ZXVlOiBmdW5jdGlvbiAoKSB7XG5cdCAgICB2YXIgX3NlbGYgPSB0aGlzO1xuXHRcblx0ICAgIC8vIGJlZm9yZXVubG9hZCDkvb/nlKjpmY3nuqfmiJBodHRw6K+35rGC55qE5pa55byP5riF56m6bXNnUXVldWVcblx0ICAgIHV0aWxFdmVudC5vbih3aW4sICdiZWZvcmV1bmxvYWQnLCBmdW5jdGlvbigpIHtcblx0ICAgICAgX3NlbGYubXNnUXVldWVUb0h0dHBSZXF1ZXN0KCk7XG5cdCAgICAgIC8vIHZhciBtc2dRdWV1ZSA9IF9zZWxmLndzSGFuZGxlci5nZXRNc2dRdWV1ZSgpO1xuXHQgICAgICAvLyBfc2VsZi5jaGFuZ2VUb0h0dHBSZXF1ZXN0KG1zZ1F1ZXVlKTtcblx0ICAgICAgLy8gX3NlbGYud3NIYW5kbGVyLmNsZWFyTXNnUXVldWUoKTtcblx0ICAgIH0pO1xuXHRcblx0ICAgIC8vIOebkeWQrOWIsG1zZ1F1ZXVl5paw5aKe5YaF5a6577yM562J5b6F5pWw56eS5ZCO5bCd6K+V6ZmN57qn5Li6aHR0cOivt+axglxuXHQgICAgdGhpcy53c0hhbmRsZXIuc3Vic2NyaWJlKCdBUExVU19XU19NU0dfUVVFVUVfQ0hBTkdFJywgZnVuY3Rpb24gKGRhdGEpIHtcblx0ICAgICAgLy8gaWYgKCFhcGx1cy5hcGx1c0RlYnVnKSB7XG5cdCAgICAgIHdpbi5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgbXNnUXVldWUgPSBfc2VsZi53c0hhbmRsZXIuZ2V0TXNnUXVldWUoKTtcblx0ICAgICAgICBpZiAoX3NlbGYuZGF0YUluQXJyYXkobXNnUXVldWUsIGRhdGEpKSB7XG5cdCAgICAgICAgICBfc2VsZi5kb1NldFJldHJ5VGltZXMoKTtcblx0ICAgICAgICAgIF9zZWxmLmNoYW5nZVRvSHR0cFJlcXVlc3QoW2RhdGFdKTtcblx0ICAgICAgICAgIHZhciBhcnIgPSBfc2VsZi5yZWR1Y2VEYXRhSW5BcnJheShtc2dRdWV1ZSwgZGF0YSk7XG5cdCAgICAgICAgICBfc2VsZi53c0hhbmRsZXIuc2V0TXNnUXVldWUoYXJyKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0sIF9zZWxmLnRpbWVvdXRUb0h0dHApO1xuXHQgICAgfSk7XG5cdCAgfSxcblx0XG5cdCAgd2F0Y2hEb21haW46IGZ1bmN0aW9uICgpIHtcblx0ICAgIHZhciBfc2VsZiA9IHRoaXM7XG5cdCAgICB1dGlsR1EucHVzaEludG9Hb2xkbG9nUXVldWUoYXBsdXNTdGF0aWMuU1VCU0NSSUJFLCBbJ2FwbHVzSW5pdENvbnRleHQnLCBmdW5jdGlvbiAoY3R4KSB7XG5cdCAgICAgIHZhciB3aGVyZV90b19zZW5kID0gY3R4ID8gY3R4LndoZXJlX3RvX3NlbmQgOiB7fTtcblx0ICAgICAgdmFyIHJzID0gd2hlcmVfdG9fc2VuZC51cmwubWF0Y2goLyhcXHd8LSkrXFwuKFxcd3wtKStcXC4oXFx3fC0pKy8pO1xuXHQgICAgICBpZiAocnMgJiYgcnMubGVuZ3RoID4gMCkge1xuXHQgICAgICAgIF9zZWxmLmRvbWFpbiA9IHJzWzBdO1xuXHQgICAgICB9XG5cdCAgICB9XSk7XG5cdCAgfSxcblx0XG5cdCAgaXNQZXJzaXN0ZW50TGluazogZnVuY3Rpb24gKG1ldGhvZCkge1xuXHQgICAgcmV0dXJuIFBlcnNpc3RlbnRMaW5rTGlzdC5pbmRleE9mKG1ldGhvZCkgPiAtMTtcblx0ICB9LFxuXHRcblx0ICBydW46IGZ1bmN0aW9uIChvcHRpb25zLCBpc1N1cHBvcnRXUykge1xuXHQgICAgdmFyIG9iaiA9IHtcblx0ICAgICAgYXdzOiAxXG5cdCAgICB9O1xuXHQgICAgaWYgKCFpc1N1cHBvcnRXUykge1xuXHQgICAgICBvYmouX2ogPSAxO1xuXHQgICAgfVxuXHQgICAgdXRpbEdRLnB1c2hJbnRvR29sZGxvZ1F1ZXVlKCdhcGx1cy5hcHBlbmRNZXRhSW5mbycsIFsnYXBsdXMtZXhkYXRhJywgb2JqXSk7XG5cdCAgICB1dGlsR1EucHVzaEludG9Hb2xkbG9nUXVldWUoJ2FwbHVzLmFwcGVuZE1ldGFJbmZvJywgWydhcGx1cy1jcHZkYXRhJywgb2JqXSk7XG5cdFxuXHQgICAgdGhpcy5yZXRyeVRpbWVzID0gdGhpcy5nZXRSZXRyeVRpbWVzKCk7XG5cdCAgICB0aGlzLnBhZ2VMb2FkRGF0ZUhvdXIgPSB0aGlzLmdldERhdGVIb3VyKCk7XG5cdCAgICAvLyDkuI3mlK/mjIHplb/ov57mjqXnmoTmtY/op4jlmajlj6rpnIDopoF3YXRjaExPR++8jHdhdGNoTE9H5YaF5L2/55So55+t6L+e5o6l5Y+R5pel5b+XXG5cdCAgICBpZiAoaXNTdXBwb3J0V1MgJiYgdGhpcy5pc1BlcnNpc3RlbnRMaW5rKG9wdGlvbnMuY29udGV4dC53aGVyZV90b19zZW5kLm1ldGhvZCkpIHtcblx0ICAgICAgdGhpcy5zdGFydFdlYlNvY2tldCgpO1xuXHQgICAgICB0aGlzLndhdGNoTE9HKGlzU3VwcG9ydFdTKTtcblx0ICAgICAgdGhpcy53YXRjaFF1ZXVlKCk7XG5cdCAgICAgIHRoaXMud2F0Y2hEb21haW4oKTsgIFxuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgdGhpcy53YXRjaExPRyhpc1N1cHBvcnRXUyk7XG5cdCAgICB9XG5cdCAgfVxuXHR9KTtcblxuLyoqKi8gfSksXG4vKiA3MyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdC8qKlxuXHQgKiBhbGlsb2cvcyAtIHNyYy9saWJfdS91dGlsL2RhdGVVdGlsLmpzXG5cdCAqIOaXpeacn+W4ruWKqeexu1xuXHQgKlxuXHQgKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG5cdCAqXG5cdCAqIEF1dGhvcnM6XG5cdCAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cblx0ICovXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdGZ1bmN0aW9uIHplcm9GaWxsKG51bWJlciwgdGFyZ2V0TGVuZ3RoLCBmb3JjZVNpZ24pIHtcblx0ICB2YXIgYWJzTnVtYmVyID0gJycgKyBNYXRoLmFicyhudW1iZXIpLFxuXHQgICAgemVyb3NUb0ZpbGwgPSB0YXJnZXRMZW5ndGggLSBhYnNOdW1iZXIubGVuZ3RoLFxuXHQgICAgc2lnbiA9IG51bWJlciA+PSAwO1xuXHQgIHJldHVybiAoc2lnbiA/IChmb3JjZVNpZ24gPyAnKyc6ICcnKSA6ICctJykgKyBNYXRoLnBvdygxMCwgTWF0aC5tYXgoMCwgemVyb3NUb0ZpbGwpKS50b1N0cmluZygpLnN1YnN0cigxKSArIGFic051bWJlcjtcblx0fTtcblx0LyoqXG5cdCAqIOagueaNruagvOW8j+i/lOWbnuaXpeacn1xuXHQgKiBAcGFyYW1zIFtmb3JtYXRdIFwiLVwiICgyMDE4LTAxLTAxKSB8IFwiL1wiICgyMDE4LzAxLzAxKVxuXHQgKi9cblx0ZXhwb3J0cy5nZXRGb3JtYXREYXRlID0gZnVuY3Rpb24oZm9ybWF0KSB7XG5cdCAgdmFyIGQgPSBuZXcgRGF0ZSgpO1xuXHQgIHRyeSB7XG5cdCAgICByZXR1cm4gW1xuXHQgICAgICBkLmdldEZ1bGxZZWFyKCksXG5cdCAgICAgIHplcm9GaWxsKGQuZ2V0TW9udGgoKSArIDEsIDIsIDApLFxuXHQgICAgICB6ZXJvRmlsbChkLmdldERhdGUoKSwgMiwgMClcblx0ICAgIF0uam9pbihmb3JtYXQgfHwgJycpO1xuXHQgIH0gY2F0Y2ggKGUpIHtcblx0ICAgIHJldHVybiAnJztcblx0ICB9XG5cdH07XG5cblxuLyoqKi8gfSksXG4vKiA3NCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBwcm9qZWN0IC0gZmlsZXBhdGhcblx0ICogY29va2llXG5cdCAqXG5cdCAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cblx0ICpcblx0ICogQXV0aG9yczpcblx0ICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuXHQgKi9cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIGVhY2ggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI3KTtcblx0dmFyIHRsZCA9IF9fd2VicGFja19yZXF1aXJlX18oNzUpO1xuXHRcblx0LyoqXG5cdCAqIOWPluW+lyBjb29raWUg5Lit5a+55bqUIGtleSDnmoTlgLxcblx0ICogQHBhcmFtIGtleSB7U3RyaW5nfVxuXHQgKi9cblx0ZnVuY3Rpb24gZ2V0Q29va2llKGtleSkge1xuXHQgIGlmICghZG9jdW1lbnQpIHtcblx0ICAgIHJldHVybiAnJztcblx0ICB9XG5cdCAgdmFyIGNvb2tpZV92YWwgPSBkb2N1bWVudC5jb29raWUubWF0Y2goXG5cdCAgICBuZXcgUmVnRXhwKCcoPzpefDspXFxcXHMqJyArIGtleSArICc9KFteO10rKScpXG5cdCAgKTtcblx0ICByZXR1cm4gY29va2llX3ZhbCA/IGNvb2tpZV92YWxbMV0gOiAnJztcblx0fTtcblx0ZXhwb3J0cy5nZXRDb29raWUgPSBnZXRDb29raWU7XG5cdFxuXHRmdW5jdGlvbiBnZXRFeHBpcmVzVGltZSAob3B0aW9ucykge1xuXHQgIHZhciBkYXRlID0gbmV3IERhdGUoKTtcblx0ICB2YXIgZGF0ZVN0ciA9ICcnO1xuXHQgIGlmICgnc2Vzc2lvbicgPT09IG9wdGlvbnMuZXhwaXJlcykge1xuXHQgIH0gZWxzZSBpZiAob3B0aW9ucy5leHBpcmVzICYmICgnbnVtYmVyJyA9PT0gdHlwZW9mIG9wdGlvbnMuZXhwaXJlcyB8fCBvcHRpb25zLmV4cGlyZXMudG9VVENTdHJpbmcpKSB7XG5cdCAgICAvLyBvcHRpb25zLmV4cGlyZXPlpKnmlbBcblx0ICAgIGlmICgnbnVtYmVyJyA9PT0gdHlwZW9mIG9wdGlvbnMuZXhwaXJlcykge1xuXHQgICAgICBkYXRlLnNldFRpbWUoZGF0ZS5nZXRUaW1lKCkgKyAyNCAqIG9wdGlvbnMuZXhwaXJlcyAqIDYwICogNjAgKiAxMDAwKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGRhdGUgPSBvcHRpb25zLmV4cGlyZXM7XG5cdCAgICB9XG5cdCAgICBkYXRlU3RyID0gJ2V4cGlyZXM9JyArIGRhdGUudG9VVENTdHJpbmcoKTtcblx0ICB9IGVsc2Uge1xuXHQgICAgLy8gMjDlubTov4fmnJ/ml7bpl7Rcblx0ICAgIGRhdGUuc2V0VGltZShkYXRlLmdldFRpbWUoKSArIDIwICogMzY1ICogMjQgKiA2MCAqIDYwICogMTAwMCk7XG5cdCAgICBkYXRlU3RyID0gJ2V4cGlyZXM9JyArIGRhdGUudG9VVENTdHJpbmcoKTtcblx0ICB9XG5cdCAgcmV0dXJuIGRhdGVTdHI7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIHRyeVNldENvb2tpZShuYW1lLCB2YWwsIG9wdGlvbnMpIHtcblx0ICBpZiAoIWRvY3VtZW50KSB7XG5cdCAgICByZXR1cm47XG5cdCAgfVxuXHQgIGlmICghb3B0aW9ucykge1xuXHQgICAgb3B0aW9ucyA9IHt9O1xuXHQgIH1cblx0ICB2YWwgKz0gJzsnICsgKG9wdGlvbnMuZXhwaXJlcyB8fCBnZXRFeHBpcmVzVGltZShvcHRpb25zKSk7XG5cdCAgLy8gd3d3LnRhb2Jhby5jb20gLT4gdGFvYmFvLmNvbVxuXHQgIHZhbCArPSAnOyBwYXRoPScgKyAob3B0aW9ucy5wYXRoID8gb3B0aW9ucy5wYXRoIDogJy8nKTtcblx0ICB2YWwgKz0gJzsgZG9tYWluPScgKyBvcHRpb25zLmRvbWFpbjtcblx0XG5cdCAgZG9jdW1lbnQuY29va2llID0gbmFtZSArICc9JyArIHZhbDtcblx0XG5cdCAgaWYgKG9wdGlvbnMuU2FtZVNpdGUgJiYgL0Nocm9tZVxcLzhcXGQrLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKSB7XG5cdCAgICB2YWwgKz0gJzsgU2FtZVNpdGU9JyArIG9wdGlvbnMuU2FtZVNpdGU7XG5cdCAgICB2YWwgKz0gJzsgU2VjdXJlJztcblx0ICAgIGRvY3VtZW50LmNvb2tpZSA9IG5hbWUgKyAnPScgKyB2YWw7XG5cdCAgfVxuXHQgIHJldHVybiBnZXRDb29raWUobmFtZSk7XG5cdH07XG5cdGV4cG9ydHMudHJ5U2V0Q29va2llID0gdHJ5U2V0Q29va2llO1xuXHRcblx0LyoqXG5cdCAqIEBwYXJhbXMge1N0cmluZ30gbmFtZSBjb29raWVLZXlcblx0ICogQHBhcmFtcyB7U3RyaW5nfE51bWJlcn0gdmFsIGNvb2tpZVZhbHVlXG5cdCAqIEBwYXJhbXMge09iamVjdH0gb3B0aW9ucyB7XG5cdCAqICAgZXhwaXJlc1xuXHQgKiAgIGRvbWFpblxuXHQgKiAgIHBhdGhcblx0ICogfVxuXHQgKi9cblx0ZnVuY3Rpb24gc2V0Q29va2llKG5hbWUsIHZhbCwgb3B0aW9ucykge1xuXHQgIHRyeSB7XG5cdCAgICBpZiAoIWRvY3VtZW50KSB7XG5cdCAgICAgIHJldHVybiAnJztcblx0ICAgIH1cblx0ICAgIGlmICghb3B0aW9ucykge1xuXHQgICAgICBvcHRpb25zID0ge307XG5cdCAgICB9XG5cdCAgICBpZiAob3B0aW9ucy5kb21haW4pIHtcblx0ICAgICAgdHJ5U2V0Q29va2llKG5hbWUsIHZhbCwgb3B0aW9ucyk7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICB2YXIgZG9tYWlucyA9IHRsZC5nZXREb21haW5zKCk7XG5cdCAgICAgIHZhciBpID0gMDtcblx0ICAgICAgd2hpbGUgKGkgPCBkb21haW5zLmxlbmd0aCkge1xuXHQgICAgICAgIG9wdGlvbnMuZG9tYWluID0gZG9tYWluc1tpXTtcblx0ICAgICAgICBpZiAoIXRyeVNldENvb2tpZShuYW1lLCB2YWwsIG9wdGlvbnMpKSB7XG5cdCAgICAgICAgICBpKys7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIGkgPSBkb21haW5zLmxlbmd0aDtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9IGNhdGNoIChlKSB7fVxuXHR9O1xuXHRcblx0ZXhwb3J0cy5zZXRDb29raWUgPSBzZXRDb29raWU7XG5cdFxuXHR2YXIga2V5cyA9IFsndHJhY2tuaWNrJywgJ3RodycsICdjbmEnXTtcblx0XG5cdGV4cG9ydHMuZ2V0RGF0YSA9IGZ1bmN0aW9uICgpIHtcblx0ICB2YXIgZGF0YSA9IHt9O1xuXHQgIGVhY2goa2V5cywgZnVuY3Rpb24gKGspIHtcblx0ICAgIGRhdGFba10gPSBnZXRDb29raWUoayk7XG5cdCAgfSk7XG5cdFxuXHQgIGlmIChsb2NhdGlvbikge1xuXHQgICAgdmFyIGhvc3RuYW1lID0gbG9jYXRpb24uaG9zdG5hbWU7XG5cdCAgICAvLyBUT0RPIOW+heWtkOeXleacjeWKoeerr+WunueOsOiHquWKqOS7jmh0dHDlpLTph4zlj5ZjbmF1aemAu+i+keWQjuaKiui/meautemAu+i+keW5suaOie+8gVxuXHQgICAgLy8gMjAxMy0wNS0wNiDkuIDllbjpnIDmsYLvvIzku4XlnKggdGFueC5jb20g5oiWICoudGFueC5jb20g6aG16Z2i5Y+WIGNuYXVpIOi/meS4qiBjb29raWVcblx0ICAgIGRhdGEuY25hdWkgPSAvXFxidGFueFxcLmNvbSQvLnRlc3QoaG9zdG5hbWUpID8gZ2V0Q29va2llKCdjbmF1aScpIDogJyc7XG5cdCAgfVxuXHRcblx0ICByZXR1cm4gZGF0YTtcblx0fTtcblx0XG5cdC8vIOiHquWumuS5iWNvb2tpZemHh+mbhlxuXHQvLyBodHRwczovL2xhcmsuYWxpcGF5LmNvbS9hcGx1c2pzL2RvY3Mva3ZobWJnXG5cdC8vIDIwMTgvMy8xMlxuXHQvLyDkuI3lho3ph4fpm4ZfYV9kX2HvvIzph4fpm4ZobmfvvIzlubbkv67mlLnkuLpfaG5nXG5cdC8v6K+m6KeB77yaaHR0cDovL2dpdGxhYi5hbGliYWJhLWluYy5jb20vYWxpbG9nL2tiL2lzc3Vlcy8yMjFcblx0ZXhwb3J0cy5nZXRIbmcgPSBmdW5jdGlvbiAoKSB7XG5cdCAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChnZXRDb29raWUoJ2huZycpIHx8ICcnKTtcblx0fTtcblx0XG5cdGV4cG9ydHMuZ2V0Q29va2llQ25hID0gZnVuY3Rpb24gKG5hbWUpIHtcblx0ICByZXR1cm4gZ2V0Q29va2llKG5hbWUpIHx8IGdldENvb2tpZSgnXycgKyBuYW1lKTtcblx0fTtcblx0ZXhwb3J0cy5zZXRDb29raWVDbmEgPSBmdW5jdGlvbiAobmFtZSwgdmFsLCBvcHRpb25zKSB7XG5cdCAgdmFyIGRvbWFpbnMgPSB0bGQuZ2V0RG9tYWlucygpO1xuXHQgIHZhciBpID0gMDtcblx0ICB3aGlsZSAoaSA8IGRvbWFpbnMubGVuZ3RoKSB7XG5cdCAgICBvcHRpb25zLmRvbWFpbiA9IGRvbWFpbnNbaV07XG5cdCAgICBpZiAoIXRyeVNldENvb2tpZShuYW1lLCB2YWwsIG9wdGlvbnMpKSB7XG5cdCAgICAgIGlmIChpID09PSBkb21haW5zLmxlbmd0aCAtIDEpIHtcblx0ICAgICAgICB2YXIgdmFsdWUgPSB2YWwgKyAnOycgKyBnZXRFeHBpcmVzVGltZShvcHRpb25zKTtcblx0ICAgICAgICB2YWx1ZSArPSAnOyBwYXRoPS8nO1xuXHQgICAgICAgIGRvY3VtZW50LmNvb2tpZSA9ICdfJyArIG5hbWUgKyAnPScgKyB2YWx1ZTtcblx0ICAgICAgfVxuXHQgICAgICBpKys7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBpID0gZG9tYWlucy5sZW5ndGg7XG5cdCAgICB9XG5cdCAgfVxuXHR9O1xuXG5cbi8qKiovIH0pLFxuLyogNzUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQvKipcblx0ICogQGF1dGhvciBqaXpoYS53eWpcblx0ICogQGJsb2cgaHR0cDovL29sZGoubmV0XG5cdCAqXG5cdCAqIFRMRCA9IFRvcCBMZXZlbCBEb21haW5cblx0ICpcblx0ICogYXBsdXMg5YaZIGNvb2tpZSDml7bvvIzpgJrluLjopoHmsYLlhpnliLDmoLnln5/vvIzmr5TlpoIgcGFpbWFpLnRhb2Jhby5jb20g55qEIGNvb2tpZSDopoHlhpnliLAgdGFvYmFvLmNvbSDln5/kuIvvvIxcblx0ICog5L2G5piv5pyJ5Lqb5ZWG5a6256uZ54K557uR5a6a5LqG6Ieq5a6a5LmJ5Z+f5ZCN77yM5q+U5aaCIGh0dHA6Ly9odWFzaGVuZ3NoaWppLmNvbS5jbi8g77yM5aaC5p6c5Y+q5piv566A5Y2V5Zyw5Y+W5Z+f5ZCN55qE5pyA5ZCO5Lik5L2N77yMXG5cdCAqIOWwseS8muWPluWIsCBjb20uY27vvIzml6Dms5XmraPluLjorr7nva4gY29va2ll77yM5omA5Lul6ZyA6KaB6L+Z5Liq5bqTXG5cdCAqIG1vZGlmeSBieSBA6LCL5aOrIGluIDIwMTctMTAtMjjml6XvvIzlj5bmtojplb/ln5/lkI3lkI7nvIDnmb3lkI3ljZXvvIzku6Xop6PlhrNsYXphZGHnrYnmlrDmjqXlhaXkuJrliqHpl67pophcblx0ICovXG5cdFxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRleHBvcnRzLmdldERvbWFpbnMgPSBmdW5jdGlvbigpIHtcblx0ICB2YXIgdG9wcyA9IFtdO1xuXHQgIHRyeSB7XG5cdCAgICB2YXIgZnVsbF9kb21haW4gPSBsb2NhdGlvbi5ob3N0bmFtZTtcblx0ICAgIHZhciBhID0gZnVsbF9kb21haW4uc3BsaXQoJy4nKTtcblx0ICAgIHZhciBpID0gMjtcblx0ICAgIHdoaWxlKGkgPD0gYS5sZW5ndGgpIHtcblx0ICAgICAgdG9wcy5wdXNoKGEuc2xpY2UoYS5sZW5ndGggLSBpKS5qb2luKCcuJykpO1xuXHQgICAgICBpKys7XG5cdCAgICB9XG5cdCAgfSBjYXRjaCAoZSkge31cblx0ICByZXR1cm4gdG9wcztcblx0fTtcblxuXG4vKioqLyB9KSxcbi8qIDc2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIFRPRE86IFNoYXJlZFdvcmtlciBwbGF5IHdpdGggV2ViU29ja2V0XG5cdCAqXG5cdCAqIHdlYnNvY2tldOmAmumBk1xuXHQgKiB3ZWJzb2NrZXQgcmVhZHlTdGF0ZeWPluWAvOiMg+WbtFxuXHQgKiBDT05ORUNUSU5HIDAg6L+e5o6l6L+Y5rKh5byA5ZCv44CCXG5cdCAqIE9QRU4gIDEg6L+e5o6l5bey5byA5ZCv5bm25YeG5aSH5aW96L+b6KGM6YCa5L+h44CCXG5cdCAqIENMT1NJTkcgMiDov57mjqXmraPlnKjlhbPpl63nmoTov4fnqIvkuK3jgIJcblx0ICogQ0xPU0VEICAzIOi/nuaOpeW3sue7j+WFs+mXre+8jOaIluiAhei/nuaOpeaXoOazleW7uueri+OAglxuXHQgKlxuXHQgKiAgdGhlIGV2ZW50IG9mICdhcGx1c0luaXRDb250ZXh0JyBjb21lIGZyb20gYXBsdXMuanNcblx0ICpcblx0ICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuXHQgKlxuXHQgKiBBdXRob3JzOlxuXHQgKiAgIFJpY2hhcmR86LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cblx0ICovXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciBERUZBVUxUX0RPTUFJTiA9ICd3cy5tbXN0YXQuY29tJztcblx0XG5cdHZhciBhcGx1c1N0YXRpYyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cdHZhciBQdWJTdWJXZWIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgdXRpbEdRID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MSk7XG5cdHZhciB1dGlsQ2F0Y2ggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc3KTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gUHViU3ViV2ViLmV4dGVuZCh7XG5cdCAgc3RhdHVzOiAnaW5hY3RpdmUnLCAvLyBhdHRpdmUgfHwgaW5hY3RpdmVcblx0XG5cdCAgd2Vic29ja2V0OiB7fSxcblx0XG5cdCAgd3NpbmRleFByZTogJ3dzcycsXG5cdFxuXHQgIHdzaW5kZXg6IDAsXG5cdFxuXHQgIG1zZ19xdWV1ZTogW10sXG5cdFxuXHQgIHNldFdzSGFuZGxlcjogZnVuY3Rpb24gKHdzVXJsKSB7XG5cdCAgICByZXR1cm4gdGhpcy53ZWJzb2NrZXRbdGhpcy53c2luZGV4UHJlICsgKyt0aGlzLndzaW5kZXhdID0gbmV3IHRoaXMuY3R4LldlYlNvY2tldCh3c1VybCk7XG5cdCAgfSxcblx0XG5cdCAgZ2V0V3NIYW5kbGVyOiBmdW5jdGlvbiAoKSB7XG5cdCAgICByZXR1cm4gdGhpcy53ZWJzb2NrZXRbdGhpcy53c2luZGV4UHJlICsgdGhpcy53c2luZGV4XTtcblx0ICB9LFxuXHRcblx0ICBnZXRNc2dRdWV1ZTogZnVuY3Rpb24gKCkge1xuXHQgICAgcmV0dXJuIHRoaXMubXNnX3F1ZXVlO1xuXHQgIH0sXG5cdFxuXHQgIGNsZWFyTXNnUXVldWU6IGZ1bmN0aW9uICgpIHtcblx0ICAgIHRoaXMubXNnX3F1ZXVlID0gW107XG5cdCAgfSxcblx0XG5cdCAgc2V0TXNnUXVldWU6IGZ1bmN0aW9uIChtc2dRdWV1ZSkge1xuXHQgICAgdGhpcy5tc2dfcXVldWUgPSBtc2dRdWV1ZTtcblx0ICB9LFxuXHRcblx0ICAvKipcblx0ICAgKiDova7or6LlpITnkIbpmJ/liJflhoXlm7rlrprmnaHmlbDnmoTml6Xlv5fvvIzku6XlhY3lh7rnjrDmrbvlvqrnjq9cblx0ICAgKi9cblx0ICBwcm9lc3NNc2dRdWV1ZTogZnVuY3Rpb24gKG1zZ1F1ZXVlKSB7XG5cdCAgICB2YXIgX3NlbGYgPSB0aGlzO1xuXHQgICAgdmFyIGkgPSAwO1xuXHQgICAgdmFyIHNpemU7XG5cdCAgICBpZiAobXNnUXVldWUgJiYgbXNnUXVldWUubGVuZ3RoID4gMCkge1xuXHQgICAgICBzaXplID0gbXNnUXVldWUubGVuZ3RoO1xuXHQgICAgICB3aGlsZSAoaSA8IHNpemUpIHtcblx0ICAgICAgICBfc2VsZi5zZW5kKG1zZ1F1ZXVlLnNoaWZ0KCkpO1xuXHQgICAgICAgIGkrKztcblx0ICAgICAgfVxuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgc2l6ZSA9IF9zZWxmLm1zZ19xdWV1ZS5sZW5ndGg7XG5cdCAgICAgIHdoaWxlIChpIDwgc2l6ZSkge1xuXHQgICAgICAgIF9zZWxmLnNlbmQoX3NlbGYubXNnX3F1ZXVlLnNoaWZ0KCkpO1xuXHQgICAgICAgIGkrKztcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sXG5cdFxuXHQgIC8qKlxuXHQgICAqIEBwYXJhbXMge3N0cmluZ30gZG9tYWluXG5cdCAgICogVE9ETzogcmVhZCBpdCBmcm9tIHB2bG9nIGxvZy5tbXN0YXQuY29tIHx8IHNnLm1tc3RhdC5jb20gfHwgZ2oubW1zdGF0LmNvbVxuXHQgICAqL1xuXHQgIGluaXRXZWJTb2NrZXQ6IGZ1bmN0aW9uIChkb21haW4pIHtcblx0ICAgIHZhciBfc2VsZiA9IHRoaXM7XG5cdCAgICB2YXIgd3NQcm90b2NvbCA9IGxvY2F0aW9uLnByb3RvY29sID09PSBhcGx1c1N0YXRpYy5IVFRQUyA/ICd3c3M6Ly8nIDogJ3dzOi8vJztcblx0ICAgIHZhciB3c1VybCA9IHdzUHJvdG9jb2wgKyBkb21haW4gKyAnL3dzJztcblx0ICAgIHZhciBmaWxlbmFtZSA9ICdpbml0V2ViU29ja2V0Jztcblx0ICAgIHRyeSB7XG5cdCAgICAgIGlmIChfc2VsZi5jbmEpIHtcblx0ICAgICAgICB3c1VybCArPSAnLycgKyBfc2VsZi5jbmE7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKF9zZWxmLnBhcmFtcyAmJiBfc2VsZi5wYXJhbXMubGVuZ3RoID4gMCkge1xuXHQgICAgICAgIHdzVXJsICs9ICc/JyArIF9zZWxmLnBhcmFtcy5qb2luKCcmJyk7XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIFdTID0gX3NlbGYuc2V0V3NIYW5kbGVyKHdzVXJsKTtcblx0ICAgICAgdmFyIGNyZWF0ZVRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcblx0ICAgICAgV1Mub25vcGVuID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIF9zZWxmLnN0YXR1cyA9ICdhY3RpdmUnO1xuXHQgICAgICAgIHZhciBNU0dTID0gX3NlbGYuZ2V0TXNnUXVldWUoKTtcblx0ICAgICAgICBpZiAoTVNHUy5sZW5ndGggPiAwKSB7XG5cdCAgICAgICAgICBfc2VsZi5wcm9lc3NNc2dRdWV1ZShNU0dTKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdmFyIGNvbm5UaW1lTXNnID0gJ2Nvbm5UaW1lPScgKyAobmV3IERhdGUoKS5nZXRUaW1lKCkgLSBjcmVhdGVUaW1lKTtcblx0ICAgICAgICB1dGlsQ2F0Y2guY2F0Y2hFeGNlcHRpb24oZmlsZW5hbWUgKyAnX29ub3BlbicsIHtcblx0ICAgICAgICAgIG1lc3NhZ2U6IGNvbm5UaW1lTXNnXG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgX3NlbGYucHVibGlzaCgnQVBMVVNfV1NfT1BFTicpO1xuXHQgICAgICB9O1xuXHQgICAgICBXUy5vbmVycm9yID0gZnVuY3Rpb24gKGUpIHtcblx0ICAgICAgICBfc2VsZi5zdGF0dXMgPSAnaW5hY3RpdmUnO1xuXHQgICAgICAgIHZhciB0YXJnZXQgPSBlID8gZS50YXJnZXQgOiB7fTtcblx0ICAgICAgICB2YXIgdGltZVN0YW1wID0gZSA/IGUudGltZVN0YW1wIDogJyc7XG5cdCAgICAgICAgdXRpbENhdGNoLmNhdGNoRXhjZXB0aW9uKGZpbGVuYW1lICsgJ19vbmVycm9yJywge1xuXHQgICAgICAgICAgbWVzc2FnZTogJ3RhcmdldFVybD0nICsgdGFyZ2V0LnVybCArICcmcmVhZHlTdGF0ZT0nICsgdGFyZ2V0LnJlYWR5U3RhdGUgKyAnJnRpbWVTdGFtcD0nICsgdGltZVN0YW1wXG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgX3NlbGYucHVibGlzaCgnQVBMVVNfV1NfRVJST1InKTtcblx0ICAgICAgfTtcblx0ICAgICAgV1Mub25jbG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBfc2VsZi5zdGF0dXMgPSAnaW5hY3RpdmUnO1xuXHQgICAgICAgIF9zZWxmLnB1Ymxpc2goJ0FQTFVTX1dTX0NMT1NFJyk7XG5cdCAgICAgICAgLy8gX3NlbGYud2Vic29ja2V0ID0gbnVsbDtcblx0ICAgICAgfTtcblx0ICAgICAgV1Mub25tZXNzYWdlID0gZnVuY3Rpb24gKG8pIHtcblx0ICAgICAgICBfc2VsZi5wdWJsaXNoKCdBUExVU19XU19TRVJWRVJfTVNHJywgby5kYXRhKTtcblx0ICAgICAgfTtcblx0ICAgIH0gY2F0Y2ggKGUpIHtcblx0ICAgICAgY29uc29sZS5sb2coZSk7XG5cdCAgICAgIHV0aWxDYXRjaC5jYXRjaEV4Y2VwdGlvbihmaWxlbmFtZSArICdfZXhjZXB0aW9uJywgZSk7XG5cdCAgICAgIF9zZWxmLnB1Ymxpc2goJ0FQTFVTX1dTX0VYQ0VQVElPTicpO1xuXHQgICAgfVxuXHQgIH0sXG5cdFxuXHQgIHJlYWR5SW5pdFdlYlNvY2tldDogZnVuY3Rpb24gKCkge1xuXHQgICAgdmFyIF9zZWxmID0gdGhpcztcblx0ICAgIHV0aWxHUS5wdXNoSW50b0dvbGRsb2dRdWV1ZShhcGx1c1N0YXRpYy5TVUJTQ1JJQkUsIFsnYXBsdXNJbml0Q29udGV4dCcsIGZ1bmN0aW9uICgpIHtcblx0ICAgICAgdmFyIHdlYnNvY2tldCA9IF9zZWxmLmdldFdzSGFuZGxlcigpO1xuXHQgICAgICBpZiAoIXdlYnNvY2tldCB8fCAod2Vic29ja2V0ICYmIHdlYnNvY2tldC5yZWFkeVN0YXRlID4gMSkpIHtcblx0ICAgICAgICAvLyBzdGVwMlxuXHQgICAgICAgIF9zZWxmLmluaXRXZWJTb2NrZXQoREVGQVVMVF9ET01BSU4pO1xuXHQgICAgICB9XG5cdCAgICAgIC8vIC8vIHN0ZXAxXG5cdCAgICAgIC8vIF9zZWxmLnN0b3AoKTtcblx0ICAgIH1dKTtcblx0ICB9LFxuXHRcblx0ICBzdGFydDogZnVuY3Rpb24gKCkge1xuXHQgICAgdmFyIHdlYnNvY2tldCA9IHRoaXMuZ2V0V3NIYW5kbGVyKCk7XG5cdCAgICBpZiAoIXdlYnNvY2tldCB8fCAod2Vic29ja2V0ICYmIHdlYnNvY2tldC5yZWFkeVN0YXRlID4gMSkpIHtcblx0ICAgICAgdGhpcy5zdGF0dXMgPSAnYWN0aXZlJztcblx0ICAgICAgdGhpcy5yZWFkeUluaXRXZWJTb2NrZXQoKTtcblx0ICAgIH1cblx0ICB9LFxuXHRcblx0ICBzdG9wOiBmdW5jdGlvbiAoKSB7XG5cdCAgICB2YXIgd2Vic29ja2V0ID0gdGhpcy5nZXRXc0hhbmRsZXIoKTtcblx0ICAgIGlmICh3ZWJzb2NrZXQgJiYgd2Vic29ja2V0LnJlYWR5U3RhdGUgPD0gMSkge1xuXHQgICAgICB0aGlzLnN0YXR1cyA9ICdpbmFjdGl2ZSc7XG5cdCAgICAgIHdlYnNvY2tldC5jbG9zZSgpO1xuXHQgICAgfVxuXHQgIH0sXG5cdFxuXHQgIHNlbmRNc2c6IGZ1bmN0aW9uIChtc2cpIHtcblx0ICAgIHZhciB3ZWJzb2NrZXQgPSB0aGlzLmdldFdzSGFuZGxlcigpO1xuXHQgICAgaWYgKHdlYnNvY2tldCAmJiB3ZWJzb2NrZXQucmVhZHlTdGF0ZSA9PT0gMSkge1xuXHQgICAgICB3ZWJzb2NrZXQuc2VuZChtc2cpO1xuXHQgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgIH1cblx0ICB9LFxuXHRcblx0ICAvKipcblx0ICAgKiBAcGFyYW1zIHtPYmplY3R9IGRhdGEge3R5cGU6ICdzeXMnLCBtc2c6ICdvZmZsaW5lJ31cblx0ICAgKi9cblx0ICBwcm9jZXNzU3lzRXZlbnQ6IGZ1bmN0aW9uIChkYXRhKSB7XG5cdCAgICBpZiAoZGF0YS5tc2cgPT09ICdhY3RpdmUnKSB7XG5cdCAgICAgIHRoaXMuc3RhcnQoKTtcblx0ICAgIH0gZWxzZSBpZiAoZGF0YS5tc2cgPT09ICdpbmFjdGl2ZScpIHtcblx0ICAgICAgdGhpcy5zdG9wKCk7XG5cdCAgICB9XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICogQHBhcmFtcyB7T2JqZWN0fSBkYXRhIHtcblx0ICAgKiAgIGlkOiAnaWQnICsgZ2V0UmFuZG9tKDEsIDEwMDAwMDAwMCksXG5cdCAgICogICB0eXBlOiBwdiB8fCBhcGx1c1xuXHQgICAqICAgbXNnOiBwdmxvZ0RldGFpbCB8fCBhcGx1c0RldGFpbFxuXHQgICAqIH1cblx0ICAgKi9cblx0ICBwcm9jZXNzTG9nRXZlbnQ6IGZ1bmN0aW9uIChkYXRhKSB7XG5cdCAgICBpZiAodGhpcy5zdGF0dXMgPT09ICdhY3RpdmUnKSB7XG5cdCAgICAgIHZhciBpc1N1Y2Nlc3MgPSB0aGlzLnNlbmRNc2coZGF0YS5tc2cucG9zdERhdGEpO1xuXHQgICAgICBpZiAoIWlzU3VjY2Vzcykge1xuXHQgICAgICAgIHRoaXMubXNnX3F1ZXVlLnB1c2goZGF0YSk7XG5cdCAgICAgICAgLy8g5YiG5Y+RbXNnUXVldWXlj5jljJbnmoTmtojmga/vvIxtYWluLmpz5YaF6K6i6ZiFXG5cdCAgICAgICAgdGhpcy5wdWJsaXNoKCdBUExVU19XU19NU0dfUVVFVUVfQ0hBTkdFJywgZGF0YSk7XG5cdCAgICAgIH1cblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHRoaXMubXNnX3F1ZXVlLnB1c2goZGF0YSk7XG5cdCAgICAgIC8vIOWIhuWPkW1zZ1F1ZXVl5Y+Y5YyW55qE5raI5oGv77yMbWFpbi5qc+WGheiuoumYhVxuXHQgICAgICB0aGlzLnB1Ymxpc2goJ0FQTFVTX1dTX01TR19RVUVVRV9DSEFOR0UnLCBkYXRhKTtcblx0ICAgIH1cblx0ICB9LFxuXHRcblx0ICBzZW5kOiBmdW5jdGlvbiAoZGF0YSkge1xuXHQgICAgdmFyIHdlYnNvY2tldCA9IHRoaXMuZ2V0V3NIYW5kbGVyKCk7XG5cdCAgICBpZiAoIXdlYnNvY2tldCB8fCB3ZWJzb2NrZXQucmVhZHlTdGF0ZSA+IDEpIHtcblx0ICAgICAgdGhpcy5zdGFydCgpO1xuXHQgICAgfVxuXHQgICAgc3dpdGNoIChkYXRhLnR5cGUpIHtcblx0ICAgIGNhc2UgJ3N5cyc6XG5cdCAgICAgIHRoaXMucHJvY2Vzc1N5c0V2ZW50KGRhdGEpO1xuXHQgICAgICBicmVhaztcblx0ICAgIGNhc2UgJ3B2Jzpcblx0ICAgIGNhc2UgJ2FwbHVzJzpcblx0ICAgICAgdGhpcy5wcm9jZXNzTG9nRXZlbnQoZGF0YSk7XG5cdCAgICAgIGJyZWFrO1xuXHQgICAgZGVmYXVsdDpcblx0ICAgICAgYnJlYWs7XG5cdCAgICB9XG5cdCAgfSxcblx0XG5cdCAgc3RhcnRXUzogZnVuY3Rpb24gKCkge1xuXHQgICAgdmFyIF9zZWxmID0gdGhpcztcblx0ICAgIF9zZWxmLnN0YXJ0KCk7XG5cdCAgICAvLyB3aW4uYWRkRXZlbnRMaXN0ZW5lcignb25saW5lJywgZnVuY3Rpb24gKCkge1xuXHQgICAgLy8gICAvLyBfc2VsZi5zdGFydCgpO1xuXHQgICAgLy8gfSk7XG5cdCAgICAvLyB3aW4uYWRkRXZlbnRMaXN0ZW5lcignb2ZmbGluZScsIGZ1bmN0aW9uICgpIHtcblx0ICAgIC8vICAgLy8gX3NlbGYuc3RvcCgpO1xuXHQgICAgLy8gfSk7XG5cdCAgICAvLyBpZiAoJ2hpZGRlbicgaW4gZG9jKSB7XG5cdCAgICAvLyAgIC8vIFBDXG5cdCAgICAvLyAgIHdpbi5hZGRFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgZnVuY3Rpb24gKCkge1xuXHQgICAgLy8gICAgIGlmIChkb2MudmlzaWJpbGl0eVN0YXRlID09PSAndmlzaWJsZScpIHtcblx0ICAgIC8vICAgICAgIF9zZWxmLnN0YXJ0KCk7XG5cdCAgICAvLyAgICAgfSBlbHNlIGlmIChkb2MudmlzaWJpbGl0eVN0YXRlID09PSAnaGlkZGVuJykge1xuXHQgICAgLy8gICAgICAgX3NlbGYuc3RvcCgpO1xuXHQgICAgLy8gICAgIH1cblx0ICAgIC8vICAgfSk7XG5cdCAgICAvLyB9IGVsc2Uge1xuXHQgICAgLy8gICAvLyDml6Dnur9cblx0ICAgIC8vICAgd2luLmFkZEV2ZW50TGlzdGVuZXIoJ3BhZ2VzaG93JywgZnVuY3Rpb24gKCkge1xuXHQgICAgLy8gICAgIF9zZWxmLnN0YXJ0KCk7XG5cdCAgICAvLyAgIH0pO1xuXHQgICAgLy8gICB3aW4uYWRkRXZlbnRMaXN0ZW5lcigncGFnZWhpZGUnLCBmdW5jdGlvbiAoKSB7XG5cdCAgICAvLyAgICAgX3NlbGYuc3RvcCgpO1xuXHQgICAgLy8gICB9KTtcblx0ICAgIC8vIH1cblx0ICB9XG5cdH0pO1xuXG5cbi8qKiovIH0pLFxuLyogNzcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogYWxpbG9nL3Mvc3JjL2xpYl91L3V0aWxzL3V0aWxBdHRyaWJ1dGUuanNcblx0ICpcblx0ICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuXHQgKlxuXHQgKiBBdXRob3JzOlxuXHQgKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG5cdCAqL1xuXHQndXNlIHN0cmljdCc7XG5cdFxuXHR2YXIgdXRpbEdRID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MSk7XG5cdFxuXHRleHBvcnRzLmNhdGNoRXhjZXB0aW9uID0gZnVuY3Rpb24gKGZpbGVuYW1lLCBlcnJvcikge1xuXHQgIHZhciBtZXNzYWdlID0gZmlsZW5hbWU7XG5cdCAgaWYgKHR5cGVvZiBlcnJvciA9PT0gJ29iamVjdCcgJiYgZXJyb3IubWVzc2FnZSkge1xuXHQgICAgbWVzc2FnZSA9IG1lc3NhZ2UgKyAnXycgKyBlcnJvci5tZXNzYWdlO1xuXHQgIH1cblx0ICB1dGlsR1EucHVzaEludG9Hb2xkbG9nUXVldWUoJ2FwbHVzLl9hcGx1c19jcGx1Z2luX20uZG9fdHJhY2tlcl9qc2Vycm9yJywgW3tcblx0ICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG5cdCAgICBlcnJvcjogSlNPTi5zdHJpbmdpZnkoZXJyb3IpLFxuXHQgICAgZmlsZW5hbWU6IGZpbGVuYW1lXG5cdCAgfV0pO1xuXHR9O1xuXG4vKioqLyB9KSxcbi8qIDc4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIHByb2plY3QgLSBmaWxlcGF0aFxuXHQgKiDms6jlhaVsb2dDb25maWcs5L6b5ZCO57ut5o+S5Lu25L2/55SoXG5cdCAqXG5cdCAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cblx0ICpcblx0ICogQXV0aG9yczpcblx0ICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuXHQgKi9cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIGVhY2ggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI3KTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuXHQgIHJldHVybiB7XG5cdCAgICBnZXRMb2dDb25maWc6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgdmFyIGxvZ0NvbmZpZyA9IHt9O1xuXHQgICAgICB2YXIgcGx1Z2lucyA9IHRoaXMub3B0aW9ucy5jb25maWcucGx1Z2lucztcblx0XG5cdCAgICAgIGZvciAodmFyIGsgaW4gcGx1Z2lucykge1xuXHQgICAgICAgIGxvZ0NvbmZpZ1trXSA9IHtcblx0ICAgICAgICAgIHBsdWdpbnM6IHBsdWdpbnNba10sXG5cdCAgICAgICAgICBjb250ZXh0OiB7fVxuXHQgICAgICAgIH07XG5cdCAgICAgICAgZWFjaChwbHVnaW5zW2tdLCBmdW5jdGlvbiAodikge1xuXHQgICAgICAgICAgbG9nQ29uZmlnW2tdLmNvbnRleHRbdi5uYW1lXSA9IHYuY29uZmlnIHx8IHt9O1xuXHQgICAgICAgIH0pO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBsb2dDb25maWc7XG5cdCAgICB9LFxuXHRcblx0ICAgIHJ1bjogZnVuY3Rpb24gKCkge1xuXHQgICAgICB0aGlzLm9wdGlvbnMuY29udGV4dC5sb2dDb25maWcgPSB0aGlzLmdldExvZ0NvbmZpZygpO1xuXHQgICAgICB0aGlzLm9wdGlvbnMuY29udGV4dC5sb2dDb25maWcucGFnZUxvYWRUaW1lID0gdGhpcy5vcHRpb25zLmNvbnRleHQuUEFHRV9MT0FEX1RJTUU7XG5cdCAgICB9XG5cdCAgfTtcblx0fTtcblxuXG4vKioqLyB9KSxcbi8qIDc5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIGFsaWxvZy9zIC0gc3JjL2xpYl91L2NvbmZpZy9wbHVnaW5zL2V0YWcuanNcblx0ICpcblx0ICog5L2c55So77ya5Y67IGh0dHBzOi8vbG9nLm1tc3RhdC5jb20vZWcuanMgfCBodHRwczovL2dqLm1tc3RhdC5jb20vZWcuanPlkIzmraVjbmHvvIzlubblhpnlhaXliLDmnKzlnLBjb29raWVcblx0ICogZGVwczog5pegXG5cdCAqXG5cdCAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cblx0ICpcblx0ICogQXV0aG9yczpcblx0ICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuXHQgKi9cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIGNvb2tpZSA9IF9fd2VicGFja19yZXF1aXJlX18oNzQpO1xuXHR2YXIgdXRpbERvbSA9IF9fd2VicGFja19yZXF1aXJlX18oMzYpO1xuXHR2YXIgdXRpbERhdGEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIzKTtcblx0dmFyIGRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDczKTtcblx0dmFyIHV0aWxFdGFnID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MCk7XG5cdHZhciB1dGlsR29sZGxvZyA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuXHQgIHJldHVybiB7XG5cdCAgICAvLyDliJ3lp4vljJbmqKHlnZdcblx0ICAgIGluaXQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcblx0ICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0ICAgICAgdmFyIHBsdWdpbl9ldGFnID0gdGhpcy5vcHRpb25zLmNvbnRleHQuZXRhZyB8fCB7fTtcblx0ICAgICAgdGhpcy5jbmEgPSBwbHVnaW5fZXRhZy5jbmEgfHwgY29va2llLmdldENvb2tpZUNuYSgnY25hJyk7XG5cdCAgICAgIC8vIHRoaXMudGFnID0gMDtcblx0ICAgICAgLy8gdGhpcy5zdGFnID0gLTE7XG5cdCAgICAgIC8vIHRoaXMuZXRhZyA9ICcnO1xuXHQgICAgICB0aGlzLnNldFRhZygwKTtcblx0ICAgICAgdGhpcy5zZXRTdGFnKC0xKTtcblx0ICAgICAgdGhpcy5zZXRMc1RhZygnLTEnKTsgLy8g5omT5qCH562+KGxvY2FsU3RvcmFnZVRhZylsc3RhZyA9IC0xIOWIneWni+WAvFxuXHQgICAgICB0aGlzLnNldEV0YWcodGhpcy5jbmEgfHwgJycpO1xuXHQgICAgICB0aGlzLnJlcXVlc3RpbmcgPSBmYWxzZTtcblx0ICAgICAgdGhpcy50b2RheSA9IGRhdGUuZ2V0Rm9ybWF0RGF0ZSgpO1xuXHQgICAgfSxcblx0XG5cdCAgICBzZXRMc1RhZzogZnVuY3Rpb24obHN0YWcpIHtcblx0ICAgICAgdGhpcy5sc3RhZyA9IGxzdGFnO1xuXHQgICAgICB0aGlzLm9wdGlvbnMuY29udGV4dC5ldGFnLmxzdGFnID0gbHN0YWc7XG5cdCAgICB9LFxuXHRcblx0ICAgIHNldFRhZzogZnVuY3Rpb24odGFnKSB7XG5cdCAgICAgIHRoaXMudGFnID0gdGFnO1xuXHQgICAgICB0aGlzLm9wdGlvbnMuY29udGV4dC5ldGFnLnRhZyA9IHRhZztcblx0ICAgIH0sXG5cdFxuXHQgICAgc2V0U3RhZzogZnVuY3Rpb24oc3RhZykge1xuXHQgICAgICB0aGlzLnN0YWcgPSBzdGFnO1xuXHQgICAgICB0aGlzLm9wdGlvbnMuY29udGV4dC5ldGFnLnN0YWcgPSBzdGFnO1xuXHQgICAgfSxcblx0XG5cdCAgICBzZXRFdGFnOiBmdW5jdGlvbihldGFnKSB7XG5cdCAgICAgIHRoaXMuZXRhZyA9IGV0YWc7XG5cdCAgICAgIC8vIOi1i+WAvHB25Y+C5pWw77yI6YeN6KaB77yJXG5cdCAgICAgIHRoaXMub3B0aW9ucy5jb250ZXh0LmV0YWcuY25hID0gZXRhZztcblx0ICAgICAgLy8g5a2Y5YWlY29va2llXG5cdCAgICAgIGlmIChjb29raWUuZ2V0Q29va2llQ25hKCdjbmEnKSAhPT0gZXRhZykge1xuXHQgICAgICAgIGNvb2tpZS5zZXRDb29raWVDbmEoJ2NuYScsIGV0YWcsIHtcblx0ICAgICAgICAgICdTYW1lU2l0ZSc6ICdub25lJ1xuXHQgICAgICAgIH0pO1xuXHQgICAgICB9XG5cdCAgICB9LFxuXHRcblx0ICAgIHNldExzY25hU3RhdHVzOiBmdW5jdGlvbihzdGF0dXMpIHtcblx0ICAgICAgdGhpcy5vcHRpb25zLmNvbnRleHQuZXRhZy5sc2NuYXN0YXR1cyA9IHN0YXR1cztcblx0ICAgIH0sXG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBwduWPkemAgeWIsOWTqumHjOWOu1xuXHQgICAgICog6L+U5ZueXCJkb25lXCLnu4jmraLkuK3pl7Tku7bmiafooYzvvIzov5Tlm57igJxwYXVzZeKAneaaguWBnOS4remXtOS7tuaJp+ihjO+8jOi/lOWbnuS4gOS4quaVtOaVsOKAnG7igJ3lkYror4nkuK3pl7Tku7bigJxu4oCd5q+r56eS5ZCO57un57ut5omn6KGM5Lit6Ze05Lu2XG5cdCAgICAgKiDigJzmmoLlgZzigJ3mnIDlpJoxMHPvvIzoi6XotoXml7bkuK3pl7Tku7bkvJrlvLrliLbnu6fnu63miafooYxcblx0ICAgICAqIEBwYXJhbSBbU3RyaW5nXSBzdGF0ZSDnirbmgIFcblx0ICAgICAqIEBwYXJhbSBbRnVuY3Rpb25dIGNiICDlm57osINcblx0ICAgICAqIEByZXR1cm4gXCJkb25lXCIgfCB1bmRlZmluZWRcblx0ICAgICAqL1xuXHQgICAgcnVuOiBmdW5jdGlvbihzdGF0ZSwgY2IpIHtcblx0ICAgICAgdmFyIF9zZWxmID0gdGhpcztcblx0ICAgICAgLy8gdmFyIGFwbHVzX2NvbmZpZyA9IHRoaXMub3B0aW9ucy5jb250ZXh0LmFwbHVzX2NvbmZpZztcblx0ICAgICAgaWYgKF9zZWxmLmNuYSkge1xuXHQgICAgICAgIC8vIF9zZWxmLnRhZyA9IDE7XG5cdCAgICAgICAgX3NlbGYuc2V0VGFnKDEpO1xuXHQgICAgICAgIHJldHVybjtcblx0ICAgICAgfVxuXHQgICAgICB2YXIgdGltZXIgPSBudWxsO1xuXHQgICAgICB2YXIgYXBsdXNfcmhvc3RfdiA9IGFwbHVzLl8kLm1ldGFfaW5mb1snYXBsdXMtcmhvc3QtdiddO1xuXHQgICAgICBpZiAoYXBsdXNfcmhvc3Rfdikge1xuXHQgICAgICAgIHRoaXMub3B0aW9ucy5jb250ZXh0LmV0YWcuZWdVcmwgPSBhcGx1c19yaG9zdF92ICsgJy9lZy5qcyc7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgcmV0dXJuO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciBlZ1VybCA9IHV0aWxFdGFnLmdldFVybCh0aGlzLm9wdGlvbnMuY29udGV4dC5ldGFnIHx8IHt9KTtcblx0ICAgICAgX3NlbGYucmVxdWVzdGluZyA9IHRydWU7XG5cdFxuXHQgICAgICB2YXIgZG9fYmFjayA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG5cdCAgICAgICAgICBjYigpO1xuXHQgICAgICAgIH0sIDIwKTtcblx0ICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuXHQgICAgICB9O1xuXHRcblx0ICAgICAgdXRpbERvbS5sb2FkU2NyaXB0KGVnVXJsLCBmdW5jdGlvbihlcnJvcikge1xuXHQgICAgICAgIHZhciBFdGFnO1xuXHQgICAgICAgIHZhciBzdGFnO1xuXHQgICAgICAgIC8vIG9uZXJyb3Ig6Kem5Y+RXG5cdCAgICAgICAgaWYgKGVycm9yICYmIGVycm9yLnR5cGUgPT09ICdlcnJvcicpIHtcblx0ICAgICAgICAgIF9zZWxmLnNldFN0YWcoLTMpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBFdGFnID0gdXRpbEdvbGRsb2cuZ2V0R29sZGxvZ1ZhbCgnRXRhZycpO1xuXHQgICAgICAgICAgaWYgKEV0YWcpIHtcblx0ICAgICAgICAgICAgX3NlbGYuc2V0RXRhZyhFdGFnKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIHN0YWcgPSB1dGlsR29sZGxvZy5nZXRHb2xkbG9nVmFsKCdzdGFnJyk7XG5cdCAgICAgICAgICBpZiAodHlwZW9mIHN0YWcgIT09IFwidW5kZWZpbmVkXCIpIHtcblx0ICAgICAgICAgICAgLy8gX3NlbGYuc3RhZyA9IHN0YWc7XG5cdCAgICAgICAgICAgIF9zZWxmLnNldFN0YWcoc3RhZyk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICAvLyDlt7Lnu4/otoXml7bvvIzlvZNFdGFn5rKh6K+35rGC6L+H77yM6LWw5Y6f5pyJ5rWB56iLXG5cdCAgICAgICAgaWYgKCFfc2VsZi5yZXF1ZXN0aW5nKSB7XG5cdCAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgfVxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICB0YWfmoIfnrb7lgLzlkKvkuYnvvJpcblx0ICAgICAgICAgIDEgIOS4muWKoeWfn+aciWNuYe+8jOacieWOn+aciea1geeoi1xuXHQgICAgICAgICAgMCAg5Lia5Yqh5Z+f5rKh5pyJY25h77yM5Y+R6LW3dGFn6K+35rGCXG5cdFxuXHQgICAgICAgICAgc3RhZ+agh+etvuWAvOWQq+S5ie+8mlxuXHQgICAgICAgICAgLTEgICDliJ3lp4vljJblgLxcblx0ICAgICAgICAgIDEgICAgbW1zdGF05pyJY25h77yM5LiUY25h5a+555qEXG5cdCAgICAgICAgICAwICAgIG1tc3RhdOayoeaciWNuYe+8jGlmX25vbmVfbWF0Y2gg5pyJ5YC877yM5LiU5YC85q2j56GuXG5cdCAgICAgICAgICA0ICAgbW1zdGF05rKh5pyJY25h77yMaWZfbm9uZV9tYXRjaCDmnInlgLzvvIzkuJTlgLzkuI3mraPnoa7vvIzmlrDnlJ/miJDnmoRcblx0ICAgICAgICAgIC0zICAg5YmN56uvanPop6blj5HvvIxldGFnIG9uZXJyb3Lkuovku7bop6blj5HvvIzliJnmoIforrAtM1xuXHQgICAgICAgICAgMiAgICDllaXpg73msqHmnInvvIzmiJbogIVtbXN0YXTmnInkvYbmmK/mmK/plJnnmoTvvIzph43mlrDnlJ/miJBcblx0ICAgICAgICAgIC0yICBldGFnanPotoXml7bvvIzliY3nq69qc+inpuWPkeiuvue9rlxuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHZhciBnbG9iYWxDb25maWcgPSBhcGx1cy5nbG9iYWxDb25maWcgfHwge307XG5cdCAgICAgICAgaWYgKHN0YWcgPT09IDIgfHwgc3RhZyA9PT0gNCkge1xuXHQgICAgICAgICAgdmFyIF9sc2NuYSA9IHV0aWxEYXRhLmdldExzQ25hKGdsb2JhbENvbmZpZy5FVEFHX1NUT1JBR0VfS0VZKTtcblx0ICAgICAgICAgIC8vIExT5pyJ5YC85pe277yMc2V05Lia5Yqh5Z+fY29va2ll44CBbHN0YWc9MVxuXHQgICAgICAgICAgaWYgKF9sc2NuYSkge1xuXHQgICAgICAgICAgICBfc2VsZi5zZXRMc1RhZygxKTtcblx0ICAgICAgICAgICAgX3NlbGYuc2V0RXRhZyhfbHNjbmEpO1xuXHQgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgLy8gTFPml6DlgLzml7bvvIxzZXTnlKjmlrBDTkHlj5Hml6Xlv5fjgIFsc+Whq+WAvOOAgWxzdGFnPTBcblx0ICAgICAgICAgICAgX3NlbGYuc2V0THNUYWcoMCk7XG5cdCAgICAgICAgICAgIHV0aWxEYXRhLnNldExzQ25hKGdsb2JhbENvbmZpZy5FVEFHX1NUT1JBR0VfS0VZLCBfc2VsZi50b2RheSwgRXRhZyk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGRvX2JhY2soKTtcblx0ICAgICAgfSk7XG5cdFxuXHQgICAgICAvLyDotoXml7blpITnkIZcblx0ICAgICAgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIF9zZWxmLnJlcXVlc3RpbmcgPSBmYWxzZTtcblx0ICAgICAgICBfc2VsZi5zZXRTdGFnKC0yKTtcblx0ICAgICAgICBjYigpO1xuXHQgICAgICB9LCAxNTAwKTtcblx0XG5cdCAgICAgIC8vIOWRiuiviWNvbXBvc2XmmoLlgZzmiafooYzkuK3pl7Tku7bvvIznm7TliLBjYuWbnuWIsOWQjuWGjee7p+e7rVxuXHQgICAgICByZXR1cm4gMjAwO1xuXHQgICAgfSxcblx0ICB9O1xuXHR9O1xuXG5cbi8qKiovIH0pLFxuLyogODAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogcHJvamVjdCAtIGZpbGVwYXRoXG5cdCAqIGRvbeaTjeS9nOW3peWFt+exu++8jOi/meS4quWfuuehgOW3peWFt+exu+S8muiiq+WFtuS7luW3peWFt+exu+W8leeUqO+8jOaVheS4peemgeWcqOi/memHjOWGjeW8leeUqOWFtuS7luaooeWdl+S7peWFjeWHuueOsOmXrumimFxuXHQgKlxuXHQgKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG5cdCAqXG5cdCAqIEF1dGhvcnM6XG5cdCAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cblx0ICovXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciB1dGlsRGF0YSA9IF9fd2VicGFja19yZXF1aXJlX18oMjMpO1xuXHRcblx0ZXhwb3J0cy5nZXRVcmwgPSBmdW5jdGlvbiAoZXRhZykge1xuXHQgIHZhciB1cmwgPSB1dGlsRGF0YS5nZXRVcmwoZXRhZyAmJiBldGFnLmVnVXJsKTtcblx0ICAvLyDlpoLmnpxlZ1VybOayoeacieW4puWNj+iuru+8jOi/memHjOihpeWFheWujOaVtFxuXHQgIGlmICh1cmwuaW5kZXhPZignaHR0cCcpICE9PSAwKSB7XG5cdCAgICB2YXIgcHJvdG9jYWwgPSAnaHR0cHM6Jztcblx0ICAgIGlmICgvKFxcZCtcXC4pezMsfVxcZCsvLnRlc3QodXJsKSkge1xuXHQgICAgICBwcm90b2NhbCA9ICdodHRwOic7XG5cdCAgICB9XG5cdCAgICB1cmwgPSBwcm90b2NhbCArIHVybDtcblx0ICB9XG5cdCAgcmV0dXJuIHVybDtcblx0fTtcblxuLyoqKi8gfSksXG4vKiA4MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBhbGlsb2cvcyAtIHNyYy9saWJfdS9jb25maWcvcGx1Z2lucy93aGVuX3RvX3NlbmQuanNcblx0ICpcblx0ICogICDkvZznlKjvvJog5L2V5pe25omn6KGMc2VuZHB25o+S5Lu2XG5cdCAqICAgZm46IGdldE1ldGFJbmZvIOe7p+aJv+iHs0Jhc2Vcblx0ICogICBmbjogcnVuICjmj5Lku7bmoIflh4bnmoTmiafooYzlhaXlj6MpXG5cdCAqICAgYXBsdXMtd2FpdGluZz1cIjFcIjog562J5b6FNuenkuWQjuWwneivleWPkemAgVBW5pel5b+XO1xuXHQgKiAgIGFwbHVzLXdhaXRpbmc9XCJNQU5cIjog5LiN6Ieq5Yqo5Y+R6YCBUFbml6Xlv5c7XG5cdCAqICAgYXBsdXMtd2FpdGluZz1cIm5cIjog5YW25LitbuS4uuWkp+S6jjHnmoTmraPmlbTmlbAsIGFwbHVz5Zyo562J5b6Fbuavq+enkuS5i+WQjuWwneivleWPkemAgVBW5pel5b+XO1xuXHQgKlxuXHQgKiAgIGRlcHPvvJog5pegXG5cdCAqXG5cdCAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cblx0ICpcblx0ICogQXV0aG9yczpcblx0ICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuXHQgKi9cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIHV0aWxHb2xkbG9nID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0dmFyIGFwbHVzU3RhdGljID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG5cdCAgcmV0dXJuIHtcblx0XG5cdCAgICAvKipcblx0ICAgICAqIOiOt+WPlm1ldGFfaW5mb1xuXHQgICAgICogVE9ETyDoi6Xku4rlkI7mnInliqjmgIHkv67mlLltZXRhX2luZm/nmoTpnIDmsYLvvIxcblx0ICAgICAqIOatpOWkhOmcgOimgeWKqOaAgeS7jiBtZXRhSW5mb+aooeWdl+S4reWOu+iwg+eUqGdldEluZm/mlrnms5XmnaXojrflj5bnm7jlhbPkv6Hmga/vvIzov5nmoLflgZrnmoTlnY/lpITmmK/mtojogJfmgKfog71cblx0ICAgICAqL1xuXHQgICAgZ2V0TWV0YUluZm86IGZ1bmN0aW9uKCkge1xuXHQgICAgICB2YXIgXyQgPSB1dGlsR29sZGxvZy5nZXRHb2xkbG9nVmFsKCdfJCcpIHx8IHt9O1xuXHQgICAgICB2YXIgbWV0YV9pbmZvID0gXyQubWV0YV9pbmZvOyAvLyB8fCBtZXRhSW5mby5nZXRJbmZvKCk7XG5cdCAgICAgIHJldHVybiBtZXRhX2luZm87XG5cdCAgICB9LFxuXHRcblx0ICAgIGdldEFwbHVzV2FpdGluZzogZnVuY3Rpb24oKSB7XG5cdCAgICAgIHZhciBtZXRhX2luZm8gPSB0aGlzLmdldE1ldGFJbmZvKCkgfHwge307XG5cdCAgICAgIHJldHVybiBtZXRhX2luZm9bJ2FwbHVzLXdhaXRpbmcnXTtcblx0ICAgIH0sXG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiDkvZXml7bmiafooYxzZW5kcHbmiafooYzlhaXlj6PvvIzphY3nva7kuoZhcGx1c1dhaXRpbmcg5bm25LiUIOaYr2FwbHVz6Ieq5Yqo5omT54K55omN6LWw6L+Z5q616YC76L6RXG5cdCAgICAgKiA8bWV0YSBuYW1lPVwiYXBsdXMtd2FpdGluZ1wiIGNvbnRlbnQ9XCJ4eHhcIiAvPlxuXHQgICAgICogICB4eHg6ICdNQU4nIC0g5LiN5Y+R6YCBcHbnmoTmoIfor4Zcblx0ICAgICAqICAgeHh4OiAnMScgLSDlsJ3or5XnrYnlvoU256eS5ZCO5Y+RcHZcblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0gW1N0cmluZ10gc3RhdGUg54q25oCBXG5cdCAgICAgKiBAcGFyYW0gW0Z1bmN0aW9uXSBjYiAg5Zue6LCDXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybiBcImRvbmVcIijnu4jmraLkuK3pl7Tku7bmiafooYwpIHwgdW5kZWZpbmVkXG5cdCAgICAgKi9cblx0ICAgIHJ1bjogZnVuY3Rpb24oc3RhdGUsIGNiKSB7XG5cdCAgICAgIHZhciBjb25maWcgPSB0aGlzLm9wdGlvbnMuY29uZmlnIHx8IHt9O1xuXHQgICAgICB2YXIgYXBsdXNXYWl0aW5nID0gdGhpcy5nZXRBcGx1c1dhaXRpbmcoKTtcblx0ICAgICAgaWYgKGFwbHVzV2FpdGluZyAmJiBjb25maWcuaXNfYXV0bykge1xuXHQgICAgICAgIGFwbHVzV2FpdGluZyA9IHRoaXMuZ2V0QXBsdXNXYWl0aW5nKCkgKyAnJztcblx0ICAgICAgICB0aGlzLm9wdGlvbnMuY29udGV4dC53aGVuX3RvX3NlbmRwdiA9IHtcblx0ICAgICAgICAgIGFwbHVzV2FpdGluZzogYXBsdXNXYWl0aW5nXG5cdCAgICAgICAgfTtcblx0ICAgICAgICBzd2l0Y2goYXBsdXNXYWl0aW5nKSB7XG5cdCAgICAgICAgY2FzZSBhcGx1c1N0YXRpYy5fVVNFUl9JRDpcblx0ICAgICAgICBjYXNlIGFwbHVzU3RhdGljLl9BTk9OWV9JRDpcblx0ICAgICAgICBjYXNlICdNQU4nOlxuXHQgICAgICAgICAgcmV0dXJuICdkb25lJztcblx0ICAgICAgICBjYXNlICcxJzpcblx0ICAgICAgICAgIHRoaXMub3B0aW9ucy5jb250ZXh0LndoZW5fdG9fc2VuZHB2LmlzV2FpdCA9IHRydWU7XG5cdCAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG5cdCAgICAgICAgICAgIGNiKCk7XG5cdCAgICAgICAgICB9LCA2MDAwKTtcblx0ICAgICAgICAgIHJldHVybiA2MDAwO1xuXHQgICAgICAgIGRlZmF1bHQ6XG5cdCAgICAgICAgICB2YXIgbiA9IGFwbHVzV2FpdGluZyAqIDE7XG5cdCAgICAgICAgICBpZiAoKG4gKyAnJykgIT09ICdOYU4nKSB7XG5cdCAgICAgICAgICAgIHRoaXMub3B0aW9ucy5jb250ZXh0LndoZW5fdG9fc2VuZHB2LmlzV2FpdCA9IHRydWU7XG5cdCAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcblx0ICAgICAgICAgICAgICBjYigpO1xuXHQgICAgICAgICAgICB9LCBuKTtcblx0ICAgICAgICAgICAgcmV0dXJuIG47XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIHJldHVybjtcblx0ICAgIH0sXG5cdCAgfTtcblx0fTtcblxuXG4vKioqLyB9KSxcbi8qIDgyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIGFsaWxvZy9zIC0gc3JjL2xpYl91L2NvbmZpZy9wbHVnaW5zL3doZXJlX3RvX3NlbmQuanNcblx0ICpcblx0ICogICDkvZznlKjvvJp1bemAmumBk+S4i++8jOaUtumbhnB25Y+R6YCB5Y675ZCR5L+h5oGv77yI5Z+f5ZCN5Y+W5Yaz5LqO6YWN572u77yJXG5cdCAqICAgZm46IHJ1biAo5o+S5Lu25qCH5YeG55qE5omn6KGM5YWl5Y+jKVxuXHQgKiAgIOaciemFjee9rui/meS4quWFpeWPo1xuXHQgKiAgIDxtZXRhIG5hbWU9XCJhcGx1cy1yaG9zdC12XCIgY29udGVudD1cInh4eC54eHguY29tXCI+XG5cdCAqICAg5pe277yMUFbml6Xlv5dob3N05pS55Li65L2/55SoYXBsdXMtcmhvc3QtdiDmoIfnrb7lhoVjb250ZW505YaF5aOw5piO55qE5YC8XG5cdCAqXG5cdCAqICAgZGVwc++8muaXoFxuXHQgKlxuXHQgKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG5cdCAqXG5cdCAqIEF1dGhvcnM6XG5cdCAqICAg6ZKw5pitIDxjaGFuZ2xpYW5nLmxjbEB1bWVuZy5jb20+XG5cdCAqL1xuXHQndXNlIHN0cmljdCc7XG5cdFxuXHQvLyB2YXIgdXRpbERhc2ggPSByZXF1aXJlKCdAdXRpbHMvdXRpbERhc2gnKTtcblx0dmFyIHV0aWxVQSA9IF9fd2VicGFja19yZXF1aXJlX18oODMpO1xuXHR2YXIgdXRpbEdvbGRsb2cgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHR2YXIgdXRpbExvZ2dlciA9IF9fd2VicGFja19yZXF1aXJlX18oMjYpO1xuXHRcblx0dmFyIFBPU1QgPSAnUE9TVCc7XG5cdHZhciBHRVQgPSAnR0VUJztcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG5cdCAgcmV0dXJuIHtcblx0ICAgIC8qKlxuXHQgICAgICog6I635Y+WbWV0YV9pbmZvXG5cdCAgICAgKiBUT0RPIOiLpeS7iuWQjuacieWKqOaAgeS/ruaUuW1ldGFfaW5mb+eahOmcgOaxgu+8jFxuXHQgICAgICog5q2k5aSE6ZyA6KaB5Yqo5oCB5LuOIG1ldGFJbmZv5qih5Z2X5Lit5Y676LCD55SoZ2V0SW5mb+aWueazleadpeiOt+WPluebuOWFs+S/oeaBr++8jOi/meagt+WBmueahOWdj+WkhOaYr+a2iOiAl+aAp+iDvVxuXHQgICAgICovXG5cdCAgICBnZXRNZXRhSW5mbzogZnVuY3Rpb24oKSB7XG5cdCAgICAgIHZhciBfJCA9IHV0aWxHb2xkbG9nLmdldEdvbGRsb2dWYWwoJ18kJykgfHwge307XG5cdCAgICAgIHZhciBtZXRhX2luZm8gPSBfJC5tZXRhX2luZm87IC8vIHx8IG1ldGFJbmZvLmdldEluZm8oKTtcblx0ICAgICAgcmV0dXJuIG1ldGFfaW5mbztcblx0ICAgIH0sXG5cdFxuXHQgICAgZ2V0QXBsdXNNZXRhQnlLZXk6IGZ1bmN0aW9uKGtleSkge1xuXHQgICAgICB2YXIgbWV0YV9pbmZvID0gdGhpcy5nZXRNZXRhSW5mbygpIHx8IHt9O1xuXHQgICAgICByZXR1cm4gbWV0YV9pbmZvW2tleV07XG5cdCAgICB9LFxuXHRcblx0ICAgIGdldFJob3N0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIHZhciBtZXRhVmFsdWUgPSB0aGlzLmdldEFwbHVzTWV0YUJ5S2V5KCdhcGx1cy1yaG9zdC12Jyk7XG5cdCAgICAgIHJldHVybiBtZXRhVmFsdWU7XG5cdCAgICB9LFxuXHRcblx0ICAgIGdldEhqbGpIb3N0VXJsOiBmdW5jdGlvbiAocmhvc3QpIHtcblx0ICAgICAgdmFyIHByZWZpeCA9IC9eXFwvXFwvLy50ZXN0KHJob3N0KSA/ICcnIDogJy8vJztcblx0ICAgICAgdmFyIGVuZGZpeCA9ICcvd2ViX2xvZ3MnO1xuXHQgICAgICB2YXIgdXJsID0gcHJlZml4ICsgcmhvc3QgKyBlbmRmaXg7XG5cdCAgICAgIHJldHVybiB1cmw7XG5cdCAgICB9LFxuXHRcblx0ICAgIGdldFB2SG9zdFVybDogZnVuY3Rpb24gKHJob3N0KSB7XG5cdCAgICAgIHZhciBwcmVmaXggPSAvXlxcL1xcLy8udGVzdChyaG9zdCkgPyAnJyA6ICcvLyc7XG5cdCAgICAgIHZhciBlbmRmaXggPSAvXFwvJC8udGVzdChyaG9zdCkgPyAnJyA6ICcvJztcblx0XG5cdCAgICAgIHZhciBnaWYgPSAndi5naWYnO1xuXHQgICAgICBpZiAodXRpbFVBLmlzTW9iaWxlKCkpIHtcblx0ICAgICAgICBnaWYgPSAnbS5naWYnO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBwcmVmaXggKyByaG9zdCArIGVuZGZpeCArIGdpZjtcblx0ICAgIH0sXG5cdFxuXHQgICAgZ2V0SG9zdFVybDogZnVuY3Rpb24gKHJob3N0KSB7XG5cdCAgICAgIHZhciBwcmVmaXggPSAvXlxcL1xcLy8udGVzdChyaG9zdCkgPyAnJyA6ICcvLyc7XG5cdCAgICAgIHZhciBlbmRmaXggPSAnL3dlYl9sb2dzJztcblx0ICAgICAgdmFyIHVybCA9IHByZWZpeCArIHJob3N0ICsgZW5kZml4O1xuXHQgICAgICByZXR1cm4gdXJsO1xuXHQgICAgfSxcblx0XG5cdCAgICBnZXRDaGFubmVsOiBmdW5jdGlvbiAoY2hhbm5lbCkge1xuXHQgICAgICB2YXIgYXBsdXNDaGFubmVsID0gdGhpcy5nZXRBcGx1c01ldGFCeUtleSgnYXBsdXMtY2hhbm5lbCcpO1xuXHQgICAgICB2YXIgY2hhbm5lbHMgPSBbJ1dTJywgJ1dTLU9OTFknLCBHRVQsIFBPU1RdO1xuXHRcblx0ICAgICAgdmFyIHJzO1xuXHQgICAgICBpZiAoY2hhbm5lbHMuaW5kZXhPZihjaGFubmVsKSA+IC0xKSB7XG5cdCAgICAgICAgcnMgPSBjaGFubmVsO1xuXHQgICAgICB9XG5cdCAgICAgIGlmICghcnMgJiYgY2hhbm5lbHMuaW5kZXhPZihhcGx1c0NoYW5uZWwpID4gLTEpIHtcblx0ICAgICAgICBycyA9IGFwbHVzQ2hhbm5lbDtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gcnM7XG5cdCAgICB9LFxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogaGpsauWPkemAgeWIsOWTqumHjOWOu1xuXHQgICAgICogMS4g5aaC5p6c5piv5Y2V5Y+R77yMaDXnmoTlj5HpgIHljrvlkJHpgLvovpHnm7TmjqXot7Pov4dcblx0ICAgICAqIDIuIHZhbGlkaXR5OlxuXHQgICAgICogICA8bWV0YSBuYW1lPVwiYXBsdXMtcmhvc3QtZ1wiIGNvbnRlbnQ9XCJnbS5tbXN0YXQuY29tXCIgLz5cblx0ICAgICAqICAg5pyJ5YC85LiU5ZCI5rOV5omN5L2/55So77yM5ZCm5YiZ55So6buY6K6k55qEZ20ubW1zdGF0LmNvbS93Z28ubW1zdGF0LmNvbVxuXHQgICAgICpcblx0ICAgICAqIOi/lOWbnlwiZG9uZVwi57uI5q2i5Lit6Ze05Lu25omn6KGMXG5cdCAgICAgKiBAcGFyYW0gW1N0cmluZ10gc3RhdGUg54q25oCBXG5cdCAgICAgKiBAcGFyYW0gW0Z1bmN0aW9uXSBjYiAg5Zue6LCDXG5cdCAgICAgKiBAcmV0dXJuIFwiZG9uZVwiIHwgdW5kZWZpbmVkXG5cdCAgICAgKi9cblx0ICAgIHJ1bjogZnVuY3Rpb24oKSB7XG5cdCAgICAgIHZhciBpc19zaW5nbGUgPSAhIXRoaXMub3B0aW9ucy5jb250ZXh0LmlzX3NpbmdsZTtcblx0ICAgICAgaWYgKGlzX3NpbmdsZSkge1xuXHQgICAgICAgIHJldHVybjtcblx0ICAgICAgfVxuXHQgICAgICB2YXIgcmVjb3JkVHlwZSA9IHRoaXMub3B0aW9ucy5jb25maWcucmVjb3JkVHlwZTtcblx0ICAgICAgdmFyIHJob3N0ID0gdGhpcy5nZXRSaG9zdChyZWNvcmRUeXBlKTtcblx0ICAgICAgaWYgKCFyaG9zdCkge1xuXHQgICAgICAgIHV0aWxMb2dnZXIubG9nZ2VyKHtcblx0ICAgICAgICAgIG1zZzogJ2N1cnJlbnQgcmVxdWVzdCBkb21haW4gaW52YWxpZCwgcGxlYXNlIGNoZWNrIHlvdXIgYXBsdXMtcmhvc3QtdiB2YWx1ZSBpbnNpZGUgbWV0YWluZm8hJ1xuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIHJldHVybiAnZG9uZSc7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHZhciB1cmw7XG5cdCAgICAgIGlmIChyZWNvcmRUeXBlID09PSAnUFYnKSB7XG5cdCAgICAgICAgdXJsID0gdGhpcy5nZXRQdkhvc3RVcmwocmhvc3QpO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHVybCA9IHRoaXMuZ2V0SGpsakhvc3RVcmwocmhvc3QpO1xuXHQgICAgICB9XG5cdCAgICAgIFxuXHQgICAgICB2YXIgY29uZmlnID0gdGhpcy5vcHRpb25zLmNvbmZpZyB8fCB7fTtcblx0ICAgICAgdmFyIG1ldGhvZCA9IHRoaXMuZ2V0Q2hhbm5lbChjb25maWcubWV0aG9kKSB8fCBQT1NUO1xuXHQgICAgICBpZiAobWV0aG9kID09PSBQT1NUICYmICghbmF2aWdhdG9yIHx8ICFuYXZpZ2F0b3Iuc2VuZEJlYWNvbikpIHtcblx0ICAgICAgICBtZXRob2QgPSBHRVQ7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHRoaXMub3B0aW9ucy5jb250ZXh0LndoZXJlX3RvX3NlbmQubWV0aG9kID0gY29uZmlnLm1ldGhvZDtcblx0ICAgICAgdGhpcy5vcHRpb25zLmNvbnRleHQud2hlcmVfdG9fc2VuZC51cmwgPSB1cmw7XG5cdCAgICAgIHJldHVybjtcblx0ICAgIH0sXG5cdCAgfTtcblx0fTtcblxuXG4vKioqLyB9KSxcbi8qIDgzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0LyoqXG5cdCAqIHByb2plY3QgLSBmaWxlcGF0aFxuXHQgKiBVQeWIpOaWreebuOWFs+W3peWFt1xuXHQgKlxuXHQgKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG5cdCAqXG5cdCAqIEF1dGhvcnM6XG5cdCAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cblx0ICovXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdGV4cG9ydHMuaXNNb2JpbGUgPSBmdW5jdGlvbigpIHtcblx0ICB2YXIgVUEgPSBuYXZpZ2F0b3IgPyBuYXZpZ2F0b3IudXNlckFnZW50IDogJyc7XG5cdCAgdmFyIGlzQWxpQXBwID0gL0FsaUFwcHxZdW5vc3xjeWNsb25lL2kudGVzdChVQSk7IC8vIOS6kU9T5rWP6KeI5Zmo5YaF5qC45Li6Y3ljbG9uZVxuXHQgIHZhciBpc0lPUyA9ICgvaVBob25lfGlQYWR8aVBvZC9pKS50ZXN0KFVBKTtcblx0ICB2YXIgaXNBbmRyb2lkID0gKC9BbmRyb2lkL2kpLnRlc3QoVUEpO1xuXHQgIHZhciBpc1dpbmRvd3NQaG9uZSA9ICgvV2luZG93cyBQaG9uZS9pKS50ZXN0KFVBKSB8fCAoL0lFTW9iaWxlL2kpLnRlc3QoVUEpIHx8ICgvV1BEZXNrdG9wL2kpLnRlc3QoVUEpO1xuXHQgIHZhciBpc0JsYWNrQmVycnkgPSAoL0JsYWNrQmVycnkvaSkudGVzdChVQSk7XG5cdCAgdmFyIGlzT3BlcmFNb2JpbGUgPSAoL09wZXJhIE1pbmkvaSkudGVzdChVQSk7XG5cdCAgcmV0dXJuIGlzQWxpQXBwIHx8IGlzSU9TIHx8IGlzQW5kcm9pZCB8fCBpc1dpbmRvd3NQaG9uZSB8fCBpc0JsYWNrQmVycnkgfHwgaXNPcGVyYU1vYmlsZTtcblx0fTtcblxuLyoqKi8gfSksXG4vKiA4NCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBhbGlsb2cvcyAtIHNyYy9saWJfdS9jb25maWcvcGx1Z2lucy93aGF0X3RvX3NlbmQuanNcblx0ICpcblx0ICog5L2c55So77ya5pel5b+X5Y+R6YCB5Z+656GA5Y+C5pWw5pS26ZuG77yaXG5cdCAqICAgICAg5oyJ6aG65bqP5bCGYXBsdXMucHZfZGF0YS5iYXNpY+OAgWV4cGFyYW1z44CBb2xkUGFyYW1z44CBYXBsdXMucHZfZGF0YS5leHRyYeWbm+S4reexu+Wei+eahOWPguaVsG1lcmdl5Zyo5LiA5Liq5pWw57uE5LitXG5cdCAqIGRlcHM6IOaXoFxuXHQgKlxuXHQgKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG5cdCAqXG5cdCAqIEF1dGhvcnM6XG5cdCAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cblx0ICovXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciBjb29raWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc0KTtcblx0Ly8gdmFyIHV0aWxVcmwgPSByZXF1aXJlKCdAdXRpbHMvdXRpbFVybCcpO1xuXHR2YXIgbG9nSWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg1KTtcblx0dmFyIHV0aWxEYXNoID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMSk7XG5cdHZhciB1dGlsVUEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgzKTtcblx0dmFyIHV0aWxHb2xkbG9nID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0dmFyIGFwbHVzU3RhdGljID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblx0dmFyIGFwbHVzID0gdXRpbEdvbGRsb2cuZ2V0R2xvYmFsVmFsdWUoJ2FwbHVzJyk7XG5cdHZhciB1dGlsUGFyYW1zID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4Nik7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcblx0ICByZXR1cm4ge1xuXHQgICAgZ2V0Q29tbW9uUGFyYW1zOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIHZhciBjb250ZXh0ID0gdGhpcy5vcHRpb25zLmNvbnRleHQgfHwge307XG5cdCAgICAgIHZhciBldGFnID0gY29udGV4dC5ldGFnIHx8IHt9O1xuXHQgICAgICB2YXIgdXNlcmRhdGEgPSBjb250ZXh0LnVzZXJkYXRhIHx8IHt9O1xuXHQgICAgICB2YXIgXyQgPSB1dGlsR29sZGxvZy5nZXRHb2xkbG9nVmFsKCdfJCcpIHx8IHt9O1xuXHQgICAgICAvLyB2YXIgc3BtID0gXyQuc3BtIHx8IHt9O1xuXHQgICAgICB2YXIgY29uZmlnID0gdGhpcy5vcHRpb25zLmNvbmZpZyB8fCB7fTtcblx0ICAgICAgdmFyIHBsYXRmb3JtVHlwZSA9IHV0aWxVQS5pc01vYmlsZSgpID8gJ1dBUCcgOiAnUEMnO1xuXHQgICAgICB2YXIgdXNlckluZm8gPSB7XG5cdCAgICAgICAgX2Rldl9pZDogYXBsdXMuZ2V0TWV0YUluZm8oJ19kZXZfaWQnKSxcblx0ICAgICAgICBfYW5vbnlfaWQ6IGFwbHVzLmdldE1ldGFJbmZvKGFwbHVzU3RhdGljLl9BTk9OWV9JRCksXG5cdCAgICAgICAgX3VzZXJfaWQ6IGFwbHVzLmdldE1ldGFJbmZvKGFwbHVzU3RhdGljLl9VU0VSX0lEKSxcblx0ICAgICAgICBfdXNlcl9uaWNrOiBhcGx1cy5nZXRNZXRhSW5mbygnX3VzZXJfbmljaycpIHx8IGNvb2tpZS5nZXRDb29raWUoJ3RyYWNrbmljaycpLFxuXHQgICAgICAgIF9zZXNzaW9uX2lkOiBhcGx1cy5nZXRNZXRhSW5mbygnX3Nlc3Npb25faWQnKSxcblx0ICAgICAgfTtcblx0XG5cdCAgICAgIHZhciB1cmwgPSBjb25maWcucGFnZVVybCB8fCAobG9jYXRpb24gPyBsb2NhdGlvbi5ocmVmIDogJy0nKTtcblx0ICAgICAgdmFyIHRpdGxlID0gY29uZmlnLnRpdGxlIHx8IChkb2N1bWVudCAmJiBkb2N1bWVudC50aXRsZSk7XG5cdFxuXHQgICAgICB2YXIgY29tbW9uUGFyYW1zID0gdXRpbERhc2guYXNzaWduKHtcblx0ICAgICAgICBhcHBJZDogYXBsdXMuZ2V0TWV0YUluZm8oJ2FwcEtleScpIHx8IGFwbHVzLmdldE1ldGFJbmZvKCdhcHBJZCcpLFxuXHQgICAgICAgIGNhY2hlOiBsb2dJZC5nZXRMb2dJZCh1cmwsIHRpdGxlKSxcblx0ICAgICAgICBjbmE6IGV0YWcuY25hLFxuXHQgICAgICAgIGV0YWc6IGV0YWcsXG5cdCAgICAgICAgcHJlOiBfJC5wYWdlX3JlZmVycmVyIHx8ICctJywgLy8gVE9ET1xuXHQgICAgICAgIHNka19pbmZvOiB7XG5cdCAgICAgICAgICBqc3ZlcjogYXBsdXMuZ2xvYmFsQ29uZmlnLnNjcmlwdF9uYW1lLFxuXHQgICAgICAgICAgbHZlcjogYXBsdXMuZ2xvYmFsQ29uZmlnLmx2ZXIsXG5cdCAgICAgICAgICBjdXN0b21TZGtJZDogYXBsdXMuZ2V0TWV0YUluZm8oJ2N1c3RvbVNka0lkJykgfHwgJycsXG5cdCAgICAgICAgICBwbGF0Zm9ybVR5cGU6IHBsYXRmb3JtVHlwZS50b0xvd2VyQ2FzZSgpLFxuXHQgICAgICAgIH0sXG5cdCAgICAgICAgdHJhY2tlckV2ZW50Q29kZTogY29uZmlnLnRyYWNrZXJFdmVudENvZGUsXG5cdCAgICAgICAgdGl0bGU6IHRpdGxlLFxuXHQgICAgICAgIHVybDogdXJsLFxuXHQgICAgICAgIGNsaWVudDogYXBsdXMuX2FwbHVzX2NsaWVudCB8fCB7fSxcblx0ICAgICAgICB0aW1lWm9uZTogdXRpbFBhcmFtcy5nZXRUaW1lWm9uZSgpLFxuXHQgICAgICAgIGdva2V5OiB1c2VySW5mbywgLy8gdXRpbERhc2guYXNzaWduKHNwbUluZm8sIHVzZXJJbmZvKSxcblx0ICAgICAgICBnbWtleTogdXNlcmRhdGEuZ21rZXkgfHwgJycsXG5cdCAgICAgICAgbWV0aG9kOiB0aGlzLm9wdGlvbnMuY29udGV4dC53aGVyZV90b19zZW5kLm1ldGhvZFxuXHQgICAgICB9LCB1c2VySW5mbyk7XG5cdCAgICAgIFxuXHQgICAgICByZXR1cm4gY29tbW9uUGFyYW1zO1xuXHQgICAgfSxcblx0XG5cdFxuXHQgICAgZ2V0UHZQYXJhbXM6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgLy8gdmFyIHRhcmdldFVybCA9IHRoaXMub3B0aW9ucy5jb250ZXh0LndoZXJlX3RvX3NlbmQudXJsO1xuXHQgICAgICB2YXIgY29tbW9uUGFyYW1zID0gdGhpcy5nZXRDb21tb25QYXJhbXMoKTtcblx0ICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuY29uZmlnLmlzX2F1dG8pIHtcblx0ICAgICAgICBjb21tb25QYXJhbXMuc2RrX2luZm8ubWFuc25kbG9nID0gMTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgcmV0dXJuIHV0aWxEYXNoLmFzc2lnbihjb21tb25QYXJhbXMsIHtcblx0ICAgICAgICBldmVudF9jb2RlOiAnMjAwMScsXG5cdCAgICAgICAgbG9ndHlwZTogJzEnLFxuXHQgICAgICAgIGxvZ2tleTogdXRpbFVBLmlzTW9iaWxlKCkgPyAnL20uZ2lmJyA6ICcvdi5naWYnLFxuXHQgICAgICAgIGV2ZW50X3RpbWVzdGFtcDogYXBsdXMuXyQuc2VuZF9wdl9jb3VudCA+IDAgPyBuZXcgRGF0ZSgpIDogYXBsdXMubG9nQ29uZmlnLnBhZ2VMb2FkVGltZSxcblx0ICAgICAgfSk7XG5cdCAgICB9LFxuXHRcblx0ICAgIGdldEhqbGpQYXJhbXM6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgdmFyIGMgPSB0aGlzLm9wdGlvbnMuY29udGV4dCB8fCB7fTtcblx0ICAgICAgdmFyIHVzZXJkYXRhID0gYy51c2VyZGF0YSB8fCB7fTtcblx0ICAgICAgdmFyIGhqbGpQYXJhbXMgPSB7XG5cdCAgICAgICAgZXZlbnRfY29kZTogYXBsdXNTdGF0aWMuRVZFTlRfSURfTUFQW3VzZXJkYXRhLmdta2V5XSB8fCBhcGx1c1N0YXRpYy5PVEhFUixcblx0ICAgICAgICBsb2d0eXBlOiAnMicsXG5cdCAgICAgICAgbG9na2V5OiB1c2VyZGF0YS5sb2drZXksXG5cdCAgICAgICAgZXZlbnRfdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuXHQgICAgICAgIC8vIG1hbnNuZGxvZzogJzEnLFxuXHQgICAgICB9O1xuXHQgICAgICByZXR1cm4gdXRpbERhc2guYXNzaWduKHRoaXMuZ2V0Q29tbW9uUGFyYW1zKCksIGhqbGpQYXJhbXMpO1xuXHQgICAgfSxcblx0XG5cdCAgICAvKipcblx0ICAgICAqIOS9leaXtuaJp+ihjHNlbmRwduaJp+ihjOWFpeWPo1xuXHQgICAgICog6L+U5ZueXCJkb25lXCLnu4jmraLkuK3pl7Tku7bmiafooYxcblx0ICAgICAqIDEuIGFwbHVz6buY6K6k6ZyA6KaB6YeH6ZuG55qE5Y+C5pWwOiBiYXNpY0xpc3Rcblx0ICAgICAqIDIuIGJlYWNvbuaJqeWxleWPguaVsDogZXhwYXJhbXNcblx0ICAgICAqIDMuIGFwbHVz6buY6K6k6ZyA6KaB6YeH6ZuG55qE5a6i5oi356uv5Y+C5pWwOiBleHRyYUxpc3Rcblx0ICAgICAqIOS4remAlOWkhOeQhl8k5YWo5bGA5Y+Y6YePOiBwcm9jZXNzTG9kYXNoRG9sbGFyXG5cdCAgICAgKiA0LiBsb2NhbFN0b3JhZ2XkuK3lrZjlgqjnmoTkuIrkuIDpobVzcG3kv6Hmga86IHNwbWFidGVzdFxuXHQgICAgICog5Lul5LiKNOmDqOWIhuaLvOijheaIkHB2ZGF0YVxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm4gXCJkb25lXCIgfHwgdW5kZWZpbmVkXG5cdCAgICAgKi9cblx0ICAgIHJ1bjogZnVuY3Rpb24gKCkge1xuXHQgICAgICB2YXIgcGFyYW1zID0ge307XG5cdCAgICAgIGlmICh0aGlzLm9wdGlvbnMuY29uZmlnLnJlY29yZFR5cGUgPT09ICdQVicpIHtcblx0ICAgICAgICBwYXJhbXMgPSB0aGlzLmdldFB2UGFyYW1zKCk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgcGFyYW1zID0gdGhpcy5nZXRIamxqUGFyYW1zKCk7XG5cdCAgICAgIH1cblx0ICAgICAgdGhpcy5vcHRpb25zLmNvbnRleHQud2hhdF90b19zZW5kLmxvZ2RhdGEgPSBwYXJhbXM7XG5cdCAgICAgIHJldHVybjtcblx0ICAgIH1cblx0ICB9O1xuXHR9O1xuXG5cbi8qKiovIH0pLFxuLyogODUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogcHJvamVjdCAtIGZpbGVwYXRoXG5cdCAqIHB2aWRcblx0ICpcblx0ICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuXHQgKlxuXHQgKiBBdXRob3JzOlxuXHQgKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG5cdCAqL1xuXHQndXNlIHN0cmljdCc7XG5cdFxuXHR2YXIgdXRpbEhhc2ggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQxKTtcblx0XG5cdHZhciBnZXRSYW5kb21JZCA9IGZ1bmN0aW9uIChzaXplKSB7XG5cdCAgLyoqXG5cdCAgICog55Sf5oiQ5pys6aG155qEIHB2IGlkXG5cdCAgICogcHYgaWQg5Y+q6ZyA6KaB5b2T5YmN55So5oi35Lya6K+d5ZSv5LiA5Y2z5Y+v77yM6L+Z5YS/5L2/55So5LiA5LiqIDYg5L2N55qEIDE2IOi/m+WItuaVsOWtl1xuXHQgICAqL1xuXHQgIHZhciBybmRfc3RycyA9ICcnO1xuXHQgIHZhciBjaGFycyA9ICcwMTIzNDU2Nzg5YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWic7XG5cdCAgdmFyIGhhbmRsZWQgPSBmYWxzZTtcblx0ICB2YXIgY2hhcjtcblx0XG5cdCAgLyoqXG5cdCAgICog6Kej5Yaz6YOo5YiGIHNwbSDooqsgR0ZXIOWimeS6hueahOaDheWGte+8jOWmgiAyMi5nbFxuXHQgICAqIOaOkumZpCBwdmlkIOS7pSBnbCDlvIDlpLTnmoTmg4XlhrVcblx0ICAgKi9cblx0ICBmdW5jdGlvbiBoYW5kbGVQVklkIChjaGFyUG9zKSB7XG5cdCAgICB2YXIgY2hhcnNXaXRob3V0RyA9ICcwMTIzNDU2Nzg5YWJjZGVmaGlqa2xtbm9wcXJzdHV2d3h5ekFCQ0RFRkhJSktMTU5PUFFSU1RVVldYWVonO1xuXHQgICAgdmFyIGNoYXJzV2l0aG91dEwgPSAnMDEyMzQ1Njc4OWFiY2RlZmdoaWprbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS01OT1BRUlNUVVZXWFlaJztcblx0XG5cdCAgICBpZiAoY2hhclBvcyA9PSAxKSB7XG5cdCAgICAgIHJldHVybiBjaGFyc1dpdGhvdXRHLnN1YnN0cihNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA2MCksIDEpO1xuXHQgICAgfSBlbHNlIGlmIChjaGFyUG9zID09IDIpIHtcblx0ICAgICAgcmV0dXJuIGNoYXJzV2l0aG91dEwuc3Vic3RyKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDYwKSwgMSk7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gJzAnO1xuXHQgIH07XG5cdFxuXHQgIHdoaWxlIChybmRfc3Rycy5sZW5ndGggPCBzaXplKSB7XG5cdCAgICBjaGFyID0gY2hhcnMuc3Vic3RyKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDYyKSwgMSk7XG5cdCAgICAvLyDlpITnkIbooqvlopnnmoTmg4XlhrXvvIznm67liY3lj6rpkojlr7lnbOW8gOWktOeahFxuXHQgICAgaWYgKCFoYW5kbGVkICYmIHJuZF9zdHJzLmxlbmd0aCA8PSAyICYmIChjaGFyLnRvTG93ZXJDYXNlKCkgPT0gJ2cnIHx8IGNoYXIudG9Mb3dlckNhc2UoKSA9PSAnbCcpKSB7XG5cdCAgICAgIGlmIChybmRfc3Rycy5sZW5ndGggPT09IDAgJiYgY2hhci50b0xvd2VyQ2FzZSgpID09ICdnJykge1xuXHQgICAgICAgIGlmIChNYXRoLnJhbmRvbSgpIDwgMC41KSB7XG5cdCAgICAgICAgICBjaGFyID0gaGFuZGxlUFZJZCgxKTtcblx0ICAgICAgICAgIGhhbmRsZWQgPSB0cnVlO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSBlbHNlIGlmIChybmRfc3Rycy5sZW5ndGggPT0gMSAmJiBjaGFyLnRvTG93ZXJDYXNlKCkgPT0gJ2wnICYmIHJuZF9zdHJzLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpID09ICdnJykge1xuXHQgICAgICAgIGNoYXIgPSBoYW5kbGVQVklkKDIpO1xuXHQgICAgICAgIGhhbmRsZWQgPSB0cnVlO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICBybmRfc3RycyArPSBjaGFyO1xuXHQgIH1cblx0ICByZXR1cm4gcm5kX3N0cnM7XG5cdH07XG5cdFxuXHRmdW5jdGlvbiBnZXRDaGFycyAoYXJncywgc2l6ZSwgZGVmYXVsdFZhbCkge1xuXHQgIGlmIChhcmdzKSB7XG5cdCAgICByZXR1cm4gdXRpbEhhc2guaGFzaChlbmNvZGVVUklDb21wb25lbnQoYXJncykpLnN1YnN0cigwLCBzaXplKTtcblx0ICB9IGVsc2Uge1xuXHQgICAgcmV0dXJuIGRlZmF1bHRWYWw7XG5cdCAgfVxuXHR9XG5cdFxuXHRleHBvcnRzLmdldExvZ0lkID0gZnVuY3Rpb24gKHBhZ2VVcmwsIGxvZ05hbWUpIHtcblx0ICB2YXIgcmFuZG9tOENoYXJzID0gZ2V0UmFuZG9tSWQoOCk7XG5cdCAgdmFyIHJhbmRvbTRDaGFycyA9IHJhbmRvbThDaGFycy5zdWJzdHIoMCwgNCk7XG5cdCAgdmFyIHJhbmRvbTZDaGFycyA9IHJhbmRvbThDaGFycy5zdWJzdHIoMCwgNik7XG5cdCAgcmV0dXJuIFtcblx0ICAgIGdldENoYXJzKHBhZ2VVcmwsIDQsIHJhbmRvbTRDaGFycyksXG5cdCAgICBnZXRDaGFycyhsb2dOYW1lLCA0LCByYW5kb200Q2hhcnMpLFxuXHQgICAgcmFuZG9tNkNoYXJzXG5cdCAgXS5qb2luKCcnKTtcblx0fTtcblxuXG4vKioqLyB9KSxcbi8qIDg2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0LyoqXG5cdCAqIOi/lOWbnkdNVOagvOW8j+eahOaXtuWMuu+8jOWmgu+8mkdNVCswNTo0NSwgR01ULTA3OjAwLCBHTVQrMDg6MDBcblx0ICovXG5cdGV4cG9ydHMuZ2V0VGltZVpvbmUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgdmFyIF90aW1lWm9uZSA9IC1uZXcgRGF0ZSgpLmdldFRpbWV6b25lT2Zmc2V0KCkgLyA2MDtcblx0ICB2YXIgX2FuZCA9ICcrJztcblx0ICBpZiAoX3RpbWVab25lIDwgMCkge1xuXHQgICAgX2FuZCA9ICctJztcblx0ICB9XG5cdCAgdmFyIHpvbmUgPSBNYXRoLmFicyhwYXJzZUludChfdGltZVpvbmUpKTtcblx0ICB2YXIgcmVtYWluZGVyID0gTWF0aC5hYnMocGFyc2VJbnQoX3RpbWVab25lKSAtIF90aW1lWm9uZSk7XG5cdCAgdmFyIHJlbWFpbmRlclpvbmUgPSAnMDAnO1xuXHQgIGlmIChyZW1haW5kZXIgPiAwKSB7XG5cdCAgICByZW1haW5kZXJab25lID0gNjAgKiByZW1haW5kZXI7XG5cdCAgfVxuXHQgIHJldHVybiAnR01UJyArIF9hbmQgKyAoem9uZSA+IDkgPyB6b25lIDogKCcwJyArIHpvbmUpKSArICc6JyArIHJlbWFpbmRlclpvbmU7XG5cdH07XG5cblxuLyoqKi8gfSksXG4vKiA4NyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBhbGlsb2cvcyAtIHNyYy9wbHVnaW5zL2xpYl9sb2cvbWlkZGxld2FyZS9jb21tb24vY29va2llX2RhdGEuanNcblx0ICpcblx0ICogY29va2llRGF0YVxuXHQgKlxuXHQgKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG5cdCAqXG5cdCAqIEF1dGhvcnM6XG5cdCAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cblx0ICovXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciB1dGlsRGFzaCA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpO1xuXHR2YXIgY29va2llID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NCk7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcblx0ICByZXR1cm4ge1xuXHQgICAgLy8gLyoqXG5cdCAgICAvLyAgKiDliJ3lp4vljJbmqKHlnZcsIOS4quaAp+WMlumDqOWIhuWtkOexu+S4reWunueOsFxuXHQgICAgLy8gICovXG5cdCAgICAvLyBpbml0OiBmdW5jdGlvbihvcHRpb25zKSB7XG5cdCAgICAvLyAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdCAgICAvLyB9LFxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogd29ya25vXG5cdCAgICAgKiAgIDEuIGNvb2tpZS5nZXRDb29raWUoJ3dvcmtubycpXG5cdCAgICAgKiAgIDIuIGNvb2tpZS5nZXRDb29raWUoJ2VtcGxJZCcpXG5cdCAgICAgKiBAcmV0dXJuIFwiZG9uZVwiIHx8IHVuZGVmaW5lZFxuXHQgICAgICovXG5cdCAgICBydW46IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgLy8g5pel5b+X5pS26ZuG5bel5Y+3XG5cdCAgICAgIHZhciBjb29raWVEYXRhID0ge307XG5cdCAgICAgIHZhciB3biA9IGNvb2tpZS5nZXRDb29raWUoJ3dvcmtubycpIHx8IGNvb2tpZS5nZXRDb29raWUoJ2VtcGxJZCcpO1xuXHQgICAgICBpZiAod24pIHtcblx0ICAgICAgICBjb29raWVEYXRhLndvcmtubyA9IHduO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciBobmcgPSBjb29raWUuZ2V0SG5nKCk7XG5cdCAgICAgIGlmIChobmcpIHtcblx0ICAgICAgICBjb29raWVEYXRhLl9obmcgPSBjb29raWUuZ2V0SG5nKCk7XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIGQ7XG5cdCAgICAgIC8vIGNvbnNvbGUubG9nKCdUT0RPIOWIpOaWrXB2IG9yIGhqbGonKTtcblx0ICAgICAgZCA9IHRoaXMub3B0aW9ucy5jb250ZXh0LndoYXRfdG9fc2VuZC5sb2dkYXRhO1xuXHQgICAgICBkLmdva2V5ID0gdXRpbERhc2guYXNzaWduKGQuZ29rZXksIGNvb2tpZURhdGEpOyAgICAgIFxuXHRcblx0ICAgICAgcmV0dXJuO1xuXHQgICAgfVxuXHQgIH07XG5cdH07XG5cblxuLyoqKi8gfSksXG4vKiA4OCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBhbGlsb2cvcyAtIHNyYy9saWJfdS9wbHVnaW5zL3B2L3doYXRfdG9fc2VuZHB2X3VzZXJkYXRhLmpzXG5cdCAqXG5cdCAqICDmj5Lku7bkvZznlKjvvJrmlLbpm4blupTnlKjmlrnoh6rlrprkuYlwduWPguaVsFxuXHQgKiAgICAgICAgICAg5bm25bCG5pS26ZuG5Yiw55qE6Ieq5a6a5LmJ5Y+C5pWw5Lul5pWw57uE5qC85byP6L+95Yqg5YiwcHZkYXRh5ZCO6Z2i77yacHZkYXRhLmNvbmNhdCh1c2VyZGF0YSlcblx0ICogIGRlcHM6IHdoYXRfdG9fc2VuZHB2XG5cdCAqXG5cdCAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cblx0ICpcblx0ICogQXV0aG9yczpcblx0ICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuXHQgKi9cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIGZvcm1hdCA9IF9fd2VicGFja19yZXF1aXJlX18oMjApO1xuXHR2YXIgaXNBcnJheSA9IF9fd2VicGFja19yZXF1aXJlX18oODkpO1xuXHR2YXIgdXRpbERhc2ggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxKTtcblx0dmFyIHV0aWxHb2xkbG9nID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0dmFyIGFwbHVzID0gdXRpbEdvbGRsb2cuZ2V0R2xvYmFsVmFsdWUoJ2FwbHVzJyk7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuXHQgIHJldHVybiB7XG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiDph4fpm4bkuKrmgKfljJblj4LmlbBcblx0ICAgICAqXG5cdCAgICAgKiBnb2tleTpcblx0ICAgICAqICAg6L+Z5Z2X5Li65a+55Y6G5Y+ydXNlcmRhdGHkvKDpgJLnmoTlhbzlrrnlgZrms5XvvIxUT0RP77ya5o6o5Yqo5bqU55So5pa55Y+Y5pu0XG5cdCAgICAgKiAgIOW6lOeUqOaWueS8oOmAkueahGdva2V55qC85byP5bqU55So5pa56Ieq6KGM5Yaz5a6a77yMXG5cdCAgICAgKiAgICAg5aaCIGdva2V5PVwiYT0xJmI9MlwiIOaIliB7XCJhXCI6W3tcImtleVwiOjIwMTYxMjI2MTU1MCxcInZhbHVlXCI6MC4xfSx7XCJrZXlcIjoyMDE2MTIyNjE2MDAsXCJ2YWx1ZVwiOjAuNX0se1wia2V5XCI6MjAxNjEyMjYxNjEwLFwidmFsdWVcIjoxfV19XG5cdCAgICAgKiAgIOi/meWdl+mAu+i+keaYr+mAoOaIkGV4dGVuZGFyZ3PlhoXpg6jlh7rnjrDlpJrkuKrmlpzmnaDnmoTlhYPlh7bvvIHvvIHvvIFcblx0ICAgICAqIHBhZ2VfaWQ6XG5cdCAgICAgKiAgIOaciXBhZ2VfaWTlsLHlnKhzcG1i5Lit5re75Yqg5a2Q5Y+C5pWwXG5cdCAgICAgKiAgIOaXoHBhZ2VfaWTlsLHmuIXpmaRzcG1i5Lit55qE5a2Q5Y+C5pWwXG5cdCAgICAgKiBzcG1fY250XG5cdCAgICAgKiAgIOabtOaUueWujHNwbWLkvY3ov5jpnIDopoHmm7TmlrBzcG1fY250IEDosIvlo6sgaW4gMjAxOC0wMy0yMCAg5Lul5YWNdG9VVOeahHNwbS1jbnTkuKLlpLHliIbmobblj7dcblx0ICAgICAqIOS4quaAp+WMluWPguaVsO+8mlxuXHQgICAgICogICAxLiAoYXBsdXPmpI3lhaUpOiA8bWV0YSBuYW1lPVwiYXBsdXMtY3B2ZGF0YVwiIGNvbnRlbnQ9XCJKU09Oc3RyaW5nXCI+XG5cdCAgICAgKiAgIDIuIOaWueazleS8oOWFpTogYXBsdXMuc2VuZFBWKHtDT05GSUd9LCB7VVNFUkRBVEV9KTtcblx0ICAgICAqIOWPjeS9nOW8iueahOaWh+aho+WuvemrmDogX3B3LF9waFxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm4ge09iamVjdH0gey4uLn1cblx0ICAgICAqL1xuXHQgICAgZ2V0VXNlcmRhdGE6IGZ1bmN0aW9uKCkge1xuXHQgICAgICB2YXIgY29uZmlnID0gdGhpcy5vcHRpb25zLmNvbmZpZyB8fCB7fTtcblx0ICAgICAgdmFyIGQgPSB7fTtcblx0XG5cdCAgICAgIGlmIChjb25maWcgJiYgIWNvbmZpZy5pc19hdXRvKSB7XG5cdCAgICAgICAgaWYgKGNvbmZpZy5nb2tleSkge1xuXHQgICAgICAgICAgaWYgKHR5cGVvZiBjb25maWcuZ29rZXkgPT09ICdzdHJpbmcnKSB7XG5cdCAgICAgICAgICAgIGQgPSBmb3JtYXQucGFyYW0yb2JqKGNvbmZpZy5nb2tleSk7XG5cdCAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcuZ29rZXkgPT09ICdvYmplY3QnKSB7XG5cdCAgICAgICAgICAgIGQgPSBjb25maWcuZ29rZXk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdFxuXHQgICAgICB2YXIgY29tYm9Vc2VyZGF0YSA9IGZ1bmN0aW9uKF9kYXRhKSB7XG5cdCAgICAgICAgaWYoaXNBcnJheShfZGF0YSkpe1xuXHQgICAgICAgICAgX2RhdGEuZm9yRWFjaChmdW5jdGlvbihpdGVtKXtcblx0ICAgICAgICAgICAgZCA9IHV0aWxEYXNoLmFzc2lnbihkLCBpdGVtKTtcblx0ICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1lbHNle1xuXHQgICAgICAgICAgZCA9IHV0aWxEYXNoLmFzc2lnbihkLCBfZGF0YSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9O1xuXHQgICAgICBjb21ib1VzZXJkYXRhKGFwbHVzLmdldE1ldGFJbmZvKCdhcGx1cy1jcHZkYXRhJykpO1xuXHQgICAgICB2YXIgY29udGV4dCA9IHRoaXMub3B0aW9ucy5jb250ZXh0IHx8IHt9O1xuXHQgICAgICB2YXIgdXNlcmRhdGEgPSBjb250ZXh0LnVzZXJkYXRhIHx8IHt9O1xuXHQgICAgICBjb21ib1VzZXJkYXRhKHVzZXJkYXRhKTtcblx0XG5cdCAgICAgIHJldHVybiBkO1xuXHQgICAgfSxcblx0XG5cdCAgICAvKipcblx0ICAgICAqIOWkhOeQhl8k5YWo5bGA5Y+Y6YePIC0tLS0tLSAyXG5cdCAgICAgKi9cblx0ICAgIHByb2Nlc3NMb2Rhc2hEb2xsYXI6IGZ1bmN0aW9uKCkge1xuXHQgICAgICB2YXIgY29uZmlnID0gdGhpcy5vcHRpb25zLmNvbmZpZyB8fCB7fTtcblx0ICAgICAgdmFyIF8kID0gdXRpbEdvbGRsb2cuZ2V0R29sZGxvZ1ZhbCgnXyQnKSB8fCB7fTtcblx0ICAgICAgaWYgKGNvbmZpZyAmJiBjb25maWcucmVmZXJyZXIpIHtcblx0ICAgICAgICBfJC5wYWdlX3JlZmVycmVyID0gY29uZmlnLnJlZmVycmVyO1xuXHQgICAgICB9XG5cdCAgICAgIHV0aWxHb2xkbG9nLnNldEdvbGRsb2dWYWwoJ18kJywgXyQpO1xuXHQgICAgfSxcblx0XG5cdCAgICAvKipcblx0ICAgICAqIOabtOaWsHByZe+8iOWcqOi/memHjOWBmueahOWOn+WboOaYr++8jHByZeWPguaVsOWxnuS6jmJhc2lj5Y+C5pWw77yM5L2G5pivdXNlcmRhdGHkuK3lpoLkvKDpgJLkuoZyZWZlcnJlcu+8jOWPr+S7peimhueblnByZe+8iVxuXHQgICAgICovXG5cdCAgICB1cGRhdGVQcmU6IGZ1bmN0aW9uKGRhdGEpIHtcblx0ICAgICAgdmFyIF8kID0gdXRpbEdvbGRsb2cuZ2V0R29sZGxvZ1ZhbCgnXyQnKSB8fCB7fTtcblx0ICAgICAgaWYgKF8kLnBhZ2VfcmVmZXJyZXIpIHtcblx0ICAgICAgICBkYXRhLnByZSA9ICBfJC5wYWdlX3JlZmVycmVyO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBkYXRhO1xuXHQgICAgfSxcblx0XG5cdCAgICAvKipcblx0ICAgICAqIOS9leaXtuaJp+ihjHNlbmRwduaJp+ihjOWFpeWPo1xuXHQgICAgICog6L+U5ZueXCJkb25lXCLnu4jmraLkuK3pl7Tku7bmiafooYxcblx0ICAgICAqIEBwYXJhbSBbU3RyaW5nXSBzdGF0ZSDnirbmgIFcblx0ICAgICAqIEBwYXJhbSBbRnVuY3Rpb25dIGNiICDlm57osINcblx0ICAgICAqIEByZXR1cm4gXCJkb25lXCIgfCB1bmRlZmluZWRcblx0ICAgICAqL1xuXHQgICAgcnVuOiBmdW5jdGlvbigpIHtcblx0ICAgICAgdmFyIGQgPSB0aGlzLm9wdGlvbnMuY29udGV4dC53aGF0X3RvX3NlbmQubG9nZGF0YTtcblx0ICAgICAgdmFyIHVzZXJkYXRhID0gdXRpbERhc2guYXNzaWduKHRoaXMuZ2V0VXNlcmRhdGEoKSwgZC51c2VyZGF0YSB8fCB7fSk7XG5cdCAgICAgIHRoaXMucHJvY2Vzc0xvZGFzaERvbGxhcigpO1xuXHRcblx0ICAgICAgZC5nb2tleSA9IHV0aWxEYXNoLmFzc2lnbihkLmdva2V5LCB1c2VyZGF0YSk7XG5cdCAgICAgIGQgPSB0aGlzLnVwZGF0ZVByZShkKTtcblx0XG5cdCAgICAgIHRoaXMub3B0aW9ucy5jb250ZXh0LndoYXRfdG9fc2VuZC5sb2dkYXRhID0gZDtcblx0ICAgICAgdGhpcy5vcHRpb25zLmNvbnRleHQudXNlcmRhdGEgPSBkLmdva2V5O1xuXHQgICAgICByZXR1cm47XG5cdCAgICB9XG5cdCAgfTtcblx0fTtcblxuXG4vKioqLyB9KSxcbi8qIDg5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0LyoqXG5cdCAqIHByb2plY3QgLSBmaWxlcGF0aFxuXHQgKiBkb23mk43kvZzlt6XlhbfnsbvvvIzov5nkuKrln7rnoYDlt6XlhbfnsbvkvJrooqvlhbbku5blt6XlhbfnsbvlvJXnlKjvvIzmlYXkuKXnpoHlnKjov5nph4zlho3lvJXnlKjlhbbku5bmqKHlnZfku6XlhY3lh7rnjrDpl67pophcblx0ICpcblx0ICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuXHQgKlxuXHQgKiBBdXRob3JzOlxuXHQgKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG5cdCAqL1xuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvKSB7XG5cdCAgaWYgKEFycmF5LmlzQXJyYXkpIHtcblx0ICAgIHJldHVybiBBcnJheS5pc0FycmF5KG8pO1xuXHQgIH0gZWxzZSB7XG5cdCAgICByZXR1cm4gL0FycmF5Ly50ZXN0KE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKSk7XG5cdCAgfVxuXHR9O1xuXG4vKioqLyB9KSxcbi8qIDkwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIGFsaWxvZy9zIC0gc3JjL2xpYl91L3BsdWdpbnMvcHYvd2hhdF90b19zZW5kcHZfdXNlcmRhdGFfd2ViLmpzXG5cdCAqXG5cdCAqICDmj5Lku7bkvZznlKjvvJrmlLbpm4blupTnlKjmlrnoh6rlrprkuYlwduWPguaVsFxuXHQgKiAgICAgICAgICAg5bm25bCG5pS26ZuG5Yiw55qE6Ieq5a6a5LmJ5Y+C5pWw5Lul5pWw57uE5qC85byP6L+95Yqg5YiwcHZkYXRh5ZCO6Z2i77yacHZkYXRhLmNvbmNhdCh1c2VyZGF0YSlcblx0ICogIGRlcHM6IHdoYXRfdG9fc2VuZHB2XG5cdCAqXG5cdCAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cblx0ICpcblx0ICogQXV0aG9yczpcblx0ICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuXHQgKi9cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIHV0aWxFeGluZm8gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkxKTtcblx0dmFyIGdldEV4UGFyYW1zT2JqID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5Mik7XG5cdHZhciBnZXRDb29raWVVc2VySW5mbyA9IF9fd2VicGFja19yZXF1aXJlX18oOTMpO1xuXHR2YXIgdXRpbEdvbGRsb2cgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHR2YXIgYXNzaWduID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMik7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuXHQgIHJldHVybiB7XG5cdCAgICAvKipcblx0ICAgICAqIOWFvOWuueWOhuWPsueahHBhZ2VfaWRcblx0ICAgICAqL1xuXHQgICAgZ2V0UGFnZUlkOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIHZhciBjb25maWcgPSB0aGlzLm9wdGlvbnMuY29uZmlnIHx8IHt9O1xuXHQgICAgICB2YXIgY29udGV4dCA9IHRoaXMub3B0aW9ucy5jb250ZXh0IHx8IHt9O1xuXHQgICAgICB2YXIgdXNlcmRhdGEgPSBjb250ZXh0LnVzZXJkYXRhIHx8IHt9O1xuXHQgICAgICByZXR1cm4gY29uZmlnLnBhZ2VfaWQgfHwgY29uZmlnLnBhZ2VpZCB8fCBjb25maWcucGFnZUlkIHx8IHVzZXJkYXRhLnBhZ2VfaWQ7XG5cdCAgICB9LFxuXHRcblx0ICAgIHJlc2V0U3BtQjogZnVuY3Rpb24gKCkge1xuXHQgICAgICBpZiAoIWFwbHVzLnNwbUFQSSkge1xuXHQgICAgICAgIHJldHVybjtcblx0ICAgICAgfVxuXHQgICAgICB2YXIgXyQgPSB1dGlsR29sZGxvZy5nZXRHb2xkbG9nVmFsKCdfJCcpIHx8IHt9O1xuXHQgICAgICB2YXIgX3NwbSA9IF8kLnNwbSB8fCB7fTtcblx0ICAgICAgdmFyIHNwbWIgPSBfc3BtLmRhdGEuYjtcblx0ICAgICAgaWYgKHNwbWIpIHtcblx0ICAgICAgICB2YXIgcGFnZV9pZCA9IHRoaXMuZ2V0UGFnZUlkKCk7XG5cdCAgICAgICAgaWYgKHBhZ2VfaWQpIHtcblx0ICAgICAgICAgIHNwbWIgPSBzcG1iLnNwbGl0KCcvJylbMF0gKyAnLycgKyBwYWdlX2lkO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBzcG1iID0gc3BtYi5zcGxpdCgnLycpWzBdO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBhcGx1cy5zcG1BUEkgJiYgYXBsdXMuc3BtQVBJLnNldEIoc3BtYik7XG5cdFxuXHQgICAgICAgIHZhciBjbnRzID0gX3NwbS5zcG1fY250LnNwbGl0KCcuJyk7XG5cdCAgICAgICAgaWYgKGNudHMgJiYgY250cy5sZW5ndGggPiAyKSB7XG5cdCAgICAgICAgICBjbnRzWzFdID0gc3BtYjtcblx0ICAgICAgICAgIF9zcG0uc3BtX2NudCA9IGNudHMuam9pbignLicpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfSxcblx0ICAgIGdldEV4UGFyYW1zSW5mbzogZnVuY3Rpb24gKCkge1xuXHQgICAgICB2YXIgZSA9IHV0aWxFeGluZm8uZ2V0RXhQYXJhbXMoKTtcblx0ICAgICAgdGhpcy5vcHRpb25zLmNvbnRleHQud2hhdF90b19zZW5kLmxvZ2RhdGEuZXhwYXJhbXMgPSBlO1xuXHQgICAgICByZXR1cm4gZ2V0RXhQYXJhbXNPYmooZSk7XG5cdCAgICB9LFxuXHRcblx0ICAgIC8qKlxuXHQgICAgICog5L2V5pe25omn6KGMc2VuZHB25omn6KGM5YWl5Y+jXG5cdCAgICAgKiDov5Tlm55cImRvbmVcIue7iOatouS4remXtOS7tuaJp+ihjFxuXHQgICAgICogQHBhcmFtIFtTdHJpbmddIHN0YXRlIOeKtuaAgVxuXHQgICAgICogQHBhcmFtIFtGdW5jdGlvbl0gY2IgIOWbnuiwg1xuXHQgICAgICogQHJldHVybiBcImRvbmVcIiB8IHVuZGVmaW5lZFxuXHQgICAgICovXG5cdCAgICBydW46IGZ1bmN0aW9uKCkge1xuXHQgICAgICB0aGlzLnJlc2V0U3BtQigpO1xuXHQgICAgICB2YXIgZ29rZXkgPSB0aGlzLm9wdGlvbnMuY29udGV4dC53aGF0X3RvX3NlbmQubG9nZGF0YS5nb2tleTtcblx0ICAgICAgZ29rZXkgPSBhc3NpZ24oZ29rZXksIGdldENvb2tpZVVzZXJJbmZvKCkpO1xuXHQgICAgICBnb2tleSA9IGFzc2lnbih0aGlzLmdldEV4UGFyYW1zSW5mbygpLCBnb2tleSk7XG5cdCAgICAgIHRoaXMub3B0aW9ucy5jb250ZXh0LndoYXRfdG9fc2VuZC5sb2dkYXRhLmdva2V5ID0gZ29rZXk7XG5cdCAgICAgIHJldHVybjtcblx0ICAgIH1cblx0ICB9O1xuXHR9O1xuXG5cbi8qKiovIH0pLFxuLyogOTEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogcHJvamVjdCAtIGZpbGVwYXRoXG5cdCAqXG5cdCAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cblx0ICpcblx0ICogQXV0aG9yczpcblx0ICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuXHQgKi9cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIGVhY2ggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI3KTtcblx0dmFyIGZvcm1hdCA9IF9fd2VicGFja19yZXF1aXJlX18oMjApO1xuXHR2YXIgdXRpbERhc2ggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxKTtcblx0dmFyIHV0aWxEb20gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM2KTtcblx0dmFyIHV0aWxBdHRyaWJ1dGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4KTtcblx0dmFyIHV0aWxBcnJheSA9IF9fd2VicGFja19yZXF1aXJlX18oMzUpO1xuXHR2YXIgdXRpbExvZ2dlciA9IF9fd2VicGFja19yZXF1aXJlX18oMjYpO1xuXHR2YXIgYXBsdXNTdGF0aWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXHRcblx0LyoqXG5cdCAqIHBhcmFtIHRvIGFycmF5XG5cdCAqIDIwMTYtMDgtMjQg5pS+5byA77yM55So5p2l5aSE55CGZXhwYXJhbXMgQOiwi+Wjq1xuXHQgKiDlsIbkuIDkuKrnroDljZXnmoTlvaLlpoIgYT0xJmI9MiZjPTMg6L+Z5qC355qE5Y+C5pWw6L2s5YyW5Li6566A5Y2V55qEIGFycmF5IOagvOW8j++8jOWmgu+8mlxuXHQgKiBbW1wiYVwiLCBcIjFcIl0sIFtcImJcIiwgXCIyXCJdLCBbXCJjXCIsIFwiM1wiXV1cblx0ICpcblx0ICogQHBhcmFtIHBhcmFtcyB7U3RyaW5nfVxuXHQgKi9cblx0ZnVuY3Rpb24gcGFyYW0yYXJyIChwYXJhbXMpIHtcblx0ICB2YXIgYSA9IHBhcmFtcy5zcGxpdChcIiZcIiksXG5cdCAgICBpID0gMCwgbCA9IGEubGVuZ3RoLFxuXHQgICAgaXRlbSxcblx0ICAgIGFyciA9IFtdO1xuXHQgIGZvciAoOyBpIDwgbDsgaSsrKSB7XG5cdCAgICBpdGVtID0gYVtpXS5zcGxpdChcIj1cIik7XG5cdCAgICBhcnIucHVzaChbaXRlbS5zaGlmdCgpLCBpdGVtLmpvaW4oXCI9XCIpXSk7XG5cdCAgfVxuXHRcblx0ICByZXR1cm4gYXJyO1xuXHR9O1xuXHRcblx0LyoqXG5cdCAqIOWwhm1ldGHphY3nva7nmoRleHBhcmFtc+WQiOW5tuWIsGJlYWNvbui+k+WHuueahGV4cGFyYW1z5LiKXG5cdCAqIEBwYXJhbXMge1N0cmluZ30gYmVhY29uRXhwYXJhbXNcblx0ICogQHBhcmFtcyB7U3RyaW5nfSBtZXRhRXhwYXJhbXNcblx0ICpcblx0ICogQHJldHVybiB7U3RyaW5nfSBleHBhcmFtc1xuXHQgKi9cblx0ZnVuY3Rpb24gbWVyZ2VFeHBhcmFtcyAoYmVhY29uRXhwYXJhbXMsIG1ldGFFeHBhcmFtcykge1xuXHQgIHZhciBiZXhwYXJhbXMgPSAnYXBsdXMmc2lkeD1hcGx1c1NpZGV4JmNreD1hcGx1c0NreCc7XG5cdCAgdmFyIGRlZmF1bHRFeHBhcmFtcyA9IGJlYWNvbkV4cGFyYW1zIHx8IGJleHBhcmFtcztcblx0ICB0cnkge1xuXHQgICAgaWYgKG1ldGFFeHBhcmFtcykge1xuXHQgICAgICB2YXIgbWV0YU9iaiA9IGZvcm1hdC5wYXJhbTJvYmoobWV0YUV4cGFyYW1zKTtcblx0ICAgICAgdmFyIGJsYWNrcyA9IFthcGx1c1N0YXRpYy5BUExVUywgJ2NuYScsIGFwbHVzU3RhdGljLlNQTV9DTlQsIGFwbHVzU3RhdGljLlNQTV9VUkwsIGFwbHVzU3RhdGljLlNQTV9QUkUsICdsb2d0eXBlJywgJ3ByZScsICd1aWRhcGx1cycsICdhc2lkJywgJ3NpZHgnLCAndHJpZCcsICdnb2tleSddO1xuXHQgICAgICBlYWNoKGJsYWNrcywgZnVuY3Rpb24oaykge1xuXHQgICAgICAgIGlmIChtZXRhT2JqLmhhc093blByb3BlcnR5KGspKSB7XG5cdCAgICAgICAgICB1dGlsTG9nZ2VyLmxvZ2dlcih7bXNnOiAnQ2FuIG5vdCBpbmplY3Qga2V5d29yZHM6ICcgKyBrfSk7XG5cdCAgICAgICAgICBkZWxldGUgbWV0YU9ialtrXTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0pO1xuXHQgICAgICBkZWxldGUgbWV0YU9ialsnJ107IC8vIOepuueZvWtleeS5n+enu+mZpOaOiVxuXHRcblx0ICAgICAgdmFyIHRtcFBhcmFtID0gJyc7XG5cdCAgICAgIC8vIOaciWJlYWNvbumFjee9rueahOaDheWGtVxuXHQgICAgICBpZiAoYmVhY29uRXhwYXJhbXMpIHtcblx0ICAgICAgICB2YXIgaW5kZXggPSBiZWFjb25FeHBhcmFtcy5tYXRjaCgvYXBsdXMmLykuaW5kZXg7XG5cdCAgICAgICAgdmFyIGJlYWNvbk9iaiA9IGluZGV4ID4gMCA/IGZvcm1hdC5wYXJhbTJvYmooYmVhY29uRXhwYXJhbXMuc3Vic3RyaW5nKDAsIGluZGV4KSkgOiB7fTtcblx0ICAgICAgICBkZWxldGUgYmVhY29uT2JqWycnXTtcblx0ICAgICAgICB0bXBQYXJhbSA9IGZvcm1hdC5vYmoycGFyYW0odXRpbERhc2guYXNzaWduKGJlYWNvbk9iaiwgbWV0YU9iaikpICsgJyYnICsgYmVhY29uRXhwYXJhbXMuc3Vic3RyaW5nKGluZGV4LCBiZWFjb25FeHBhcmFtcy5sZW5ndGgpO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIC8vIOaXoGJlYWNvbumFjee9rueahOaDheWGtVxuXHQgICAgICAgIHRtcFBhcmFtID0gZm9ybWF0Lm9iajJwYXJhbShtZXRhT2JqKSArICcmJyArIGJleHBhcmFtcztcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gdG1wUGFyYW07XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICByZXR1cm4gZGVmYXVsdEV4cGFyYW1zO1xuXHQgICAgfVxuXHQgIH0gY2F0Y2ggKGUpIHtcblx0ICAgIHJldHVybiBkZWZhdWx0RXhwYXJhbXM7XG5cdCAgfVxuXHR9O1xuXHRleHBvcnRzLm1lcmdlRXhwYXJhbXMgPSBtZXJnZUV4cGFyYW1zO1xuXHRcblx0XG5cdGZ1bmN0aW9uIGdldEV4UGFyYW1zRnJvbU1ldGEgKCkge1xuXHQgIHZhciBfJCA9IGFwbHVzICYmIGFwbHVzLl8kID8gYXBsdXMuXyQgOiB7fTtcblx0ICB2YXIgbWV0YV9pbmZvID0gXyQubWV0YV9pbmZvIHx8IHt9O1xuXHQgIHJldHVybiBtZXRhX2luZm9bJ2FwbHVzLWV4cGFyYW1zJ10gfHwgJyc7XG5cdH07XG5cdFxuXHQvLyBleHBhcmFtc+WPguaVsC0tLS0tLSAyXG5cdGZ1bmN0aW9uIGdldEV4UGFyYW1zICgpIHtcblx0ICB2YXIgY3VycmVudF9ub2RlID0gdXRpbERvbS5nZXRDdXJyZW50Tm9kZSgpO1xuXHQgIHZhciBiX2V4cGFyYW1zID0gdXRpbEF0dHJpYnV0ZS50cnlUb0dldEF0dHJpYnV0ZShjdXJyZW50X25vZGUsICdleHBhcmFtcycpO1xuXHQgIHZhciBleHBhcmFtcyA9IG1lcmdlRXhwYXJhbXMoYl9leHBhcmFtcywgZ2V0RXhQYXJhbXNGcm9tTWV0YSgpKSB8fCAnJztcblx0ICByZXR1cm4gZXhwYXJhbXMgJiYgZXhwYXJhbXMucmVwbGFjZSgvJmFtcDsvZywgXCImXCIpLnJlcGxhY2UoL1xcYnVzZXIoaXxJKWQ9LywgXCJ1aWRhcGx1cz1cIik7XG5cdH07XG5cdGV4cG9ydHMuZ2V0RXhQYXJhbXMgPSBnZXRFeFBhcmFtcztcblx0XG5cdC8qKlxuXHQgKiDlh7rkuo7mtYHph4/nmoTogIPomZHvvIxiZWFjb27ovpPlh7rnmoRleHBhcmFtc+WPquWPliBleHBhcmFtc19rZXlfbmFtZXPvvIjop4HphY3nva7vvIkg5YaF55qE5Yeg5Liq5a2X5q61XG5cdCAqIOiLpWV4cGFyYW1z5YaF5pyJdXNlcmlkIOaIluiAhSDlnKjlj5HpgIHnmoRQVumSn3VpZGFwbHVz5pyJ5YC8LCDliJnlnKjku6Tnrq3or7fmsYLnmoRnb2tleeWGheS5n+i/veWKoHVpZHBhbHVz5Y+C5pWwXG5cdCAqIOiLpWV4cGFyYW1z5YaF5pyJ5Lyg5YWlcGNfaS9wdV9pLCDliJnlnKjku6Tnrq3or7fmsYLnmoRnb2tleeWGheS5n+m7mOiupOi/veWKoHBjX2kvcHVfaeWPguaVsFxuXHQgKlxuXHQgKiBAcmV0dXJuIHtPYmplY3R9IHJzXG5cdCAqL1xuXHRleHBvcnRzLmdldEV4cGFyYW1zSW5mb3MgPSBmdW5jdGlvbihleHBhcmFtc19rZXlfbmFtZXMsIG1ldGFfZXhpbmZvKSB7XG5cdCAgdmFyIHJzID0ge307XG5cdCAgdmFyIGtleXMgPSBleHBhcmFtc19rZXlfbmFtZXMgfHwgWyd1aWRhcGx1cycsICdwY19pJywgJ3B1X2knXTtcblx0ICB2YXIgdG1wX2luZm8gPSBnZXRFeFBhcmFtcygpIHx8ICcnO1xuXHQgIHRtcF9pbmZvID0gdG1wX2luZm8ucmVwbGFjZSgvJmFwbHVzJi8sICcmJyk7XG5cdCAgdmFyIHRtcF9hcnIgPSBwYXJhbTJhcnIodG1wX2luZm8pIHx8IFtdO1xuXHRcblx0ICB2YXIgY29uZiA9IGZ1bmN0aW9uKGspIHtcblx0ICAgIHJldHVybiB1dGlsQXJyYXkuaW5kZXhvZihrZXlzLCBrKSA+IC0xO1xuXHQgIH07XG5cdCAgLy8g5Ye65LqO5rWB6YeP55qE6ICD6JmR77yMYmVhY29u6L6T5Ye655qEZXhwYXJhbXPlj6rlj5YgIGV4cGFyYW1zX2tleV9uYW1lc++8iOingemFjee9ru+8ieWGheeahOWHoOS4quWtl+autVxuXHQgIGZvciAodmFyIGkgPSAwOyBpIDwgdG1wX2Fyci5sZW5ndGg7IGkrKykge1xuXHQgICAgdmFyIHRtcF9vYmogPSB0bXBfYXJyW2ldO1xuXHQgICAgdmFyIGsgPSB0bXBfb2JqWzBdIHx8ICcnO1xuXHQgICAgdmFyIHYgPSB0bXBfb2JqWzFdIHx8ICcnO1xuXHQgICAgaWYgKGsgJiYgdiAmJiAobWV0YV9leGluZm8gPT09ICdFWFBBUkFNUycgfHwgY29uZihrKSkpIHtcblx0ICAgICAgcnNba10gPSB2O1xuXHQgICAgfVxuXHQgIH1cblx0ICByZXR1cm4gcnM7XG5cdH07XG5cbi8qKiovIH0pLFxuLyogOTIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgZm9ybWF0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMCk7XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4cGFyYW1zKSB7XG5cdCAgdmFyIHJzID0ge307XG5cdCAgdHJ5IHtcblx0ICAgIC8vIHZhciBleHBhcmFtcyA9IHV0aWxFeGluZm8uZ2V0RXhQYXJhbXMoKTtcblx0ICAgIC8vIHRoaXMub3B0aW9ucy5jb250ZXh0LndoYXRfdG9fc2VuZC5sb2dkYXRhLmV4cGFyYW1zID0gZXhwYXJhbXM7XG5cdCAgICB2YXIgdG1wT2JqID0gZm9ybWF0LnBhcmFtMm9iaihleHBhcmFtcy5yZXBsYWNlKC8mYW1wOy9nLCAnJicpLnJlcGxhY2UoL1xcYnVzZXIoaXxJKWQ9LywgJ3VpZGFwbHVzPScpLnJlcGxhY2UoLyZhcGx1cyYvLCAnJicpKTtcblx0ICAgIC8vIOS7heWPliBbJ3VpZGFwbHVzJywgJ3BjX2knLCAncHVfaSddIOS4ieS4quWAvFxuXHQgICAgaWYgKHRtcE9iai51aWRhcGx1cykge1xuXHQgICAgICBycy51aWRhcGx1cyA9IHRtcE9iai51aWRhcGx1cztcblx0ICAgIH1cblx0ICAgIHJzLnBjX2kgPSB0bXBPYmoucGNfaTtcblx0ICAgIHJzLnB1X2kgPSB0bXBPYmoucHVfaTtcblx0ICB9IGNhdGNoIChlKSB7XG5cdCAgICBjb25zb2xlICYmIGNvbnNvbGUubG9nKGUpO1xuXHQgIH1cblx0ICByZXR1cm4gcnM7XG5cdH07XG5cbi8qKiovIH0pLFxuLyogOTMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgY29va2llID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NCk7XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuXHQgIHZhciBkID0ge307XG5cdCAgLy8g5pel5b+X5pS26ZuG5bel5Y+3XG5cdCAgdmFyIHduID0gY29va2llLmdldENvb2tpZSgnd29ya25vJykgfHwgY29va2llLmdldENvb2tpZSgnZW1wbElkJyk7XG5cdCAgaWYgKHduKSB7XG5cdCAgICBkLndvcmtubyA9IHduO1xuXHQgIH1cblx0ICB2YXIgaG5nID0gY29va2llLmdldEhuZygpO1xuXHQgIGlmIChobmcpIHtcblx0ICAgIGQuX2huZyA9IGNvb2tpZS5nZXRIbmcoKTtcblx0ICB9XG5cdCAgcmV0dXJuIGQ7XG5cdH07XG5cblxuLyoqKi8gfSksXG4vKiA5NCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBhbGlsb2cvcyAtIHNyYy9saWJfYi9jb25maWcvcGx1Z2lucy93aGF0X3NlbmRwdl90b191dDIuanNcblx0ICpcblx0ICogIOS9nOeUqO+8muWmguaenOW9k+WJjeeOr+Wig+a7oei2s3RvVVTmnaHku7bvvIzliJnlsIbmlLbpm4blj5HpgIHoh7NVVOeahOWPguaVsO+8jFxuXHQgKiAgICAgICDlubblsIbmlLbpm4bliLDnmoTlj4LmlbDlrZjmlL7liLDkuIrkuIvmlofnjq/looPkuK06IGNvbnRleHQud2hlcmVfdG9fc2VuZHB2LnB2ZGF0YVRvVVRcblx0ICogIGRlcHM6ICB3aGVyZV90b19zZW5kcHZcblx0ICpcblx0ICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuXHQgKlxuXHQgKiBBdXRob3JzOlxuXHQgKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG5cdCAqL1xuXHQndXNlIHN0cmljdCc7XG5cdFxuXHR2YXIgdXRpbCA9IF9fd2VicGFja19yZXF1aXJlX18oOTUpO1xuXHR2YXIgdXRpbEFycmF5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNSk7IFxuXHR2YXIgdXRpbERhc2ggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxKTtcblx0dmFyIHV0aWxHb2xkbG9nID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0dmFyIGNvb2tpZSA9IF9fd2VicGFja19yZXF1aXJlX18oNzQpO1xuXHR2YXIgdXRpbFVybCA9IF9fd2VicGFja19yZXF1aXJlX18oMTYpO1xuXHR2YXIgYXBsdXNTdGF0aWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXHRcblx0LyoqXG5cdCAqIOa4heeQhuaJk+eCueWPguaVsFxuXHQgKiDlsIbmiYDmnInlgLzkuLrnqbrnmoTlj4LmlbDljrvmjonvvIhhcGx1c+mZpOWklu+8ie+8m1xuXHQgKiDlpoLmnpzmnInph43lpI3nmoTlj4LmlbDvvIzlj6rkv53nlZnmnIDlkI7kuIDkuKpcblx0ICogQHBhcmFtIGRhdGEge0FycmF5fVxuXHQgKi9cblx0ZnVuY3Rpb24gY2xlYW5QYXJhbXMoZGF0YSkge1xuXHQgIHZhciBuZXdfcGFyYW1zID0gW107XG5cdCAgdmFyIGk7XG5cdCAgdmFyIGl0ZW07XG5cdCAgdmFyIGtleXMgPSB7fTtcblx0ICB2YXIgaztcblx0ICB2YXIgdjtcblx0XG5cdCAgZm9yIChpID0gZGF0YS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuXHQgICAgaXRlbSA9IGRhdGFbaV07XG5cdCAgICBrID0gaXRlbVswXTtcblx0ICAgIGlmIChrICYmIGsuaW5kZXhPZih1dGlsLnNfcGxhaW5fb2JqKSA9PSAtMSAmJiBrZXlzLmhhc093blByb3BlcnR5KGspKSBjb250aW51ZTtcblx0ICAgIHYgPSBpdGVtWzFdO1xuXHQgICAgaWYgKGsgPT0gJ2FwbHVzJyB8fCB2KSB7XG5cdCAgICAgIG5ld19wYXJhbXMudW5zaGlmdChbaywgdl0pO1xuXHQgICAgICBrZXlzW2tdID0gMTtcblx0ICAgIH1cblx0ICB9XG5cdFxuXHQgIHJldHVybiBuZXdfcGFyYW1zO1xuXHR9O1xuXHRcblx0LyoqXG5cdCAqIOa4heeQhnRvVVTmiZPngrnlj4LmlbDvvIzljrvpmaTvvJpcblx0ICogbG9ndHlwZVxuXHQgKiBjYWNoZVxuXHQgKiBzY3Jcblx0ICogOjotcGxhaW4teHh4XG5cdCAqIHNwbS1jbnRcblx0ICogQHBhcmFtIGRhdGFcblx0ICovXG5cdGZ1bmN0aW9uIGNsZWFuUGFyYW1zRm9yVG9VVChkYXRhKSB7XG5cdCAgdmFyIG5ld19wYXJhbXMgPSBbXSxcblx0ICAgIGksXG5cdCAgICBpdGVtLFxuXHQgICAgaywgdixcblx0ICAgIGV4Y2x1ZGVQYXJtcyA9IHtcblx0ICAgICAgXCJsb2d0eXBlXCI6IHRydWUsXG5cdCAgICAgIFwiY2FjaGVcIjogdHJ1ZSxcblx0ICAgICAgXCJzY3JcIjogdHJ1ZSxcblx0ICAgICAgXCJzcG0tY250XCI6IHRydWVcblx0ICAgIH07XG5cdFxuXHQgIGZvciAoaSA9IGRhdGEubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcblx0ICAgIGl0ZW0gPSBkYXRhW2ldO1xuXHQgICAgayA9IGl0ZW1bMF07XG5cdCAgICB2ID0gaXRlbVsxXTtcblx0ICAgIGlmICgodXRpbERhc2guaXNTdGFydFdpdGgoaywgdXRpbC5zX3BsYWluX29iaikgJiYgIXV0aWxEYXNoLmlzU3RhcnRXaXRoKGssIHV0aWwubWtQbGFpbktleUZvckV4cGFyYW1zKCkpKSB8fCBleGNsdWRlUGFybXNba10pIHtcblx0ICAgICAgY29udGludWU7XG5cdCAgICB9XG5cdCAgICAvLyAyMDE2LTA4LTI0IOeQrOWtkOmcgOaxgu+8jGV4cGFyYW1z5Y2V54us5aSE55CG77yMd2luZHZhbmXph4zpnIDopoEgQOiwi+Wjq1xuXHQgICAgaWYgKHV0aWxEYXNoLmlzU3RhcnRXaXRoKGssIHV0aWwubWtQbGFpbktleUZvckV4cGFyYW1zKCkpKSB7XG5cdCAgICAgIHZhciBleHBhcmFtc0FyciA9IHV0aWwucGFyYW0yYXJyKHYpO1xuXHQgICAgICBpZiAodHlwZW9mIGV4cGFyYW1zQXJyID09PSAnb2JqZWN0JyAmJiBleHBhcmFtc0Fyci5sZW5ndGggPiAwKSB7XG5cdCAgICAgICAgZm9yICh2YXIgaiA9IGV4cGFyYW1zQXJyLmxlbmd0aCAtIDE7IGogPj0gMDsgai0tKSB7XG5cdCAgICAgICAgICB2YXIgZUl0ZW0gPSBleHBhcmFtc0FycltqXTtcblx0ICAgICAgICAgIC8vIOepuuWAvOS4jemcgOimgVxuXHQgICAgICAgICAgaWYgKGVJdGVtICYmIGVJdGVtWzFdKSB7XG5cdCAgICAgICAgICAgIG5ld19wYXJhbXMudW5zaGlmdChbZUl0ZW1bMF0sIGVJdGVtWzFdXSk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIGNvbnRpbnVlO1xuXHQgICAgfVxuXHQgICAgbmV3X3BhcmFtcy51bnNoaWZ0KFtrLCB2XSk7XG5cdCAgfVxuXHQgIHJldHVybiBuZXdfcGFyYW1zO1xuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcblx0ICByZXR1cm4ge1xuXHQgICAgLy8gLy8g5Yid5aeL5YyW5qih5Z2XXG5cdCAgICAvLyBpbml0OiBmdW5jdGlvbihvcHRpb25zKSB7XG5cdCAgICAvLyAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdCAgICAvLyB9LFxuXHRcblx0ICAgIC8vIOWFs+mUruivjeS4jeWFgeiuuOW6lOeUqOaWueimhuebllxuXHQgICAga2V5SXNBdmFpbGFibGU6IGZ1bmN0aW9uKGspIHtcblx0ICAgICAgdmFyIGJsYWNrcyA9IFsnZnVuY3R5cGUnLCAnZnVuY0lkJywgJ3NwbS1jbnQnLCAnc3BtLXVybCcsICdzcG0tcHJlJywgJ19pc2g1JywgJ19pc19nMnUnLCAnX2g1dXJsJywgJ2NuYScsICdpc29uZXBhZ2UnLCAnbHZlcicsICdqc3ZlciddO1xuXHQgICAgICBpZih1dGlsQXJyYXkuaW5kZXhvZihibGFja3MsIGspID09PSAtMSkge1xuXHQgICAgICAgIHJldHVybiB0cnVlO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgIH0sXG5cdFxuXHQgICAgLy8g5bey57uP5ZKMVVTnuqblrprlpb3vvIzkvKDpgJLnu5lVVOeahOS6jOe6p+WPguaVsOWPquaUr+aMgeWfuuacrOaVsOaNruexu+Wei++8jOS4jeaUr+aMgeWvueixoVxuXHQgICAgdmFsSXNBdmFpbGFibGU6IGZ1bmN0aW9uKHYpIHtcblx0ICAgICAgaWYgKHR5cGVvZiB2ID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgdiA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgIH0sXG5cdFxuXHQgICAgdXBVdERhdGE6IGZ1bmN0aW9uKGQsIG9iaikge1xuXHQgICAgICB2YXIgX3NlbGYgPSB0aGlzO1xuXHQgICAgICBkID0gZCA/IGQgOiB7fTtcblx0ICAgICAgaWYgKG9iaiAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0Jykge1xuXHQgICAgICAgIGZvciAodmFyIGsgaW4gb2JqKSB7XG5cdCAgICAgICAgICB2YXIgdiA9IG9ialtrXTtcblx0ICAgICAgICAgIGlmKGsgJiYgX3NlbGYudmFsSXNBdmFpbGFibGUodikgJiYgX3NlbGYua2V5SXNBdmFpbGFibGUoaykpIHtcblx0ICAgICAgICAgICAgZFtrXSA9IHY7IC8vIOiHquWumuS5ieWPguaVsOe7n+e7n+mcgOimgeWKoFwiX1wi5YmN57yAXG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBkO1xuXHQgICAgfSxcblx0XG5cdCAgICBnZXRUb1V0RGF0YTogZnVuY3Rpb24gKCkge1xuXHQgICAgICB2YXIgXyQgPSB1dGlsR29sZGxvZy5nZXRHb2xkbG9nVmFsKCdfJCcpIHx8IHt9O1xuXHQgICAgICB2YXIgc3BtID0gXyQuc3BtIHx8IHt9O1xuXHQgICAgICB2YXIgY29udGV4dCA9IHRoaXMub3B0aW9ucy5jb250ZXh0IHx8IHt9O1xuXHQgICAgICB2YXIgd2hhdF90b19zZW5kID0gY29udGV4dC53aGF0X3RvX3NlbmQgfHwge307XG5cdCAgICAgIHZhciBsb2dkYXRhID0gd2hhdF90b19zZW5kLmxvZ2RhdGEgfHwge307XG5cdCAgICAgIHZhciBzZGtfaW5mbyA9IGxvZ2RhdGEuc2RrX2luZm8gfHwge307XG5cdCAgICAgIHZhciBldGFnID0gdGhpcy5vcHRpb25zLmNvbnRleHQuZXRhZyB8fCB7fTtcblx0XG5cdCAgICAgIHZhciBleHBhcmFtcyA9IGNsZWFuUGFyYW1zRm9yVG9VVChjbGVhblBhcmFtcyhsb2dkYXRhLmV4cGFyYW1zIHx8IFtdKSk7XG5cdCAgICAgIGV4cGFyYW1zID0gdXRpbC5hcnIyb2JqKGV4cGFyYW1zKTtcblx0ICAgICAgLy8gdmFyIHVzZXJkYXRhID0gY2xlYW5QYXJhbXNGb3JUb1VUKGNsZWFuUGFyYW1zKGNvbnRleHQudXNlcmRhdGEgfHwgW10pKTtcblx0ICAgICAgLy8gdXNlcmRhdGEgPSB1dGlsLmFycjJvYmoodXNlcmRhdGEpO1xuXHQgICAgICB2YXIgdXNlcmRhdGEgPSBjb250ZXh0LnVzZXJkYXRhO1xuXHQgICAgICB2YXIgcGFnZXVybCA9IGxvY2F0aW9uLmhyZWY7XG5cdFxuXHQgICAgICB2YXIgZCA9IHtcblx0ICAgICAgfTtcblx0ICAgICAgLy8gLS0tLTIwMTcwMzI3IGFwbHVz5paw5aKe6ZyA5rGCIEDkuZ3plKEoMDI3NzE3KVxuXHQgICAgICAvLyAxLsKgYXBsdXPlop7liqAgc2Nt44CBIGlzc2I9MSjlpoLmnpx1cmzlkI7pnaLmnIlwb2ludOWPguaVsO+8ieOAgSBwZzFzdGVwayDkuInkuKrlj4LmlbDvvIzov5nkuInkuKrlj4LmlbDpg73mtonlj4pVUkzlj4LmlbDop6PmnpBcblx0ICAgICAgdmFyIHNjbSA9IHV0aWxVcmwuZ2V0UGFyYW1Gcm9tVXJsKCdzY20nLCBwYWdldXJsKSB8fCAnJztcblx0ICAgICAgaWYgKHNjbSkge1xuXHQgICAgICAgIGRbJ3NjbSddID0gc2NtO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciBwZzFzdGVwayA9IHV0aWxVcmwuZ2V0UGFyYW1Gcm9tVXJsKCdwZzFzdGVwaycsIHBhZ2V1cmwpIHx8ICcnO1xuXHQgICAgICBpZiAocGcxc3RlcGspIHtcblx0ICAgICAgICBkWydwZzFzdGVwayddID0gcGcxc3RlcGs7XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIHBvaW50ID0gdXRpbFVybC5nZXRQYXJhbUZyb21VcmwoJ3BvaW50JywgcGFnZXVybCkgfHwgJyc7XG5cdCAgICAgIGlmIChwb2ludCkge1xuXHQgICAgICAgIGRbJ2lzc2InXSA9IDE7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKHNka19pbmZvICYmIHNka19pbmZvLm1hbnNuZGxvZykge1xuXHQgICAgICAgIGQubWFuc25kbG9nID0gc2RrX2luZm8ubWFuc25kbG9nO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBkID0gdGhpcy51cFV0RGF0YShkLCBleHBhcmFtcyk7ICAvLyBiZWFjb27ln4vngrnnmoTlupTnlKjlj4LmlbBcblx0ICAgICAgZCA9IHRoaXMudXBVdERhdGEoZCwgbG9nZGF0YS5nb2tleSk7XG5cdCAgICAgIGQgPSB0aGlzLnVwVXREYXRhKGQsIHVzZXJkYXRhKTsgIC8vIOW6lOeUqOaWuemAmui/h3NlbmRQVuaOpeWPo+S8oOmAkueahHB25Y+C5pWwXG5cdFxuXHQgICAgICAvLyDlj4LmlbDnsbvlnovkuIDvvJrpnIDopoFVVOeJueauiuWkhOeQhueahO+8iGZ1bmN0eXBl77yMZnVuY0lk77yMdXJs77yMbG9na2V577yJXG5cdCAgICAgIGQuZnVuY3R5cGUgPSAncGFnZSc7XG5cdCAgICAgIGQuZnVuY0lkID0gJzIwMDEnO1xuXHQgICAgICBkLnVybCA9IChsb2NhdGlvbi5wcm90b2NvbCB8fCAnaHR0cHM6JykgKyAnLy8nICsgbG9jYXRpb24uaG9zdCArIGxvY2F0aW9uLnBhdGhuYW1lOyAvLyBsb2NhdGlvbi5vcmlnaW4gKyBsb2NhdGlvbi5wYXRobmFtZTtcblx0XG5cdCAgICAgIC8vIOWPguaVsOexu+Wei+S6jO+8muS4jemcgOimgVVU54m55q6K5aSE55CG55qE77yI5YW25LuWYXBsdXPoh6rlrprkuYlrZXlcXHZhbHVl77yJa2V56ZyA6KaB5LiL5YiS57q/5byA5aS0XG5cdCAgICAgIGQuX2lzaDUgPSAnMSc7ICAgIC8vIFVU5b+F6aG755qE5bGe5oCn77yM5YaZ5q275Y2z5Y+vXG5cdCAgICAgIGQuX2g1dXJsID0gcGFnZXVybDtcblx0ICAgICAgZC5fdG9VVCA9IDI7XG5cdCAgICAgIGQuX2JyaWRnZU5hbWUgPSAnV2luZFZhbmUnO1xuXHQgICAgICBkLl9icmlkZ2VWZXJzaW9uID0gJzMuMC40Jztcblx0XG5cdCAgICAgIC8vIOWPguaVsOexu+Wei+S4ie+8muS4jemcgOimgVVU54m55q6K5aSE55CG77yM5LiUa2V55peg5LiL5YiS57q/5YmN57yAXG5cdCAgICAgIGlmIChzcG0uc3BtX2NudCkgZFthcGx1c1N0YXRpYy5TUE1fQ05UXSA9IHNwbS5zcG1fY250IHx8ICcnO1xuXHQgICAgICBpZiAoc3BtLnNwbV91cmwpIGRbYXBsdXNTdGF0aWMuU1BNX1VSTF0gPSBzcG0uc3BtX3VybCB8fCAnJztcblx0ICAgICAgaWYgKHNwbS5zcG1fcHJlKSBkW2FwbHVzU3RhdGljLlNQTV9QUkVdID0gc3BtLnNwbV9wcmUgfHwgJyc7XG5cdFxuXHQgICAgICBkLmNuYSA9IGV0YWcuY25hIHx8IGNvb2tpZS5nZXRDb29raWVDbmEoJ2NuYScpO1xuXHQgICAgICBkLmx2ZXIgPSBzZGtfaW5mby5sdmVyO1xuXHQgICAgICBkLmpzdmVyID0gc2RrX2luZm8uanN2ZXI7XG5cdCAgICAgIGQucHZlciA9ICcxLjAuMCc7XG5cdCAgICAgIGQuaXNvbmVwYWdlID0gLTE7XG5cdCAgICAgIHZhciB1dHBhcmFtQ250ID0gYXBsdXMuZ2V0TWV0YUluZm8oJ2FwbHVzLXV0cGFyYW0nKTtcblx0ICAgICAgaWYgKHV0cGFyYW1DbnQpIHtcblx0ICAgICAgICBkWyd1dHBhcmFtLWNudCddID0gSlNPTi5zdHJpbmdpZnkodXRwYXJhbUNudCk7XG5cdCAgICAgIH1cblx0ICAgICAgZC5faXNfZzJ1XyA9IDE7XG5cdCAgICAgIGQuX3Nsb2cgPSAxO1xuXHQgICAgICByZXR1cm4gZDtcblx0ICAgIH0sXG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBwduWPkemAgeWIsOWTqumHjOWOu1xuXHQgICAgICog6L+U5ZueXCJkb25lXCLnu4jmraLkuK3pl7Tku7bmiafooYxcblx0ICAgICAqIEBwYXJhbSBbU3RyaW5nXSBzdGF0ZSDnirbmgIFcblx0ICAgICAqIEBwYXJhbSBbRnVuY3Rpb25dIGNiICDlm57osINcblx0ICAgICAqIEByZXR1cm4gXCJkb25lXCIgfCB1bmRlZmluZWRcblx0ICAgICAqL1xuXHQgICAgcnVuOiBmdW5jdGlvbigpIHtcblx0ICAgICAgdmFyIGMgPSB0aGlzLm9wdGlvbnMuY29udGV4dCB8fCB7fTtcblx0ICAgICAgdmFyIHdoYXRfdG9fc2VuZCA9IGMud2hhdF90b19zZW5kIHx8IHt9O1xuXHQgICAgICB3aGF0X3RvX3NlbmQucHZkYXRhVG9VdCA9IHRoaXMuZ2V0VG9VdERhdGEoKTtcblx0ICAgICAgdGhpcy5vcHRpb25zLmNvbnRleHQud2hhdF90b19zZW5kID0gd2hhdF90b19zZW5kO1xuXHQgICAgICByZXR1cm47XG5cdCAgICB9LFxuXHQgIH07XG5cdH07XG5cblxuLyoqKi8gfSksXG4vKiA5NSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBwcm9qZWN0IC0gZmlsZXBhdGhcblx0ICog5qCH5YeG5bel5YW357G7XG5cdCAqXG5cdCAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cblx0ICpcblx0ICogQXV0aG9yczpcblx0ICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuXHQgKi9cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIHV0aWxBcnJheSA9IF9fd2VicGFja19yZXF1aXJlX18oMzUpO1xuXHR2YXIgZm9ybWF0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMCk7XG5cdFxuXHR2YXIgc19wbGFpbl9vYmogPSAnOjotcGxhaW4tOjonO1xuXHRleHBvcnRzLm1rUGxhaW5LZXkgPSBmdW5jdGlvbiAoKSB7XG5cdCAgcmV0dXJuIHNfcGxhaW5fb2JqICsgTWF0aC5yYW5kb20oKTtcblx0fTtcblx0ZXhwb3J0cy5zX3BsYWluX29iaiA9IHNfcGxhaW5fb2JqO1xuXHRcblx0Ly8gMjAxNi0wOC0yNCDnkKzlrZDpnIDmsYLvvIxleHBhcmFtc+WNleeLrOWkhOeQhu+8jHdpbmR2YW5l6YeM6ZyA6KaBIEDosIvlo6tcblx0ZXhwb3J0cy5ta1BsYWluS2V5Rm9yRXhwYXJhbXMgPSBmdW5jdGlvbihrZXlfcHJlZml4KSB7XG5cdCAgdmFyIF9rZXkgPSBrZXlfcHJlZml4IHx8IHNfcGxhaW5fb2JqO1xuXHQgIHJldHVybiBfa2V5ICsgJ2V4cGFyYW1zJztcblx0fTtcblx0XG5cdC8qKlxuXHQgKiBhcnJheSB0byBwYXJhbVxuXHQgKiDlsIbkuIDkuKrnroDljZXnmoTmlbDnu4TovazljJbkuLogdXJsIOWPguaVsOeahOW9ouW8j++8jFxuXHQgKiDlhbbkuK3mlbDnu4TkuLpcblx0ICogICAgICBbW2sxLCB2MV0sIFtrMiwgdjJdLCBbazMsIHYzXSwgLi4uXVxuXHQgKiDnmoTlvaLlvI/jgIJcblx0ICog5LiOIG9iajJwYXJhbSDnm7jmr5TvvIzov5nkuKrmlrnms5XnmoTlpb3lpITmmK/lj6/ku6Xkv53or4HmnIDlkI7lj4LmlbDnmoTpobrluo9cblx0ICogQHBhcmFtIGFyciB7QXJyYXl9XG5cdCAqIEByZXR1cm4ge1N0cmluZ31cblx0ICovXG5cdGZ1bmN0aW9uIGFycjJwYXJhbShhcnIpIHtcblx0ICB2YXIgYSA9IFtdLFxuXHQgICAgayxcblx0ICAgIHYsXG5cdCAgICBpLFxuXHQgICAgbGVuID0gYXJyLmxlbmd0aDtcblx0XG5cdCAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdCAgICBrID0gYXJyW2ldWzBdO1xuXHQgICAgdiA9IGFycltpXVsxXTtcblx0ICAgIGEucHVzaChrLmluZGV4T2Yoc19wbGFpbl9vYmopID09PSAwID8gdiA6IChrICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHYpKSk7XG5cdCAgfVxuXHQgIHJldHVybiBhLmpvaW4oJyYnKTtcblx0fTtcblx0ZXhwb3J0cy5hcnIycGFyYW0gPSBhcnIycGFyYW07XG5cdFxuXHRcblx0LyoqXG5cdCAqIHBhcmFtIHRvIGFycmF5XG5cdCAqIDIwMTYtMDgtMjQg5pS+5byA77yM55So5p2l5aSE55CGZXhwYXJhbXMgQOiwi+Wjq1xuXHQgKiDlsIbkuIDkuKrnroDljZXnmoTlvaLlpoIgYT0xJmI9MiZjPTMg6L+Z5qC355qE5Y+C5pWw6L2s5YyW5Li6566A5Y2V55qEIGFycmF5IOagvOW8j++8jOWmgu+8mlxuXHQgKiBbW1wiYVwiLCBcIjFcIl0sIFtcImJcIiwgXCIyXCJdLCBbXCJjXCIsIFwiM1wiXV1cblx0ICpcblx0ICogQHBhcmFtIHBhcmFtcyB7U3RyaW5nfVxuXHQgKi9cblx0ZXhwb3J0cy5wYXJhbTJhcnIgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG5cdCAgdmFyIGEgPSBwYXJhbXMuc3BsaXQoXCImXCIpLFxuXHQgICAgaSA9IDAsIGwgPSBhLmxlbmd0aCxcblx0ICAgIGl0ZW0sXG5cdCAgICBhcnIgPSBbXTtcblx0ICBmb3IgKDsgaSA8IGw7IGkrKykge1xuXHQgICAgaXRlbSA9IGFbaV0uc3BsaXQoXCI9XCIpO1xuXHQgICAgYXJyLnB1c2goW2l0ZW0uc2hpZnQoKSwgaXRlbS5qb2luKFwiPVwiKV0pO1xuXHQgIH1cblx0XG5cdCAgcmV0dXJuIGFycjtcblx0fTtcblx0XG5cdGV4cG9ydHMuYXJyMm9iaiA9IGZ1bmN0aW9uIChhcnIpIHtcblx0ICB2YXIgcmV0ID0ge307XG5cdCAgdmFyIGs7XG5cdCAgdmFyIHY7XG5cdCAgdmFyIGk7XG5cdCAgdmFyIGxlbiA9IGFyci5sZW5ndGg7XG5cdFxuXHQgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHQgICAgayA9IGFycltpXVswXTtcblx0ICAgIHYgPSBhcnJbaV1bMV07XG5cdCAgICByZXRba10gPSB2O1xuXHQgIH1cblx0ICByZXR1cm4gcmV0O1xuXHR9O1xuXHRcblx0LyoqXG5cdCAqIOagueaNrnVybOS7peWPiuWPguaVsO+8jOaLvOijheS4gOS4quabtOmVv+eahHVybFxuXHQgKiBAcGFyYW0gdXJsIHtTdHJpbmd9XG5cdCAqIEBwYXJhbSBbZGF0YV0ge09iamVjdHxBcnJheX1cblx0ICovXG5cdGV4cG9ydHMubWFrZVVybCA9IGZ1bmN0aW9uICh1cmwsIGRhdGEpIHtcblx0ICB2YXIgbGlua19jaGFyID0gdXJsLmluZGV4T2YoJz8nKSA9PSAtMSA/ICc/JyA6ICcmJztcblx0ICB2YXIgcGFyYW1fZGF0YSA9IGRhdGEgPyAoXG5cdCAgICB1dGlsQXJyYXkuaXNBcnJheShkYXRhKSA/IGFycjJwYXJhbShkYXRhKSA6IGZvcm1hdC5vYmoycGFyYW0oZGF0YSlcblx0ICApIDogJyc7XG5cdFxuXHQgIHJldHVybiBwYXJhbV9kYXRhID8gKHVybCArIGxpbmtfY2hhciArIHBhcmFtX2RhdGEpIDogdXJsO1xuXHR9O1xuXG5cbi8qKiovIH0pLFxuLyogOTYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKlxuXHQgKiBGaWxlOiB3aGF0X3RvX3NlbmRwdl91bTJuYXRpdmUuanNcblx0ICogUHJvamVjdDogQGFsaS9hcGx1c1xuXHQgKiAgICAgIFxuXHQgKiBBdXRob3I6IOmSsOaYrSAoY2hhbmdsaWFuZy5sY2xAdW1lbmcuY29tKVxuXHQgKiAgICAgIFxuXHQgKiDkvZznlKjvvJog5qGl5o6l5YaF5bWM5oOF5Ya15LiL77yMdW3ml6Xlv5fljY/orq7lj5HpgIFQVuaXpeW/l+e7mW5hdGl2ZVxuXHQgKiBcblx0ICogZGVwczog5pegXG5cdCAqIFxuXHQgKiBDb3B5cmlnaHQgLSAyMDIxIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuXHQgKiBcblx0ICovXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciB1dGlsRGFzaCA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpO1xuXHR2YXIgdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY1KTtcblx0dmFyIGFwbHVzU3RhdGljID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG5cdCAgcmV0dXJuIHtcblx0ICAgIGdldFRvTmF0aXZlRGF0YTogZnVuY3Rpb24oKSB7XG5cdCAgICAgIC8vIHZhciBfJCA9IHV0aWxHb2xkbG9nLmdldEdvbGRsb2dWYWwoJ18kJykgfHwge307XG5cdCAgICAgIC8vIHZhciBzcG0gPSBfJC5zcG0gfHwge307XG5cdCAgICAgIHZhciBjb250ZXh0ID0gdGhpcy5vcHRpb25zLmNvbnRleHQgfHwge307XG5cdCAgICAgIHZhciB1c2VyZGF0YSA9IHV0aWxEYXNoLmNsb25lRGVlcChjb250ZXh0LnVzZXJkYXRhKSB8fCB7fTtcblx0ICAgICAgdmFyIHdoYXRfdG9fc2VuZCA9IGNvbnRleHQud2hhdF90b19zZW5kIHx8IHt9O1xuXHQgICAgICB2YXIgbG9nZGF0YSA9IHdoYXRfdG9fc2VuZC5sb2dkYXRhIHx8IHt9O1xuXHQgICAgICB2YXIgc2RrX2luZm8gPSBsb2dkYXRhLnNka19pbmZvIHx8IHt9O1xuXHQgICAgICB2YXIgZXRhZyA9IHRoaXMub3B0aW9ucy5jb250ZXh0LmV0YWcgfHwge307XG5cdFxuXHQgICAgICB2YXIgcmVzdWx0ID0ge30gLHNka0FyZ3MgPSB7fTtcblx0ICAgICAgc2RrQXJncy5jbmEgPSBldGFnLmNuYTtcblx0ICAgICAgc2RrQXJncy5sdmVyID0gc2RrX2luZm8ubHZlcjtcblx0ICAgICAgc2RrQXJncy5qc3ZlciA9IHNka19pbmZvLmpzdmVyO1xuXHQgICAgICBzZGtBcmdzLmlkID0gYXBsdXNTdGF0aWMuUEFHRV9TVEFSVDtcblx0ICAgICAgc2RrQXJncy50cyA9IERhdGUubm93KCk7IC8v5ZKM6KO4d2Vi5L6n5Lya5pyJ5beu5byCXG5cdCAgICAgIHNka0FyZ3MuciA9IGxvZ2RhdGEuYXJnMSB8fCBsb2dkYXRhLmxvZ2tleSB8fCAnLSc7XG5cdCAgICAgIHNka0FyZ3MuaXNfaDUgPSAnMSc7XG5cdFxuXHQgICAgICBpZiAobG9nZGF0YS51cmwgJiYgbG9nZGF0YS51cmwubGVuZ3RoID4gMCkge1xuXHQgICAgICAgIHZhciB1cmxBcnIgPSBsb2dkYXRhLnVybC5zcGxpdCgnPycpO1xuXHQgICAgICAgIHNka0FyZ3MucGFnZV9uYW1lID0gdXJsQXJyWzBdIHx8ICctJztcblx0ICAgICAgICBzZGtBcmdzLnVybF9wID0gdXJsQXJyWzFdIHx8ICctJztcblx0ICAgICAgfVxuXHRcblx0ICAgICAgaWYgKGxvZ2RhdGEucHJlICYmIGxvZ2RhdGEucHJlLmxlbmd0aCA+IDApIHtcblx0ICAgICAgICB2YXIgcHJlVXJsQXJyID0gbG9nZGF0YS5wcmUuc3BsaXQoJz8nKTtcblx0ICAgICAgICBzZGtBcmdzLnJlZl9wYWdlX25hbWUgPSBwcmVVcmxBcnJbMF0gfHwgJy0nO1xuXHQgICAgICAgIHNka0FyZ3MucmVmZXJfcCA9IHByZVVybEFyclsxXSB8fCAnLSc7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmICh1c2VyZGF0YS5oYXNPd25Qcm9wZXJ0eSgnYXV0b3NlbmQnKSkge1xuXHQgICAgICAgIHNka0FyZ3MuaXNfYXV0byA9IDE7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgc2RrQXJncy5pc19hdXRvID0gMDtcblx0ICAgICAgfVxuXHQgICAgICByZXN1bHQuc2RrQXJncyA9IHV0aWxEYXNoLmNsb25lRGVlcChzZGtBcmdzKTtcblx0ICAgICAgcmVzdWx0LmN1c3AgPSB1dGlscy5kZWxldGVJbmZvKHVzZXJkYXRhLCBbXG5cdCAgICAgICAgJ19hbm9ueV9pZCcsICdfZGV2X2lkJywgJ19zZXNzaW9uX2lkJywgJ19zcmNfcG9zX2lkJyxcblx0ICAgICAgICAnX3VzZXJfaWQnLCAnX3VzZXJfbmljaydcblx0ICAgICAgXSk7XG5cdCAgICAgIHJldHVybiByZXN1bHQ7XG5cdCAgICB9LFxuXHRcblx0ICAgIHJ1bjogZnVuY3Rpb24oKSB7XG5cdCAgICAgIHZhciBjID0gdGhpcy5vcHRpb25zLmNvbnRleHQgfHwge307XG5cdCAgICAgIHZhciB3aGF0X3RvX3NlbmQgPSBjLndoYXRfdG9fc2VuZCB8fCB7fTtcblx0ICAgICAgd2hhdF90b19zZW5kLnB2ZGF0YVRvVW1OYXRpdmUgPSB0aGlzLmdldFRvTmF0aXZlRGF0YSgpO1xuXHQgICAgICB0aGlzLm9wdGlvbnMuY29udGV4dC53aGF0X3RvX3NlbmQgPSB3aGF0X3RvX3NlbmQ7XG5cdCAgICAgIHJldHVybjtcblx0ICAgIH1cblx0ICB9O1xuXHR9O1xuXG4vKioqLyB9KSxcbi8qIDk3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIGFsaWxvZy9zIC0gc3JjL2xpYl91L2NvbmZpZy9wbHVnaW5zL2Nhbl90b19zZW5kcHYuanNcblx0ICpcblx0ICog5L2c55So77ya5Yik5patcHbog73lkKblj5HpgIHvvIzkuI3lj6/ku6Xlj5HpgIHliJnkvJrkuK3mlq3lkI7nu63miYDmnInkuK3pl7Tku7bmiafooYxcblx0ICogZGVwczog5pegXG5cdCAqXG5cdCAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cblx0ICpcblx0ICogQXV0aG9yczpcblx0ICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuXHQgKi9cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIHV0aWxHb2xkbG9nID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG5cdCAgcmV0dXJuIHtcblx0ICAgIC8vIGluaXQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcblx0ICAgIC8vICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0ICAgIC8vIH0sXG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiDmmK/lkKbopoHmiafooYxzZW5kcHbnmoTlhaXlj6Ncblx0ICAgICAqIOi/lOWbnlwiZG9uZVwi57uI5q2i5Lit6Ze05Lu25omn6KGMXG5cdCAgICAgKiBAcGFyYW0gW1N0cmluZ10gc3RhdGUg54q25oCBXG5cdCAgICAgKiBAcGFyYW0gW0Z1bmN0aW9uXSBjYiAg5Zue6LCDXG5cdCAgICAgKiBAcmV0dXJuIFwiZG9uZVwiIHwgdW5kZWZpbmVkXG5cdCAgICAgKi9cblx0ICAgIHJ1bjogZnVuY3Rpb24oKSB7XG5cdCAgICAgIHZhciBfJCA9IHV0aWxHb2xkbG9nLmdldEdvbGRsb2dWYWwoJ18kJykgfHwge307XG5cdCAgICAgIHZhciBjYW5fdG9fc2VuZHB2ID0gdGhpcy5vcHRpb25zLmNvbnRleHQuY2FuX3RvX3NlbmRwdiB8fCB7fTtcblx0ICAgICAgdmFyIGNvdW50ID0gXyQuc2VuZF9wdl9jb3VudCB8fCAwO1xuXHQgICAgICB2YXIgY29uZmlnID0gdGhpcy5vcHRpb25zLmNvbmZpZyB8fCB7fTtcblx0XG5cdCAgICAgIGlmIChjb25maWcuaXNfYXV0byAmJiBjb3VudCA+IDApIHtcblx0ICAgICAgICByZXR1cm4gJ2RvbmUnO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIGNhbl90b19zZW5kcHYuZmxhZyA9ICdZRVMnO1xuXHQgICAgICAgIHRoaXMub3B0aW9ucy5jb250ZXh0LmNhbl90b19zZW5kcHYgPSBjYW5fdG9fc2VuZHB2O1xuXHQgICAgICAgIF8kLnNlbmRfcHZfY291bnQgPSArK2NvdW50O1xuXHQgICAgICAgIHV0aWxHb2xkbG9nLnNldEdvbGRsb2dWYWwoJ18kJywgXyQpO1xuXHQgICAgICAgIHJldHVybjtcblx0ICAgICAgfVxuXHQgICAgfSxcblx0ICB9O1xuXHR9O1xuXG5cbi8qKiovIH0pLFxuLyogOTggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogYWxpbG9nL3MgLSBzcmMvbGliX3UvcGx1Z2lucy9wdi9hZnRlcl9wdi5qc1xuXHQgKlxuXHQgKiDkvZznlKjvvJpwduWPkemAgeWujOavle+8jOWIhuWPkeS4gOS4quWujOaIkOS6i+S7tlxuXHQgKiBkZXBzOiDml6Bcblx0ICpcblx0ICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuXHQgKlxuXHQgKiBBdXRob3JzOlxuXHQgKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG5cdCAqL1xuXHQndXNlIHN0cmljdCc7XG5cdFxuXHR2YXIgdXRpbFB1YnN1YiA9IF9fd2VicGFja19yZXF1aXJlX18oOTkpO1xuXHR2YXIgdXRpbEdvbGRsb2cgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcblx0ICByZXR1cm4ge1xuXHQgICAgLy8gLy8g5Yid5aeL5YyW5qih5Z2XXG5cdCAgICAvLyBpbml0OiBmdW5jdGlvbihvcHRpb25zKSB7XG5cdCAgICAvLyAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdCAgICAvLyB9LFxuXHRcblx0ICAgIC8qKlxuXHQgICAgICog5piv5ZCm6KaB5omn6KGMc2VuZHB255qE5YWl5Y+jXG5cdCAgICAgKiDov5Tlm55cImRvbmVcIue7iOatouS4remXtOS7tuaJp+ihjFxuXHQgICAgICogQHBhcmFtIFtTdHJpbmddIHN0YXRlIOeKtuaAgVxuXHQgICAgICogQHBhcmFtIFtGdW5jdGlvbl0gY2IgIOWbnuiwg1xuXHQgICAgICogQHJldHVybiBcImRvbmVcIiB8IHVuZGVmaW5lZFxuXHQgICAgICovXG5cdCAgICBydW46IGZ1bmN0aW9uKCkge1xuXHQgICAgICB2YXIgXyQgPSBhcGx1cy5fJCB8fCB7fTtcblx0ICAgICAgdmFyIGMgPSB0aGlzLm9wdGlvbnMuY29udGV4dCB8fCB7fTtcblx0ICAgICAgdXRpbEdvbGRsb2cuc2V0R29sZGxvZ1ZhbCgncHZfY29udGV4dCcsIGMpO1xuXHQgICAgICAvLyBwduWPkemAgeWujOavle+8jOWIhuWPkeS4gOS4quWujOaIkOS6i+S7tlxuXHQgICAgICB2YXIgc3BtX2FiID0gYXBsdXMuc3BtX2FiIHx8IFtdO1xuXHQgICAgICB2YXIgX3NwbWFiID0gc3BtX2FiLmpvaW4oJy4nKTtcblx0ICAgICAgdmFyIF9jb3VudCA9IF8kLnNlbmRfcHZfY291bnQ7XG5cdFxuXHQgICAgICB2YXIgcHViT2JqID0ge1xuXHQgICAgICAgIGNuYTogYy5ldGFnLmNuYSxcblx0ICAgICAgICBjb3VudDogX2NvdW50LFxuXHQgICAgICAgIHNwbWFiX3ByZTogYXBsdXMuc3BtYWJfcHJlXG5cdCAgICAgIH07XG5cdCAgICAgIHV0aWxQdWJzdWIuZG9QdWJNc2coWydzZW5kUFYnLCAnY29tcGxldGUnLCBfc3BtYWIsIHB1Yk9ial0pO1xuXHQgICAgICB1dGlsUHVic3ViLmRvQ2FjaGVQdWJzKFsnc2VuZFBWJywgJ2NvbXBsZXRlJywgX3NwbWFiLCBwdWJPYmpdKTtcblx0ICAgICAgcmV0dXJuO1xuXHQgICAgfSxcblx0ICB9O1xuXHR9O1xuXG5cbi8qKiovIH0pLFxuLyogOTkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogcHJvamVjdCAtIGZpbGVwYXRoXG5cdCAqIGRlc2NyaXB0aW9uXG5cdCAqXG5cdCAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cblx0ICpcblx0ICogQXV0aG9yczpcblx0ICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuXHQgKi9cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIHV0aWxHb2xkbG9nID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0XG5cdHZhciBGTiA9ICdmdW5jdGlvbic7XG5cdFxuXHR2YXIgZ2V0UHVic3ViID0gZnVuY3Rpb24oKSB7XG5cdCAgdmFyIGFwbHVzID0gdXRpbEdvbGRsb2cuZ2V0R2xvYmFsVmFsdWUoJ2FwbHVzJyk7XG5cdCAgdmFyIHB1YnN1YiA9IGFwbHVzLmFwbHVzX3B1YnN1YiB8fCB7fTtcblx0ICB2YXIgZmxhZyA9IHR5cGVvZiBwdWJzdWIucHVibGlzaCA9PT0gRk47XG5cdCAgcmV0dXJuIGZsYWcgPyBwdWJzdWIgOiAnJztcblx0fTtcblx0XG5cdC8qKlxuXHQgKiDliIblj5Hmtojmga/lt6Xlhbflh73mlbBcblx0ICogQHBhcmFtcyB7QXJyYXl9IGFyZ3MgW2tleSwgbXNnVmFsdWUxLCBtc2dWYWx1ZTIsIG1zZ1ZhbHVlMywgbXNnVmFsdWVOLCAuLi5dXG5cdCAqL1xuXHRleHBvcnRzLmRvUHViTXNnID0gZnVuY3Rpb24oYXJncykge1xuXHQgIHZhciBwdWJzdWIgPSBnZXRQdWJzdWIoKTtcblx0ICBpZiAocHVic3ViICYmIHR5cGVvZiBwdWJzdWIucHVibGlzaCA9PT0gRk4pIHtcblx0ICAgIHB1YnN1Yi5wdWJsaXNoLmFwcGx5KHB1YnN1YiwgYXJncyk7XG5cdCAgfVxuXHR9O1xuXHRcblx0LyoqXG5cdCAqIGNhY2hl5b2T5YmN55qE5YiG5Y+R5Ye95pWw55qE5bel5YW35Ye95pWwXG5cdCAqIEBwYXJhbXMge0FycmF5fSBhcmdzIFtrZXksIG1zZ1ZhbHVlMSwgbXNnVmFsdWUyLCBtc2dWYWx1ZTMsIG1zZ1ZhbHVlTiwgLi4uXVxuXHQgKi9cblx0ZXhwb3J0cy5kb0NhY2hlUHVicyA9IGZ1bmN0aW9uKGFyZ3MpIHtcblx0ICB2YXIgcHVic3ViID0gZ2V0UHVic3ViKCk7XG5cdCAgaWYgKHB1YnN1YiAmJiB0eXBlb2YgcHVic3ViLmNhY2hlUHVicyA9PT0gRk4pIHtcblx0ICAgIHB1YnN1Yi5jYWNoZVB1YnMuYXBwbHkocHVic3ViLCBhcmdzKTtcblx0ICB9XG5cdH07XG5cdFxuXHQvKipcblx0ICog6K6i6ZiF5raI5oGv5bel5YW35Ye95pWwXG5cdCAqIEBwYXJhbXMge1N0cmluZ30ga2V5XG5cdCAqIEBwYXJhbXMge0Z1bmN0aW9ufSBjYihbIG1zZ1ZhbHVlMSwgbXNnVmFsdWUyLCBtc2dWYWx1ZTMsIG1zZ1ZhbHVlTiwgLi4uXSlcblx0ICovXG5cdGV4cG9ydHMuZG9TdWJNc2cgPSBmdW5jdGlvbihrZXksIGNiKSB7XG5cdCAgdmFyIHB1YnN1YiA9IGdldFB1YnN1YigpO1xuXHQgIGlmIChwdWJzdWIgJiYgdHlwZW9mIHB1YnN1Yi5zdWJzY3JpYmUgPT09IEZOKSB7XG5cdCAgICBwdWJzdWIuc3Vic2NyaWJlKGtleSwgY2IpO1xuXHQgIH1cblx0fTtcblxuXG4vKioqLyB9KSxcbi8qIDEwMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBhbGlsb2cvcyAtIHNyYy9saWJfdS9wbHVnaW5zL3B2L3doYXRfdG9faGpsal91c2VyZGF0YS5qc1xuXHQgKlxuXHQgKiAg5o+S5Lu25L2c55So77ya5pS26ZuG5bqU55So5pa56Ieq5a6a5LmJcHblj4LmlbBcblx0ICogICAgICAgICAgIOW5tuWwhuaUtumbhuWIsOeahOiHquWumuS5ieWPguaVsOS7peaVsOe7hOagvOW8j+i/veWKoOWIsGxvZ2RhdGHlkI7pnaLvvJpsb2dkYXRhLmNvbmNhdCh1c2VyZGF0YSlcblx0ICogIGRlcHM6IHdoYXRfdG9faGpsalxuXHQgKlxuXHQgKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG5cdCAqXG5cdCAqIEF1dGhvcnM6XG5cdCAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cblx0ICovXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciBmb3JtYXQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIwKTtcblx0dmFyIGlzQXJyYXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg5KTtcblx0dmFyIHV0aWxEYXNoID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMSk7XG5cdHZhciB1dGlsR29sZGxvZyA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdFxuXHR2YXIgYXBsdXMgPSB1dGlsR29sZGxvZy5nZXRHbG9iYWxWYWx1ZSgnYXBsdXMnKTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG5cdCAgcmV0dXJuIHtcblx0ICAgIC8vIC8qKlxuXHQgICAgLy8gICog5Yid5aeL5YyW5qih5Z2XXG5cdCAgICAvLyAgKi9cblx0ICAgIC8vIGluaXQ6IGZ1bmN0aW9uIChvcHRpb25zKSB7XG5cdCAgICAvLyAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdCAgICAvLyB9LFxuXHRcblx0ICAgIC8qKlxuXHQgICAgICog6YeH6ZuG5Liq5oCn5YyW5Y+C5pWwXG5cdCAgICAgKlxuXHQgICAgICogcmVjb3JkKGxvZ2tleSwgZ21rZXksIGdva2V5KSBBUEnkuK3nmoRnb2tleVxuXHQgICAgICogbWV0YTphcGx1cy1leGluZm/kv6Hmga8sIG1ldGE6YXBsdXMtZXhkYXRh5L+h5oGvXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybiB7T2JqZWN0fSB7Li4ufVxuXHQgICAgICovXG5cdCAgICBnZXRVc2VyRGF0YTogZnVuY3Rpb24gKCkge1xuXHQgICAgICB2YXIgYyA9IHRoaXMub3B0aW9ucy5jb250ZXh0IHx8IHt9O1xuXHQgICAgICB2YXIgdXNlcmRhdGEgPSBjLnVzZXJkYXRhIHx8IHt9O1xuXHQgICAgICB2YXIgZ29rZXkgPSBjLndoYXRfdG9fc2VuZC5sb2dkYXRhLmdva2V5O1xuXHRcblx0ICAgICAgZ29rZXkgPSB1dGlsRGFzaC5hc3NpZ24oZ29rZXksIGZvcm1hdC5wYXJhbTJvYmoodXNlcmRhdGEuZ29rZXkpKTtcblx0ICAgICAgdmFyIGFwbHVzRXhpbmZvID0gYXBsdXMuZ2V0TWV0YUluZm8oJ2FwbHVzLWV4aW5mbycpO1xuXHQgICAgICBpZiAoYXBsdXNFeGluZm8pIHtcblx0ICAgICAgICBnb2tleSA9IHV0aWxEYXNoLmFzc2lnbihnb2tleSwgZm9ybWF0LnBhcmFtMm9iaihhcGx1c0V4aW5mbykpO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciBleGRhdGEgPSBhcGx1cy5nZXRNZXRhSW5mbygnYXBsdXMtZXhkYXRhJyk7XG5cdCAgICAgIGlmIChpc0FycmF5KGV4ZGF0YSkpIHtcblx0ICAgICAgICBleGRhdGEuZm9yRWFjaChmdW5jdGlvbihpdGVtKXtcblx0ICAgICAgICAgIGdva2V5ID0gdXRpbERhc2guYXNzaWduKGdva2V5LCBpdGVtKTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBnb2tleSA9IHV0aWxEYXNoLmFzc2lnbihnb2tleSwgYXBsdXMuZ2V0TWV0YUluZm8oJ2FwbHVzLWV4ZGF0YScpKTtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gZ29rZXk7XG5cdCAgICB9LFxuXHRcblx0ICAgIC8qKlxuXHQgICAgICog5L2V5pe25omn6KGMc2VuZHB25omn6KGM5YWl5Y+jXG5cdCAgICAgKiDov5Tlm54nZG9uZSfnu4jmraLkuK3pl7Tku7bmiafooYxcblx0ICAgICAqIEBwYXJhbSBbU3RyaW5nXSBzdGF0ZSDnirbmgIFcblx0ICAgICAqIEBwYXJhbSBbRnVuY3Rpb25dIGNiICDlm57osINcblx0ICAgICAqIEByZXR1cm4gJ2RvbmUnIHwgdW5kZWZpbmVkXG5cdCAgICAgKi9cblx0ICAgIHJ1bjogZnVuY3Rpb24oKSB7XG5cdCAgICAgIHRoaXMub3B0aW9ucy5jb250ZXh0LndoYXRfdG9fc2VuZC5sb2dkYXRhLmdva2V5ID0gdGhpcy5nZXRVc2VyRGF0YSgpO1xuXHQgICAgICByZXR1cm47XG5cdCAgICB9XG5cdCAgfTtcblx0fTtcblxuXG4vKioqLyB9KSxcbi8qIDEwMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBhbGlsb2cvcyAtIHNyYy9saWJfdS9wbHVnaW5zL3B2L3doYXRfdG9faGpsal91c2VyZGF0YS5qc1xuXHQgKlxuXHQgKiAg5o+S5Lu25L2c55So77ya5pS26ZuG5bqU55So5pa56Ieq5a6a5LmJcHblj4LmlbBcblx0ICogICAgICAgICAgIOW5tuWwhuaUtumbhuWIsOeahOiHquWumuS5ieWPguaVsOS7peaVsOe7hOagvOW8j+i/veWKoOWIsGxvZ2RhdGHlkI7pnaLvvJpsb2dkYXRhLmNvbmNhdCh1c2VyZGF0YSlcblx0ICogIGRlcHM6IHdoYXRfdG9faGpsalxuXHQgKlxuXHQgKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG5cdCAqXG5cdCAqIEF1dGhvcnM6XG5cdCAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cblx0ICovXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciB1dGlsRXhpbmZvID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5MSk7XG5cdHZhciBnZXRFeFBhcmFtc09iaiA9IF9fd2VicGFja19yZXF1aXJlX18oOTIpO1xuXHR2YXIgZ2V0Q29va2llVXNlckluZm8gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkzKTtcblx0dmFyIHV0aWxEYXNoID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMSk7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuXHQgIHJldHVybiB7XG5cdCAgICAvLyBnZXRDb29raWVVc2VySW5mbzogZnVuY3Rpb24gKCkge1xuXHQgICAgLy8gICB2YXIgZCA9IHt9O1xuXHQgICAgLy8gICAvLyDml6Xlv5fmlLbpm4blt6Xlj7dcblx0ICAgIC8vICAgdmFyIHduID0gY29va2llLmdldENvb2tpZSgnd29ya25vJykgfHwgY29va2llLmdldENvb2tpZSgnZW1wbElkJyk7XG5cdCAgICAvLyAgIGlmICh3bikge1xuXHQgICAgLy8gICAgIGQud29ya25vID0gd247XG5cdCAgICAvLyAgIH1cblx0ICAgIC8vICAgdmFyIGhuZyA9IGNvb2tpZS5nZXRIbmcoKTtcblx0ICAgIC8vICAgaWYgKGhuZykge1xuXHQgICAgLy8gICAgIGQuX2huZyA9IGNvb2tpZS5nZXRIbmcoKTtcblx0ICAgIC8vICAgfVxuXHQgICAgLy8gICByZXR1cm4gZDtcblx0ICAgIC8vIH0sXG5cdFxuXHQgICAgZ2V0RXhQYXJhbXNJbmZvOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIHZhciBlID0gdXRpbEV4aW5mby5nZXRFeFBhcmFtcygpO1xuXHQgICAgICB0aGlzLm9wdGlvbnMuY29udGV4dC53aGF0X3RvX3NlbmQubG9nZGF0YS5leHBhcmFtcyA9IGU7XG5cdCAgICAgIHJldHVybiBnZXRFeFBhcmFtc09iaihlKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiDkvZXml7bmiafooYxzZW5kcHbmiafooYzlhaXlj6Ncblx0ICAgICAqIOi/lOWbnidkb25lJ+e7iOatouS4remXtOS7tuaJp+ihjFxuXHQgICAgICogQHBhcmFtIFtTdHJpbmddIHN0YXRlIOeKtuaAgVxuXHQgICAgICogQHBhcmFtIFtGdW5jdGlvbl0gY2IgIOWbnuiwg1xuXHQgICAgICogQHJldHVybiAnZG9uZScgfCB1bmRlZmluZWRcblx0ICAgICAqL1xuXHQgICAgcnVuOiBmdW5jdGlvbigpIHtcblx0ICAgICAgdmFyIGdva2V5ID0gdGhpcy5vcHRpb25zLmNvbnRleHQud2hhdF90b19zZW5kLmxvZ2RhdGEuZ29rZXk7XG5cdCAgICAgIGdva2V5ID0gdXRpbERhc2guYXNzaWduKGdva2V5LCBnZXRDb29raWVVc2VySW5mbygpKTtcblx0ICAgICAgZ29rZXkgPSB1dGlsRGFzaC5hc3NpZ24odGhpcy5nZXRFeFBhcmFtc0luZm8oKSwgZ29rZXkpO1xuXHQgICAgICB0aGlzLm9wdGlvbnMuY29udGV4dC53aGF0X3RvX3NlbmQubG9nZGF0YS5nb2tleSA9IGdva2V5O1xuXHQgICAgICByZXR1cm47XG5cdCAgICB9XG5cdCAgfTtcblx0fTtcblxuXG4vKioqLyB9KSxcbi8qIDEwMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBhbGlsb2cvcyAtIHNyYy9saWJfYi9jb25maWcvcGx1Z2lucy93aGF0X3RvX2hqbGpfdXQyLmpzXG5cdCAqXG5cdCAqIOS9nOeUqO+8muaXpeW/l+WPkemAgeiHs1VU5Y+C5pWw5pS26ZuG77yaXG5cdCAqXG5cdCAqIGRlcHM6IOaXoFxuXHQgKlxuXHQgKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG5cdCAqXG5cdCAqIEF1dGhvcnM6XG5cdCAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cblx0ICovXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciB1dGlsR29sZGxvZyA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdHZhciBhcGx1c1N0YXRpYyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuXHQgIHJldHVybiB7XG5cdCAgICAvKipcblx0ICAgICAqIOiOt+WPllVU5pel5b+X6ZyA6KaB55qE5Y+C5pWwXG5cdCAgICAgKiDlj4LmlbDnsbvlnovkuIDvvJrpnIDopoFVVOeJueauiuWkhOeQhueahO+8iGZ1bmN0eXBl77yMZnVuY0lk77yMdXJs77yMbG9na2V577yJXG5cdCAgICAgKiDlj4LmlbDnsbvlnovkuozvvJrkuI3pnIDopoFVVOeJueauiuWkhOeQhueahO+8iOWFtuS7lmFwbHVz6Ieq5a6a5LmJa2V5XFx2YWx1Ze+8iWtleemcgOimgeS4i+WIkue6v+W8gOWktFxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm4ge09iamVjdH0ge1xuXHQgICAgICogICBmdW5jdHlwZTogXCJjdHJsXCIsXG5cdCAgICAgKiAgIGZ1bmNJZDogXCIyMTAxXCIsXG5cdCAgICAgKiAgIHVybDogXCJodHRwczovL2g1Lm0udGFvYmFvLmNvbS9idXkvcWluZ2Rhbi9saXN0Lmh0bWxcIixcblx0ICAgICAqICAgbG9na2V5OiBcIi9xaW5nZGFuLjIuM1wiLFxuXHQgICAgICpcblx0ICAgICAqICAgX3NwbWNudDogXCJhMzE0NS44MTgzNzM3LjAuMFwiLFxuXHQgICAgICogICBfc3BtdXJsOiBcImEwLmIwLmMwLmQwXCIsXG5cdCAgICAgKiAgIF9oNXVybDogXCIvL2g1Lm0udGFvYmFvLmNvbS9idXkvcWluZ2Rhbi9saXN0Lmh0bWw/c2NtPTIwMTkuMS40LjMxMSZpdGVtSWQ9NTI3MzUxNDYxNDU2LDUyNzAzODU1NTc1NiZzcG09YTIxNDEuMS53aWRnZXQuNCZsb2NhdGU9d2lkZ2V0LTRcIixcblx0ICAgICAqICAgX2NuYTogXCIxMjM0NDQ2NTQ3XCIsXG5cdCAgICAgKiAgIF9vdGhlcnM6IFwic29tZXZhbHVlXCIgLFxuXHQgICAgICogICBfaXNoNTogXCIxXCIgIC8vIFVU5b+F6aG755qE5bGe5oCn77yM5YaZ5q275Y2z5Y+vXG5cdCAgICAgKiAgIF9pc19nMnVfOiBcIjFcIiAvLyDljZXlj5Hml7bpnIDopoFcblx0ICAgICAqIH1cblx0ICAgICAqL1xuXHQgICAgZ2V0VG9VdERhdGE6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgdmFyIF8kID0gdXRpbEdvbGRsb2cuZ2V0R29sZGxvZ1ZhbCgnXyQnKSB8fCB7fTtcblx0ICAgICAgdmFyIHNwbSA9IF8kLnNwbSB8fCB7fTtcblx0ICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLm9wdGlvbnMuY29udGV4dCB8fCB7fTtcblx0ICAgICAgdmFyIHVzZXJkYXRhID0gY29udGV4dC51c2VyZGF0YSB8fCB7fTtcblx0ICAgICAgdmFyIGV0YWcgPSBjb250ZXh0LmV0YWcgfHwge307XG5cdCAgICAgIHZhciB3aGF0X3RvX3NlbmQgPSBjb250ZXh0LndoYXRfdG9fc2VuZCB8fCB7fTtcblx0ICAgICAgdmFyIGxvZ2RhdGEgPSB3aGF0X3RvX3NlbmQubG9nZGF0YSB8fCB7fTtcblx0ICAgICAgdmFyIHNka19pbmZvID0gbG9nZGF0YS5zZGtfaW5mbyB8fCB7fTtcblx0ICAgICAgdmFyIGdva2V5ID0gbG9nZGF0YS5nb2tleSB8fCB7fTtcblx0XG5cdCAgICAgIHZhciBnb2tleUFyciA9IFtdO1xuXHQgICAgICB2YXIgZ29rZXlTdHIgPSAnJztcblx0ICAgICAgZm9yICh2YXIgayBpbiBnb2tleSkge1xuXHQgICAgICAgIGlmIChbYXBsdXNTdGF0aWMuU1BNX0NOVCwgYXBsdXNTdGF0aWMuU1BNX1VSTCwgYXBsdXNTdGF0aWMuU1BNX1BSRV0uaW5kZXhPZihrKSA9PT0gLTEpIHtcblx0ICAgICAgICAgIHZhciBfdG1wVmFsdWUgPSBnb2tleVtrXTtcblx0ICAgICAgICAgIGlmIChnb2tleVtrXSA9PT0gJ3VuZGVmaW5lZCcgfHwgZ29rZXlba10gPT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgICAgICBfdG1wVmFsdWUgPSAnJztcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIGdva2V5QXJyLnB1c2goayArICc9JyArIF90bXBWYWx1ZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIGlmIChnb2tleUFyci5sZW5ndGggPiAwKSB7XG5cdCAgICAgICAgZ29rZXlTdHIgPSBnb2tleUFyci5qb2luKCcmJyk7XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIHBhZ2V1cmwgPSBsb2NhdGlvbi5ocmVmO1xuXHQgICAgICB2YXIgZCA9IHt9O1xuXHQgICAgICAvLyDlj4LmlbDnsbvlnovkuIDvvJrpnIDopoFVVOeJueauiuWkhOeQhueahO+8iGZ1bmN0eXBl77yMZnVuY0lk77yMdXJs77yMbG9na2V577yJXG5cdCAgICAgIGQuZnVuY3R5cGUgPSAnY3RybCc7XG5cdCAgICAgIGQuZnVuY0lkID0gbG9nZGF0YS5ldmVudF9jb2RlO1xuXHQgICAgICBkLnVybCA9IChsb2NhdGlvbi5wcm90b2NvbCB8fCAnaHR0cHM6JykgKyAnLy8nICsgbG9jYXRpb24uaG9zdCArIGxvY2F0aW9uLnBhdGhuYW1lO1xuXHQgICAgICBkLmxvZ2tleSA9IGxvZ2RhdGEubG9na2V5O1xuXHQgICAgICBkLmdva2V5ID0gZW5jb2RlVVJJQ29tcG9uZW50KGdva2V5U3RyKTtcblx0ICAgICAgZC5nbWtleSA9IGxvZ2RhdGEuZ21rZXk7XG5cdFxuXHQgICAgICAvLyDlj4LmlbDnsbvlnovkuozvvJrkuI3pnIDopoFVVOeJueauiuWkhOeQhueahO+8iOWFtuS7lmFwbHVz6Ieq5a6a5LmJa2V5XFx2YWx1Ze+8iWtleemcgOimgeS4i+WIkue6v+W8gOWktFxuXHQgICAgICBkLl9pc2g1ID0gJzEnO1xuXHQgICAgICBkLl9oNXVybCA9IHBhZ2V1cmw7XG5cdCAgICAgIGQuX2lzX2cydV8gPSAxO1xuXHQgICAgICBkLl9zbG9nID0gMTtcblx0ICAgICAgZC5fdG9VVCA9IDI7XG5cdCAgICAgIGQuX2JyaWRnZU5hbWUgPSAnV2luZFZhbmUnO1xuXHQgICAgICBkLl9icmlkZ2VWZXJzaW9uID0gJzMuMC40Jztcblx0XG5cdCAgICAgIC8vIOWPguaVsOexu+Wei+S4ie+8muS4jemcgOimgVVU54m55q6K5aSE55CG77yM5LiUa2V55peg5LiL5YiS57q/5YmN57yAXG5cdCAgICAgIGlmIChzcG0uc3BtX2NudCkgZFthcGx1c1N0YXRpYy5TUE1fQ05UXSA9IHNwbS5zcG1fY250IHx8ICcnO1xuXHQgICAgICBpZiAoc3BtLnNwbV91cmwpIGRbYXBsdXNTdGF0aWMuU1BNX1VSTF0gPSBzcG0uc3BtX3VybCB8fCAnJztcblx0ICAgICAgaWYgKHNwbS5zcG1fcHJlKSBkW2FwbHVzU3RhdGljLlNQTV9QUkVdID0gc3BtLnNwbV9wcmUgfHwgJyc7XG5cdFxuXHQgICAgICBkLmNuYSA9IGV0YWcuY25hO1xuXHQgICAgICBkLmx2ZXIgPSBzZGtfaW5mby5sdmVyO1xuXHQgICAgICBkLmpzdmVyID0gc2RrX2luZm8uanN2ZXI7XG5cdCAgICAgIC8vIOWPr+inhuWMluS7pOeureagh+ivhmF1dG9zZW5kXG5cdCAgICAgIGlmICh1c2VyZGF0YS5oYXNPd25Qcm9wZXJ0eSgnYXV0b3NlbmQnKSkge1xuXHQgICAgICAgIGQuYXV0b3NlbmQgPSB1c2VyZGF0YS5hdXRvc2VuZDtcblx0ICAgICAgfVxuXHQgICAgICB2YXIgdXRwYXJhbUNudCA9IGFwbHVzLmdldE1ldGFJbmZvKCdhcGx1cy11dHBhcmFtJyk7XG5cdCAgICAgIGlmICh1dHBhcmFtQ250KSB7XG5cdCAgICAgICAgZFsndXRwYXJhbS1jbnQnXSA9IEpTT04uc3RyaW5naWZ5KHV0cGFyYW1DbnQpO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBkO1xuXHQgICAgfSxcblx0XG5cdCAgICAvKipcblx0ICAgICAqIOS9leaXtuaJp+ihjHNlbmRwduaJp+ihjOWFpeWPo1xuXHQgICAgICog6L+U5ZueXCJkb25lXCLnu4jmraLkuK3pl7Tku7bmiafooYxcblx0ICAgICAqIEBwYXJhbSBbU3RyaW5nXSBzdGF0ZSDnirbmgIFcblx0ICAgICAqIEBwYXJhbSBbRnVuY3Rpb25dIGNiICDlm57osINcblx0ICAgICAqIEByZXR1cm4gXCJkb25lXCIgfCB1bmRlZmluZWRcblx0ICAgICAqL1xuXHQgICAgcnVuOiBmdW5jdGlvbigpIHtcblx0ICAgICAgdmFyIGMgPSB0aGlzLm9wdGlvbnMuY29udGV4dCB8fCB7fTtcblx0ICAgICAgdmFyIHdoYXRfdG9fc2VuZCA9IGMud2hhdF90b19zZW5kIHx8IHt9O1xuXHQgICAgICB3aGF0X3RvX3NlbmQucHZkYXRhVG9VdCA9IHRoaXMuZ2V0VG9VdERhdGEoKTtcblx0ICAgICAgdGhpcy5vcHRpb25zLmNvbnRleHQud2hhdF90b19zZW5kID0gd2hhdF90b19zZW5kO1xuXHQgICAgICByZXR1cm47XG5cdCAgICB9XG5cdCAgfTtcblx0fTtcblxuXG4vKioqLyB9KSxcbi8qIDEwMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qXG5cdCAqIEZpbGU6IHdoYXRfdG9faGpsal8ybmF0aXZlLmpzXG5cdCAqIFByb2plY3Q6IEBhbGkvYXBsdXNcblx0ICogICAgICBcblx0ICogQXV0aG9yOiDpkrDmmK0gKGNoYW5nbGlhbmcubGNsQHVtZW5nLmNvbSlcblx0ICogXG5cdCAqIOS9nOeUqO+8miDmoaXmjqXlhoXltYzmg4XlhrXkuIvvvIx1beaXpeW/l+WNj+iuruWPkemAgem7hOmHkeS7pOeureaXpeW/l+e7mW5hdGl2ZVxuXHQgKiBcblx0ICogZGVwczog5pegXG5cdCAqICAgICAgXG5cdCAqIENvcHlyaWdodCAtIDIwMjEgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG5cdCAqL1xuXHRcblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIHV0aWxEYXNoID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMSk7XG5cdHZhciB1dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oNjUpO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpe1xuXHQgIHJldHVybiB7XG5cdCAgICBnZXRUb05hdGl2ZURhdGE6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAvLyB2YXIgXyQgPSB1dGlsR29sZGxvZy5nZXRHb2xkbG9nVmFsKCdfJCcpIHx8IHt9O1xuXHQgICAgICB2YXIgY29udGV4dCA9IHRoaXMub3B0aW9ucy5jb250ZXh0IHx8IHt9O1xuXHQgICAgICB2YXIgdXNlcmRhdGEgPSBjb250ZXh0LnVzZXJkYXRhIHx8IHt9O1xuXHQgICAgICB2YXIgZXRhZyA9IGNvbnRleHQuZXRhZyB8fCB7fTtcblx0ICAgICAgdmFyIHdoYXRfdG9fc2VuZCA9IGNvbnRleHQud2hhdF90b19zZW5kIHx8IHt9O1xuXHQgICAgICB2YXIgbG9nZGF0YSA9IHdoYXRfdG9fc2VuZC5sb2dkYXRhIHx8IHt9O1xuXHQgICAgICB2YXIgc2RrX2luZm8gPSBsb2dkYXRhLnNka19pbmZvIHx8IHt9O1xuXHRcblx0ICAgICAgdmFyIHJlc3VsdCA9IHt9ICxzZGtBcmdzID0ge307XG5cdCAgICAgIHNka0FyZ3MuY25hID0gZXRhZy5jbmE7XG5cdCAgICAgIHNka0FyZ3MubHZlciA9IHNka19pbmZvLmx2ZXI7XG5cdCAgICAgIHNka0FyZ3MuanN2ZXIgPSBzZGtfaW5mby5qc3Zlcjtcblx0ICAgICAgc2RrQXJncy5pZCA9IHVzZXJkYXRhLmxvZ2tleSB8fCAnLSc7XG5cdCAgICAgIHNka0FyZ3MudHMgPSBEYXRlLm5vdygpOyAvL+WSjOijuHdlYuS+p+S8muacieW3ruW8glxuXHQgICAgICBzZGtBcmdzLmlzX2g1ID0gJzEnO1xuXHRcblx0ICAgICAgaWYgKGxvZ2RhdGEudXJsICYmIGxvZ2RhdGEudXJsLmxlbmd0aCA+IDApIHtcblx0ICAgICAgICB2YXIgdXJsQXJyID0gbG9nZGF0YS51cmwuc3BsaXQoJz8nKTtcblx0ICAgICAgICBzZGtBcmdzLnBhZ2VfbmFtZSA9IHVybEFyclswXSB8fCAnLSc7XG5cdCAgICAgICAgc2RrQXJncy51cmxfcCA9IHVybEFyclsxXSB8fCAnLSc7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmIChsb2dkYXRhLnByZSAmJiBsb2dkYXRhLnByZS5sZW5ndGggPiAwKSB7XG5cdCAgICAgICAgdmFyIHByZVVybEFyciA9IGxvZ2RhdGEucHJlLnNwbGl0KCc/Jyk7XG5cdCAgICAgICAgc2RrQXJncy5yZWZfcGFnZV9uYW1lID0gcHJlVXJsQXJyWzBdIHx8ICctJztcblx0ICAgICAgICBzZGtBcmdzLnJlZmVyX3AgPSBwcmVVcmxBcnJbMV0gfHwgJy0nO1xuXHQgICAgICB9XG5cdCBcblx0ICAgICAgc2RrQXJncy5mdW5jSWQgPSBsb2dkYXRhLmV2ZW50X2NvZGU7XG5cdFxuXHQgICAgICBpZiAodXNlcmRhdGEuaGFzT3duUHJvcGVydHkoJ2F1dG9zZW5kJykpIHtcblx0ICAgICAgICBzZGtBcmdzLmlzX2F1dG8gPSAxO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHNka0FyZ3MuaXNfYXV0byA9IDA7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHJlc3VsdC5zZGtBcmdzID0gdXRpbERhc2guY2xvbmVEZWVwKHNka0FyZ3MpO1xuXHQgICAgICByZXN1bHQuY3VzcCA9IHV0aWxzLmRlbGV0ZUluZm8odXNlcmRhdGEuZ29rZXksIFtcblx0ICAgICAgICAnX2Fub255X2lkJywgJ19kZXZfaWQnLCAnX3Nlc3Npb25faWQnLCAnX3NyY19wb3NfaWQnLFxuXHQgICAgICAgICdfdXNlcl9pZCcsICdfdXNlcl9uaWNrJ1xuXHQgICAgICBdKTtcblx0ICAgICAgcmV0dXJuIHJlc3VsdDtcblx0ICAgIH0sXG5cdFxuXHQgICAgcnVuOiBmdW5jdGlvbigpIHtcblx0ICAgICAgdmFyIGMgPSB0aGlzLm9wdGlvbnMuY29udGV4dCB8fCB7fTtcblx0ICAgICAgdmFyIHdoYXRfdG9fc2VuZCA9IGMud2hhdF90b19zZW5kIHx8IHt9O1xuXHQgICAgICB3aGF0X3RvX3NlbmQuaGpsamRhdGFUb1VtTmF0aXZlID0gdGhpcy5nZXRUb05hdGl2ZURhdGEoKTtcblx0ICAgICAgdGhpcy5vcHRpb25zLmNvbnRleHQud2hhdF90b19zZW5kID0gd2hhdF90b19zZW5kO1xuXHQgICAgICByZXR1cm47IFxuXHQgICAgfVxuXHQgIH07XG5cdH07XG5cbi8qKiovIH0pLFxuLyogMTA0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIGFsaWxvZy9zIC0gc3JjL3BsdWdpbnMvYXBsdXNfc3BtLmpzXG5cdCAqIFNQTSDln4vngrnohJrmnKzlhaXlj6PvvIzkvp3otZZhcGx1c0pT77yM5pys6ISa5pys5pyA5aSa562J5b6FMTBz77yM5aaC5p6cMTBz5ZCO6L+Y5rKh5pyJ5qOA5rWL5YiwYXBsdXNKU++8jOWImeaJk+WHuuitpuWRiu+8gVxuXHQgKiBAc2VlIGh0dHA6Ly93aWtpLnVlZC50YW9iYW8ubmV0L2Rva3UucGhwP2lkPXRtczpzcG0lRTUlOUYlOEIlRTclODIlQjklRTYlOTYlQjklRTYlQTElODhcblx0ICpcblx0ICpcblx0ICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuXHQgKlxuXHQgKiBBdXRob3JzOlxuXHQgKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG5cdCAqL1xuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcblx0ICByZXR1cm4ge1xuXHQgICAgcnVuOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIF9fd2VicGFja19yZXF1aXJlX18oMTA1KSgpO1xuXHQgICAgfVxuXHQgIH07XG5cdH07XG5cbi8qKiovIH0pLFxuLyogMTA1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIGFsaWxvZy9zIC0gc3JjL3BsdWdpbnMvbGliX3NwbS9tYWluLmpzXG5cdCAqIFNQTSDln4vngrnohJrmnKxcblx0ICogQHNlZSBodHRwOi8vd2lraS51ZWQudGFvYmFvLm5ldC9kb2t1LnBocD9pZD10bXM6c3BtJUU1JTlGJThCJUU3JTgyJUI5JUU2JTk2JUI5JUU2JUExJTg4XG5cdCAqXG5cdCAqXG5cdCAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cblx0ICpcblx0ICogQXV0aG9yczpcblx0ICogICBAYXV0aG9yIOWto+acrSA8aml6aGEud3lqQHRhb2Jhby5jb20+XG5cdCAqICAgUmljaGFyZHzosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuXHQgKi9cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIHV0aWxEb20gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM2KTtcblx0Ly8gdmFyIHV0aWxHb2xkbG9nID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxHb2xkbG9nJyk7XG5cdFxuXHQvLyB2YXIgb3BlbkFQSSA9IHJlcXVpcmUoJy4vb3BlbkFQSScpO1xuXHQvLyB2YXIgd2F0Y2hDbGljayA9IHJlcXVpcmUoJy4vd2F0Y2hDbGljaycpO1xuXHQvLyB2YXIgd2F0Y2hJZnJhbWUgPSByZXF1aXJlKCcuL3dhdGNoSWZyYW1lJyk7XG5cdHZhciB3YXRjaFNQTSA9IF9fd2VicGFja19yZXF1aXJlX18oMTA2KTtcblx0Ly8gdmFyIHdhdGNoV0hTcG0gPSByZXF1aXJlKCcuL3dhdGNoV0hTcG0nKTtcblx0Ly8gdmFyIHNwbSA9IHJlcXVpcmUoJy4vc3BtJyk7XG5cdFxuXHQvKipcblx0ICog5YWo5bGAIFNQTSDmlrnms5Vcblx0ICogQHNlZSBodHRwOi8vd2lraS51ZWQudGFvYmFvLm5ldC9kb2t1LnBocD9pZD10ZWFtOnVkYzpmMmU6dW5pZmllZC1iZWFjb246c3BtLW9wZW5hcGlcblx0ICpcblx0ICogZ19zcG0uc3BtX2RfZm9yX2FkIEFQSSDnlKjkuo7lub/lkYrnmoRzcG1fZOS9jVxuXHQgKiBnX3NwbS5zcG0gQVBJIOS4ujIwMTQtMDYtMDQg5qK15piT6ZyA5rGCXG5cdCAqXG5cdCAqIEB0eXBlIHtPYmplY3R9XG5cdCAqL1xuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcblx0ICB2YXIgb2JqICA9IHtcblx0ICAgIGlzVG91Y2hFbmFibGVkOiB1dGlsRG9tLmlzVG91Y2goKSxcblx0ICB9O1xuXHQgIHdhdGNoU1BNLnJ1bihvYmopO1xuXHR9O1xuXG5cbi8qKiovIH0pLFxuLyogMTA2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIGFsaWxvZy9zIC0gc3JjL3BsdWdpbnMvbGliX3NwbS9tYWluLmpzXG5cdCAqIFNQTSDln4vngrnohJrmnKxcblx0ICogQHNlZSBodHRwOi8vd2lraS51ZWQudGFvYmFvLm5ldC9kb2t1LnBocD9pZD10bXM6c3BtJUU1JTlGJThCJUU3JTgyJUI5JUU2JTk2JUI5JUU2JUExJTg4XG5cdCAqXG5cdCAqXG5cdCAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cblx0ICpcblx0ICogQXV0aG9yczpcblx0ICogICBAYXV0aG9yIOWto+acrSA8aml6aGEud3lqQHRhb2Jhby5jb20+XG5cdCAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cblx0ICovXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciBlYWNoID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNyk7XG5cdHZhciB1dGlsRXZlbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU1KTtcblx0dmFyIHV0aWxEYXNoID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMSk7XG5cdHZhciB1dGlsVXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNik7XG5cdHZhciB1dGlsR1EgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYxKTtcblx0dmFyIGFwbHVzU3RhdGljID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblx0dmFyIGlzRnVuY3Rpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKTtcblx0XG5cdHZhciBjdXJyZW50UGFnZUNvbmZpZyA9IHt9O1xuXHRcblx0ZnVuY3Rpb24gZmluZEFuY2hvckVsZW1lbnQgKGVsLCBjYWxsYmFjaykge1xuXHQgIHZhciB0YWdfbmFtZTtcblx0ICB2YXIgZmxhZztcblx0ICAvLyB2YXIgdGltZXN0YW1wID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG5cdCAgd2hpbGUgKGVsICYmICh0YWdfbmFtZSA9IGVsLnRhZ05hbWUpKSB7XG5cdCAgICBpZiAodGFnX25hbWUgPT09ICdBJykge1xuXHQgICAgICBmbGFnID0gdHJ1ZTtcblx0ICAgICAgYnJlYWs7XG5cdCAgICB9IGVsc2UgaWYgKHRhZ19uYW1lID09ICdCT0RZJyB8fCB0YWdfbmFtZSA9PSAnSFRNTCcpIHtcblx0ICAgICAgYnJlYWs7XG5cdCAgICB9XG5cdCAgICBlbCA9IGVsLnBhcmVudE5vZGU7XG5cdCAgfVxuXHQgIGNhbGxiYWNrKGZsYWcgPyBlbCA6ICcnKTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gZmluZEFwbHVzQW5jaG9yQnlBbGlua0VsIChhbGlua0VsLCBzdWNjZXNzQ2FsbGJhY2ssIGZhaWx1cmVDYWxsYmFjaykge1xuXHQgIHRyeSB7XG5cdCAgICB2YXIgdGFnX25hbWU7XG5cdCAgICB3aGlsZSAoYWxpbmtFbCAmJiAodGFnX25hbWUgPSBhbGlua0VsLnRhZ05hbWUpKSB7XG5cdCAgICAgIHZhciBfcG9zX2lkID0gYWxpbmtFbCAmJiBhbGlua0VsLmdldEF0dHJpYnV0ZSA/IGFsaW5rRWwuZ2V0QXR0cmlidXRlKCdkYXRhLWFwbHVzLXBvcy1pZCcpIDogJyc7XG5cdCAgICAgIGlmIChfcG9zX2lkKSB7XG5cdCAgICAgICAgaXNGdW5jdGlvbihzdWNjZXNzQ2FsbGJhY2spICYmIHN1Y2Nlc3NDYWxsYmFjayhhbGlua0VsLCBfcG9zX2lkKTtcblx0ICAgICAgICBicmVhaztcblx0ICAgICAgfSBlbHNlIGlmICh0YWdfbmFtZSA9PSAnQk9EWScgfHwgdGFnX25hbWUgPT0gJ0hUTUwnKSB7XG5cdCAgICAgICAgaXNGdW5jdGlvbihzdWNjZXNzQ2FsbGJhY2spICYmIHN1Y2Nlc3NDYWxsYmFjayhhbGlua0VsLCAnUEFHRScpO1xuXHQgICAgICAgIGJyZWFrO1xuXHQgICAgICB9XG5cdCAgICAgIGFsaW5rRWwgPSBhbGlua0VsLnBhcmVudE5vZGU7XG5cdCAgICB9XG5cdCAgfSBjYXRjaCAoZSkge1xuXHQgICAgaXNGdW5jdGlvbihmYWlsdXJlQ2FsbGJhY2spICYmIGZhaWx1cmVDYWxsYmFjaygpO1xuXHQgIH1cblx0fVxuXHRcblx0ZnVuY3Rpb24gZ2V0QXBsdXNDbGtDb25maWcgKF9wb3NfaWQpIHtcblx0ICB2YXIgYXBsdXNBdXRvQ2xrQ29uZmlnID0gYXBsdXMuZ2V0TWV0YUluZm8oJ2FwbHVzLWF1dG8tY2xrJykgfHwgW107XG5cdCAgdmFyIGNsa0NvbmZpZyA9IHt9O1xuXHQgIGlmIChfcG9zX2lkID09PSAnUEFHRScpIHtcblx0ICAgIHJldHVybiBhcGx1c0F1dG9DbGtDb25maWdbMF0gfHwge307XG5cdCAgfSBlbHNlIHtcblx0ICAgIGVhY2goYXBsdXNBdXRvQ2xrQ29uZmlnLCBmdW5jdGlvbiAoY29uZmlnKSB7XG5cdCAgICAgIGlmIChjb25maWcuX3Bvc19pZCA9PT0gX3Bvc19pZCkge1xuXHQgICAgICAgIGNsa0NvbmZpZyA9IGNvbmZpZztcblx0ICAgICAgICByZXR1cm4gJ2JyZWFrJztcblx0ICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICByZXR1cm4gY2xrQ29uZmlnO1xuXHQgIH1cblx0fVxuXHRcblx0LyoqXG5cdCAqIOWcqOe7meWumueahCBocmVmIOS4remXtOaPkuWFpSBzcG0g5Y+C5pWw77yM5aaC5p6c5Y6f5p2lIGhyZWYg5Lit5bey5pyJIHNwbe+8jOWImeWwhuWFtuabtOaWsFxuXHQgKiBAcGFyYW0gaHJlZiB7U3RyaW5nfVxuXHQgKiBAcGFyYW0gc3BtX2lkIHtTdHJpbmd9XG5cdCAqL1xuXHRmdW5jdGlvbiBzcG1fdXBkYXRlSHJlZldpdGhTUE1JZChocmVmLCBzcG1faWQpIHtcblx0ICAvLyDljrvmjonnjrDmnInnmoQgaHJlZiDkuK3nmoQgc3BtIOWPguaVsFxuXHQgIGlmIChocmVmICYmIC8mP1xcYl9zcmNfcG9zX2lkPVteJiNdKi8udGVzdChocmVmKSkge1xuXHQgICAgaHJlZiA9IGhyZWYucmVwbGFjZSgvJj9cXGJfc3JjX3Bvc19pZD1bXiYjXSovZywgJycpXG5cdCAgICAgIC5yZXBsYWNlKC8mezIsfS9nLCAnJicpXG5cdCAgICAgIC5yZXBsYWNlKC9cXD8mLywgJz8nKVxuXHQgICAgICAucmVwbGFjZSgvXFw/JC8sICcnKVxuXHQgICAgO1xuXHQgIH1cblx0XG5cdCAgaWYgKCFzcG1faWQpIHJldHVybiBocmVmO1xuXHRcblx0ICAvLyDlnKggaHJlZiDkuK3mj5LlhaXmlrDnmoQgc3BtIOWPguaVsFxuXHQgIHZhciBzZWFyY2g7XG5cdCAgdmFyIGhhc2g7XG5cdCAgdmFyIGE7XG5cdCAgdmFyIGFuZF9jaGFyID0gJyYnO1xuXHQgIHZhciBxdWVyeV9zcGxpdDtcblx0ICB2YXIgcXVlcnlfY291bnQ7XG5cdCAgdmFyIGZpbGVuYW1lO1xuXHQgIHZhciBmaWxlX2V4dDtcblx0XG5cdCAgaWYgKGhyZWYuaW5kZXhPZignIycpICE9PSAtMSkge1xuXHQgICAgYSA9IGhyZWYuc3BsaXQoJyMnKTtcblx0ICAgIGhyZWYgPSBhLnNoaWZ0KCk7XG5cdCAgICBoYXNoID0gYS5qb2luKCcjJyk7IC8vIOWPluesrOS4gOS4qiAjIOWQjueahOmDqOWIhlxuXHQgIH1cblx0ICBxdWVyeV9zcGxpdCA9IGhyZWYuc3BsaXQoJz8nKTtcblx0ICBxdWVyeV9jb3VudCA9IHF1ZXJ5X3NwbGl0Lmxlbmd0aCAtIDE7XG5cdFxuXHQgIC8vIOS4i+mdouWkhOeQhuW9ouWmguKAnGh0dHA6Ly93d3cudGFvYmFvLmNvbeKAnei/meagt+eahOacq+WwvuS4jeW4puKAnC/igJ3nmoTpk77mjqVcblx0ICAvLyDov5nnp43pk77mjqXlr7nlupTnmoRmaWxlbmFtZeS4uuepulxuXHQgIGEgPSBxdWVyeV9zcGxpdFswXS5zcGxpdCgnLy8nKTtcblx0ICBhID0gYVthLmxlbmd0aCAtIDFdLnNwbGl0KCcvJyk7XG5cdCAgZmlsZW5hbWUgPSBhLmxlbmd0aCA+IDEgPyBhLnBvcCgpIDogJyc7XG5cdFxuXHQgIGlmIChxdWVyeV9jb3VudCA+IDApIHtcblx0ICAgIC8qKlxuXHQgICAgICog55Sx5LqO5a2Y5Zyo57G75Ly8IGh0dHA6Ly9qdS5hdHBhbmVsLmNvbS8/c2NtPTEwMDUuMTAuMS43MDMmdXJsPWh0dHA6Ly93d3cudG1hbGwuY29tL2dvL2FjdC90bWFsbC9teW14LXltLnBocD9fc3JjX3Bvc19pZD0xLjEwMDAzODYuMjIyMDE3LjIwJmFkX2lkPSZhbV9pZD0mY21faWQ9JnBtX2lkPTE1MDEwMDgyNzI2MzM2ODA4NWY4XG5cdCAgICAgKiDov5nmoLfnmoTpk77mjqXvvIzms6jmhI/lhbbkuK3mnInkuKTkuKrigJw/4oCd77yMXG5cdCAgICAgKiDov5nmmK/kuIDnp43ot7Povazpk77mjqXvvIzlhbbkuK0gc3BtIOWPguaVsOmcgOimgeWKoOWcqOWQjumdouS4gOS4qiA/IOS5i+WQju+8jFxuXHQgICAgICog57uP5LiO5qK15piT5ZWG6YeP77yIMjAxMi0wMy0zMO+8ie+8jOWGs+Wumue7n+S4gOWwhiBzcG0g5Y+C5pWw5Yqg5YiwIGhyZWYg55qE5pyA5ZCO5LiA5LiqID8g5LmL5ZCOXG5cdCAgICAgKi9cblx0ICAgIHNlYXJjaCA9IHF1ZXJ5X3NwbGl0LnBvcCgpOyAvLyDlj5bmnIDlkI7kuIDkuKogPyDlkI7nmoTpg6jliIZcblx0ICAgIGhyZWYgPSBxdWVyeV9zcGxpdC5qb2luKCc/Jyk7IC8vIOacgOWQjuS4gOS4qiA/IOS5i+WJjeeahOmDqOWIhlxuXHQgIH1cblx0XG5cdCAgaWYgKHNlYXJjaCAmJlxuXHQgICAgcXVlcnlfY291bnQgPiAxICYmIC8vICMg5Y+q5a+55Lik5Liq5Y+K5Lul5LiK55qE4oCcP+KAneeahCB1cmwg5omn6KGM6L+Z5qC355qE5qOA5rWLXG5cdCAgICBzZWFyY2guaW5kZXhPZignJicpID09IC0xICYmXG5cdCAgICAvLyBzZWFyY2guaW5kZXhPZignPScpID09IC0xICYmXG5cdCAgICBzZWFyY2guaW5kZXhPZignJScpICE9PSAtMSkge1xuXHQgICAgLyoqXG5cdCAgICAgKiDmnInkuIDkupvpobXpnaLvvIzlpoIgaHR0cDovL2xvZ2luLnRhb2Jhby5jb20vbWVtYmVyL2xvZ291dC5qaHRtbD9mPXRvcCZyZWRpcmVjdFVSTD1odHRwOi8vbG9naW4udG1hbGwuY29tLz9fc3JjX3Bvc19pZD0xMDA3LjEwMDM2MS4wLjE4MCUyNnJlZGlyZWN0X3VybD1odHRwJTI1M0ElMjUyRiUyNTJGdGVtYWkudG1hbGwuY29tJTI1MkYlMjUzRnNwbSUyNTNEMy4xMDAwNDczLjE5NzU2Mi4yJTI1MjZwcnQlMjUzRDEzMzYzNjc0MjUxOTYlMjUyNnByYyUyNTNENFxuXHQgICAgICogc3BtIOWPguaVsOWKoOWcqOesrOS6jOS4qiA/IOS5i+WQju+8jOS9huaYr+esrOS6jOS4qiA/IOS5i+WQjueahCAmIOmDveW3sue7j+WBmuS6huinhOiMg+eahOi9rOegge+8jOaJgOS7peaWsOa3u+WKoOeahCBzcG0g5ZCO6Z2i55qEICYg5Lmf6KaB6L+b6KGM6L2s56CBXG5cdCAgICAgKi9cblx0ICAgIGFuZF9jaGFyID0gJyUyNic7XG5cdCAgfVxuXHRcblx0ICB2YXIgc3BtX3ByZWZpeCA9ICcnOyAvLyDlpoLmnpzlvZPliY3lnKhpZnJhbWXkuK3vvIzlubbkuJRpZnJhbWXmnIlzcG3lj4LmlbDvvIzliJnov5nkuKrliY3nvIDkuI3kuLrnqbpcblx0ICBocmVmID0gaHJlZiArICc/X3NyY19wb3NfaWQ9JyArIHNwbV9wcmVmaXggKyBzcG1faWRcblx0ICAgICsgKHNlYXJjaCA/IChhbmRfY2hhciArIHNlYXJjaCkgOiAnJylcblx0ICAgICsgKGhhc2ggPyAoJyMnICsgaGFzaCkgOiAnJylcblx0ICA7XG5cdFxuXHQgIC8qKlxuXHQgICAqIOa3u+WKoOaWh+S7tuWQjemineWkluWPguaVsFxuXHQgICAqIOeUseS6juWcqElF5LiL77yM5aaC5p6c5Yqg5LqGc3Bt5Y+C5pWw5Y+v6IO95Lya5byV6LW35paH5Lu25ZCO57yA5ZCN6KKr5L+u5pS577yMXG5cdCAgICpcblx0ICAgKiDmr5TlpoLvvJpcblx0ICAgKiDljp/lp4vkuIvovb3pk77mjqXvvJpcblx0ICAgKiBodHRwOi8vZG93bmxvYWQuYWxpcGF5LmNvbS9zZWMvZWRpdC9hbGllZGl0LmV4ZVxuXHQgICAqXG5cdCAgICog5Yqg5LqGc3Bt5Y+C5pWw5LmL5ZCO77yaXG5cdCAgICogaHR0cDovL2Rvd25sb2FkLmFsaXBheS5jb20vc2VjL2VkaXQvYWxpZWRpdC5leGU/X3NyY19wb3NfaWQ9YTIxMDcuMS4xMDAwMzQxLjEw77yI5pyJ6Zeu6aKY77yMSUXkuIvlkI7nvIDlkI3ooqvkv67mlLnkuLrigJwuMTDigJ3vvIlcblx0ICAgKlxuXHQgICAqIOWKoOS6hmZpbGXlj4LmlbDkuYvlkI7vvJpcblx0ICAgKiBodHRwOi8vZG93bmxvYWQuYWxpcGF5LmNvbS9zZWMvZWRpdC9hbGllZGl0LmV4ZT9fc3JjX3Bvc19pZD1hMjEwNy4xLjEwMDAzNDEuMTAmZmlsZT1hbGllZGl0LmV4Ze+8iOayoeaciemXrumimO+8iVxuXHQgICAqXG5cdCAgICog5Zug5q2k77yM6L+Z5YS/5Lya5a+55b2i5aaC5paH5Lu25LiL6L2955qE6ZO+5o6l5re75Yqg5LiA5Liq6aKd5aSW5Y+C5pWwXG5cdCAgICovXG5cdCAgZmlsZV9leHQgPSB1dGlsRGFzaC5pc0NvbnRhaW4oZmlsZW5hbWUsICcuJykgPyBmaWxlbmFtZS5zcGxpdCgnLicpLnBvcCgpLnRvTG93ZXJDYXNlKCkgOiAnJztcblx0ICBpZiAoZmlsZV9leHQpIHtcblx0ICAgIGlmICgoe1xuXHQgICAgICAncG5nJzogMSxcblx0ICAgICAgJ2pwZyc6IDEsXG5cdCAgICAgICdqcGVnJzogMSxcblx0ICAgICAgJ2dpZic6IDEsXG5cdCAgICAgICdibXAnOiAxLFxuXHQgICAgICAnc3dmJzogMVxuXHQgICAgfSkuaGFzT3duUHJvcGVydHkoZmlsZV9leHQpKSB7XG5cdCAgICAgIC8vIOS7peWbvueJh+WQjue8gOWQjee7k+WwvueahOmTvuaOpeS4jeWKoCBzcG0g5Y+C5pWwXG5cdCAgICAgIHJldHVybiAwO1xuXHQgICAgfVxuXHRcblx0ICAgIGlmICghc2VhcmNoICYmIHF1ZXJ5X2NvdW50IDw9IDEpIHtcblx0ICAgICAgaWYgKCFoYXNoICYmICEoe1xuXHQgICAgICAgICdodG0nOiAxLFxuXHQgICAgICAgICdodG1sJzogMSxcblx0ICAgICAgICAncGhwJzogMSxcblx0ICAgICAgICAnYXNweCc6IDEsXG5cdCAgICAgICAgJ3NodG1sJzogMSxcblx0ICAgICAgICAneGh0bWwnOiAxXG5cdCAgICAgIH0pLmhhc093blByb3BlcnR5KGZpbGVfZXh0KSkge1xuXHQgICAgICAgIC8vIOiupOS4uuW9k+WJjeaWh+S7tuaYr+S4gOS4quS4i+i9veaWh+S7tu+8jOa3u+WKoOmineWkluWPguaVsFxuXHQgICAgICAgIGhyZWYgKz0gJyZmaWxlPScgKyBmaWxlbmFtZTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH1cblx0XG5cdCAgcmV0dXJuIGhyZWY7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGFwbHVzVHJhY2tlciAoYXBsdXNBbmNob3IsIF9wb3NfaWQpIHtcblx0ICB2YXIgYWxpbmtzID0gYXBsdXNBbmNob3IuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2EnKTtcblx0ICB2YXIgY2xrQ29uZmlnID0gZ2V0QXBsdXNDbGtDb25maWcoX3Bvc19pZCkgfHwge307XG5cdCAgdmFyIGN1cnJlbnRQYWdlID0gY3VycmVudFBhZ2VDb25maWcucGFnZSB8fCB7fTtcblx0ICB2YXIgc3BtQiA9IGNsa0NvbmZpZy5zcG1CIHx8IGN1cnJlbnRQYWdlLnNwbUI7XG5cdCAgaWYgKCFzcG1CKSB7XG5cdCAgICByZXR1cm47XG5cdCAgfVxuXHQgIHZhciBteWluZGV4ID0gMTtcblx0ICBlYWNoKGFsaW5rcywgZnVuY3Rpb24gKGFsaW5rKSB7XG5cdCAgICAvLyDkuI3og73nm7TmjqXnlKjnspfmmrTnmoRmaW5kQWxs55qEYWxpbmvvvIzkvY3nva7ntKLlvJXkvJrkubFcblx0ICAgIC8vIOmcgOWQkeS4iuafpeaJvuS4gOmBje+8jOWmguaenOavlOi+g+a3seeahOiKgueCueWGheWPiOiuvue9ruS6huWFtuS7lueahF9wb3NfaWTvvIzliJnkuI3og73lpITnkIZcblx0ICAgIGZpbmRBcGx1c0FuY2hvckJ5QWxpbmtFbChhbGluaywgZnVuY3Rpb24gKGFsaW5rRWwsIHJlYWxfcG9zX2lkKSB7XG5cdCAgICAgIGlmIChfcG9zX2lkID09PSByZWFsX3Bvc19pZCkge1xuXHQgICAgICAgIHZhciBzcG0gPSBfcG9zX2lkID09PSAnUEFHRScgPyBbc3BtQiwgbXlpbmRleCsrXS5qb2luKCcuJykgOiBbc3BtQiwgX3Bvc19pZCwgbXlpbmRleCsrXS5qb2luKCcuJyk7XG5cdCAgICAgICAgYXBsdXMuX2N1cnJlbnRfc3BtID0gc3BtO1xuXHQgICAgICAgIHZhciBxID0gKHdpbmRvdy5hcGx1c19xdWV1ZSB8fCAod2luZG93LmFwbHVzX3F1ZXVlID0gW10pKTtcblx0ICAgICAgICBxLnB1c2goe1xuXHQgICAgICAgICAgYWN0aW9uOiAnYXBsdXMuYXBwZW5kTWV0YUluZm8nLFxuXHQgICAgICAgICAgYXJndW1lbnRzOiBbJ2FwbHVzLWNwdmRhdGEnLCB7XG5cdCAgICAgICAgICAgIF9zcmNfcG9zX2lkOiBzcG1cblx0ICAgICAgICAgIH1dXG5cdCAgICAgICAgfSk7XG5cdFxuXHQgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICBpZiAoYWxpbmsgJiYgYWxpbmsuc2V0QXR0cmlidXRlKSB7XG5cdCAgICAgICAgICAgIGlmICghYWxpbmsuZ2V0QXR0cmlidXRlKCdhcGx1cy1hbmNob3ItaWQnKSkge1xuXHQgICAgICAgICAgICAgIGFsaW5rLnNldEF0dHJpYnV0ZSgnYXBsdXMtYW5jaG9yLWlkJywgc3BtKTtcblx0ICAgICAgICAgICAgICBpZiAoYWxpbmsuaHJlZiAmJiBhbGluay5ocmVmICE9PSAnIycpIHtcblx0ICAgICAgICAgICAgICAgIGFsaW5rLnNldEF0dHJpYnV0ZSgnaHJlZicsIHNwbV91cGRhdGVIcmVmV2l0aFNQTUlkKGFsaW5rLmhyZWYsIHNwbSkpO1xuXHQgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0gY2F0Y2ggKGUpIHtcblx0ICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAvLyBjb25zb2xlLndhcm4oJ+afpeaJvuWIsOWMheWQq+WFs+ezu+eahF9wb3NfaWQgPSAnLCByZWFsX3Bvc19pZCk7XG5cdCAgICAgIH1cblx0ICAgIH0pO1xuXHQgIH0pO1xuXHR9XG5cdFxuXHQvKipcblx0ICogdGltZXN0YW1wOiDnlKjmiLfngrnlh7vnmoTml7bpl7TmiLMsIOWkmuadoeiusOW9leaMieaXtumXtOmhuuW6j+WAkuaOkiwg5Y2z57qm6L+R55qE5LiL5qCH57qm6Z2g5YmNXG5cdCAqIHRhcmdldF9leHByZXNzaW9uX3R5cGU6IOebruagh+mTvuaOpeihqOi+vuW8j+exu+Weiywg5Y+W5YC85Y+v6IO95Li6IG51bGwsIOaIluiAhWhyZWblsZ7mgKflgLwsIOaIluiAheeUqOaIt+iHquWumuS5ieeahOi3n+i4quWPguaVsFxuXHQgKiB0YXJnZXRfZXhwcmVzc2lvbjogIOeCueWHu+S9jee9ruWvueW6lOeahOebruagh+mTvuaOpeihqOi+vuW8jywgdHlwZeS4umhyZWbml7bkuLrkuIDkuKp1cmwsIOexu+Wei+S4uuiHquWumuS5ieWPguaVsOaXtiwg5YiZ5Li65LiA5Liq5LiN5a6a6ZW/55qE5a2X56ym5LiyXG5cdCAqIHNwbV9pZDog6KKr54K55Ye754K55L2N55qEc3Bt57yW56CBXG5cdCAqIGxvZ19pZDog5b2T5YmN6aG16Z2i55qEcHZpZFxuXHQgKiBjdXJyZW50X3VybDog5b2T5YmN6aG16Z2i55qEVVJMXG5cdCAqIGN1cnJlbnRfcmVmZXJyZXI6IOW9k+WJjemhtemdoueahHJlZmVycmVyX3VybFxuXHQgKiB0cmFja2luZ19wYXJhbTog6ZyA6KaB6aKd5aSW5Lyg6YCS5LiL5Y6755qE5pel5b+X5Y+C5pWwXG5cdCAqL1xuXHRmdW5jdGlvbiBkb1RyYWNlKGUsIGVsKSB7XG5cdCAgZmluZEFuY2hvckVsZW1lbnQoZWwsIGZ1bmN0aW9uIChhbGlua0VsKSB7XG5cdCAgICBpZiAoYWxpbmtFbCAmJiAhYWxpbmtFbC5nZXRBdHRyaWJ1dGUoJ2FwbHVzLWFuY2hvci1pZCcpKXtcblx0ICAgICAgZmluZEFwbHVzQW5jaG9yQnlBbGlua0VsKGFsaW5rRWwsIGFwbHVzVHJhY2tlciwgZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGNvbnNvbGUubG9nKCdmaW5kQXBsdXNBbmNob3JCeUFsaW5rRWwgZmFpbHVyZS4uLicpO1xuXHQgICAgICB9KTtcblx0ICAgIH1cblx0ICB9KTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gaW5pdFBhZ2VTcG0gKHNvdXJjZV9wb3NfaWQpIHtcblx0ICB2YXIgcSA9ICh3aW5kb3cuYXBsdXNfcXVldWUgfHwgKHdpbmRvdy5hcGx1c19xdWV1ZSA9IFtdKSk7XG5cdCAgdmFyIF9zcmNfcG9zX2lkID0gc291cmNlX3Bvc19pZCB8fCB1dGlsVXJsLmdldFBhcmFtRnJvbVVybCgnX3NyY19wb3NfaWQnLCBsb2NhdGlvbi5ocmVmKTtcblx0ICBxLnB1c2goe1xuXHQgICAgYWN0aW9uOiAnYXBsdXMuYXBwZW5kTWV0YUluZm8nLFxuXHQgICAgYXJndW1lbnRzOiBbJ2FwbHVzLWNwdmRhdGEnLCB7XG5cdCAgICAgIF9zcmNfcG9zX2lkOiBfc3JjX3Bvc19pZFxuXHQgICAgfV1cblx0ICB9KTtcblx0ICBxLnB1c2goe1xuXHQgICAgYWN0aW9uOiAnYXBsdXMuYXBwZW5kTWV0YUluZm8nLFxuXHQgICAgYXJndW1lbnRzOiBbJ2FwbHVzLWV4ZGF0YScsIHtcblx0ICAgICAgX3NyY19wb3NfaWQ6IF9zcmNfcG9zX2lkXG5cdCAgICB9XVxuXHQgIH0pO1xuXHQgIC8vIOmmluasoVBW5ZCO5riF55CG5o6J5p2l5rqQcG9zX2lkXG5cdCAgcS5wdXNoKHtcblx0ICAgIGFjdGlvbjogJ2FwbHVzLmFwbHVzX3B1YnN1Yi5zdWJzY3JpYmUnLFxuXHQgICAgYXJndW1lbnRzOiBbYXBsdXNTdGF0aWMuTVdfQ0hBTkdFX1BWLCBmdW5jdGlvbiAob3JpRGF0YXMpIHtcblx0ICAgICAgaWYgKG9yaURhdGFzLnN0YXR1cyA9PT0gJ2NvbXBsZXRlJykge1xuXHQgICAgICAgIGFwbHVzLmFwcGVuZE1ldGFJbmZvKCdhcGx1cy1jcHZkYXRhJywge1xuXHQgICAgICAgICAgX3NyY19wb3NfaWQ6ICcnXG5cdCAgICAgICAgfSk7XG5cdCAgICAgIH1cblx0ICAgIH1dXG5cdCAgfSk7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIHdhdGNoUGFnZUNvbmZpZyAoKSB7XG5cdCAgLy8gdXRpbEdRLnB1c2hJbnRvR29sZGxvZ1F1ZXVlKGFwbHVzU3RhdGljLlBVQkxJU0gsIFthcGx1c1N0YXRpYy5DVVJSRU5UX1BBR0VfQ09ORklHLCBjdXJyZW50UGFnZUNvbmZpZ10pO1xuXHQgIHV0aWxHUS5wdXNoSW50b0dvbGRsb2dRdWV1ZShhcGx1c1N0YXRpYy5TVUJTQ1JJQkUsIFthcGx1c1N0YXRpYy5DVVJSRU5UX1BBR0VfQ09ORklHLCBmdW5jdGlvbiAoY29uZmlnKSB7XG5cdCAgICBjdXJyZW50UGFnZUNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcblx0ICB9XSk7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIHdhdGNoQXBsdXNBdXRvQ2xrICgpIHtcblx0ICB2YXIgcSA9ICh3aW5kb3cuYXBsdXNfcXVldWUgfHwgKHdpbmRvdy5hcGx1c19xdWV1ZSA9IFtdKSk7XG5cdCAgcS5wdXNoKHtcblx0ICAgIGFjdGlvbjogJ2FwbHVzLnNldE1ldGFJbmZvJyxcblx0ICAgIGFyZ3VtZW50czogWydhcGx1cy1hdXRvLWNsay11c2VyZm4nLCBmdW5jdGlvbiAoZWwpIHtcblx0ICAgICAgdmFyIGFwbHVzQW5jaG9ySWQgPSBlbCA/IGVsLmdldEF0dHJpYnV0ZSgnYXBsdXMtYW5jaG9yLWlkJykgOiAnJztcblx0ICAgICAgaWYgKGFwbHVzQW5jaG9ySWQpIHtcblx0ICAgICAgICByZXR1cm4gJ19wb3NfaWQ9JyArIGFwbHVzQW5jaG9ySWQ7ICBcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICB2YXIgX3Bvc19pZCA9IGVsID8gZWwuZ2V0QXR0cmlidXRlKCdkYXRhLWFwbHVzLXBvcy1pZCcpIDogJyc7XG5cdCAgICAgICAgdmFyIGNsa0NvbmZpZyA9IF9wb3NfaWQgPyBnZXRBcGx1c0Nsa0NvbmZpZyhfcG9zX2lkKSA6IHt9O1xuXHQgICAgICAgIGlmIChjbGtDb25maWcuc3BtQiAmJiBjbGtDb25maWcuX3Bvc19pZCkge1xuXHQgICAgICAgICAgdmFyIHNwbSA9W2Nsa0NvbmZpZy5zcG1CLCBfcG9zX2lkXS5qb2luKCcuJyk7XG5cdCAgICAgICAgICByZXR1cm4gJ19wb3NfaWQ9JyArIHNwbTsgIFxuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICByZXR1cm4gJyc7XG5cdCAgICAgICAgfSBcblx0ICAgICAgfVxuXHQgICAgfV1cblx0ICB9KTtcblx0fVxuXHRcblx0LyoqXG5cdCAqIOebkeWQrHRhcOS6i+S7tu+8jOe7mei2hemTvuaOpeWKoHNwbeS/oeaBr++8jOe7memdnui2hemTvuaOpea3u+WKoGRhdGEtc3BtLWFuY2hvci1pZOWxnuaAp1xuXHQgKiBAcGFyYW1zIHtvYmplY3R9IG9iaiB7XG5cdCAqICAgaXNUb3VjaEVuYWJsZWQ6IHRydWV8fGZhbHNlXG5cdCAqIH1cblx0ICovXG5cdGV4cG9ydHMucnVuID0gZnVuY3Rpb24gKG9iaikge1xuXHQgIHZhciBkb2MgPSBkb2N1bWVudDtcblx0ICBpbml0UGFnZVNwbSgpO1xuXHQgIHdhdGNoUGFnZUNvbmZpZygpO1xuXHQgIHdhdGNoQXBsdXNBdXRvQ2xrKCk7XG5cdCAgd2luZG93LmFwbHVzLmRvVHJhY2UgPSBkb1RyYWNlO1xuXHQgIGlmIChvYmogJiYgb2JqLmlzVG91Y2hFbmFibGVkKSB7XG5cdCAgICB1dGlsRXZlbnQub24oZG9jLCAndGFwU3BtJywgZG9UcmFjZSk7XG5cdCAgfSBlbHNlIHtcblx0ICAgIHV0aWxFdmVudC5vbihkb2MsICdtb3VzZWRvd24nLCBkb1RyYWNlKTtcblx0ICAgIHV0aWxFdmVudC5vbihkb2MsICdrZXlkb3duJywgZG9UcmFjZSk7XG5cdCAgfVxuXHR9O1xuXG5cbi8qKiovIH0pLFxuLyogMTA3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIGFsaWxvZy9zIC0gc3JjL3BsdWdpbnMvbGliX2FwaS9tYWluLmpzXG5cdCAqIEFQSeaPkuS7tlxuXHQgKlxuXHQgKlxuXHQgKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG5cdCAqXG5cdCAqIEF1dGhvcnM6XG5cdCAqICAgUmljaGFyZHzosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuXHQgKi9cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG5cdCAgcmV0dXJuIHtcblx0ICAgIHJ1bjogZnVuY3Rpb24gKCkge1xuXHQgICAgICBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwOCkodGhpcy5vcHRpb25zLmNvbnRleHQubG9nQ29uZmlnKTtcblx0ICAgIH1cblx0ICB9O1xuXHR9O1xuXG4vKioqLyB9KSxcbi8qIDEwOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBhbGlsb2cvcyAtIHNyYy9wbHVnaW5zL2xpYl9hcGkvbWFpbi5qc1xuXHQgKiBBUEnmj5Lku7Zcblx0ICpcblx0ICpcblx0ICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuXHQgKlxuXHQgKiBBdXRob3JzOlxuXHQgKiAgIFJpY2hhcmR86LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cblx0ICovXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciB1dGlsUHVic3ViID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5OSk7XG5cdHZhciB1dGlsR29sZGxvZyA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdFxuXHQvKipcblx0ICogQHBhcmFtcyB7T2JqZWN0fSBsb2dDb25maWcge1xuXHQgKiAgICBwdjoge1xuXHQgKiAgICAgIHBsdWdpbnM6IHJlcXVpcmUoJy4vbGliX2xvZy9wbHVnaW5zX3B2JyksXG5cdCAqICAgICAgY29udGV4dDogcmVxdWlyZSgnLi9saWJfbG9nL2NvbmZpZy9jb25maWdfdScpXG5cdCAqICAgIH0sXG5cdCAqICAgIGhqbGo6IHtcblx0ICogICAgICBwbHVnaW5zOiByZXF1aXJlKCcuL2xpYl9sb2cvcGx1Z2luc19oamxqJyksXG5cdCAqICAgICAgY29udGV4dDogcmVxdWlyZSgnLi9saWJfbG9nL2NvbmZpZy9jb25maWdfaGpsal91Jylcblx0ICogICAgfVxuXHQgKiAgfVxuXHQgKi9cblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobG9nQ29uZmlnKSB7XG5cdCAgdmFyIGFwbHVzID0gdXRpbEdvbGRsb2cuZ2V0R2xvYmFsVmFsdWUoJ2FwbHVzJyk7XG5cdCAgaWYgKGFwbHVzLl9hcGx1c19hcGkpIHtcblx0ICAgIHJldHVybjtcblx0ICB9IGVsc2Uge1xuXHQgICAgYXBsdXMuX2FwbHVzX2FwaSA9IHtcblx0ICAgICAgc3RhdHVzOiAnY29tcGxldGUnXG5cdCAgICB9O1xuXHQgIH1cblx0XG5cdCAgdmFyIGFwbHVzT2JqID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMDkpLnJ1bi5jcmVhdGUoe1xuXHQgICAgbG9nQ29uZmlnOiBsb2dDb25maWdcblx0ICB9KTtcblx0ICBmb3IgKHZhciBrIGluIGFwbHVzT2JqKSB7XG5cdCAgICBhcGx1c1trXSA9IGFwbHVzT2JqW2tdO1xuXHQgIH1cblx0XG5cdCAgLy8g5Yid5aeL5YyWcHZpZFxuXHQgIF9fd2VicGFja19yZXF1aXJlX18oMTE0KS5tYWtlUFZJZCgpO1xuXHRcblx0ICB2YXIgbXNnQXJyID0gWydhcGx1c1JlYWR5JywgJ2NvbXBsZXRlJ107XG5cdCAgdXRpbFB1YnN1Yi5kb1B1Yk1zZyhtc2dBcnIpO1xuXHQgIHV0aWxQdWJzdWIuZG9DYWNoZVB1YnMobXNnQXJyKTtcblx0XG5cdH07XG5cblxuLyoqKi8gfSksXG4vKiAxMDkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogcHJvamVjdCAtIGZpbGVwYXRoXG5cdCAqIGRlc2NyaXB0aW9uXG5cdCAqXG5cdCAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cblx0ICpcblx0ICogQXV0aG9yczpcblx0ICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuXHQgKi9cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0Ly8gdmFyIGRvYyA9IGRvY3VtZW50O1xuXHRcblx0dmFyIEJhc2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKTtcblx0dmFyIGNvb2tpZSA9IF9fd2VicGFja19yZXF1aXJlX18oNzQpO1xuXHR2YXIgdXRpbEV2ZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1NSk7XG5cdHZhciB1dGlsTG9nZ2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNik7XG5cdHZhciB1dGlsUHVic3ViID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5OSk7XG5cdHZhciB1dGlsRGFzaCA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpO1xuXHR2YXIgdXRpbEdvbGRsb2cgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHR2YXIgaXNGdW5jdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXHR2YXIgYXBsdXNTdGF0aWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXHR2YXIgdXRpbEdRID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MSk7XG5cdHZhciBSZWR1Y2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTApO1xuXHRcblx0dmFyIG1ldGFJbmZvID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOSk7XG5cdHZhciByZXF1ZXN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTMpO1xuXHRcblx0dmFyIGZuX2JlZm9yZV9wdiA9IFtdO1xuXHR2YXIgZm5fYWZ0ZXJfcHYgPSBbXTtcblx0dmFyIGZuX2JlZm9yZV9yZWNvcmQgPSBbXTtcblx0dmFyIGZuX2FmdGVyX3JlY29yZCA9IFtdO1xuXHR2YXIgYXBsdXMgPSB1dGlsR29sZGxvZy5nZXRHbG9iYWxWYWx1ZSgnYXBsdXMnKTtcblx0dmFyIEVNUFRZX0ZOID0gZnVuY3Rpb24gKCkge307XG5cdFxuXHRmdW5jdGlvbiBnZXRNbXN0YXRUaW1lb3V0ICgpIHtcblx0ICB2YXIgdGltZSA9IDUwMDA7XG5cdCAgdHJ5IHtcblx0ICAgIHZhciBsb25ndGltZSA9IGFwbHVzLmdldE1ldGFJbmZvKCdhcGx1cy1tbXN0YXQtdGltZW91dCcpO1xuXHQgICAgaWYgKGxvbmd0aW1lKSB7XG5cdCAgICAgIHZhciB0aW1lSW50ID0gcGFyc2VJbnQobG9uZ3RpbWUpO1xuXHQgICAgICBpZiAodGltZUludCA+PSAxMDAwICYmIHRpbWVJbnQgPD0gMTAwMDApIHtcblx0ICAgICAgICB0aW1lICA9IHRpbWVJbnQ7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9IGNhdGNoIChlKSB7fVxuXHQgIHJldHVybiB0aW1lO1xuXHR9XG5cdFxuXHRleHBvcnRzLnJ1biA9IEJhc2UuZXh0ZW5kKHtcblx0ICAvKipcblx0ICAgKiDms6jlhowgc2VuZFBWIOaJp+ihjOS5i+WJjeeahOaWueazlVxuXHQgICAqIOi/meS6m+aWueazleWwhuWcqCBzZW5kUFYg5LmL5YmN5L6d5qyh5omn6KGM77yM5aaC5p6c5pyJ5LiA5Liq5pi+5byP6L+U5ZueIGZhbHNl77yM5YiZIHNlbmRQViDlsIbooqvlj5bmtohcblx0ICAgKiBAcGFyYW0gZm4ge2Z1bmN0aW9ufVxuXHQgICAqL1xuXHQgIGJlZm9yZVNlbmRQVjogZnVuY3Rpb24gKGZuKSB7XG5cdCAgICBmbl9iZWZvcmVfcHYucHVzaChmbik7XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICog5rOo5YaMIHNlbmRQViDmiafooYzkuYvlkI7nmoTmlrnms5Vcblx0ICAgKiDov5nkupvmlrnms5XlsIblnKggc2VuZFBWIOS5i+WQjuS+neasoeaJp+ihjFxuXHQgICAqIEBwYXJhbSBmbiB7ZnVuY3Rpb259XG5cdCAgICovXG5cdCAgYWZ0ZXJTZW5kUFY6IGZ1bmN0aW9uIChmbikge1xuXHQgICAgZm5fYWZ0ZXJfcHYucHVzaChmbik7XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICogR0VUIOivt+axguS4gOS4quWbvueJh+WcsOWdgO+8jOWQkeacjeWKoeWZqOWPkemAgeaJk+eCuVxuXHQgICAqXG5cdCAgICogQHBhcmFtIHVybCB7U3RyaW5nfVxuXHQgICAqIEBwYXJhbSBbZGF0YVN0cl0ge1N0cmluZ31cblx0ICAgKiBAcGFyYW0gW21ldGhvZF0ge1N0cmluZ30gIC8vIFBPU1QgT1IgR0VUXG5cdCAgICogQHJldHVybiB7U3RyaW5nfVxuXHQgICAqL1xuXHQgIHNlbmQ6IGZ1bmN0aW9uICh1cmwsIGRhdGFTdHIsIG1ldGhvZCkge1xuXHQgICAgdmFyIHNyYztcblx0ICAgIC8vIOWmguaenHVybOayoeacieW4puWNj+iuru+8jOi/memHjOihpeWFheWujOaVtFxuXHQgICAgaWYgKHVybC5pbmRleE9mKCcvLycpID09PSAwKSB7XG5cdCAgICAgIHZhciBwcm90b2NhbCA9IGFwbHVzU3RhdGljLkhUVFBTO1xuXHQgICAgICBpZiAoLyhcXGQrXFwuKXszLH1cXGQrLy50ZXN0KHVybCkpIHtcblx0ICAgICAgICBwcm90b2NhbCA9ICdodHRwOic7XG5cdCAgICAgIH1cblx0ICAgICAgdXJsID0gcHJvdG9jYWwgKyB1cmw7XG5cdCAgICB9XG5cdCAgICAvLyDmjIflrprkuoZQT1NU5YiZ5LyY5YWI5oyJUE9TVOWPkemAgVxuXHQgICAgaWYgKG1ldGhvZCA9PT0gJ1BPU1QnICYmIG5hdmlnYXRvciAmJiBuYXZpZ2F0b3Iuc2VuZEJlYWNvbikge1xuXHQgICAgICBzcmMgPSByZXF1ZXN0LnBvc3REYXRhKHVybCwgZGF0YVN0cik7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBzcmMgPSByZXF1ZXN0LnNlbmRJbWcodXJsICsgJz8nICsgZGF0YVN0ciwgZ2V0TW1zdGF0VGltZW91dCgpKTtcblx0ICAgIH1cblx0ICAgIGFwbHVzLnJlcSA9IHNyYztcblx0ICAgIHJldHVybiBzcmM7XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICogQHBhcmFtIFtPYmplY3RdIGNvbmZpZzoge1xuXHQgICAqICAgY2hlY2tzdW06IDExMTExMTExLCAgIC8vIOagueaNrnNwbWEsc3BtYuiHquWKqOeUn+aIkOeahOS4gOS4quWtl+espuS4slxuXHQgICAqICAgaXNfYXV0bzogdHJ1ZS9mYWxzZe+8jCAvLyDmoIfor4bmmK/lkKboh6rliqjmiZPngrnvvIzpu5jorqTkuLp0cnVl77yM5Y2V6aG15bqU55So6ZyA6KaB5LygZmFsc2Vcblx0ICAgKiAgIHBhZ2VfaWQ6IDEyMywgICAgICAgICAvLyDlsIbkvJrkvZPnjrDlnKhzcG1i5L2N5LiKXG5cdCAgICogICBnb2tleTogJycsICAgICAgICAgICAgLy8g55So5oi36Ieq5a6a5LmJ5Y+C5pWw77yI5ZCR5LiL5YW85a6577yMVE9ET+WQjue7reS4i+aOie+8iVxuXHQgICAqIH1cblx0ICAgKiBAcGFyYW0gW09iamVjdF0gdXNlcmRhdGE6IHtcblx0ICAgKiAgIHJlZmVycmVyOiAnaHR0cDovL3d3dy50YW9iYW8uY29tJyAgIC8vIOWwhuS8muabv+aNonB26K+35rGC55qEcHJl5Y+C5pWwXG5cdCAgICogICB4eHgxOiAndnZ2MScsXG5cdCAgICogICB4eHgyOiAndnZ2MicsXG5cdCAgICogICB4eHhOOiAndnZ2TicsXG5cdCAgICogfSAgIC8vIOWQhOenjeiHquWumuS5iXB25Y+C5pWwXG5cdCAgICovXG5cdCAgc2VuZFBWOiBmdW5jdGlvbiAoY29uZmlnLCB1c2VyZGF0YSkge1xuXHQgICAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuXHQgICAgLy8gMeOAgWJlZm9yZVNlbmRQVu+8jOWmguaenOS7u+aEj+S4gOS4quWHveaVsOi/lOWbnuWAvOS4uiBmYWxzZe+8jOWImeS4reaWreW5tumAgOWHuu+8jOS4jeWPkemAgSBQViDor7fmsYJcblx0ICAgIGlmICh1dGlsRGFzaC5hbnkoZm5fYmVmb3JlX3B2LCBmdW5jdGlvbiAoZm4pIHtcblx0ICAgICAgcmV0dXJuIGZuKGFwbHVzLCBjb25maWcpID09PSBmYWxzZTtcblx0ICAgIH0pKSB7XG5cdCAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgIH1cblx0ICAgIC8vIDLjgIHmiafooYwgc2VuZHB2IOaPkuS7tlxuXHQgICAgdmFyIHJlZHVjZXIgPSBuZXcgUmVkdWNlcigpO1xuXHQgICAgY29uZmlnLnJlY29yZFR5cGUgPSAnUFYnOyAvLyDliKTmlq3ljZXlj4zlj5HnlKjnmoTvvIzogIPomZHnp7vpmaRcblx0XG5cdCAgICB2YXIgcHYgPSBhcGx1cy5sb2dDb25maWcucHY7XG5cdCAgICByZWR1Y2VyLnJ1bih7XG5cdCAgICAgIHBsdWdpbnM6IHB2LnBsdWdpbnMsXG5cdCAgICAgIGNvbnRleHQ6IHV0aWxEYXNoLmNsb25lRGVlcChwdi5jb250ZXh0KSAvLyDpmLLmraLmupDphY3nva7ooqvmsaHmn5Ncblx0ICAgIH0sIHtcblx0ICAgICAgY29uZmlnOiBjb25maWcsXG5cdCAgICAgIHVzZXJkYXRhOiB1c2VyZGF0YSxcblx0ICAgICAgcHVic3ViVHlwZTogJ3B2Jyxcblx0ICAgICAgbWVzc2FnZUZuUXVldWU6IGZuX2FmdGVyX3B2LFxuXHQgICAgICBtaWRkbGV3YXJlTWVzc2FnZUtleTogJ213X2NoYW5nZV9wdidcblx0ICAgIH0pO1xuXHQgICAgcmV0dXJuIHRydWU7XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICogQHBhcmFtcyBjb25maWcge1xuXHQgICAqICAgY29tcG9uZW50SWQ6IDE0NjAwOFxuXHQgICAqICAgcGFnZUlkOiDph4fpm4bnrqHnkIblubPlj7DkuIrnlJ/miJDnmoTllK/kuIDnmoRwYWdlSWQgaHR0cHM6Ly9sb2cyLWRhaWx5LmFsaWJhYmEubmV0L3RyYWNrL2RldmVsb3AvYXJlYS1tYW5hZ2VtZW50L2RldGFpbC8xNDYwMDMvODgwMDA0LzE0NjAwOFxuXHQgICAqIH1cblx0ICAgKi9cblx0ICBwYWdlRW50ZXI6IGZ1bmN0aW9uIChjb25maWcpIHtcblx0ICAgIHV0aWxHUS5wdXNoSW50b0dvbGRsb2dRdWV1ZShhcGx1c1N0YXRpYy5QVUJMSVNILCBbYXBsdXNTdGF0aWMuUEFHRV9FTlRFUiwgY29uZmlnXSk7XG5cdCAgICB1dGlsR1EucHVzaEludG9Hb2xkbG9nUXVldWUoYXBsdXNTdGF0aWMuQ0FDSEVfUFVCUywgW2FwbHVzU3RhdGljLlBBR0VfRU5URVIsIGNvbmZpZ10pO1xuXHQgIH0sXG5cdFxuXHQgIC8qKlxuXHQgICAqIOWFvOWuuXdlYnZpZXflhoXlm57osINnb2xkbG9nLmdldFBhcmFt5o6l5Y+j55qE5Z2RXG5cdCAgICovXG5cdCAgZ2V0UGFyYW06IGZ1bmN0aW9uKHNpZCkge1xuXHQgICAgdmFyIHd2ID0gd2luZG93LldpbmRWYW5lIHx8IHt9O1xuXHQgICAgdmFyIHZhbHVlID0gd3YgJiYgdHlwZW9mIHd2LmdldFBhcmFtID09PSAnZnVuY3Rpb24nID8gd3YuZ2V0UGFyYW0oc2lkKSA6ICcnO1xuXHQgICAgcmV0dXJuIHZhbHVlO1xuXHQgIH0sXG5cdFxuXHQgIGJlZm9yZVJlY29yZDogZnVuY3Rpb24gKGZuKSB7XG5cdCAgICBmbl9iZWZvcmVfcmVjb3JkLnB1c2goZm4pO1xuXHQgIH0sXG5cdFxuXHQgIGFmdGVyUmVjb3JkOiBmdW5jdGlvbiAoZm4pIHtcblx0ICAgIGZuX2FmdGVyX3JlY29yZC5wdXNoKGZuKTtcblx0ICB9LFxuXHRcblx0ICAvKipcblx0ICAgKiDlj5HpgIHpu4Tph5Hku6Tnrq3miZPngrlcblx0ICAgKiBAcGFyYW0ge1N0cmluZ30gbG9na2V5XG5cdCAgICogQHBhcmFtIHtTdHJpbmd9IGdta2V5XG5cdCAgICogQHBhcmFtIHtTdHJpbmd9IGdva2V5XG5cdCAgICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZCDor7fmsYLmlrnms5XkuLogUE9TVCBvciBHRVRcblx0ICAgKiBAcGFyYW0ge1N0cmluZ30gY2Jcblx0ICAgKi9cblx0ICByZWNvcmQ6IGZ1bmN0aW9uIChsb2drZXksIGdta2V5LCBnb2tleSwgbWV0aG9kLCBjYikge1xuXHQgICAgLy8gbWV0aG9kID0gJ0dFVCc7IC8vIHV0aWwuaXNTdHJpbmcobWV0aG9kKSA/IG1ldGhvZC50b1VwcGVyQ2FzZSgpIDogJ0dFVCc7XG5cdCAgICAvLyBiZWZvcmVSZWNvcmQg77yM5aaC5p6c5Lu75oSP5LiA5Liq5Ye95pWw6L+U5Zue5YC85Li6IGZhbHNl77yM5YiZ5Lit5pat5bm26YCA5Ye677yM5LiN5Y+R6YCBIHJlY29yZCDor7fmsYJcblx0ICAgIGlmIChsb2drZXkgJiYgbG9na2V5LmluZGV4T2YoJy8nKSAhPT0gMCAmJiBhcGx1cy5nbG9iYWxDb25maWcuaXNBbGkpIHtcblx0ICAgICAgbG9na2V5ID0gJy8nICsgbG9na2V5O1xuXHQgICAgfVxuXHQgICAgaWYgKHV0aWxEYXNoLmFueShmbl9iZWZvcmVfcmVjb3JkLCBmdW5jdGlvbiAoZm4pIHtcblx0ICAgICAgcmV0dXJuIGZuKGFwbHVzKSA9PT0gZmFsc2U7XG5cdCAgICB9KSkge1xuXHQgICAgICByZXR1cm47XG5cdCAgICB9XG5cdCAgICB2YXIgcmVkdWNlciA9IG5ldyBSZWR1Y2VyKCk7XG5cdCAgICB2YXIgaGpsaiA9IGFwbHVzLmxvZ0NvbmZpZy5oamxqO1xuXHQgICAgcmVkdWNlci5ydW4oe1xuXHQgICAgICBwbHVnaW5zOiBoamxqLnBsdWdpbnMsXG5cdCAgICAgIGNvbnRleHQ6IHV0aWxEYXNoLmNsb25lRGVlcChoamxqLmNvbnRleHQpIC8vIOmYsuatoua6kOmFjee9ruiiq+axoeafk1xuXHQgICAgfSwge1xuXHQgICAgICBjb25maWc6IHtcblx0ICAgICAgICByZWNvcmRUeXBlOiAnQ09NTU9OX0hKTEonLCAvLyDliKTmlq3ljZXlj4zlj5HnlKjnmoTvvIzogIPomZHnp7vpmaRcblx0ICAgICAgICBtZXRob2Q6IG1ldGhvZFxuXHQgICAgICB9LFxuXHQgICAgICB1c2VyZGF0YToge1xuXHQgICAgICAgIGxvZ2tleTogbG9na2V5LFxuXHQgICAgICAgIGdta2V5OiBnbWtleSxcblx0ICAgICAgICBnb2tleTogZ29rZXlcblx0ICAgICAgfSxcblx0ICAgICAgcHVic3ViVHlwZTogJ2hqbGonLFxuXHQgICAgICBtZXNzYWdlRm5RdWV1ZTogZm5fYWZ0ZXJfcmVjb3JkLFxuXHQgICAgICBtaWRkbGV3YXJlTWVzc2FnZUtleTogJ213X2NoYW5nZV9oamxqJ1xuXHQgICAgfSwgZnVuY3Rpb24oKXtcblx0ICAgICAgaWYgKGlzRnVuY3Rpb24oY2IpKSB7XG5cdCAgICAgICAgY2IoKTtcblx0ICAgICAgfVxuXHQgICAgfSk7XG5cdFxuXHQgICAgcmV0dXJuIHRydWU7XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICog5pq06Zyy57uZYXBsdXNfc3BtLmpzLCDlj5HpgIHlj6/op4bljJbpu4Tph5Hku6Tnrq1cblx0ICAgKiBAcGFyYW0ge1N0cmluZ30gbG9na2V5XG5cdCAgICogQHBhcmFtIHtTdHJpbmd9IGdta2V5XG5cdCAgICogQHBhcmFtIHtTdHJpbmd9IGdva2V5XG5cdCAgICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZCDor7fmsYLmlrnms5XkuLogUE9TVCBvciBHRVRcblx0ICAgKiBAcGFyYW0ge1N0cmluZ30gY2Jcblx0ICAgKi9cblx0ICByZWNvcmRVZGF0YTogZnVuY3Rpb24gKGxvZ2tleSwgZ21rZXksIGdva2V5LCBtZXRob2QsIGNiKSB7XG5cdCAgICB2YXIgcmVkdWNlciA9IG5ldyBSZWR1Y2VyKCk7XG5cdCAgICB2YXIgaGpsaiA9IGFwbHVzLmxvZ0NvbmZpZy5oamxqO1xuXHQgICAgcmVkdWNlci5ydW4oe1xuXHQgICAgICBwbHVnaW5zOiBoamxqLnBsdWdpbnMsXG5cdCAgICAgIGNvbnRleHQ6IHV0aWxEYXNoLmNsb25lRGVlcChoamxqLmNvbnRleHQpIC8vIOmYsuatoua6kOmFjee9ruiiq+axoeafk1xuXHQgICAgfSwge1xuXHQgICAgICBjb25maWc6IHtcblx0ICAgICAgICByZWNvcmRUeXBlOiAnREFUQUNMSUNLX0hKTEonLCAvLyDliKTmlq3ljZXlj4zlj5HnlKjnmoTvvIzogIPomZHnp7vpmaRcblx0ICAgICAgICBtZXRob2Q6IG1ldGhvZFxuXHQgICAgICB9LFxuXHQgICAgICB1c2VyZGF0YToge1xuXHQgICAgICAgIGxvZ2tleTogbG9na2V5LFxuXHQgICAgICAgIGdta2V5OiBnbWtleSxcblx0ICAgICAgICBnb2tleTogZ29rZXlcblx0ICAgICAgfSxcblx0ICAgICAgcHVic3ViVHlwZTogJ2hqbGonLFxuXHQgICAgICBtZXNzYWdlRm5RdWV1ZTogZm5fYWZ0ZXJfcmVjb3JkLFxuXHQgICAgICBtaWRkbGV3YXJlTWVzc2FnZUtleTogJ213X2NoYW5nZV9oamxqJ1xuXHQgICAgfSwgZnVuY3Rpb24oKXtcblx0ICAgICAgaWYgKGlzRnVuY3Rpb24oY2IpKSB7XG5cdCAgICAgICAgY2IoKTtcblx0ICAgICAgfVxuXHQgICAgfSk7XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICog5pu05paw6aG16Z2i55qEIGHjgIFiIOS9jVxuXHQgICAqIOmcgOaxguWPguinge+8mmh0dHA6Ly9naXRsYWIuYWxpYmFiYS1pbmMuY29tL2FsaWxvZy9rYi9pc3N1ZXMvMTM3XG5cdCAgICogQHBhcmFtIGEge1N0cmluZ31cblx0ICAgKiBAcGFyYW0gW2JdIHtTdHJpbmd9XG5cdCAgICogQHBhcmFtIFtjYl0ge0Z1bmN0aW9ufVxuXHQgICAqL1xuXHQgIHNldFBhZ2VTUE06IGZ1bmN0aW9uIChhLCBiLCBjYikge1xuXHQgICAgLypcblx0ICAgICAqIFtzcG1GbGFnXSB7Ym9vbGVhbn0gMjAxOC8zLzEyLTQvMyDor6XmoIfor4bkuLp0cnVl77yM6KGo56S6c3BtLXByZeWSjHNwbS11cmzkuI3kvJrmlLnlj5hcblx0ICAgICAqIOivpuinge+8mmh0dHBzOi8vbGFyay5hbGlwYXkuY29tL2x6ZHRyYWNraW5nL3ZveWFnZXJhcHAvcGRwdjMjYXBsdXMtdHJhY2tpbmctbGliXG5cdCAgICAgKi9cblx0ICAgIHZhciBzcG1GbGFnID0gYXBsdXMuZ2V0TWV0YUluZm8oJ2FwbHVzLXNwbS1maXhlZCcpO1xuXHQgICAgdmFyIGNhbGxiYWNrID0gdHlwZW9mIGNiID09PSAnZnVuY3Rpb24nID8gY2IgOiBmdW5jdGlvbiAoKSB7fTtcblx0ICAgIC8vIOabtOaWsOWGhemDqOWPmOmHj+WAvFxuXHQgICAgYXBsdXMuc3BtX2FiID0gYXBsdXMuc3BtX2FiIHx8IFtdO1xuXHQgICAgdmFyIG9sZF9zcG1hYiA9IHV0aWxEYXNoLmNsb25lRGVlcChhcGx1cy5zcG1fYWIpO1xuXHRcblx0XG5cdCAgICBpZiAoYSkge1xuXHQgICAgICBhcGx1cy5zcG1fYWJbMF0gPSAnJyArIGE7XG5cdCAgICAgIGFwbHVzLl8kLnNwbS5kYXRhLmEgPSAnJyArIGE7XG5cdCAgICB9XG5cdCAgICBpZiAoYikge1xuXHQgICAgICBhcGx1cy5zcG1fYWJbMV0gPSAnJyArIGI7XG5cdCAgICAgIGFwbHVzLl8kLnNwbS5kYXRhLmIgPSAnJyArICBiO1xuXHQgICAgfVxuXHRcblx0ICAgIC8vIHZhciBfJCA9IHV0aWxHb2xkbG9nLmdldEdvbGRsb2dWYWwoJ18kJykgfHwge307XG5cdCAgICB2YXIgbWV0YV9pbmZvID0gbWV0YUluZm8ucUdldCgpO1xuXHQgICAgLy8g55Sf5oiQIFBWIOaJk+eCueeahOaVsOaNriBUT0RPXG5cdCAgICBhcGx1cy5zcG1BUEkgJiYgYXBsdXMuc3BtQVBJLnNwYUluaXQoYXBsdXMsIG1ldGFfaW5mbywgb2xkX3NwbWFiKTtcblx0XG5cdCAgICBpZiAoc3BtRmxhZyAhPT0gJzEnKSB7XG5cdCAgICAgIHZhciBfc3BtYWJfcHJlID0gb2xkX3NwbWFiLmpvaW4oJy4nKTtcblx0ICAgICAgYXBsdXMuc3BtYWJfcHJlID0gX3NwbWFiX3ByZTtcblx0ICAgIH1cblx0ICAgIHZhciBtc2dzID0gWydzZXRQYWdlU1BNJywge1xuXHQgICAgICBzcG1hYl9wcmU6IGFwbHVzLnNwbWFiX3ByZSxcblx0ICAgICAgc3BtYWI6IGFwbHVzLnNwbV9hYi5qb2luKCcuJylcblx0ICAgIH1dO1xuXHQgICAgdXRpbFB1YnN1Yi5kb1B1Yk1zZyhtc2dzKTtcblx0ICAgIHV0aWxQdWJzdWIuZG9DYWNoZVB1YnMobXNncyk7XG5cdFxuXHQgICAgLy8gcmVzZXRNZXRhQW5kQm9keSgpO1xuXHQgICAgLy8gcmVzZXRNb2R1bGVzKCk7XG5cdFxuXHQgICAgY2FsbGJhY2soKTtcblx0ICB9LFxuXHRcblx0ICAvKipcblx0ICAgKiDliqjmgIHphY3nva5tZXRhXG5cdCAgICogQHBhcmFtIHtTdHJpbmd9IGtcblx0ICAgKiBAcGFyYW0ge09iamVjdH0gdlxuXHQgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIHtcblx0ICAgKiAgIGZyb206ICdhcHBlbmRNZXRhSW5mbydcblx0ICAgKiAgIHByaW9yaXR5OiAxLCAvLyDorr7nva7kuobkvJjlhYjnuqcx77yM5ZCM5pe25pyJPG1ldGEgbmFtZT1cImFwbHVzLXgtc2V0dGluZ3NcIiBjb250ZW50PVwiJHthcGx1c+aPkuS7tuWQjX0kXCI+77yM6L+Z5Y+q6IO96K6+572u5LiA5qyhXG5cdCAgICogfVxuXHQgICAqIEByZXR1cm4ge0Jvb2xlYW59XG5cdCAgICovXG5cdCAgc2V0TWV0YUluZm86IGZ1bmN0aW9uKGFyZzEsIHZhbHVlLCBvcHRzKSB7XG5cdCAgICB2YXIgaztcblx0ICAgIHZhciB2O1xuXHQgICAgdmFyIGRlZmF1bHRNb2RlID0gJ09WRVJXUklURSc7XG5cdCAgICB2YXIgbW9kZSA9IGRlZmF1bHRNb2RlO1xuXHQgICAgaWYgKHR5cGVvZiBhcmcxID09PSAnb2JqZWN0Jykge1xuXHQgICAgICBrID0gYXJnMS5tZXRhTmFtZTtcblx0ICAgICAgdiA9IGFyZzEubWV0YVZhbHVlO1xuXHQgICAgICBtb2RlID0gYXJnMS5tb2RlIHx8IGRlZmF1bHRNb2RlO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgayA9IGFyZzE7XG5cdCAgICAgIHYgPSB2YWx1ZTtcblx0ICAgIH1cblx0ICAgIGlmIChtb2RlID09PSBkZWZhdWx0TW9kZSkge1xuXHQgICAgICBpZiAobWV0YUluZm8uc2V0TWV0YUluZm8oaywgdiwgb3B0cykpIHtcblx0ICAgICAgICB2YXIgXyQgPSB1dGlsR29sZGxvZy5nZXRHb2xkbG9nVmFsKCdfJCcpIHx8IHt9O1xuXHQgICAgICAgIF8kLm1ldGFfaW5mbyA9IG1ldGFJbmZvLnFHZXQoKTtcblx0ICAgICAgICB2YXIgcnMgPSB1dGlsR29sZGxvZy5zZXRHb2xkbG9nVmFsKCdfJCcsIF8kKTtcblx0XG5cdCAgICAgICAgdmFyIG1zZ3MgPSBbJ3NldE1ldGFJbmZvJywgaywgdiwgb3B0c107XG5cdCAgICAgICAgdXRpbFB1YnN1Yi5kb1B1Yk1zZyhtc2dzKTtcblx0ICAgICAgICB1dGlsUHVic3ViLmRvQ2FjaGVQdWJzKG1zZ3MpO1xuXHQgICAgICAgIHJldHVybiBycztcblx0ICAgICAgfSBcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHJldHVybiB0aGlzLmFwcGVuZE1ldGFJbmZvKGssIHYpO1xuXHQgICAgfVxuXHQgIH0sXG5cdFxuXHQgIC8qKlxuXHQgICAqIFRvIGFwcGVuZCBgbWV0YWAgdGFnIGlmIHRoZXJlJ3Mgbm9uZSBhcGx1cyBtZXRhLlxuXHQgICAqIE90aGVyd2lzZSwgbWVyZ2UgY29udGVudCBhdHRyaWJ1dGVzOlxuXHQgICAqICAtIGBBcnJheS5wcm90b3R5cGUuY29uY2F0YCBjYWxsZWQgb24gQXJyYXkgdmFsdWVzLlxuXHQgICAqICAtIGBPYmplY3QuYXNzaWduYCBjYWxsZWQgb24gT2JqZWN0IHZhbHVlcy5cblx0ICAgKiAgQHBhcmFtIGtcblx0ICAgKiAgQHBhcmFtIHZcblx0ICAgKi9cblx0ICBhcHBlbmRNZXRhSW5mbzogbWV0YUluZm8uYXBwZW5kTWV0YUluZm8sXG5cdFxuXHQgIC8qKlxuXHQgICAqIGh0dHBzOi8veXVxdWUuYW50ZmluLWluYy5jb20vYXBsdXNqcy9wcm9qZWN0L2FwbHVzX2Nsb3VkIzMzMmRlNjJjXG5cdCAgICovXG5cdCAgdXBkYXRlUGFnZVByb3BlcnRpZXM6IGZ1bmN0aW9uIChwcm9wZXJ0aWVzKSB7XG5cdCAgICBpZiAocHJvcGVydGllcyAmJiB0eXBlb2YgcHJvcGVydGllcyA9PT0gJ29iamVjdCcpIHtcblx0ICAgICAgaWYgKHByb3BlcnRpZXMuX3BhZ2UpIHtcblx0ICAgICAgICBwcm9wZXJ0aWVzLnBhZ2VOYW1lID0gcHJvcGVydGllcy5fcGFnZTtcblx0ICAgICAgICBhcGx1cy5zZXRNZXRhSW5mbygnYXBsdXMtcGFnZW5hbWUnLCBwcm9wZXJ0aWVzLnBhZ2VOYW1lKTtcblx0ICAgICAgICBkZWxldGUgcHJvcGVydGllcy5fcGFnZTtcblx0ICAgICAgfVxuXHQgICAgICBhcGx1cy5hcHBlbmRNZXRhSW5mbygnYXBsdXMtY3B2ZGF0YScsIHByb3BlcnRpZXMpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgdXRpbExvZ2dlci5sb2dnZXIoe1xuXHQgICAgICAgIG1zZzogJ3dhcm5pbmc6IHR5cGVvZiB1cGRhdGVQYWdlUHJvcGVydGllc1xcJ3MgcGFyYW1zIG11c3QgYmUgb2JqZWN0J1xuXHQgICAgICB9KTtcblx0ICAgIH1cblx0ICB9LFxuXHRcblx0ICAvKipcblx0ICAgKiBodHRwczovL3l1cXVlLmFudGZpbi1pbmMuY29tL2FwbHVzanMvcHJvamVjdC9hcGx1c19jbG91ZCM2MDM0YzFkYVxuXHQgICAqL1xuXHQgIHVwZGF0ZU5leHRQYWdlUHJvcGVydGllczogZnVuY3Rpb24gKHByb3BlcnRpZXMpIHtcblx0ICAgIGlmICh0eXBlb2YgcHJvcGVydGllcyA9PT0gJ29iamVjdCcpIHtcblx0ICAgICAgYXBsdXMuYXBwZW5kTWV0YUluZm8oJ2FwbHVzLW5leHRwYWdlLXByb3BlcnRpZXMnLCBwcm9wZXJ0aWVzKTsgIFxuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgdXRpbExvZ2dlci5sb2dnZXIoe1xuXHQgICAgICAgIG1zZzogJ3dhcm5pbmc6IHR5cGVvZiB1cGRhdGVOZXh0UGFnZVByb3BlcnRpZXNcXCdzIHBhcmFtcyBtdXN0IGJlIG9iamVjdCdcblx0ICAgICAgfSk7XG5cdCAgICB9XG5cdCAgICAvLyB2YXIgcSA9ICh3aW5kb3cuZ29sZGxvZ19xdWV1ZSB8fCAod2luZG93LmdvbGRsb2dfcXVldWUgPSBbXSkpO1xuXHQgICAgLy8gcS5wdXNoKHtcblx0ICAgIC8vICAgYWN0aW9uOiBhcGx1c1N0YXRpYy5TVUJTQ1JJQkUsXG5cdCAgICAvLyAgIGFyZ3VtZW50czogWydOYXRpdmU0QXBsdXNFeGVjUmVhZHknLCBmdW5jdGlvbihzdGF0dXMpe1xuXHQgICAgLy8gICAgIGlmIChzdGF0dXMgPT09ICdjb21wbGV0ZScpIHtcblx0ICAgIC8vICAgICAgIC8vIOmFjee9rm1ldGFcblx0ICAgIC8vICAgICAgIGlmICh0eXBlb2YgcHJvcGVydGllcyA9PT0gJ29iamVjdCcpIHtcblx0ICAgIC8vICAgICAgICAgd2luZG93LkFwbHVzNFVULnVwZGF0ZU5leHRQYWdlUHJvcGVydGllcyhwcm9wZXJ0aWVzKTtcblx0ICAgIC8vICAgICAgIH0gZWxzZSB7XG5cdCAgICAvLyAgICAgICAgIHV0aWxMb2dnZXIubG9nZ2VyKHtcblx0ICAgIC8vICAgICAgICAgICBtc2c6ICd3YXJuaW5nOiB0eXBlb2YgdXBkYXRlUGFnZVByb3BlcnRpZXNcXCdzIHBhcmFtcyBtdXN0IGJlIG9iamVjdCdcblx0ICAgIC8vICAgICAgICAgfSk7XG5cdCAgICAvLyAgICAgICB9XG5cdCAgICAvLyAgICAgfVxuXHQgICAgLy8gICB9XVxuXHQgICAgLy8gfSk7XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICogZ2V0IG1ldGFJbmZvIGJ5IGtleVxuXHQgICAqIEBwYXJhbSB7U3RyaW5nfVxuXHQgICAqIEByZXR1cm4ge09iamVjdH1cblx0ICAgKi9cblx0ICBnZXRNZXRhSW5mbzogZnVuY3Rpb24oaykge1xuXHQgICAgcmV0dXJuIG1ldGFJbmZvLmdldE1ldGFJbmZvKGspO1xuXHQgIH0sXG5cdFxuXHQgIC8vIOS6i+S7tue7keWumuaOpeWPo++8jOS7juaguOW/g+W6k+aatOmcsuWHuuWOu+S+m2FwbHVzSlPmj5Lku7bkvb/nlKhcblx0ICBvbjogdXRpbEV2ZW50Lm9uLFxuXHQgIC8vIOa3seW6puWFi+mahu+8jOS7juaguOW/g+W6k+aatOmcsuWHuuWOu+S+m2FwbHVzSlPmj5Lku7bkvb/nlKhcblx0ICBjbG9uZURlZXA6IHV0aWxEYXNoLmNsb25lRGVlcCxcblx0ICBzZXRDb29raWU6IGNvb2tpZS5zZXRDb29raWUsXG5cdCAgZ2V0Q29va2llOiBjb29raWUuZ2V0Q29va2llLFxuXHRcblx0ICAvLyBXRULnq6/mmoLkuI3pnIDopoHlrp7njrBcblx0ICBwYWdlQXBwZWFyOiBFTVBUWV9GTixcblx0XG5cdCAgLy8gV0VC56uv5pqC5LiN6ZyA6KaB5a6e546wXG5cdCAgcGFnZURpc2FwcGVhcjogRU1QVFlfRk4sXG5cdFxuXHQgIHVwZGF0ZVBhZ2VVdHBhcmFtOiBFTVBUWV9GTixcblx0XG5cdCAgdXBkYXRlTmV4dFBhZ2VVdHBhcmFtOiBFTVBUWV9GTixcblx0XG5cdCAgLyoqXG5cdCAgICogQHBhcmFtcyB7T2JqZWN0fSBwcm9wZXJ0aWVzXG5cdCAgICogQHJldHVybiB7VW5kZWZpbmVkfVxuXHQgICAqL1xuXHQgIHVwZGF0ZVNlc3Npb25Qcm9wZXJ0aWVzOiBmdW5jdGlvbiAocHJvcGVydGllcykge1xuXHQgICAgaWYgKHR5cGVvZiBwcm9wZXJ0aWVzID09PSAnb2JqZWN0Jykge1xuXHQgICAgICBhcGx1cy5zZXRNZXRhSW5mbygnX3Nlc3Npb25fYXJncycsIHByb3BlcnRpZXMpO1xuXHQgICAgfVxuXHQgIH1cblx0fSk7XG5cdFxuXHQvLyBleHBvcnRzLnJ1biA9IG9wZW5BUEkuaW5pdChydW4pO1xuXG5cbi8qKiovIH0pLFxuLyogMTEwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIHByb2plY3QgLSBmaWxlcGF0aFxuXHQgKiBkZXNjcmlwdGlvblxuXHQgKlxuXHQgKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG5cdCAqXG5cdCAqIEF1dGhvcnM6XG5cdCAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cblx0ICovXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciBlYWNoID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNyk7XG5cdHZhciB1dGlsR29sZGxvZyA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdHZhciBpc0Z1bmN0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMCk7XG5cdHZhciB1dGlsUHVic3ViID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5OSk7XG5cdHZhciB1dGlsTG9nZ2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNik7XG5cdHZhciBhcGx1c1N0YXRpYyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cdHZhciBDb21wb3NlID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTEpO1xuXHR2YXIgcGx1Z2luc0xvYWRlciA9IF9fd2VicGFja19yZXF1aXJlX18oMTEyKTtcblx0XG5cdC8qKlxuXHQgKiBzZW5wdlxuXHQgKiBAcGFyYW0gW09iamVjdF0gY29uZmlnOiB7XG5cdCAqICAgY2hlY2tzdW06IDExMTExMTExLCAgIC8vIOagueaNrnNwbWEsc3BtYuiHquWKqOeUn+aIkOeahOS4gOS4quWtl+espuS4slxuXHQgKiAgIGlzX2F1dG86IHRydWUvZmFsc2XvvIwgLy8g5qCH6K+G5piv5ZCm6Ieq5Yqo5omT54K577yM6buY6K6k5Li6dHJ1Ze+8jOWNlemhteW6lOeUqOmcgOimgeS8oGZhbHNlXG5cdCAqICAgcGFnZV9pZDogMTIzLCAgICAgICAgLy8g5bCG5Lya5L2T546w5Zyoc3BtYuS9jeS4ilxuXHQgKiAgIGdva2V5OiAnJywgICAgICAgICAgIC8vIOebruWJjeW3sue7j+WkseaViFxuXHQgKiAgIHJlZmVycmVyOiAnaHR0cDovL3d3dy50YW9iYW8uY29tJyAgIC8vIOWwhuS8muabv+aNonB26K+35rGC55qEcHJl5Y+C5pWwXG5cdCAqIH0gLy8g5ZCMIGFwbHVzLmxhdW5jaOesrOS6jOS4quWFpeWPguKAnG1hbnVhbOKAnVxuXHQgKlxuXHQgKiBAcGFyYW0gW09iamVjdF0gdXNlcmRhdGEgICAvLyDlkITnp43oh6rlrprkuYlwduWPguaVsFxuXHQgKlxuXHQgKiBAcGFyYW0gW09iamVjdF0gb2JqIC0ge2ZuX2FmdGVyX3B2OiBmbl9hZnRlcl9wdiwgeHh4OiB4eHh9XG5cdCAqXG5cdCAqIHN0ZXAxOiBsb2FkZXIgcGx1Z2lucyAgbWlkZGxld2FyZVxuXHQgKiBzdGVwMjogbG9hZGVyIGRvU2VuZFB2IG1pZGRsZXdhcmVcblx0ICogc3RlcDM6IHJ1biBtaWRkbGV3YXJlc1xuXHQgKi9cblx0XG5cdHZhciBSZWR1Y2VyID0gZnVuY3Rpb24oKSB7XG5cdH07XG5cdFxuXHQvKipcblx0ICogQHBhcmFtcyBPYmplY3QgQ09ORklHIHtcblx0ICogICBjb250ZXh0OiB4eHgsXG5cdCAqICAgcGx1Z2luczogeHh4IFxuXHQgKiB9XG5cdCAqIEBwYXJhbXMgT2JqZWN0IG9wdHMge1xuXHQgKiAgIGNvbmZpZzogY29uZmlnLFxuXHQgKiAgIHVzZXJkYXRhOiB1c2VyZGF0YSxcblx0ICogICBwdWJzdWJUeXBlOiAncHYnIHx8ICdoamxqJyB8fCAncHJlcHYnXG5cdCAqICAgbWlkZGxld2FyZU1lc3NhZ2VLZXk6ICdtd19jaGFuZ2VfcHYnIHx8ICdtd19jaGFuZ2VfaGpsaicgfHwgJ213X2NoYW5nZV9wcmVwdidcblx0ICogICBtZXNzYWdlRm5RdWV1ZTogW2ZuMSwgZm4yIC4uLl1cblx0ICogfVxuXHQgKi9cblx0UmVkdWNlci5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKENPTkZJRywgb3B0cywgY2FsbGJhY2spIHtcblx0ICAvLyAx44CBaW5pdCBwbHVnaW5zXG5cdCAgdmFyIHBsID0gbmV3IHBsdWdpbnNMb2FkZXIoKTtcblx0ICBwbC5pbml0KHtcblx0ICAgIG1pZGRsZXdhcmU6IFtdLFxuXHQgICAgY29uZmlnOiBvcHRzLmNvbmZpZyxcblx0ICAgIHBsdWdpbnM6IENPTkZJRy5wbHVnaW5zXG5cdCAgfSk7XG5cdCAgdmFyIG1pZGRsZXdhcmUgPSBwbC5ydW4oKTtcblx0XG5cdCAgLy8g5Yid5aeL5YyW5LiK5LiL5paH546v5aKD77yMY29udGV4dOWGheeahGRhdGHlsIbkvJrlnKjlkITkuKrmj5Lku7bkuK3ov5vooYzotYvlgLzmiJbogIXkv67mlLnvvIjph43opoHvvIlcblx0ICB2YXIgY29udGV4dCA9IGlzRnVuY3Rpb24oQ09ORklHLmNvbnRleHQpID8gbmV3IENPTkZJRy5jb250ZXh0KCkgOiBDT05GSUcuY29udGV4dDtcblx0ICBjb250ZXh0LnVzZXJkYXRhID0gb3B0cy51c2VyZGF0YTtcblx0ICBjb250ZXh0LmxvZ2dlciA9IHV0aWxMb2dnZXIubG9nZ2VyO1xuXHRcblx0ICB2YXIgYXBwID0ge1xuXHQgICAgY29udGV4dDogY29udGV4dCxcblx0ICAgIHB1YnN1YjogdXRpbEdvbGRsb2cuZ2V0R29sZGxvZ1ZhbCgnYXBsdXNfcHVic3ViJyksXG5cdCAgICBwdWJzdWJUeXBlOiBvcHRzICYmIG9wdHMucHVic3ViVHlwZVxuXHQgIH07XG5cdFxuXHQgIHZhciBjb21wb3NlID0gbmV3IENvbXBvc2UoKTtcblx0ICBjb21wb3NlLmNyZWF0ZShhcHApO1xuXHQgIC8vIOaJp+ihjOS4remXtOS7tlxuXHQgIGNvbXBvc2Uud3JhcChtaWRkbGV3YXJlLCBmdW5jdGlvbigpIHtcblx0ICAgIGFwcC5jb250ZXh0LnN0YXR1cyA9IGFwbHVzU3RhdGljLkNPTVBMRVRFO1xuXHQgICAgaWYgKG9wdHMpIHtcblx0ICAgICAgaWYgKG9wdHMubWlkZGxld2FyZU1lc3NhZ2VLZXkpIHtcblx0ICAgICAgICB1dGlsUHVic3ViLmRvUHViTXNnKFtvcHRzLm1pZGRsZXdhcmVNZXNzYWdlS2V5LCBhcHAuY29udGV4dF0pOyAgXG5cdCAgICAgIH1cblx0ICAgICAgaWYgKG9wdHMubWVzc2FnZUZuUXVldWUpIHtcblx0ICAgICAgICBlYWNoKG9wdHMubWVzc2FnZUZuUXVldWUsIGZ1bmN0aW9uIChmbikge1xuXHQgICAgICAgICAgZm4odXRpbEdvbGRsb2cuZ2V0R2xvYmFsVmFsdWUoYXBsdXNTdGF0aWMuQVBMVVMpLCBDT05GSUcpO1xuXHQgICAgICAgIH0pOyAgXG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIGlmIChpc0Z1bmN0aW9uKGNhbGxiYWNrKSkge1xuXHQgICAgICBjYWxsYmFjayhhcHAuY29udGV4dCk7XG5cdCAgICB9XG5cdCAgfSkoKTtcblx0XG5cdH07XG5cdG1vZHVsZS5leHBvcnRzID0gUmVkdWNlcjtcblxuXG4vKioqLyB9KSxcbi8qIDExMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBhbGlsb2cvcyAtIHNyYy9saWJfdS9jb25maWcvY29tcG9zZS5qc1xuXHQgKiDlh73mlbDpmJ/liJfljIXoo4XlmaggRXhwb3NlIGNvbXBvc2l0b3Jcblx0ICpcblx0ICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuXHQgKlxuXHQgKiBBdXRob3JzOlxuXHQgKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG5cdCAqL1xuXHQndXNlIHN0cmljdCc7XG5cdFxuXHR2YXIgaXNGdW5jdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXHR2YXIgdXRpbEFycmF5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNSk7XG5cdHZhciB1dGlsTG9nZ2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNik7XG5cdFxuXHRmdW5jdGlvbiBjb21wb3NlICgpIHt9O1xuXHRcblx0Y29tcG9zZS5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24ocHJvcHMpIHtcblx0ICAvKipcblx0ICAgKiBjcmVhdGXlrp7pmYXkuIrmmK/lr7luZXfnmoTlsIHoo4XvvJtcblx0ICAgKiBjcmVhdGXov5Tlm57nmoTlrp7kvovlrp7pmYXkuIrlsLHmmK9uZXfmnoTpgKDlh7rnmoTlrp7kvovvvJtcblx0ICAgKiB0aGlz5Y2z5oyH5ZCR6LCD55So5b2T5YmNY3JlYXRl55qE5p6E6YCg5Ye95pWw77ybXG5cdCAgICovXG5cdCAgZm9yICh2YXIgbmFtZSBpbiBwcm9wcykge1xuXHQgICAgaWYgKHR5cGVvZiB0aGlzW25hbWVdID09PSAndW5kZWZpbmVkJykge1xuXHQgICAgICB0aGlzW25hbWVdID0gcHJvcHNbbmFtZV07XG5cdCAgICB9XG5cdCAgfVxuXHQgIHJldHVybiB0aGlzO1xuXHR9O1xuXHRcblx0Y29tcG9zZS5wcm90b3R5cGUuY2FsbGVkTGlzdCA9IFtdO1xuXHRcblx0Y29tcG9zZS5wcm90b3R5cGUuc2V0Q2FsbGVkTGlzdCA9IGZ1bmN0aW9uKGkpIHtcblx0ICBpZiAodXRpbEFycmF5LmluZGV4b2YodGhpcy5jYWxsZWRMaXN0LCBpKSA9PT0gLTEpIHtcblx0ICAgIHRoaXMuY2FsbGVkTGlzdC5wdXNoKGkpO1xuXHQgIH1cblx0fTtcblx0XG5cdGNvbXBvc2UucHJvdG90eXBlLnJlc2V0Q2FsbGVkTGlzdCA9IGZ1bmN0aW9uKCkge1xuXHQgIHRoaXMuY2FsbGVkTGlzdCA9IFtdO1xuXHR9O1xuXHRcblx0Y29tcG9zZS5wcm90b3R5cGUud3JhcCA9IGZ1bmN0aW9uKG13LCBjYWxsYmFjaykge1xuXHQgIHZhciBjb250ZXh0ID0gdGhpcztcblx0ICB2YXIgY3R4ID0gdGhpcy5jb250ZXh0IHx8IHt9O1xuXHQgIHZhciBjb21wb3NlID0gY3R4LmNvbXBvc2UgfHwge307XG5cdCAgdmFyIG1heFRpbWVvdXQgPSBjb21wb3NlLm1heFRpbWVvdXQgfHwgMTAgKiAxMDAwO1xuXHRcblx0ICByZXR1cm4gZnVuY3Rpb24gKHN0YXRlKSB7XG5cdFxuXHQgICAgdmFyIHNpemUgPSBtdy5sZW5ndGg7IC8vIOS4remXtOS7tumYn+WIl+mVv+W6plxuXHQgICAgdmFyIGkgPSAwOyAvLyDkuK3pl7Tku7bntKLlvJVcblx0ICAgIHZhciBqID0gMDsgLy8g5LiA5Liq5qCH6K+G77yMMC3liJ3lp4vnirbmgIHvvIwxLeS4remXtOS7tuWbnuiwg+aJp+ihjOS6hlxuXHQgICAgdmFyIHNsZWVwSGFuZGVyMTtcblx0ICAgIHZhciBydW4gPSBmdW5jdGlvbihpbmRleCwgc3RhdHVzKSB7XG5cdCAgICAgIC8vIGNvbnRleHQucHVic3ViSW5mbyhjb250ZXh0LCBtd1tpXSk7XG5cdCAgICAgIC8vIOS4remXtOS7tumYn+WIl+aJp+ihjOWujOavleWQjui/lOWbnlxuXHQgICAgICBpZiAoaSA9PT0gc2l6ZSkge1xuXHQgICAgICAgIHN0YXRlID0gJ2RvbmUnO1xuXHQgICAgICAgIGNvbnRleHQucmVzZXRDYWxsZWRMaXN0KCk7IC8vIOmHjee9rmNhbGxlZExpc3Tlj5jph49cblx0ICAgICAgICAvLyBzdGF0dXPlpoLmnpznrYnkuo5kb25l77yM6K+05piO5piv5Lit6YCU6YCA5Ye655qE5Lit6Ze05Lu277yM5LiN6ZyA6KaB5omn6KGM5Zue6LCDXG5cdCAgICAgICAgaWYgKGlzRnVuY3Rpb24oY2FsbGJhY2spICYmIHN0YXR1cyAhPT0gc3RhdGUpIHtcblx0ICAgICAgICAgIGNhbGxiYWNrLmNhbGwoY29udGV4dCwgc3RhdGUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBjbGVhclRpbWVvdXQoc2xlZXBIYW5kZXIxKTtcblx0ICAgICAgICByZXR1cm47XG5cdCAgICAgIH1cblx0ICAgICAgLy8gdmFyIGNiX3N0YXRlID0gbnVsbDtcblx0ICAgICAgLy8g5L+d6K+B5q+P5Liq5Lit6Ze05Lu25Y+q5Lya5omn6KGM5LiA5qyhXG5cdCAgICAgIGlmICh1dGlsQXJyYXkuaW5kZXhvZihjb250ZXh0LmNhbGxlZExpc3QsIGkpID09PSAtMSkge1xuXHQgICAgICAgIGNvbnRleHQuc2V0Q2FsbGVkTGlzdChpKTtcblx0ICAgICAgICBpZiAobXdbaV0gJiYgaXNGdW5jdGlvbihtd1tpXVswXSkpIHtcblx0ICAgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgKiBAcGFyYW1zIHtBcnJheX0gbWlkZGxld2FyZVxuXHQgICAgICAgICAgICAgKiBAcGFyYW1zIHtBcnJheX0gbXNnXG5cdCAgICAgICAgICAgICAqL1xuXHQgICAgICAgICAgICBzdGF0ZSA9IG13W2ldWzBdLmNhbGwoY29udGV4dCwgc3RhdGUsIGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICBpKys7XG5cdCAgICAgICAgICAgICAgaiA9IDE7ICAvLyAxLeS4remXtOS7tuWbnuiwg+aJp+ihjOS6hlxuXHQgICAgICAgICAgICAgIHJ1bihpKTtcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICB9IGNhdGNoIChlKSB7XG5cdCAgICAgICAgICAgIHV0aWxMb2dnZXIubG9nZ2VyKHtcblx0ICAgICAgICAgICAgICBtc2c6IGVcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgLy8g54q25oCB5Li6cGF1c2XnrYnlvoUyMDBtc+i9ruivou+8jOeKtuaAgeS4um51bWJlcuexu+Wei+eahOaVsOWAvOetieW+hXN0YXRlbXPova7or6Jcblx0ICAgICAgdmFyIGlzTnVtYmVyID0gdHlwZW9mIHN0YXRlID09PSAnbnVtYmVyJztcblx0ICAgICAgaWYgKHN0YXRlID09PSAncGF1c2UnIHx8IGlzTnVtYmVyKSB7XG5cdCAgICAgICAgaiA9IDA7XG5cdCAgICAgICAgLy8g5pyA5aSn562J5b6F5pe26ZW/XG5cdCAgICAgICAgdmFyIF90aW1lX291dCA9IGlzTnVtYmVyID8gc3RhdGUgOiBtYXhUaW1lb3V0O1xuXHQgICAgICAgIHZhciBfbXdfbmFtZSA9IG13W2ldID8gbXdbaV1bMV0gOiAnJztcblx0ICAgICAgICBzbGVlcEhhbmRlcjEgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICAgaWYgKGogPT09IDApIHtcblx0ICAgICAgICAgICAgdXRpbExvZ2dlci5sb2dnZXIoe1xuXHQgICAgICAgICAgICAgIG1zZzogJ2p1bXAgdGhlIG1pZGRsZXdhcmUgYWJvdXQgJyArIF9td19uYW1lICsgJywgYmVjYXVzZSB3YWl0aW5nIHRpbWVvdXQgbWF4VGltZW91dCA9ICcgKyBfdGltZV9vdXRcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIHN0YXRlID0gbnVsbDtcblx0ICAgICAgICAgICAgaSsrO1xuXHQgICAgICAgICAgICBydW4oaSk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfSwgX3RpbWVfb3V0KTtcblx0ICAgICAgfSBlbHNlIGlmIChzdGF0ZSA9PT0gJ2RvbmUnKSB7XG5cdCAgICAgICAgLy8g54q25oCB5Li6ZG9uZeihqOekuue7k+adn++8jOS4jeeuoeWQjumdoui/mOacieayoeacieS4remXtOS7tumDvee7k+adn1xuXHQgICAgICAgIGkgPSBzaXplO1xuXHQgICAgICAgIHJ1bihpLCBzdGF0ZSk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgLy8g6buY6K6k54q25oCB77yM5Y+q566h5omn6KGM5Lit6Ze05Lu26Zif5YiXXG5cdCAgICAgICAgaSsrO1xuXHQgICAgICAgIHJ1bihpKTtcblx0ICAgICAgfVxuXHQgICAgfTtcblx0ICAgIGlmIChjb250ZXh0LmNhbGxlZExpc3QgJiYgY29udGV4dC5jYWxsZWRMaXN0Lmxlbmd0aCA+IDApIHtcblx0ICAgICAgY29udGV4dC5yZXNldENhbGxlZExpc3QoKTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBydW4oaSk7XG5cdCAgfTtcblx0fTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gY29tcG9zZTtcblxuLyoqKi8gfSksXG4vKiAxMTIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogYWxpbG9nL3MgLSBzcmMvbGliX3UvY29uZmlnL3BsdWdpbnMvcGx1Z2luc0xvYWRlci5qc1xuXHQgKiDmj5Lku7bliqDovb3lmahcblx0ICpcblx0ICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuXHQgKlxuXHQgKiBBdXRob3JzOlxuXHQgKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG5cdCAqL1xuXHQndXNlIHN0cmljdCc7XG5cdFxuXHR2YXIgYXNzaWduID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMik7XG5cdHZhciB1dGlsTG9nZ2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNik7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuXHQgIHJldHVybiB7XG5cdCAgICAvKipcblx0ICAgICAqIEBwYXJhbXMgb3B0cyB7XG5cdCAgICAgKiAgIG1pZGRsZXdhcmU6IFtdLFxuXHQgICAgICogICBwbHVnaW5zOiBbXSxcblx0ICAgICAqICAgY29uZmlnOiB7fVxuXHQgICAgICogfVxuXHQgICAgICovXG5cdCAgICBpbml0OiBmdW5jdGlvbihvcHRzKSB7XG5cdCAgICAgIHRoaXMub3B0cyA9IG9wdHM7XG5cdCAgICAgIGlmIChvcHRzICYmIHR5cGVvZiBvcHRzLm1pZGRsZXdhcmUgPT09ICdvYmplY3QnICYmIG9wdHMubWlkZGxld2FyZS5sZW5ndGggPiAwKSB7XG5cdCAgICAgICAgdGhpcy5taWRkbGV3YXJlID0gb3B0cy5taWRkbGV3YXJlO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHRoaXMubWlkZGxld2FyZSA9IFtdO1xuXHQgICAgICB9XG5cdCAgICAgIHRoaXMucGx1Z2luc19uYW1lID0gW107XG5cdCAgICB9LFxuXHRcblx0ICAgIC8qKlxuXHQgICAgICog5YiG5Y+R6K6i6ZiF5Y+Y5YyWXG5cdCAgICAgKiBAcGFyYW0gbyB7XG5cdCAgICAgKiAgIHB1YnN1Yjogey4uLn0sXG5cdCAgICAgKiAgIGNvbnRleHQ6IHsuLi59XG5cdCAgICAgKiB9LFxuXHQgICAgICogQHBhcmFtIG13IOW9k+WJjeaJp+ihjOeahOS4remXtOS7tlxuXHQgICAgICovXG5cdCAgICBwdWJzdWJJbmZvOiBmdW5jdGlvbihjdHgsIG13KSB7XG5cdCAgICAgIHRyeSB7XG5cdCAgICAgICAgdmFyIHB1YnN1YiA9IGN0eC5wdWJzdWI7XG5cdCAgICAgICAgaWYgKHB1YnN1Yikge1xuXHQgICAgICAgICAgcHVic3ViLnB1Ymxpc2goJ3BsdWdpbnNfY2hhbmdlXycgKyBjdHgucHVic3ViVHlwZSwgbXcpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSBjYXRjaCAoZSkge1xuXHQgICAgICAgIHV0aWxMb2dnZXIubG9nZ2VyKHtcblx0ICAgICAgICAgIG1zZzogZVxuXHQgICAgICAgIH0pO1xuXHQgICAgICB9XG5cdCAgICB9LFxuXHRcblx0ICAgIHJ1bjogZnVuY3Rpb24gKGluZGV4KSB7XG5cdCAgICAgIGlmKCFpbmRleCkgaW5kZXggPSAwO1xuXHQgICAgICB2YXIgX3NlbGYgPSB0aGlzO1xuXHQgICAgICB2YXIgbWlkZGxld2FyZSA9IHRoaXMubWlkZGxld2FyZTtcblx0ICAgICAgdmFyIG9wdHMgPSB0aGlzLm9wdHMgfHwge307XG5cdCAgICAgIHZhciBwbHVnaW5zID0gb3B0cy5wbHVnaW5zO1xuXHQgICAgICBpZiAocGx1Z2lucyAmJiB0eXBlb2YgcGx1Z2lucyA9PT0gJ29iamVjdCcgJiYgcGx1Z2lucy5sZW5ndGggPiAwKSB7XG5cdCAgICAgICAgdmFyIHBsdWdpbiA9IHBsdWdpbnNbaW5kZXhdO1xuXHQgICAgICAgIHRoaXMucGx1Z2luc19uYW1lLnB1c2gocGx1Z2luLm5hbWUpO1xuXHQgICAgICAgIG1pZGRsZXdhcmUucHVzaChbZnVuY3Rpb24oc3RhdGUsIGNiKXtcblx0ICAgICAgICAgIF9zZWxmLnB1YnN1YkluZm8odGhpcywgcGx1Z2luKTtcblx0ICAgICAgICAgIC8vIOiOt+WPluaPkuS7tuaooeWdl+i3r+W+hOW5tuWIneWni+WMllxuXHQgICAgICAgICAgdmFyIG0gPSBuZXcgcGx1Z2luLnBhdGgoKTtcblx0XG5cdCAgICAgICAgICAvLyDkuLroioLnnIHku6PnoIHph4/vvIzpu5jorqTnmoTliJ3lp4vljJbmlrnms5XlnKjliqDovb3lmajlhoXlgZrlhZzlupXlpITnkIbvvIzljbPmj5Lku7blhoXml6Dnibnmrormg4XlhrXml6DpnIDlrp7njrBpbml05pa55rOVXG5cdCAgICAgICAgICBpZiAoIW0uaW5pdCkge1xuXHQgICAgICAgICAgICBtLmluaXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuXHQgICAgICAgICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICAvLyDlsIbkuIrkuIvmlofms6jlhaXliLDmj5Lku7blhoVcblx0ICAgICAgICAgIG0uaW5pdCh7XG5cdCAgICAgICAgICAgIGNvbnRleHQ6IHRoaXMuY29udGV4dCxcblx0ICAgICAgICAgICAgY29uZmlnOiBhc3NpZ24ocGx1Z2luLmNvbmZpZyB8fCB7fSwgb3B0cy5jb25maWcpXG5cdCAgICAgICAgICB9KTtcblx0ICAgICAgICAgIHJldHVybiBtLnJ1bihzdGF0ZSwgZnVuY3Rpb24gKG1zZykge1xuXHQgICAgICAgICAgICAvLyDov5nph4zkvb/nlKgx5q+r56eS5bu26L+f5omn6KGM77yM6Ziy5q2i5Lit6Ze05Lu25Li75L2T5YaF55qEY2FsbGJhY2vlhYjmiafooYzvvIzlr7zoh7TmoYbmnrbmi7/kuI3liLDkuK3pl7Tku7ZyZXR1cm7nmoTnrYnlvoXml7bplb/vvIzku47ogIzlr7zoh7Tnm5HmjqflvILluLhcblx0ICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAgY2IocGx1Z2luLCBtc2cpO1xuXHQgICAgICAgICAgICB9LCAxKTtcblx0ICAgICAgICAgIH0pO1xuXHQgICAgICAgIH0sIHBsdWdpbi5uYW1lXSk7XG5cdFxuXHQgICAgICAgIGluZGV4Kys7XG5cdCAgICAgICAgaWYocGx1Z2luc1tpbmRleF0pe1xuXHQgICAgICAgICAgcmV0dXJuIHRoaXMucnVuKGluZGV4KTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIG1pZGRsZXdhcmU7XG5cdCAgICB9XG5cdCAgfTtcblx0fTtcblxuLyoqKi8gfSksXG4vKiAxMTMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQvKipcblx0ICogYWxpbG9nL3Mvc3JjL2FwbHVzLmpzXG5cdCAqIHJlcXVlc3Rcblx0ICpcblx0ICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuXHQgKlxuXHQgKiBBdXRob3JzOlxuXHQgKiAgIGppemhhLnd5akBibG9nIGh0dHA6Ly9vbGRqLm5ldFxuXHQgKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG5cdCAqL1xuXHQndXNlIHN0cmljdCc7XG5cdFxuXHQvLyDlj5HpgIHlm77niYdHRVTor7fmsYJcblx0ZXhwb3J0cy5zZW5kSW1nID0gZnVuY3Rpb24oc3JjLCB0aW1lb3V0KSB7XG5cdCAgdmFyIHdpbiA9IHdpbmRvdyB8fCB7fTtcblx0ICB2YXIgaW1nID0gbmV3IEltYWdlKCk7XG5cdCAgdmFyIHJuZF9pZCA9IFwiX2ltZ19cIiArIE1hdGgucmFuZG9tKCk7XG5cdFxuXHQgIC8vIOWcqOWFqOWxgOWPmOmHj+S4reW8leeUqCBpbWfvvIzpmLLmraIgaW1nIOiiq+Weg+WcvuWbnuaUtuacuuWItui/h+aXqeWbnuaUtumAoOaIkOivt+axguWPkemAgeWksei0pVxuXHQgIC8vIOWPguiAg++8mmh0dHA6Ly9vbGRqLm5ldC9hcnRpY2xlL29uZS10aGluZy10by1ub3RpY2UtYWJvdXQtbmV3LWltYWdlL1xuXHQgIHdpbltybmRfaWRdID0gaW1nO1xuXHRcblx0ICB2YXIgcmVtb3ZlUm5kSWQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICBpZiAod2luW3JuZF9pZF0pIHtcblx0ICAgICAgdHJ5IHtcblx0ICAgICAgICBkZWxldGUgd2luW3JuZF9pZF07XG5cdCAgICAgIH0gY2F0Y2ggKGUpIHtcblx0ICAgICAgICB3aW5bcm5kX2lkXSA9IHVuZGVmaW5lZDtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH07XG5cdFxuXHQgIGltZy5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICByZW1vdmVSbmRJZCgpO1xuXHQgIH07XG5cdCAgaW1nLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICByZW1vdmVSbmRJZCgpO1xuXHQgIH07XG5cdCAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuXHQgICAgaWYgKHdpbmRvd1tybmRfaWRdKSB7XG5cdCAgICAgIHdpbmRvd1tybmRfaWRdLnNyYyA9ICcnO1xuXHQgICAgICByZW1vdmVSbmRJZCgpO1xuXHQgICAgfVxuXHQgIH0sIHRpbWVvdXQgfHwgNTAwMCk7XG5cdFxuXHQgIGltZy5zcmMgPSBzcmM7XG5cdCAgaW1nID0gbnVsbDsgLy8g5Yig6Zmk5Li05pe25Y+Y6YeP55qE5byV55SoXG5cdCAgcmV0dXJuIHNyYztcblx0fTtcblx0XG5cdC8vIOWPkemAgXNlbmRCZWFjb24gcG9zdOivt+axglxuXHRleHBvcnRzLnBvc3REYXRhID0gZnVuY3Rpb24gKHVybCwgZGF0YSkge1xuXHQgIC8vIGZvciAodmFyIGsgaW4gZGF0YSkge1xuXHQgIC8vICAgaWYgKGsgIT09ICdjbmEnKSB7XG5cdCAgLy8gICAgIGRhdGFba10gPSBlbmNvZGVVUklDb21wb25lbnQoZGF0YVtrXSk7XG5cdCAgLy8gICB9XG5cdCAgLy8gfVxuXHQgIG5hdmlnYXRvci5zZW5kQmVhY29uKHVybCwgZGF0YSk7XG5cdCAgcmV0dXJuIHVybDtcblx0fTtcblxuLyoqKi8gfSksXG4vKiAxMTQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogcHJvamVjdCAtIGZpbGVwYXRoXG5cdCAqIHB2aWRcblx0ICpcblx0ICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuXHQgKlxuXHQgKiBBdXRob3JzOlxuXHQgKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG5cdCAqL1xuXHQndXNlIHN0cmljdCc7XG5cdFxuXHR2YXIgdXRpbFB1YnN1YiA9IF9fd2VicGFja19yZXF1aXJlX18oOTkpO1xuXHR2YXIgdXRpbEdvbGRsb2cgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHR2YXIgbG9nSWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg1KTtcblx0XG5cdC8qKlxuXHQgKiDliKTmlq3mmK/lkKbnpoHnlKjkuoZwdmlkXG5cdCAqIEByZXR1cm4gW0Jvb2xlYW5dXG5cdCAqL1xuXHRmdW5jdGlvbiBpc0Rpc2FibGVQdmlkICgpIHtcblx0ICB2YXIgYXBsdXMgPSB1dGlsR29sZGxvZy5nZXRHbG9iYWxWYWx1ZSgnYXBsdXMnKTtcblx0ICB2YXIgZGlzYWJsZVB2aWQ7XG5cdCAgdHJ5IHtcblx0ICAgIHZhciBtZXRhX3ZhbHVlID0gYXBsdXMuZ2V0TWV0YUluZm8oJ2FwbHVzLWRpc2FibGUtcHZpZCcpICsgJyc7XG5cdCAgICBpZiAobWV0YV92YWx1ZSA9PT0gJ3RydWUnKSB7XG5cdCAgICAgIGRpc2FibGVQdmlkID0gdHJ1ZTtcblx0ICAgIH0gZWxzZSBpZiAobWV0YV92YWx1ZSA9PT0gJ2ZhbHNlJykge1xuXHQgICAgICBkaXNhYmxlUHZpZCA9IGZhbHNlO1xuXHQgICAgfVxuXHQgIH0gY2F0Y2goZXJyKXtcblx0ICB9XG5cdCAgcmV0dXJuIGRpc2FibGVQdmlkO1xuXHR9O1xuXHRleHBvcnRzLmlzRGlzYWJsZVB2aWQgPSBpc0Rpc2FibGVQdmlkO1xuXHRcblx0LyoqXG5cdCAqIOWkhOeQhumhtemdouS4iueahCBwdiBpZFxuXHQgKi9cblx0ZXhwb3J0cy5tYWtlUFZJZCA9IGZ1bmN0aW9uICgpIHtcblx0ICB2YXIgYXBsdXMgPSB1dGlsR29sZGxvZy5nZXRHbG9iYWxWYWx1ZSgnYXBsdXMnKTtcblx0ICB2YXIgcHJlX3B2aWQgPSBhcGx1cy5wdmlkO1xuXHQgIHZhciB1cmwgPSBsb2NhdGlvbiAmJiBsb2NhdGlvbi5ocmVmO1xuXHQgIHZhciB0aXRsZSA9IGRvY3VtZW50ICYmIGRvY3VtZW50LnRpdGxlO1xuXHQgIGFwbHVzLnB2aWQgPSBsb2dJZC5nZXRMb2dJZCh1cmwsIHRpdGxlKTtcblx0ICB2YXIgbXNncyA9IFsncHZpZENoYW5nZScsIHtcblx0ICAgIHByZV9wdmlkOiBwcmVfcHZpZCxcblx0ICAgIHB2aWQ6IGFwbHVzLnB2aWRcblx0ICB9XTtcblx0ICB1dGlsUHVic3ViLmRvUHViTXNnKG1zZ3MpO1xuXHQgIHV0aWxQdWJzdWIuZG9DYWNoZVB1YnMobXNncyk7XG5cdCAgcmV0dXJuIGlzRGlzYWJsZVB2aWQoKSA/ICcnIDogYXBsdXMucHZpZDtcblx0fTtcblx0XG5cdGV4cG9ydHMuZ2V0UHZJZCA9IGZ1bmN0aW9uICgpIHtcblx0ICB2YXIgYXBsdXMgPSB1dGlsR29sZGxvZy5nZXRHbG9iYWxWYWx1ZSgnYXBsdXMnKTtcblx0ICByZXR1cm4gaXNEaXNhYmxlUHZpZCgpID8gJycgOiBhcGx1cy5wdmlkO1xuXHR9O1xuXG5cbi8qKiovIH0pLFxuLyogMTE1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIGFsaWxvZy9zIC0gc3JjL2xpYl91L2NvbmZpZy9pbml0L2luaXRMb2FkX2Jhc2UuanNcblx0ICog5Yid5aeL5YyW5Z+656GA5qih5Z2X77yM5LiN6IO955u05o6l5L2/55So77yM6ZyA6KaB6YCa6L+HaW5pdExvYWRfcGMuanPmiJZpbml0TG9hZF93YXAuanPnrYnlhbfkvZPnmoTlnLrmma/mqKHlnZfosIPnlKhcblx0ICpcblx0ICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuXHQgKlxuXHQgKiBBdXRob3JzOlxuXHQgKiAgIEBhdXRob3Igaml6aGEud3lqIEBibG9nIGh0dHA6Ly9vbGRqLm5ldFxuXHQgKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG5cdCAqL1xuXHQndXNlIHN0cmljdCc7XG5cdFxuXHR2YXIgYWN0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTYpO1xuXHR2YXIgdXRpbEdvbGRsb2cgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG5cdCAgcmV0dXJuIHtcblx0ICAgIHJ1bjogIGZ1bmN0aW9uICgpIHtcblx0ICAgICAgdmFyIGFwbHVzX2NvbmZpZyA9IHRoaXMub3B0aW9ucy5jb250ZXh0LmFwbHVzX2NvbmZpZztcblx0ICAgICAgdmFyIEFQTFVTX1FVRVVFID0gYXBsdXNfY29uZmlnLmdsb2JhbENvbmZpZy5BUExVU19RVUVVRTtcblx0XG5cdCAgICAgIHZhciBjb250ZXh0ID0gdXRpbEdvbGRsb2cuZ2V0Q29udGV4dCgpO1xuXHQgICAgICB2YXIgcXVlID0gY29udGV4dFtBUExVU19RVUVVRV0gfHwgW107XG5cdCAgICAgIHZhciBycyA9IGFjdGlvbi5nZXRGb3JtYXRRdWV1ZShxdWUsICdtZXRhUXVldWUnKTtcblx0ICAgICAgY29udGV4dFtBUExVU19RVUVVRV0gPSBycy5xdWV1ZTtcblx0ICAgICAgYWN0aW9uLnByb2Nlc3NHb2xkbG9nUXVldWUocnMuZm9ybWF0UXVldWUsIHRoaXMub3B0aW9ucy5jb25maWcpO1xuXHQgICAgfVxuXHQgIH07XG5cdH07XG5cblxuLyoqKi8gfSksXG4vKiAxMTYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcblx0dmFyIHV0aWxHb2xkbG9nID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0dmFyIHV0aWxBcnJheSA9IF9fd2VicGFja19yZXF1aXJlX18oMzUpO1xuXHR2YXIgaXNGdW5jdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXHR2YXIgdXRpbExvZ2dlciA9IF9fd2VicGFja19yZXF1aXJlX18oMjYpO1xuXHR2YXIgYXBsdXNTdGF0aWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXHRcblx0LyoqXG5cdCAqIEBwYXJhbXMge0FycmF5fSBRVUVVRVxuXHQgKiBAcGFyYW1zIHtPYmplY3R9IG9wdHMge1xuXHQgKiAgIGlzT3BlbkFwaTogdHJ1ZSB8fCBmYWxzZSBcblx0ICogfVxuXHQgKi9cblx0dmFyIHByb2Nlc3NHb2xkbG9nUXVldWUgPSBmdW5jdGlvbiAoUVVFVUUsIG9wdHMpIHtcblx0ICBmdW5jdGlvbiBmKCkge1xuXHQgICAgaWYgKCFRVUVVRSB8fCAhdXRpbEFycmF5LmlzQXJyYXkoUVVFVUUpIHx8ICFRVUVVRS5sZW5ndGgpIHJldHVybjtcblx0ICAgIC8vIOaOkuW6j1xuXHQgICAgdmFyIHF1ZSA9IGdldEZvcm1hdFF1ZXVlKFFVRVVFKS5xdWV1ZTtcblx0ICAgIHZhciB0YXNrID0ge307XG5cdCAgICB2YXIgZGVsYXlUYXNrcyA9IFtdO1xuXHQgICAgd2hpbGUgKHRhc2sgPSBxdWUuc2hpZnQoKSkgeyAvLyDkvp3mrKHmiafooYwgd2luZG93LmFwbHVzX3F1ZXVlIOS4reeahOS7u+WKoVxuXHQgICAgICBwcm9jZXNzVGFzayh0YXNrLCBvcHRzLCBmdW5jdGlvbiAodCkge1xuXHQgICAgICAgIGRlbGF5VGFza3MucHVzaCh0KTtcblx0ICAgICAgfSk7XG5cdCAgICB9XG5cdCAgICBpZiAoZGVsYXlUYXNrcy5sZW5ndGggPiAwKSB7XG5cdCAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHdoaWxlICh0YXNrID0gZGVsYXlUYXNrcy5zaGlmdCgpKSB7XG5cdCAgICAgICAgICBwcm9jZXNzVGFzayh0YXNrLCBvcHRzKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0sIDEwMCk7XG5cdCAgICB9XG5cdCAgfTtcblx0ICB0cnkge1xuXHQgICAgZigpO1xuXHQgIH0gY2F0Y2goZSkge1xuXHQgICAgdXRpbExvZ2dlci5sb2dnZXIoe1xuXHQgICAgICBtc2c6IGVcblx0ICAgIH0pO1xuXHQgIH1cblx0fTtcblx0ZXhwb3J0cy5wcm9jZXNzR29sZGxvZ1F1ZXVlID0gcHJvY2Vzc0dvbGRsb2dRdWV1ZTtcblx0XG5cdGZ1bmN0aW9uIGdldE1ldGFJbmZvKCkge1xuXHQgIHZhciBfJCA9IHV0aWxHb2xkbG9nLmdldEdvbGRsb2dWYWwoJ18kJykgfHwge307XG5cdCAgdmFyIG1ldGFfaW5mbyA9IF8kLm1ldGFfaW5mbzsgLy8gfHwgbWV0YUluZm8uZ2V0SW5mbygpO1xuXHQgIHJldHVybiBtZXRhX2luZm87XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGdldEFwbHVzSG9sZFR5cGUgKCkge1xuXHQgIHZhciBtZXRhX2luZm8gPSBnZXRNZXRhSW5mbygpIHx8IHt9O1xuXHQgIHZhciB1YWlkID0gbWV0YV9pbmZvLnVhaWQ7XG5cdCAgaWYgKHVhaWQgJiYgIW1ldGFfaW5mby5fYW5vbnlfaWQpIHtcblx0ICAgIHJldHVybiAnQkxPQ0snO1xuXHQgIH1cblx0ICByZXR1cm4gbWV0YV9pbmZvWydfaG9sZCddIHx8IG1ldGFfaW5mb1snYXBsdXMtd2FpdGluZyddO1xuXHR9XG5cdFxuXHR2YXIgQVBMVVNfSE9MRF9VU0VSSURfUVVFVUUgPSBbXTtcblx0dmFyIEFQTFVTX0hPTERfQU5PTllfUVVFVUUgPSBbXTtcblx0dmFyIEFQTFVTX0hPTERfUVVFVUUgPSBbXTtcblx0XG5cdGZ1bmN0aW9uIGZpbHRlclRhc2sgKHRhc2spIHtcblx0ICB2YXIgaG9sZFR5cGUgPSBnZXRBcGx1c0hvbGRUeXBlKCk7XG5cdCAgLy8gY29uc29sZS5sb2coJ2hvbGRUeXBlID09PSAnLCBob2xkVHlwZSk7XG5cdCAgdmFyIG1ldGFfaW5mbyA9IGdldE1ldGFJbmZvKCkgfHwge307XG5cdCAgdmFyIGZsYWcgPSB0cnVlO1xuXHRcblx0ICAvLyAwOiBcIl9ob2xkXCJcblx0ICAvLyAxOiBcIlNUQVJUXCJcblx0ICB2YXIgYXJncyA9IHRhc2suYXJndW1lbnRzIHx8IFtdO1xuXHQgIHZhciBtZXRhS2V5ID0gYXJnc1swXTtcblx0ICB2YXIgbWV0YVZhbHVlID0gYXJnc1sxXTtcblx0ICB2YXIgU1RBUlQgPSAnU1RBUlQnO1xuXHQgIGlmIChtZXRhS2V5ID09PSAnX2hvbGQnICYmIG1ldGFWYWx1ZSA9PT0gU1RBUlQpIHtcblx0ICAgIHJldHVybiBTVEFSVDtcblx0ICB9XG5cdCAgaWYgKG1ldGFLZXkgPT09ICdfYW5vbnlfaWQnICYmIG1ldGFWYWx1ZSkge1xuXHQgICAgcmV0dXJuIFNUQVJUO1xuXHQgIH1cblx0ICBpZiAodGFzayAmJiAvc2VuZFBWfHJlY29yZHxzZXRQYWdlU1BNfHNldE1ldGFJbmZvfGFwcGVuZE1ldGFJbmZvJC8udGVzdCh0YXNrLmFjdGlvbikpIHtcblx0ICAgIHN3aXRjaCAoaG9sZFR5cGUpIHtcblx0ICAgIGNhc2UgJ0JMT0NLJzpcblx0ICAgICAgaWYgKCFtZXRhX2luZm9baG9sZFR5cGVdKSB7XG5cdCAgICAgICAgQVBMVVNfSE9MRF9RVUVVRS5wdXNoKHRhc2spO1xuXHQgICAgICAgIGZsYWcgPSBmYWxzZTtcblx0ICAgICAgfVxuXHQgICAgICBicmVhaztcblx0ICAgIGRlZmF1bHQ6XG5cdCAgICAgIGJyZWFrO1xuXHQgICAgfVxuXHQgIH1cblx0ICByZXR1cm4gZmxhZztcblx0fVxuXHRcblx0XG5cdC8vIHZhciBwcm9jZXNzZWQgPSBmYWxzZTtcblx0ZnVuY3Rpb24gcHJvY2Vzc0hvbGRHb2xkbG9nUXVldWUgKG9wdHMpIHtcblx0ICAvLyBpZiAoIXByb2Nlc3NlZCkge1xuXHQgIC8vICAgcHJvY2Vzc2VkID0gdHJ1ZTtcblx0ICBwcm9jZXNzR29sZGxvZ1F1ZXVlKEFQTFVTX0hPTERfVVNFUklEX1FVRVVFLCBvcHRzKTtcblx0ICBwcm9jZXNzR29sZGxvZ1F1ZXVlKEFQTFVTX0hPTERfQU5PTllfUVVFVUUsIG9wdHMpO1xuXHQgIHByb2Nlc3NHb2xkbG9nUXVldWUoQVBMVVNfSE9MRF9RVUVVRSwgb3B0cyk7ICBcblx0ICAvLyB9XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBAcGFyYW1zIHtPYmplY3R9IHF1ZXVlTmFtZTogYXBsdXNfcXVldWUgfHwgZ29sZGxvZ19xdWV1ZVxuXHQgKiBAcGFyYW1zIHtPYmplY3R9IG9wdHMge1xuXHQgKiAgIGlzT3BlbkFwaTogdHJ1ZSB8fCBmYWxzZSBcblx0ICogfVxuXHQgKi9cblx0ZXhwb3J0cy5zdWJzY3JpYmVBbmRQcm9jZXNzUXVldWUgPSBmdW5jdGlvbiAocXVldWVOYW1lLCBvcHRzKSB7XG5cdCAgdmFyIHF1ZSA9IHV0aWxHb2xkbG9nLmdldEdsb2JhbFZhbHVlKHF1ZXVlTmFtZSk7XG5cdCAgcXVlLnB1c2goe1xuXHQgICAgYWN0aW9uOiBhcGx1c1N0YXRpYy5TVUJTQ1JJQkUsXG5cdCAgICBhcmd1bWVudHM6IFthcGx1c1N0YXRpYy5TRVRfTUVUQV9JTkZPLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuXHQgICAgICBpZiAoa2V5ID09PSBhcGx1c1N0YXRpYy5fVVNFUl9JRCAmJiB2YWx1ZSkge1xuXHQgICAgICAgIHByb2Nlc3NHb2xkbG9nUXVldWUoQVBMVVNfSE9MRF9VU0VSSURfUVVFVUUsIG9wdHMpO1xuXHQgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gYXBsdXNTdGF0aWMuX0FOT05ZX0lEICYmIHZhbHVlKSB7XG5cdCAgICAgICAgcHJvY2Vzc0dvbGRsb2dRdWV1ZShBUExVU19IT0xEX0FOT05ZX1FVRVVFLCBvcHRzKTtcblx0ICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdfaG9sZCcgJiYgdmFsdWUgPT09ICdTVEFSVCcpIHtcblx0ICAgICAgICBwcm9jZXNzSG9sZEdvbGRsb2dRdWV1ZShvcHRzKTtcblx0ICAgICAgfVxuXHQgICAgfV1cblx0ICB9KTtcblx0fTtcblx0XG5cdGZ1bmN0aW9uIGdldE1ldGhvZE5hbWUgKGtleSwgaXNPcGVuQXBpKSB7XG5cdCAgaWYgKGlzT3BlbkFwaSAmJiBhcGx1c1N0YXRpYy5vcGVuQVBJcy5pbmRleE9mKGtleSkgPiAtMSkge1xuXHQgICAga2V5ID0gJ18nICsga2V5O1xuXHQgIH1cblx0ICByZXR1cm4ga2V5O1xuXHR9XG5cdFxuXHQvKipcblx0ICogQHBhcmFtcyB7T2JqZWN0fSB0YXNrXG5cdCAqIEBwYXJhbXMge09iamVjdH0gb3B0cyB7XG5cdCAqICAgaXNPcGVuQXBpOiB0cnVlIHx8IGZhbHNlIFxuXHQgKiB9XG5cdCAqL1xuXHR2YXIgcHJvY2Vzc1Rhc2sgPSBmdW5jdGlvbih0YXNrLCBvcHRzLCBjYWxsYmFjaykge1xuXHQgIHZhciBpc09wZW5BcGkgPSAhIW9wdHMuaXNPcGVuQXBpO1xuXHQgIHZhciBhY3Rpb24gPSB0YXNrID8gdGFzay5hY3Rpb24gOiAnJztcblx0ICB2YXIgYXJncyA9IHRhc2sgPyB0YXNrLmFyZ3VtZW50cyA6ICcnO1xuXHRcblx0ICB2YXIgcmVzdWx0ID0gZmlsdGVyVGFzayh0YXNrKTtcblx0ICBpZiAoIXJlc3VsdCkge1xuXHQgICAgcmV0dXJuO1xuXHQgIH1cblx0ICB2YXIgY29udGV4dCA9IHV0aWxHb2xkbG9nLmdldENvbnRleHQoKTtcblx0ICB0cnkgeyAvLyDnoa7kv53mn5DkuKrku7vliqHmiafooYzlpLHotKXkuI3kvJrlvbHlk43lhbblroPku7vliqFcblx0ICAgIGlmIChhY3Rpb24gJiYgYXJncyAmJiB1dGlsQXJyYXkuaXNBcnJheShhcmdzKSkge1xuXHQgICAgICB2YXIgYSA9IGFjdGlvbi5zcGxpdCgnLicpO1xuXHQgICAgICB2YXIgb2JqID0gY29udGV4dDtcblx0ICAgICAgdmFyIF9mbiA9IGNvbnRleHQ7XG5cdCAgICAgIHZhciBtZXRob2ROYW1lO1xuXHQgICAgICBpZiAoYS5sZW5ndGggPT09IDMpIHtcblx0ICAgICAgICBvYmogPSBjb250ZXh0W2FbMF1dW2FbMV1dIHx8IHt9O1xuXHQgICAgICAgIG1ldGhvZE5hbWUgPSBnZXRNZXRob2ROYW1lKGFbMl0sIGlzT3BlbkFwaSk7XG5cdCAgICAgICAgX2ZuID0gb2JqW21ldGhvZE5hbWVdID8gb2JqW21ldGhvZE5hbWVdIDogJyc7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgd2hpbGUgKGEubGVuZ3RoKSB7XG5cdCAgICAgICAgICBtZXRob2ROYW1lID0gZ2V0TWV0aG9kTmFtZShhLnNoaWZ0KCksIGlzT3BlbkFwaSk7XG5cdCAgICAgICAgICBfZm4gPSBvYmogPSBvYmpbbWV0aG9kTmFtZV07XG5cdCAgICAgICAgICBpZiAoIW9iaikgeyAvLyDpnZ7ms5UgYWN0aW9uXG5cdCAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGNhbGxiYWNrKSkge1xuXHQgICAgICAgICAgICAgIGNhbGxiYWNrKHRhc2spO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKGlzRnVuY3Rpb24oX2ZuKSkge1xuXHQgICAgICAgIF9mbi5hcHBseShvYmosIGFyZ3MpO1xuXHQgICAgICB9XG5cdCAgICAgIGlmIChyZXN1bHQgPT09ICdTVEFSVCcpIHtcblx0ICAgICAgICBwcm9jZXNzSG9sZEdvbGRsb2dRdWV1ZShvcHRzKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0gY2F0Y2goZSkge1xuXHQgICAgdXRpbExvZ2dlci5sb2dnZXIoe1xuXHQgICAgICBtc2c6IGVcblx0ICAgIH0pO1xuXHQgIH1cblx0fTtcblx0ZXhwb3J0cy5wcm9jZXNzVGFzayA9IHByb2Nlc3NUYXNrO1xuXHRcblx0dmFyIGdldEZvcm1hdFF1ZXVlID0gZnVuY3Rpb24gKHF1ZXVlLCB0eXBlKSB7XG5cdCAgdmFyIHF1ZXVlTWFwID0ge1xuXHQgICAgc3Vic2NyaWJlTXdDaGFuZ2VRdWV1ZTogW10sXG5cdCAgICBzdWJzY3JpYmVNZXRhUXVldWU6IFtdLFxuXHQgICAgc3Vic2NyaWJlUXVldWU6IFtdLFxuXHQgICAgbWV0YVF1ZXVlOiBbXSxcblx0ICAgIG90aGVyc1F1ZXVlOiBbXVxuXHQgIH07XG5cdFxuXHQgIHZhciBxID0gW107XG5cdCAgdmFyIHRhc2sgPSB7fTtcblx0ICB3aGlsZSAodGFzayA9IHF1ZXVlLnNoaWZ0KCkpIHsgLy8g5L6d5qyh5omn6KGMIHdpbmRvdy5hcGx1c19xdWV1ZSDkuK3nmoTku7vliqFcblx0ICAgIHRyeSB7XG5cdCAgICAgIHZhciBhYyA9IHRhc2suYWN0aW9uO1xuXHQgICAgICB2YXIga2V5ID0gdGFzay5hcmd1bWVudHNbMF07XG5cdCAgICAgIGlmICgvc3Vic2NyaWJlLy50ZXN0KGFjKSkge1xuXHQgICAgICAgIGlmIChrZXkgPT09ICdzZXRNZXRhSW5mbycpIHtcblx0ICAgICAgICAgIHF1ZXVlTWFwLnN1YnNjcmliZU1ldGFRdWV1ZS5wdXNoKHRhc2spO1xuXHQgICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSBhcGx1c1N0YXRpYy5NV19DSEFOR0VfUFYgfHwga2V5ID09PSBhcGx1c1N0YXRpYy5NV19DSEFOR0VfSEpMSikge1xuXHQgICAgICAgICAgcXVldWVNYXAuc3Vic2NyaWJlTXdDaGFuZ2VRdWV1ZS5wdXNoKHRhc2spO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBxdWV1ZU1hcC5zdWJzY3JpYmVRdWV1ZS5wdXNoKHRhc2spO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSBlbHNlIGlmICgvTWV0YUluZm8vLnRlc3QoYWMpKSB7XG5cdCAgICAgICAgcXVldWVNYXAubWV0YVF1ZXVlLnB1c2godGFzayk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgcXVldWVNYXAub3RoZXJzUXVldWUucHVzaCh0YXNrKTtcblx0ICAgICAgfVxuXHQgICAgfSBjYXRjaCAoZSkge1xuXHQgICAgICB1dGlsTG9nZ2VyLmxvZ2dlcih7XG5cdCAgICAgICAgbXNnOiBlXG5cdCAgICAgIH0pO1xuXHQgICAgICBxdWV1ZU1hcC5vdGhlcnNRdWV1ZS5wdXNoKHRhc2spO1xuXHQgICAgfVxuXHQgIH1cblx0ICB2YXIgZm9ybWF0UXVldWU7XG5cdCAgaWYgKHR5cGUgJiYgcXVldWVNYXBbdHlwZV0pIHtcblx0ICAgIGZvcm1hdFF1ZXVlID0gcXVldWVNYXBbdHlwZV07XG5cdCAgICBxdWV1ZU1hcFt0eXBlXSA9IFtdO1xuXHQgIH1cblx0ICBxID0gcXVldWVNYXAuc3Vic2NyaWJlTXdDaGFuZ2VRdWV1ZS5jb25jYXQocXVldWVNYXAubWV0YVF1ZXVlKTtcblx0ICBxID0gcS5jb25jYXQocXVldWVNYXAuc3Vic2NyaWJlUXVldWUpO1xuXHQgIHEgPSBxLmNvbmNhdChxdWV1ZU1hcC5zdWJzY3JpYmVNZXRhUXVldWUsIHF1ZXVlTWFwLm90aGVyc1F1ZXVlKTtcblx0ICByZXR1cm4ge1xuXHQgICAgcXVldWU6IHEsXG5cdCAgICBmb3JtYXRRdWV1ZTogZm9ybWF0UXVldWVcblx0ICB9O1xuXHR9O1xuXHRleHBvcnRzLmdldEZvcm1hdFF1ZXVlID0gZ2V0Rm9ybWF0UXVldWU7XG5cblxuLyoqKi8gfSksXG4vKiAxMTcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogcHJvamVjdCAtIGZpbGVwYXRoXG5cdCAqIGRlc2NyaXB0aW9uXG5cdCAqXG5cdCAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cblx0ICpcblx0ICogQXV0aG9yczpcblx0ICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuXHQgKi9cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIHV0aWxEYXRhID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMyk7XG5cdHZhciB1dGlsRG9tID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNik7XG5cdHZhciB1dGlsRXRhZyA9IF9fd2VicGFja19yZXF1aXJlX18oODApO1xuXHR2YXIgdXRpbFN0b3JlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNSk7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuXHQgIHJldHVybiB7XG5cdCAgICAvKipcblx0ICAgICAqIHB25Y+R6YCB5Yiw5ZOq6YeM5Y67XG5cdCAgICAgKiDov5Tlm55cImRvbmVcIue7iOatouS4remXtOS7tuaJp+ihjFxuXHQgICAgICogQHBhcmFtIFtTdHJpbmddIHN0YXRlIOeKtuaAgVxuXHQgICAgICogQHBhcmFtIFtGdW5jdGlvbl0gY2IgIOWbnuiwg1xuXHQgICAgICogQHJldHVybiBcImRvbmVcIiB8IHVuZGVmaW5lZFxuXHQgICAgICovXG5cdCAgICBydW46IGZ1bmN0aW9uKCkge1xuXHQgICAgICB2YXIgX3NlbGYgPSB0aGlzO1xuXHQgICAgICB2YXIgYXBsdXNfY29uZmlnID0gdGhpcy5vcHRpb25zLmNvbnRleHQuYXBsdXNfY29uZmlnO1xuXHQgICAgICBpZiAodXRpbFN0b3JlLnRlc3QoKSkge1xuXHQgICAgICAgIHZhciBfY25hID0gdXRpbERhdGEuZ2V0THNDbmEoYXBsdXNfY29uZmlnLmdsb2JhbENvbmZpZy5FVEFHX1NUT1JBR0VfS0VZLCBfc2VsZi50b2RheSk7XG5cdCAgICAgICAgaWYgKCFfY25hKSB7XG5cdCAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG5cdCAgICAgICAgICAgIHZhciBhcGx1c19yaG9zdF92ID0gYXBsdXMuXyQubWV0YV9pbmZvWydhcGx1cy1yaG9zdC12J107XG5cdCAgICAgICAgICAgIGlmIChhcGx1c19yaG9zdF92KSB7XG5cdCAgICAgICAgICAgICAgX3NlbGYub3B0aW9ucy5jb250ZXh0LmV0YWcuZWdVcmwgPSBhcGx1c19yaG9zdF92ICsgJy9lZy5qcyc7XG5cdCAgICAgICAgICAgICAgdmFyIGVnVXJsID0gdXRpbEV0YWcuZ2V0VXJsKF9zZWxmLm9wdGlvbnMuY29udGV4dC5ldGFnIHx8IHt9KTtcblx0ICAgICAgICAgICAgICB1dGlsRG9tLmxvYWRTY3JpcHQoZWdVcmwsIGZ1bmN0aW9uIChlcnIpIHtcblx0ICAgICAgICAgICAgICAgIC8vIHZhciBFdGFnID0gdXRpbEdvbGRsb2cuZ2V0R29sZGxvZ1ZhbCgnRXRhZycpO1xuXHQgICAgICAgICAgICAgICAgaWYgKGVyciAmJiBlcnIudHlwZSAhPT0gJ2Vycm9yJykge1xuXHQgICAgICAgICAgICAgICAgICB1dGlsRGF0YS5zZXRMc0NuYShhcGx1c19jb25maWcuZ2xvYmFsQ29uZmlnLkVUQUdfU1RPUkFHRV9LRVksIF9zZWxmLnRvZGF5LCBhcGx1cy5FdGFnKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgfSwgMTAwMCk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIHJldHVybjtcblx0ICAgIH1cblx0ICB9O1xuXHR9O1xuXG5cbi8qKiovIH0pLFxuLyogMTE4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0Lypcblx0ICogRmlsZTogQXRtQnJpZGdlLmpzXG5cdCAqIFByb2plY3Q6IEBhbGkvYXBsdXNcblx0ICogICAgICBcblx0ICogQXV0aG9yOiDpkrDmmK0gKGNoYW5nbGlhbmcubGNsQHVtZW5nLmNvbSlcblx0ICogICAgICBcblx0ICogQ29weXJpZ2h0IC0gMjAyMSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cblx0ICovXG5cdFxuXHRcblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgdXRpbExvZ2dlciA9IF9fd2VicGFja19yZXF1aXJlX18oMjYpO1xuXHRcblx0XG5cdGZ1bmN0aW9uIGluaXRKU0JyaWRnZSh3aW4pIHtcblx0ICB2YXIgUHJvbWlzZSA9IHdpbi5Qcm9taXNlOyAvL+S9nOeUqOaYr+WVpe+8n1xuXHQgIHZhciBkb2MgPSB3aW4uZG9jdW1lbnQ7XG5cdCAgdmFyIHVhID0gd2luLm5hdmlnYXRvci51c2VyQWdlbnQ7XG5cdCAgdmFyIGlzV2luID0gKC9XaW5kb3dzXFxzUGhvbmVcXHMoPzpPU1xccyk/W1xcZFxcLl0rL2kpLnRlc3QodWEpIHx8ICgvV2luZG93c1xcc05UXFxzW1xcZFxcLl0rL2kpLnRlc3QodWEpO1xuXHQgIHZhciBpc0lPUyA9ICgvaVBob25lfGlQYWR8aVBvZC9pKS50ZXN0KHVhKTtcblx0ICB2YXIgaXNBbmRyb2lkID0gKC9BbmRyb2lkL2kpLnRlc3QodWEpO1xuXHQgIHZhciBzaWRCYXNlID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKDEgPDwgMTYpKTsgLy9zaWQg55qE5L2c55So5piv5ZWl77yfXG5cdCAgdmFyIGluYyA9IDE7XG5cdCAgdmFyIGlmcmFtZVBvb2wgPSBbXTtcblx0ICB2YXIgaWZyYW1lTGltaXQgPSAzO1xuXHRcblx0ICB2YXIgSUZSQU1FX1BSRUZJWCA9ICdpZnJhbWVfJztcblx0ICB2YXIgUEFSQU1fUFJFRklYID0gJ3BhcmFtXyc7XG5cdFxuXHQgIHZhciBDQUxMX0dDX1RJTUUgPSA2MCAqIDEwMDAgKiAxMDtcblx0ICB2YXIgUEFSQU1fR0NfVElNRSA9IDYwICogMTAwMDtcblx0XG5cdCAgdmFyIEpTQnJpZGdlX0NvcmUgPSB7XG5cdCAgICB0cmFjZTogZnVuY3Rpb24obmFtZSwgcGFyYW1zLCBzdWNjZXNzQ2FsbCwgZmFpbENhbGwsIHRpbWVvdXQpIHtcblx0ICAgICAgcmV0dXJuIEpTQnJpZGdlX0NvcmUuY2FsbChuYW1lLCBwYXJhbXMsIHN1Y2Nlc3NDYWxsLCBmYWlsQ2FsbCwgdGltZW91dCk7XG5cdCAgICB9LFxuXHRcblx0ICAgIGNhbGw6IGZ1bmN0aW9uKG1ldGhvZCwgcGFyYW1zLCBzdWNjZXNzLCBmYWlsdXJlLCB0aW1lb3V0KSB7XG5cdCAgICAgIHZhciBzaWQsIHByb21pc2U7XG5cdCAgICAgIGlmICh0eXBlb2YgYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXSA9PT0gJ251bWJlcicpIHtcblx0ICAgICAgICB0aW1lb3V0ID0gYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgaWYgKHR5cGVvZiBzdWNjZXNzICE9PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgICAgc3VjY2VzcyA9IG51bGw7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmIChQcm9taXNlICYmICFzdWNjZXNzICYmICFmYWlsdXJlKSB7XG5cdCAgICAgICAgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXHQgICAgICAgICAgc3VjY2VzcyA9IHJlc29sdmU7XG5cdCAgICAgICAgICBmYWlsdXJlID0gcmVqZWN0O1xuXHQgICAgICAgIH0pO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBzaWQgPSBKU0JyaWRnZV9Qcml2YXRlLmdldFNpZCgpO1xuXHQgICAgICB2YXIgY2FsbEluZm8gPSB7XG5cdCAgICAgICAgc3VjY2Vzczogc3VjY2Vzcyxcblx0ICAgICAgICBmYWlsdXJlOiBmYWlsdXJlXG5cdCAgICAgIH07XG5cdCAgICAgIGlmICh0aW1lb3V0ID4gMCl7XG5cdCAgICAgICAgY2FsbEluZm8udGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcblx0ICAgICAgICAgIEpTQnJpZGdlX0NvcmUub25GYWlsdXJlKHNpZCwge3JldDogXCJIWV9USU1FT1VUXCJ9KTtcblx0ICAgICAgICB9LCB0aW1lb3V0KTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgSlNCcmlkZ2VfUHJpdmF0ZS5yZWdpc3RlckNhbGwoc2lkLCBjYWxsSW5mbyk7XG5cdCAgICAgIEpTQnJpZGdlX1ByaXZhdGUucmVnaXN0ZXJHQyhzaWQsIHRpbWVvdXQpO1xuXHRcblx0ICAgICAgSlNCcmlkZ2VfUHJpdmF0ZS5ldm9rZU5hdGl2ZShtZXRob2QsIHBhcmFtcywgc2lkKTtcblx0XG5cdCAgICAgIHJldHVybiBwcm9taXNlO1xuXHQgICAgfSxcblx0ICAgIC8vIOmcgOimgW5hdGl2Zeerr+mAmuefpWpz55qE5pe25YCZ77yI6YCa5L+h77yJ77yM55So6Kem5Y+R5LqL5Lu255qE5pa55byP6L+b6KGMXG5cdCAgICBmaXJlRXZlbnQ6IGZ1bmN0aW9uKGV2ZW50bmFtZSwgZXZlbnRkYXRhKSB7XG5cdCAgICAgIHZhciBldiA9IGRvYy5jcmVhdGVFbGVtZW50KCdIVE1MRXZlbnRzJyk7XG5cdCAgICAgIGV2LmluaXRFdmVudChldmVudG5hbWUsIGZhbHNlLCB0cnVlKTtcblx0ICAgICAgZXYucGFyYW0gPSBKU0JyaWRnZV9Qcml2YXRlLnBhcnNlRGF0YShldmVudGRhdGEpO1xuXHRcblx0ICAgICAgZG9jLmRpc3BhdGNoRXZlbnQoZXYpO1xuXHQgICAgfSxcblx0XG5cdCAgICBnZXRQYXJhbTogZnVuY3Rpb24oc2lkKSB7XG5cdCAgICAgIHJldHVybiBKU0JyaWRnZV9Qcml2YXRlLmdldFBhcmFtKHNpZCk7XG5cdCAgICB9LFxuXHRcblx0ICAgIHNldERhdGE6IGZ1bmN0aW9uKCkge30sXG5cdFxuXHQgICAgZmluZDogZnVuY3Rpb24gKHJlcUlkLCBrZWVwQWxpdmUpIHtcblx0ICAgICAgaWYgKCFrZWVwQWxpdmUpIHtcblx0ICAgICAgICBKU0JyaWRnZV9Qcml2YXRlLnVucmVnaXN0ZXJDYWxsKHJlcUlkLCBmYWxzZSk7XG5cdCAgICAgIH1cblx0ICAgIH0sXG5cdFxuXHQgICAgb25TdWNjZXNzOiBmdW5jdGlvbihzaWQsIGRhdGEsIGtlZXBBbGl2ZSkge1xuXHQgICAgICAvLyBuYXRpdmXku6PnoIHlpITnkIbmiJDlip/lkI7vvIzosIPnlKjor6Xmlrnms5XmnaXpgJrnn6Vqc1xuXHQgICAgICBKU0JyaWRnZV9Qcml2YXRlLm9uQ29tcGxldGUoc2lkLCBkYXRhLCAnc3VjY2VzcycsIGtlZXBBbGl2ZSk7XG5cdCAgICB9LFxuXHRcblx0ICAgIG9uRmFpbHVyZTogZnVuY3Rpb24oc2lkLCBkYXRhKSB7XG5cdCAgICAgIC8vIG5hdGl2ZeS7o+eggeWkhOeQhuWksei0peWQju+8jOiwg+eUqOivpeaWueazleadpemAmuefpWpzXG5cdCAgICAgIEpTQnJpZGdlX1ByaXZhdGUub25Db21wbGV0ZShzaWQsIGRhdGEsICdmYWlsdXJlJyk7XG5cdCAgICB9XG5cdFxuXHQgIH07XG5cdFxuXHQgIHZhciBKU0JyaWRnZV9Qcml2YXRlID0ge1xuXHQgICAgcGFyYW1zOiB7fSxcblx0ICAgIGNhbGxzOiB7fSxcblx0XG5cdCAgICBnZXRTaWQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAvLyBpT1MgMTAuMyDlkI7nq6/lj6PkuI3og73otoXov4cgNjU1MzYuXG5cdCAgICAgIHJldHVybiAoKHNpZEJhc2UgKyBpbmMrKykgJSA2NTUzNikgKyAnJztcblx0ICAgIH0sXG5cdFxuXHQgICAgYnVpbGRQYXJhbTogZnVuY3Rpb24ob2JqKSB7XG5cdCAgICAgIGlmIChvYmogJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIHtcblx0ICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob2JqKTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICByZXR1cm4gb2JqIHx8ICcnO1xuXHQgICAgICB9XG5cdCAgICB9LFxuXHRcblx0ICAgIGdldFBhcmFtOiBmdW5jdGlvbihzaWQpIHtcblx0ICAgICAgLy8g5Zug5Li6aW9z5LiLaWZyYW1l5Y2P6K6u77yM5a+55LqOdXJs6ZW/5bqm5pyJ6ZmQ5Yi277yM5omA5Lul5aKe5Yqg5LiA5Liq5Y+C5pWw55qEbWFw44CCXG5cdCAgICAgIHJldHVybiB0aGlzLnBhcmFtc1tQQVJBTV9QUkVGSVggKyBzaWRdIHx8ICcnO1xuXHQgICAgfSxcblx0XG5cdCAgICBzZXRQYXJhbTogZnVuY3Rpb24oc2lkLCBwYXJhbXMpIHtcblx0ICAgICAgdGhpcy5wYXJhbXNbUEFSQU1fUFJFRklYICsgc2lkXSA9IHBhcmFtcztcblx0ICAgIH0sXG5cdFxuXHQgICAgcGFyc2VEYXRhOiBmdW5jdGlvbihzdHIpIHtcblx0ICAgICAgdmFyIHJzdDtcblx0ICAgICAgaWYgKHN0ciAmJiB0eXBlb2Ygc3RyID09PSAnc3RyaW5nJykge1xuXHQgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICByc3QgPSBKU09OLnBhcnNlKHN0cik7XG5cdCAgICAgICAgfSBjYXRjaChlKSB7XG5cdCAgICAgICAgICByc3QgPSB7cmV0OidIWV9SRVNVTFRfUEFSU0VfRVJST1InLCBvcmlnaW5WYWx1ZTogc3RyfTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgcnN0ID0gc3RyIHx8IHt9O1xuXHQgICAgICB9XG5cdFxuXHQgICAgICByZXR1cm4gcnN0O1xuXHQgICAgfSxcblx0XG5cdCAgICByZWdpc3RlckNhbGw6IGZ1bmN0aW9uKHNpZCwgY2FsbEluZm8pIHtcblx0ICAgICAgdGhpcy5jYWxsc1tzaWRdID0gY2FsbEluZm87XG5cdCAgICB9LFxuXHRcblx0ICAgIHVucmVnaXN0ZXJDYWxsOiBmdW5jdGlvbihzaWQsIGtlZXBBbGl2ZSkge1xuXHQgICAgICB2YXIgY2FsbEluZm8gPSB0aGlzLmNhbGxzW3NpZF0gfHwge307XG5cdFxuXHQgICAgICB2YXIgdGltZW91dCA9IGNhbGxJbmZvLnRpbWVvdXQ7XG5cdCAgICAgIGlmICh0aW1lb3V0KSB7XG5cdCAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBpZiAoIWtlZXBBbGl2ZSkge1xuXHQgICAgICAgIGRlbGV0ZSB0aGlzLmNhbGxzW3NpZF07XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHJldHVybiBjYWxsSW5mbztcblx0ICAgIH0sXG5cdFxuXHQgICAgdXNlSWZyYW1lOiBmdW5jdGlvbihzaWQsIHVybCkge1xuXHQgICAgICB2YXIgaWZyYW1laWQgPSBJRlJBTUVfUFJFRklYICsgc2lkO1xuXHQgICAgICB2YXIgaWZyYW1lID0gaWZyYW1lUG9vbC5wb3AoKTtcblx0XG5cdCAgICAgIGlmICghaWZyYW1lKSB7XG5cdCAgICAgICAgaWZyYW1lID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuXHQgICAgICAgIGlmcmFtZS5zZXRBdHRyaWJ1dGUoJ2ZyYW1lYm9yZGVyJywgJzAnKTtcblx0ICAgICAgICBpZnJhbWUuc3R5bGUuY3NzVGV4dCA9ICd3aWR0aDowO2hlaWdodDowO2JvcmRlcjowO2Rpc3BsYXk6bm9uZTsnO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBpZnJhbWUuc2V0QXR0cmlidXRlKCdpZCcsIGlmcmFtZWlkKTtcblx0ICAgICAgaWZyYW1lLnNldEF0dHJpYnV0ZSgnc3JjJywgdXJsKTtcblx0XG5cdCAgICAgIGlmICghaWZyYW1lLnBhcmVudE5vZGUpIHtcblx0ICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICAgZG9jLmJvZHkuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcblx0ICAgICAgICB9LDUpO1xuXHQgICAgICB9XG5cdCAgICB9LFxuXHRcblx0ICAgIHJldHJpZXZlSWZyYW1lIDogZnVuY3Rpb24oc2lkKSB7XG5cdCAgICAgIHZhciBpZnJhbWVpZCA9IElGUkFNRV9QUkVGSVggKyBzaWQ7XG5cdCAgICAgIHZhciBpZnJhbWUgPSBkb2MucXVlcnlTZWxlY3RvcignIycgKyBpZnJhbWVpZCk7XG5cdFxuXHQgICAgICBpZiAoaWZyYW1lKSB7XG5cdCAgICAgICAgaWYgKGlmcmFtZVBvb2wubGVuZ3RoID49IGlmcmFtZUxpbWl0KSB7XG5cdCAgICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICBkb2MuYm9keS5yZW1vdmVDaGlsZChpZnJhbWUpO1xuXHQgICAgICAgICAgfSBjYXRjaCAoZSkge1xuXHQgICAgICAgICAgICAvLyDmnInml7YgaWZyYW1lIOeahCBwYXJlbnQg5bm25LiN5pivIGJvZHnvvIzmiJbogIXnirbmgIHkuI3mraPnoa7vvIzkvJrlr7zoh7TmipvlvILluLhcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgLy8g6YG/5YWN5ZCM5LiA5LiqIGlmcmFtZSDph43lpI3mj5LlhaXkuKTmrKEgaWZyYW1lUG9sbFxuXHQgICAgICAgICAgaWYgKGlmcmFtZVBvb2wuaW5kZXhPZihpZnJhbWUpIDwgMCkge1xuXHQgICAgICAgICAgICBpZnJhbWVQb29sLnB1c2goaWZyYW1lKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH0sXG5cdFxuXHQgICAgZXZva2VOYXRpdmU6IGZ1bmN0aW9uKG1ldGhvZCwgcGFyYW1zLCBzaWQpIHtcblx0ICAgICAgdmFyIGNtZCA9IHtcblx0ICAgICAgICBjbGFzc05hbWUgOiBcIlVtZW5nNEFwbHVzXCIsXG5cdCAgICAgICAgbWV0aG9kTmFtZSA6IG1ldGhvZCxcblx0ICAgICAgICBzaWQ6IHNpZCxcblx0ICAgICAgICBjYWxsYmFjazogJycsXG5cdCAgICAgICAgcGFyYW1zIDogcGFyYW1zXG5cdCAgICAgIH07XG5cdCAgICAgIHZhciBqc29uU3RyID0gSlNPTi5zdHJpbmdpZnkoY21kKTtcblx0ICAgICAgY29uc29sZS5sb2coJ3l6LS0tLS1tZXRob2Q6ICcsIG1ldGhvZCwganNvblN0cik7XG5cdCAgICAgIGlmIChpc1dpbikge1xuXHQgICAgICAgIHRoaXMub25Db21wbGV0ZShzaWQsIHtyZXQ6ICdIWV9OT19IQU5ETEVSX09OX1dQJ30sICdmYWlsdXJlJyk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgaWYgKGlzSU9TKSB7XG5cdCAgICAgICAgICB3aW5kb3cud2Via2l0Lm1lc3NhZ2VIYW5kbGVycy5VbWVuZzRBcGx1cy5wb3N0TWVzc2FnZShqc29uU3RyKTtcblx0ICAgICAgICB9IGVsc2UgaWYgKGlzQW5kcm9pZCkge1xuXHQgICAgICAgICAgd2luZG93LlVtZW5nNEFwbHVzLkNBTEwoanNvblN0cik7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIHRoaXMub25Db21wbGV0ZShzaWQsIHtyZXQ6ICdIWV9OT1RfU1VQUE9SVF9ERVZJQ0UnfSwgJ2ZhaWx1cmUnKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH0sXG5cdFxuXHQgICAgcmVnaXN0ZXJHQzogZnVuY3Rpb24oc2lkLCB0aW1lb3V0KSB7XG5cdCAgICAgIC8vIOWeg+WcvuWbnuaUtlxuXHQgICAgICB2YXIgdGhhdCA9IHRoaXM7XG5cdCAgICAgIHZhciBjYWxsR0NUaW1lID0gTWF0aC5tYXgodGltZW91dCB8fCAwLCBDQUxMX0dDX1RJTUUpO1xuXHQgICAgICB2YXIgcGFyYW1HQ1RpbWUgPSBNYXRoLm1heCh0aW1lb3V0IHx8IDAsIFBBUkFNX0dDX1RJTUUpO1xuXHRcblx0ICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuXHQgICAgICAgIHRoYXQudW5yZWdpc3RlckNhbGwoc2lkKTtcblx0ICAgICAgfSwgY2FsbEdDVGltZSk7XG5cdFxuXHQgICAgICBpZiAoaXNJT1MpIHtcblx0ICAgICAgICAvLyBpb3PkuIvlpITnkIZwYXJhbXPnmoTlm57mlLZcblx0ICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG5cdCAgICAgICAgICBpZiAodGhhdC5wYXJhbXNbUEFSQU1fUFJFRklYICsgc2lkXSkge1xuXHQgICAgICAgICAgICBkZWxldGUgdGhhdC5wYXJhbXNbUEFSQU1fUFJFRklYICsgc2lkXTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9LCBwYXJhbUdDVGltZSk7XG5cdCAgICAgIH1cblx0ICAgIH0sXG5cdFxuXHQgICAgb25Db21wbGV0ZTogZnVuY3Rpb24oc2lkLCBkYXRhLCB0eXBlLCBrZWVwQWxpdmUpIHtcblx0ICAgICAgdmFyIGNhbGwgPSB0aGlzLnVucmVnaXN0ZXJDYWxsKHNpZCwga2VlcEFsaXZlKTtcblx0ICAgICAgdmFyIHN1Y2Nlc3MgPSBjYWxsLnN1Y2Nlc3M7XG5cdCAgICAgIHZhciBmYWlsdXJlID0gY2FsbC5mYWlsdXJlO1xuXHRcblx0ICAgICAgZGF0YSA9IHRoaXMucGFyc2VEYXRhKGRhdGEpO1xuXHRcblx0ICAgICAgdmFyIHJldCA9IGRhdGEucmV0O1xuXHQgICAgICBpZiAodHlwZW9mIHJldCA9PT0gJ3N0cmluZycpIHtcblx0ICAgICAgICBkYXRhID0gZGF0YS52YWx1ZSB8fCBkYXRhO1xuXHQgICAgICAgIGlmICghZGF0YS5yZXQpIHtcblx0ICAgICAgICAgIGRhdGEucmV0ID0gW3JldF07XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdFxuXHQgICAgICBpZiAodHlwZSA9PT0gJ3N1Y2Nlc3MnKSB7XG5cdCAgICAgICAgc3VjY2VzcyAmJiBzdWNjZXNzKGRhdGEpO1xuXHQgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdmYWlsdXJlJykge1xuXHQgICAgICAgIGZhaWx1cmUgJiYgZmFpbHVyZShkYXRhKTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgaWYgKGlzSU9TKSB7ICAgIC8vaU9T5LiL5Zue5pS2aWZyYW1lXG5cdCAgICAgICAgdGhpcy5yZXRyaWV2ZUlmcmFtZShzaWQpO1xuXHQgICAgICAgIGlmICh0aGlzLnBhcmFtc1tQQVJBTV9QUkVGSVggKyBzaWRdKSB7XG5cdCAgICAgICAgICBkZWxldGUgdGhpcy5wYXJhbXNbUEFSQU1fUFJFRklYICsgc2lkXTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9O1xuXHRcblx0ICByZXR1cm4gSlNCcmlkZ2VfQ29yZTtcblx0fTtcblx0XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuXHQgIHJldHVybiB7ICBcblx0ICAgIHN1YnNjcmliZUxvZ3M6IGZ1bmN0aW9uIChhY3Rpb24sIGNhbGxiYWNrKSB7XG5cdCAgICAgIGFwbHVzLmFwbHVzX3B1YnN1Yi5zdWJzY3JpYmUoYWN0aW9uLCBmdW5jdGlvbiAob3JpRGF0YXMpIHtcblx0ICAgICAgICBpZiAob3JpRGF0YXMuc3RhdHVzID09PSAnY29tcGxldGUnKSB7XG5cdCAgICAgICAgICBjYWxsYmFjayhvcmlEYXRhcyk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9KTtcblx0ICAgIH0sXG5cdFxuXHQgICAgY2FsbFVUOiBmdW5jdGlvbiAoYWN0aW9uLCBwYXJhbXMpIHtcblx0ICAgICAgcGFyYW1zLl9icmlkZ2VOYW1lID0gdGhpcy5vcHRpb25zLmJyaWRnZU5hbWUgfHwgJ0F0bUJyaWRnZSc7XG5cdCAgICAgIHBhcmFtcy5fYnJpZGdlVmVyc2lvbiA9IHRoaXMub3B0aW9ucy5icmlkZ2VWZXJzaW9uIHx8ICcxLjAuMCc7XG5cdCAgICAgIGNvbnNvbGUubG9nKCd5ei0tLS1wYXJhbXMnLCBhY3Rpb24sIEpTT04uc3RyaW5naWZ5KHBhcmFtcykpO1xuXHQgICAgICBpZiAoYXBsdXMgJiYgYXBsdXMuYXBsdXNEZWJ1ZyAmJiBjb25zb2xlKSB7XG5cdCAgICAgICAgdXRpbExvZ2dlci5sb2dnZXIoe1xuXHQgICAgICAgICAgbXNnOiAn5b2T5YmN6YCP5Lyg5raI5oGv5L2TOiAnK0pTT04uc3RyaW5naWZ5KHBhcmFtcylcblx0ICAgICAgICB9KTtcblx0ICAgICAgfVxuXHQgICAgICB0cnkge1xuXHQgICAgICAgIHdpbmRvdy5BdG1CcmlkZ2UudHJhY2UoXG5cdCAgICAgICAgICBhY3Rpb24sIHBhcmFtcywgZnVuY3Rpb24gKG8pIHtcblx0ICAgICAgICAgICAgY29uc29sZS5sb2coJ1NVQ0NFU1M6Jywgbyk7XG5cdCAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG5cdCAgICAgICAgICAgIGNvbnNvbGUubG9nKCdGQUlMVVJFOicsIGVycik7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgKTtcblx0ICAgICAgfSBjYXRjaCAoZSkge1xuXHQgICAgICAgIGNvbnNvbGUubG9nKGUpO1xuXHQgICAgICB9XG5cdCAgICB9LFxuXHRcblx0ICAgIGNhbGxNZXJnZVRvTmF0aXZlR1A6IGZ1bmN0aW9uKGFjdGlvbiwgdmFsdWUpIHtcblx0ICAgICAgaWYgKGFwbHVzICYmIGFwbHVzLmFwbHVzRGVidWcgJiYgY29uc29sZSkge1xuXHQgICAgICAgIHV0aWxMb2dnZXIubG9nZ2VyKHtcblx0ICAgICAgICAgIG1zZzogJ+W9k+WJjemAj+S8oOWFqOWxgOWxnuaApzogJysgSlNPTi5zdHJpbmdpZnkodmFsdWUpXG5cdCAgICAgICAgfSk7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHRyeSB7XG5cdCAgICAgICAgd2luZG93LkF0bUJyaWRnZS50cmFjZShhY3Rpb24sIHZhbHVlLCBmdW5jdGlvbihvKXtcblx0ICAgICAgICAgIGNvbnNvbGUubG9nKCdTVUNDRVNTOiAnLCBvKTtcblx0ICAgICAgICB9LCBmdW5jdGlvbihlcnIpe1xuXHQgICAgICAgICAgY29uc29sZS5sb2coJ0ZBSUxVUkU6JywgZXJyKTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgfSBjYXRjaCAoZSkge1xuXHQgICAgICAgIGNvbnNvbGUubG9nKGUpO1xuXHQgICAgICB9XG5cdCAgICB9LFxuXHRcblx0ICAgIHdhdGNoTE9HOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIHZhciBfc2VsZiA9IHRoaXM7XG5cdCAgICAgIF9zZWxmLnN1YnNjcmliZUxvZ3MoJ213X2NoYW5nZV9wdicsIGZ1bmN0aW9uIChkYXRhKSB7XG5cdCAgICAgICAgdmFyIHdoYXRfdG9fc2VuZCA9IGRhdGEud2hhdF90b19zZW5kIHx8IHt9O1xuXHQgICAgICAgIHZhciBwYXJhbXMgPSB3aGF0X3RvX3NlbmQucHZkYXRhVG9VbU5hdGl2ZSB8fCB7fTtcblx0ICAgICAgICBfc2VsZi5jYWxsVVQoJ3NlbmRQVicsIHBhcmFtcyk7XG5cdCAgICAgIH0pO1xuXHQgICAgICBfc2VsZi5zdWJzY3JpYmVMb2dzKCdtd19jaGFuZ2VfaGpsaicsIGZ1bmN0aW9uIChkYXRhKSB7XG5cdCAgICAgICAgdmFyIHdoYXRfdG9fc2VuZCA9IGRhdGEud2hhdF90b19zZW5kIHx8IHt9O1xuXHQgICAgICAgIHZhciBwYXJhbXMgPSB3aGF0X3RvX3NlbmQuaGpsamRhdGFUb1VtTmF0aXZlIHx8IHt9O1xuXHQgICAgICAgIF9zZWxmLmNhbGxVVCgnc2VuZEV2ZW50JywgcGFyYW1zKTtcblx0ICAgICAgfSk7XG5cdCAgICB9LFxuXHRcblx0ICAgIHdhdGNoTWV0YUluZm86IGZ1bmN0aW9uKCkge1xuXHQgICAgICB2YXIgX3NlbGYgPSB0aGlzO1xuXHQgICAgICBhcGx1cy5hcGx1c19wdWJzdWIuc3Vic2NyaWJlKCdzZXRNZXRhSW5mbycsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG5cdCAgICAgICAgaWYgKGtleSA9PT0gJ2dsb2JhbFByb3BlcnR5JyAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG5cdCAgICAgICAgICBfc2VsZi5jYWxsTWVyZ2VUb05hdGl2ZUdQKCdyZWdpc3Rlckdsb2JhbFByb3BlcnRpZXMnLCAvQW5kcm9pZC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KT8gSlNPTi5zdHJpbmdpZnkodmFsdWUpIDogdmFsdWUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSk7XG5cdCAgICB9LFxuXHRcblx0ICAgIHJ1bjogZnVuY3Rpb24oKXtcblx0ICAgICAgdmFyIHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG5cdCAgICAgIHZhciBpc1VtZW5nU2RrID0gKC9VbWVuZzRBcGx1cy9pKS50ZXN0KHVhKTtcblx0ICAgICAgaWYgKGlzVW1lbmdTZGsgJiYgIXdpbmRvdy5BdG1CcmlkZ2UpIHtcblx0ICAgICAgICB2YXIgQXRtQnJpZGdlID0gaW5pdEpTQnJpZGdlKHdpbmRvdyk7XG5cdCAgICAgICAgd2luZG93LkF0bUJyaWRnZSA9IEF0bUJyaWRnZTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgaWYgKHdpbmRvdy5BdG1CcmlkZ2UpIHtcblx0ICAgICAgICB0aGlzLndhdGNoTE9HKCk7XG5cdCAgICAgICAgdGhpcy53YXRjaE1ldGFJbmZvKCk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9O1xuXHR9O1xuXG5cbi8qKiovIH0pLFxuLyogMTE5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIOWPr+inhuWMluWfi+eCuSB8IFdlYiBWaXN1YWxpemF0aW9uIFRyYWNrZXJpbmcgU0RLXG5cdCAqIHRoaXMgaXMgYW4gZW50cmFuY2Ugb2Ygd2ViVlRcblx0ICogQVBJOiBodHRwczovL3l1cXVlLmFudGZpbi1pbmMuY29tL2RhdGEtY29sbGVjdC92dC91YjhsbW1cblx0ICpcblx0ICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuXHQgKiBBdXRob3JzOlxuXHQgKiAgIFJpY2hhcmR86LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cblx0ICovXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciBCYXNlID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSk7XG5cdHZhciB1dGlsU3RvcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI1KTtcblx0dmFyIHV0aWxHUSA9IF9fd2VicGFja19yZXF1aXJlX18oNjEpO1xuXHR2YXIgZWFjaCA9IF9fd2VicGFja19yZXF1aXJlX18oMjcpO1xuXHR2YXIgYXBsdXNTdGF0aWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXHR2YXIgZmV0Y2hEYXRhID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjApO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBCYXNlLmV4dGVuZCh7XG5cdFxuXHQgIGluaXQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcblx0ICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdCAgICB0aGlzLlBBR0VfQ09ORklHX0tFWSA9ICdBUExVU19QQUdFX0NPTkZJRyc7XG5cdCAgICB0aGlzLmNkbnBhdGg7XG5cdCAgICB0aGlzLmlzU3RhcnRUcmFja2VyID0gZmFsc2U7XG5cdCAgICB0aGlzLmxhdGVzdENvbXBvbmVudElkO1xuXHQgICAgdGhpcy5sYXRlc3RQYWdlSWQ7XG5cdCAgICB0aGlzLmFwbHVzX3dlYl9wYWdlY29uZmlnO1xuXHQgIH0sXG5cdFxuXHQgIGdldENkblBhdGg6IGZ1bmN0aW9uIChjb25maWcpIHtcblx0ICAgIGlmICghdGhpcy5jZG5wYXRoKSB7XG5cdCAgICAgIHZhciBfcGF0aCA9IGFwbHVzICYmIGFwbHVzLmFwbHVzRGVidWcgPyAnL2RhaWx5JyA6ICcnO1xuXHQgICAgICB0aGlzLmNkbnBhdGggPSBjb25maWcuY2RuUGF0aCArIF9wYXRoICsgJy8nICsgY29uZmlnLmNvbXBvbmVudElkICsgJy5qc29uJztcblx0ICAgIH1cblx0ICAgIHJldHVybiB0aGlzLmNkbnBhdGg7XG5cdCAgICBcblx0ICB9LFxuXHRcblx0ICBmZXRjaEZyb21MUzogZnVuY3Rpb24gKGNvbmZpZykge1xuXHQgICAgdHJ5IHtcblx0ICAgICAgcmV0dXJuIEpTT04ucGFyc2UoZGVjb2RlVVJJQ29tcG9uZW50KHV0aWxTdG9yZS5nZXQodGhpcy5QQUdFX0NPTkZJR19LRVkgKyAnLScgKyB0aGlzLmdldENkblBhdGgoY29uZmlnKSkpIHx8IHt9KTtcblx0ICAgIH0gY2F0Y2ggKGUpIHtcblx0ICAgICAgcmV0dXJuIG51bGw7XG5cdCAgICB9XG5cdCAgfSxcblx0XG5cdCAgc2V0Q29uZmlnSW50b0xTOiBmdW5jdGlvbiAoY29uZmlnKSB7XG5cdCAgICB1dGlsU3RvcmUuc2V0KHRoaXMuUEFHRV9DT05GSUdfS0VZICsgJy0nICsgdGhpcy5nZXRDZG5QYXRoKGNvbmZpZyksIGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjb25maWcpKSk7XG5cdCAgfSxcblx0XG5cdCAgZmV0Y2hGcm9tQ2RuOiBmdW5jdGlvbiAoY29uZmlnLCBjYWxsYmFjaykge1xuXHQgICAgLy8gdmFyIF9zZWxmID0gdGhpcztcblx0ICAgIHZhciBfcGF0aCA9IGFwbHVzICYmIGFwbHVzLmFwbHVzRGVidWcgPyAnL2RhaWx5JyA6ICcnO1xuXHQgICAgdmFyIHBhdGggPSBjb25maWcuY2RuUGF0aCArIF9wYXRoICsgJy8nICsgY29uZmlnLmNvbXBvbmVudElkICsgJy5qc29uJztcblx0ICAgIGZldGNoRGF0YS5yZXF1ZXN0KHBhdGgsIGZ1bmN0aW9uIChkYXRhKSB7XG5cdCAgICAgIGNhbGxiYWNrKGRhdGEpO1xuXHQgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG5cdCAgICAgIGlmIChhcGx1cyAmJiBhcGx1cy5hcGx1c0RlYnVnKSB3aW5kb3cuY29uc29sZS5sb2coZXJyb3IpO1xuXHQgICAgICBjYWxsYmFjayhudWxsKTtcblx0ICAgIH0sIHtcblx0ICAgICAgdGltZW91dDogNTAwMFxuXHQgICAgfSk7XG5cdCAgfSxcblx0XG5cdCAgZ2V0Q3VycmVudFBhZ2VDb25maWc6IGZ1bmN0aW9uIChjb25maWcpIHtcblx0ICAgIHZhciBfc2VsZiA9IHRoaXM7XG5cdCAgICB2YXIgY3VycmVudFBhZ2VDb25maWcgPSB7fTtcblx0ICAgIGlmIChfc2VsZi5hcGx1c193ZWJfcGFnZWNvbmZpZyAmJiBfc2VsZi5hcGx1c193ZWJfcGFnZWNvbmZpZy5wYWdlcykge1xuXHQgICAgICBlYWNoKF9zZWxmLmFwbHVzX3dlYl9wYWdlY29uZmlnLnBhZ2VzLCBmdW5jdGlvbiAocGFnZSkge1xuXHQgICAgICAgIGlmIChwYWdlLnNwbUIgPT09IChjb25maWcucGFnZUlkICsgJycpKSB7XG5cdCAgICAgICAgICBjdXJyZW50UGFnZUNvbmZpZy5wYWdlID0gcGFnZTtcblx0ICAgICAgICAgIHZhciBwb2ludHMgPSBbXTtcblx0ICAgICAgICAgIGVhY2goX3NlbGYuYXBsdXNfd2ViX3BhZ2Vjb25maWcucG9pbnRzLCBmdW5jdGlvbiAocG9pbnQpIHtcblx0ICAgICAgICAgICAgaWYgKHBvaW50LnNwbUIgPT09IHBhZ2Uuc3BtQikge1xuXHQgICAgICAgICAgICAgIHBvaW50cy5wdXNoKHBvaW50KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgfSk7XG5cdCAgICAgICAgICBjdXJyZW50UGFnZUNvbmZpZy5wb2ludHMgPSBwb2ludHM7XG5cdCAgICAgICAgICByZXR1cm4gJ2JyZWFrJztcblx0ICAgICAgICB9XG5cdCAgICAgIH0pOyAgXG5cdCAgICB9XG5cdCAgICBcblx0ICAgIHJldHVybiBjdXJyZW50UGFnZUNvbmZpZztcblx0ICB9LFxuXHRcblx0ICBnZXRQYWdlQ29uZmlnOiBmdW5jdGlvbiAoY29uZmlnLCBjYWxsYmFjaykge1xuXHQgICAgdmFyIF9zZWxmID0gdGhpcztcblx0ICAgIHZhciBsb2NhbERhdGEgPSB0aGlzLmZldGNoRnJvbUxTKGNvbmZpZyk7XG5cdCAgICBpZiAobG9jYWxEYXRhKSB7XG5cdCAgICAgIF9zZWxmLmxhdGVzdENvbXBvbmVudElkID0gY29uZmlnLmNvbXBvbmVudElkO1xuXHQgICAgICBfc2VsZi5hcGx1c193ZWJfcGFnZWNvbmZpZyA9IGxvY2FsRGF0YTtcblx0ICAgICAgY2FsbGJhY2soJ0xTJyk7XG5cdCAgICB9XG5cdFxuXHQgICAgX3NlbGYuZmV0Y2hGcm9tQ2RuKGNvbmZpZywgZnVuY3Rpb24gKGRhdGEpIHtcblx0ICAgICAgaWYgKGRhdGEpIHtcblx0ICAgICAgICBfc2VsZi5zZXRDb25maWdJbnRvTFMoZGF0YSk7XG5cdCAgICAgICAgX3NlbGYubGF0ZXN0Q29tcG9uZW50SWQgPSBjb25maWcuY29tcG9uZW50SWQ7XG5cdCAgICAgICAgaWYgKCFfc2VsZi5pc1N0YXJ0VHJhY2tlcikge1xuXHQgICAgICAgICAgX3NlbGYuYXBsdXNfd2ViX3BhZ2Vjb25maWcgPSBkYXRhO1xuXHQgICAgICAgICAgY2FsbGJhY2soJ0NOQScpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfSk7XG5cdCAgfSxcblx0XG5cdCAgdHJhY2tlclBhZ2VWaWV3RXZlbnQ6IGZ1bmN0aW9uIChwYWdlKSB7XG5cdCAgICBhcGx1cy5zZW5kUFYoe1xuXHQgICAgICBpc0F1dG86IGZhbHNlLFxuXHQgICAgICB0cmFja2VyRXZlbnRDb2RlOiBwYWdlLmV2ZW50Q29kZSxcblx0ICAgIH0sIHtcblx0ICAgICAgX3Bvc19pZDogcGFnZS5zcG1CLFxuXHQgICAgfSk7XG5cdCAgfSxcblx0XG5cdCAgdHJhY2tlckNvbW1vbkV2ZW50OiBmdW5jdGlvbiAocG9pbnRzKSB7XG5cdCAgICAvLyB2YXIgZXhwRXZlbnRzID0gW107IC8vIFRPRE8g5pys5pyf5LiN5pSv5oyBXG5cdCAgICB2YXIgY2xrRXZlbnRzID0gW107XG5cdCAgICBlYWNoKHBvaW50cywgZnVuY3Rpb24gKHBvaW50KSB7XG5cdCAgICAgIC8vIHZhciBpc1JlY29yZENsaWNrRXZlbnQgPSBwb2ludC5sb2drZXkgJiYgcG9pbnQuc2VsZWN0b3IgJiYgcG9pbnQudHJhY2tlclR5cGUgJiYgcG9pbnQudHJhY2tlclR5cGUuaW5kZXhPZignY2xpY2snKSA+IC0xO1xuXHQgICAgICAvLyBpZiAocG9pbnQubG9na2V5ICYmIHBvaW50LnNlbGVjdG9yICYmIHBvaW50LnRyYWNrZXJUeXBlKSB7XG5cdCAgICAgIC8vICAgaWYgKHBvaW50LnRyYWNrZXJUeXBlLmluZGV4T2YoJ2NsaWNrJykgPiAtMSkge1xuXHQgICAgICB2YXIgY3NzU2VsZWN0b3I7XG5cdCAgICAgIHN3aXRjaCAocG9pbnQuc2VsZWN0b3JUeXBlKSB7XG5cdCAgICAgIGNhc2UgJ0lEJzpcblx0ICAgICAgICBjc3NTZWxlY3RvciA9ICcjJyArIHBvaW50LnNlbGVjdG9yO1xuXHQgICAgICAgIGJyZWFrO1xuXHQgICAgICBjYXNlICdDTEFTUyc6XG5cdCAgICAgICAgY3NzU2VsZWN0b3IgPSAnLicgKyBwb2ludC5zZWxlY3Rvcjtcblx0ICAgICAgICBicmVhaztcblx0ICAgICAgY2FzZSAnREFUQV9UUkFDS0VSJzpcblx0ICAgICAgICBjc3NTZWxlY3RvciA9ICdbZGF0YS10cmFja2VyPVwiJyArIHBvaW50LnNlbGVjdG9yICsgJ1wiXSc7XG5cdCAgICAgICAgYnJlYWs7XG5cdCAgICAgIGRlZmF1bHQ6XG5cdCAgICAgICAgYnJlYWs7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKGNzc1NlbGVjdG9yKSB7XG5cdCAgICAgICAgY2xrRXZlbnRzLnB1c2goe1xuXHQgICAgICAgICAgY3NzU2VsZWN0b3I6IGNzc1NlbGVjdG9yLFxuXHQgICAgICAgICAgbG9na2V5OiBwb2ludC5sb2drZXkgfHwgJyQkX0FQTFVTJyxcblx0ICAgICAgICAgIHNwbUI6IHBvaW50LnNwbUIsXG5cdCAgICAgICAgICBfcG9zX2lkOiBwb2ludC5zcG1DLFxuXHQgICAgICAgICAgcHJvcHM6IFtdIC8vIFRPRE8g5pys5pyf5LiN5pSv5oyBXG5cdCAgICAgICAgfSk7XG5cdCAgICAgIH1cblx0ICAgICAgLy8gICB9XG5cdCAgICAgIC8vIH1cblx0ICAgIH0pO1xuXHQgICAgaWYgKGNsa0V2ZW50cy5sZW5ndGggPiAwKSB7XG5cdCAgICAgIGFwbHVzLnNldE1ldGFJbmZvKCdhcGx1cy1hdXRvLWNsaycsIGNsa0V2ZW50cyk7XG5cdCAgICB9XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICogQHBhcmFtcyB7T2JqZWN0fSBjdXJyZW50UGFnZUNvbmZpZyAge1xuXHQgICAqICAgcGFnZToge30sXG5cdCAgICogICBwb2ludHM6IFtdLFxuXHQgICAqIH1cblx0ICAgKiBAcGFyYW1zIHtPYmplY3R9IG9wdGlvbnMge1xuXHQgICAqICAgZGF0YVNvdXJjZVR5cGU6IExPQ0FML0xTL0NETlxuXHQgICAqICAgcGFnZUlkOiAxNjAwMTNcblx0ICAgKiB9XG5cdCAgICovXG5cdCAgc3RhcnRUcmFja2VyOiBmdW5jdGlvbiAoY3VycmVudFBhZ2VDb25maWcsIG9wdGlvbnMpIHtcblx0ICAgIGlmIChhcGx1cy5hcGx1c0RlYnVnKSB7XG5cdCAgICAgIGNvbnNvbGUubG9nKCdvcHRpb25zID09PSAnLCBvcHRpb25zKTtcblx0ICAgIH1cblx0ICAgIGN1cnJlbnRQYWdlQ29uZmlnLmNvbXBvbmVudElkID0gdGhpcy5sYXRlc3RDb21wb25lbnRJZDtcblx0ICAgIHV0aWxHUS5wdXNoSW50b0dvbGRsb2dRdWV1ZShhcGx1c1N0YXRpYy5QVUJMSVNILCBbYXBsdXNTdGF0aWMuQ1VSUkVOVF9QQUdFX0NPTkZJRywgY3VycmVudFBhZ2VDb25maWddKTtcblx0ICAgIHV0aWxHUS5wdXNoSW50b0dvbGRsb2dRdWV1ZShhcGx1c1N0YXRpYy5DQUNIRV9QVUJTLCBbYXBsdXNTdGF0aWMuQ1VSUkVOVF9QQUdFX0NPTkZJRywgY3VycmVudFBhZ2VDb25maWddKTtcblx0XG5cdCAgICB2YXIgcGFnZSA9IGN1cnJlbnRQYWdlQ29uZmlnLnBhZ2UgfHwge307XG5cdCAgICBpZiAocGFnZS5zcG1CICYmIHRoaXMubGF0ZXN0UGFnZUlkICE9PSBwYWdlLnNwbUIpIHtcblx0ICAgICAgdGhpcy5sYXRlc3RQYWdlSWQgPSBwYWdlLnNwbUI7XG5cdCAgICAgIHRoaXMuaXNTdGFydFRyYWNrZXIgPSB0cnVlO1xuXHQgICAgICB0aGlzLnRyYWNrZXJQYWdlVmlld0V2ZW50KHBhZ2UpO1xuXHQgICAgICB0aGlzLnRyYWNrZXJDb21tb25FdmVudChjdXJyZW50UGFnZUNvbmZpZy5wb2ludHMgfHwgW10pO1xuXHQgICAgfVxuXHQgIH0sXG5cdFxuXHQgIC8vIGFwbHVzX3F1ZXVlLnB1c2goe1xuXHQgIC8vICAgJ2FjdGlvbic6J2FwbHVzLnBhZ2VFbnRlcicsXG5cdCAgLy8gICAnYXJndW1lbnRzJzpbe1xuXHQgIC8vICAgICBjb21wb25lbnRJZDogMTYwMDEyLFxuXHQgIC8vICAgICBwYWdlSWQ6IDE2MDAxMyxcblx0ICAvLyAgICAgY2RuUGF0aDogXCJodHRwczovL2FsaWR0LmFsaWNkbi5jb20vYWxpbG9nL2Ftd2F5XCIsIC8vIC9kYWlseS8xNDYwMDguanNvblxuXHQgIC8vICAgfV1cblx0ICAvLyB9KVxuXHQgIHJ1bjogZnVuY3Rpb24gKCkge1xuXHQgICAgdmFyIF9zZWxmID0gdGhpcztcblx0ICAgIHV0aWxHUS5wdXNoSW50b0dvbGRsb2dRdWV1ZShhcGx1c1N0YXRpYy5TVUJTQ1JJQkUsIFthcGx1c1N0YXRpYy5QQUdFX0VOVEVSLCBmdW5jdGlvbiAoY29uZmlnKSB7XG5cdCAgICAgIGlmIChfc2VsZi5sYXRlc3RDb21wb25lbnRJZCA9PT0gY29uZmlnLmNvbXBvbmVudElkICYmIF9zZWxmLmFwbHVzX3dlYl9wYWdlY29uZmlnKSB7XG5cdCAgICAgICAgX3NlbGYuc3RhcnRUcmFja2VyKF9zZWxmLmdldEN1cnJlbnRQYWdlQ29uZmlnKGNvbmZpZyksIHtcblx0ICAgICAgICAgIHNvdXJjZTogJ0xPQ0FMJ1xuXHQgICAgICAgIH0pO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIF9zZWxmLmdldFBhZ2VDb25maWcoY29uZmlnLCBmdW5jdGlvbiAoZGF0YVNvdXJjZVR5cGUpIHtcblx0ICAgICAgICAgIF9zZWxmLnN0YXJ0VHJhY2tlcihfc2VsZi5nZXRDdXJyZW50UGFnZUNvbmZpZyhjb25maWcpLCB7XG5cdCAgICAgICAgICAgIHNvdXJjZTogZGF0YVNvdXJjZVR5cGVcblx0ICAgICAgICAgIH0pO1xuXHQgICAgICAgIH0pO1xuXHQgICAgICB9XG5cdCAgICB9XSk7XG5cdCAgfVxuXHR9KTtcblxuXG4vKioqLyB9KSxcbi8qIDEyMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBhbGlsb2cvcy91dGlsL2ZldGNoRGF0YS5qc1xuXHQgKiDlt6Xlhbfnsbtcblx0ICpcblx0ICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuXHQgKlxuXHQgKiBBdXRob3JzOlxuXHQgKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG5cdCAqL1xuXHQndXNlIHN0cmljdCc7XG5cdFxuXHR2YXIgYXBsdXNTdGF0aWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXHRcblx0LyoqXG5cdCAqIEB0eXBlIHtPYmplY3R9XG5cdCAqIOmFjee9rumhueWMheaLrO+8mlxuXHQgKiBiYXNlOiDpu5jorqTngbDluqbln7rmlbAxMDAwMFxuXHQgKiB0aW1lb3V0OiBDT1JT6LaF5pe25pe26Ze0XG5cdCAqL1xuXHR2YXIgX2NvbmZpZyA9IHtcblx0ICBiYXNlOiAxMDAwMCxcblx0ICAvLyDpu5jorqQxMHNcblx0ICB0aW1lb3V0OiAxMDAwMFxuXHR9O1xuXHRcblx0dmFyIGZldGNoID0gZnVuY3Rpb24gKHVybCwgcmVzb2x2ZSwgcmVqZWN0LCBvcHRzKSB7XG5cdCAgaWYgKC9eXFwvXFwvLy50ZXN0KHVybCkpIHtcblx0ICAgIHVybCA9IGFwbHVzU3RhdGljLkhUVFBTICsgdXJsO1xuXHQgIH1cblx0ICB2YXIgcGVuZGluZyA9IHRydWU7XG5cdCAgdmFyIHRpbWVvdXQgPSAob3B0cyAmJiBvcHRzLnRpbWVvdXQpID8gb3B0cy50aW1lb3V0IDogX2NvbmZpZy50aW1lb3V0O1xuXHQgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcblx0ICAgIGlmIChwZW5kaW5nKSB7XG5cdCAgICAgIHBlbmRpbmcgPSBmYWxzZTtcblx0ICAgICAgcmVqZWN0KHtcblx0ICAgICAgICB0aW1lb3V0OiB0aW1lb3V0XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgIH0sIHRpbWVvdXQpO1xuXHQgIHdpbmRvdy5mZXRjaCh1cmwpXG5cdCAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuXHQgICAgICBpZigvYXBwbGljYXRpb25cXC9qc29uLy50ZXN0KHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKSkpIHtcblx0ICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHJldHVybiByZXNwb25zZS50ZXh0KCk7XG5cdCAgICAgIH1cblx0ICAgIH0pXG5cdCAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG5cdCAgICAgIGlmIChwZW5kaW5nKSB7XG5cdCAgICAgICAgcmVzb2x2ZShkYXRhKTtcblx0ICAgICAgICBwZW5kaW5nID0gZmFsc2U7XG5cdCAgICAgIH1cblx0ICAgIH0pXG5cdCAgICAuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcblx0ICAgICAgcGVuZGluZyAmJiByZWplY3QoZXJyb3IpO1xuXHQgICAgfSk7XG5cdH07XG5cdFxuXHR2YXIgYWpheCA9IGZ1bmN0aW9uICh1cmwsIHJlc29sdmUsIHJlamVjdCwgb3B0cykge1xuXHQgIHZhciB4aHI7XG5cdCAgdmFyIG1ldGhvZCA9ICdHRVQnO1xuXHQgIHZhciBvbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICBpZiAoeGhyLnJlc3BvbnNlVGV4dCkge1xuXHQgICAgICByZXNvbHZlKHhoci5yZXNwb25zZVRleHQpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgcmVqZWN0KCk7XG5cdCAgICB9XG5cdCAgfTtcblx0ICB2YXIgQ09SUyA9IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCAmJiAnd2l0aENyZWRlbnRpYWxzJyBpbiBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblx0ICBpZiAoQ09SUykge1xuXHQgICAgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cdCAgICB4aHIub3BlbihtZXRob2QsIHVybCwgdHJ1ZSk7XG5cdCAgfSBlbHNlIHtcblx0ICAgIHhociA9IG5ldyB3aW5kb3cuWERvbWFpblJlcXVlc3QoKTtcblx0ICAgIHhoci5vcGVuKG1ldGhvZCwgdXJsKTtcblx0ICB9XG5cdCAgLy8geGhyLndpdGhDcmVkZW50aWFscyA9IHRydWVcblx0ICB2YXIgdGltZW91dCA9IChvcHRzICYmIG9wdHMudGltZW91dCkgPyBvcHRzLnRpbWVvdXQgOiBfY29uZmlnLnRpbWVvdXQ7XG5cdCAgeGhyLnRpbWVvdXQgPSB0aW1lb3V0O1xuXHQgIHhoci5vbmxvYWQgPSBvbmxvYWQ7XG5cdCAgeGhyLm9uZXJyb3IgPSByZWplY3Q7XG5cdCAgeGhyLm9udGltZW91dCA9IHJlamVjdDtcblx0ICB4aHIuc2VuZCgpO1xuXHR9O1xuXHRcblx0dmFyIHJlcXVlc3QgPSBmdW5jdGlvbiAodXJsLCByZXNvbHZlLCByZWplY3QsIG9wdHMpIHtcblx0ICBpZiAod2luZG93LmZldGNoKSB7XG5cdCAgICBmZXRjaCh1cmwsIHJlc29sdmUsIHJlamVjdCwgb3B0cyk7XG5cdCAgfSBlbHNlIHtcblx0ICAgIGFqYXgodXJsLCByZXNvbHZlLCByZWplY3QsIG9wdHMpO1xuXHQgIH1cblx0fTtcblx0XG5cdGV4cG9ydHMucmVxdWVzdCA9IHJlcXVlc3Q7XG5cblxuLyoqKi8gfSksXG4vKiAxMjEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogYWxpbG9nL3MgLSBzcmMvbGliX3UvY29uZmlnL2luaXQvaW5pdExvYWRfYmFzZS5qc1xuXHQgKiDliJ3lp4vljJbln7rnoYDmqKHlnZfvvIzkuI3og73nm7TmjqXkvb/nlKjvvIzpnIDopoHpgJrov4dpbml0TG9hZF9wYy5qc+aIlmluaXRMb2FkX3dhcC5qc+etieWFt+S9k+eahOWcuuaZr+aooeWdl+iwg+eUqFxuXHQgKlxuXHQgKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG5cdCAqXG5cdCAqIEF1dGhvcnM6XG5cdCAqICAgQGF1dGhvciBqaXpoYS53eWogQGJsb2cgaHR0cDovL29sZGoubmV0XG5cdCAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cblx0ICovXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciBCYXNlID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSk7XG5cdHZhciB1dGlsR29sZGxvZyA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdHZhciBhY3Rpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExNik7XG5cdFxuXHR2YXIgUXVldWUgPSBCYXNlLmV4dGVuZCh7XG5cdCAgcHVzaDogZnVuY3Rpb24odGFzaykge1xuXHQgICAgdGhpcy5sZW5ndGgrKztcblx0ICAgIGFjdGlvbi5wcm9jZXNzVGFzayh0YXNrLCB0aGlzLm9wdHMpOyAgXG5cdCAgfSxcblx0fSk7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcblx0ICByZXR1cm4ge1xuXHQgICAgcHJvY2Vzc0FwbHVzUXVldWU6IGZ1bmN0aW9uIChxdWV1ZU5hbWUpIHtcblx0ICAgICAgdmFyIG9wdHMgPSB0aGlzLm9wdGlvbnMuY29uZmlnIHx8IHt9O1xuXHQgICAgICB2YXIgcXVlID0gdXRpbEdvbGRsb2cuZ2V0R2xvYmFsVmFsdWUocXVldWVOYW1lKTtcblx0ICAgICAgYWN0aW9uLnByb2Nlc3NHb2xkbG9nUXVldWUocXVlLCBvcHRzKTtcblx0ICAgICAgdXRpbEdvbGRsb2cuc2V0R2xvYmFsVmFsdWUocXVldWVOYW1lLCBRdWV1ZS5jcmVhdGUoe1xuXHQgICAgICAgIG9wdHM6IG9wdHMsIFxuXHQgICAgICAgIHN0YXJ0TGVuZ3RoOiBxdWUubGVuZ3RoLFxuXHQgICAgICAgIGxlbmd0aDogMFxuXHQgICAgICB9KSk7XG5cdCAgICB9LFxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogQHBhcmFtcyB7U3RyaW5nfSB0eXBlXG5cdCAgICAgKi9cblx0ICAgIHJ1bjogIGZ1bmN0aW9uICgpIHtcblx0ICAgICAgdmFyIGFwbHVzX2NvbmZpZyA9IHRoaXMub3B0aW9ucy5jb250ZXh0LmFwbHVzX2NvbmZpZztcblx0ICAgICAgdmFyIEFQTFVTX1FVRVVFID0gYXBsdXNfY29uZmlnLmdsb2JhbENvbmZpZy5BUExVU19RVUVVRTtcblx0XG5cdCAgICAgIHRoaXMucHJvY2Vzc0FwbHVzUXVldWUoQVBMVVNfUVVFVUUpO1xuXHRcblx0ICAgICAgaWYgKEFQTFVTX1FVRVVFID09PSAnYXBsdXNfcXVldWUnKSB7XG5cdCAgICAgICAgdGhpcy5wcm9jZXNzQXBsdXNRdWV1ZSgnZ29sZGxvZ19xdWV1ZScpO1xuXHQgICAgICB9XG5cdCAgICAgIGFjdGlvbi5zdWJzY3JpYmVBbmRQcm9jZXNzUXVldWUoQVBMVVNfUVVFVUUsIHRoaXMub3B0aW9ucy5jb25maWcpO1xuXHQgICAgfVxuXHQgIH07XG5cdH07XG5cblxuLyoqKi8gfSksXG4vKiAxMjIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogcHJvamVjdCAtIGZpbGVwYXRoXG5cdCAqIOi/meaYr+S4gOS4quWKoOi9veWZqO+8jOeUqOS6jueDreWKoOi9vUpT5o+S5Lu2XG5cdCAqXG5cdCAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cblx0ICpcblx0ICogQXV0aG9yczpcblx0ICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuXHQgKi9cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIGVhY2ggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI3KTtcblx0dmFyIHV0aWxEb20gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM2KTtcblx0dmFyIHV0aWxBcnJheSA9IF9fd2VicGFja19yZXF1aXJlX18oMzUpO1xuXHQvLyB2YXIgcGx1Z2luTG9hZGVyTWFwID0ge307XG5cdC8qKlxuXHQgKiBET01SZWFkeeWQjuW8gOWni+aJp+ihjOWKoOi9vWFwbHVzSlPmj5Lku7bnmoTliqjkvZxcblx0ICovXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuXHQgIHJldHVybiB7XG5cdCAgICAvKipcblx0ICAgICAqIEBwYXJhbXMge09iamVjdH0gb3B0aW9ucyB7XG5cdCAgICAgKiAgIGxvZ0NvbmZpZzoge2xvZ0NvbmZpZ31cblx0ICAgICAqIH1cblx0ICAgICAqL1xuXHQgICAgaW5pdDogZnVuY3Rpb24ob3B0aW9ucykge1xuXHQgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHQgICAgfSxcblx0XG5cdCAgICAvLyAvKipcblx0ICAgIC8vICAqIOWKoOi9veiHquWKqOabneWFiVxc6Ieq5Yqo54K55Ye755qEanNcblx0ICAgIC8vICAqIEBwYXJhbXMge1N0cmluZ30gbWV0YUtleSAnYXBsdXMtYXV0by1leHAnIHwgJ2FwbHVzLWF1dG8tY2xrJ1xuXHQgICAgLy8gICogQHBhcmFtcyB7U3RyaW5nfSBtZXRhVmFsdWVcblx0ICAgIC8vICAqL1xuXHQgICAgLy8gbG9hZEFwbHVzUGx1Z2luOiBmdW5jdGlvbiAobWV0YUtleSkge1xuXHQgICAgLy8gICB2YXIgY29uZmlnID0gdGhpcy5vcHRpb25zLmNvbmZpZyB8fCB7fTtcblx0ICAgIC8vICAgdmFyIGNkblBhdGggPSBjb25maWdbbWV0YUtleV07XG5cdCAgICAvLyAgIHZhciBwbHVnaW5fcGF0aHMgPSBhcGx1cy5nZXRDZG5QYXRoKCkgKyBjZG5QYXRoO1xuXHQgICAgLy8gICBpZiAoY2RuUGF0aCAmJiAhYXBsdXNbY29uZmlnLmdsb2JhbE5hbWVdICYmICFwbHVnaW5Mb2FkZXJNYXBbY2RuUGF0aF0pIHtcblx0ICAgIC8vICAgICB1dGlsRG9tLmFkZFNjcmlwdChwbHVnaW5fcGF0aHMpO1xuXHQgICAgLy8gICAgIHBsdWdpbkxvYWRlck1hcFtjZG5QYXRoXSA9IHRydWU7XG5cdCAgICAvLyAgIH1cblx0ICAgIC8vIH0sXG5cdFxuXHQgICAgYWRkU3R5bGU6IGZ1bmN0aW9uIChpZCwgc3R5bGVVcmwpIHtcblx0ICAgICAgdmFyIHN0eWxlSWQgPSBpZCArICdfc3R5bGUnO1xuXHQgICAgICB2YXIgc3R5bGVOb2RlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoc3R5bGVJZCk7XG5cdCAgICAgIGlmICghc3R5bGVOb2RlKSB7XG5cdCAgICAgICAgc3R5bGVOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGluaycpO1xuXHQgICAgICAgIHN0eWxlTm9kZS5pZCA9IHN0eWxlSWQ7XG5cdCAgICAgICAgc3R5bGVOb2RlLmhyZWYgPSBzdHlsZVVybDtcblx0ICAgICAgICBzdHlsZU5vZGUucmVsID0gJ3N0eWxlc2hlZXQnO1xuXHQgICAgICAgIHN0eWxlTm9kZS50eXBlID0gJ3RleHQvY3NzJztcblx0ICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpLml0ZW0oMCkuYXBwZW5kQ2hpbGQoc3R5bGVOb2RlKTtcblx0ICAgICAgfVxuXHQgICAgfSxcblx0XG5cdCAgICBydW46IGZ1bmN0aW9uKCkge1xuXHQgICAgICB2YXIgX3NlbGYgPSB0aGlzO1xuXHQgICAgICB2YXIgaXNfaW5faWZyYW1lID0gcGFyZW50ICE9PSBzZWxmOyAgLy8g5b2T5YmN6aG16Z2i5piv5ZCm5ZyoIGlmcmFtZSDkuK1cblx0ICAgICAgdmFyIGNvbmZpZyA9IHRoaXMub3B0aW9ucy5jb25maWcgfHwge307XG5cdCAgICAgIGlmICghaXNfaW5faWZyYW1lICYmIGNvbmZpZy51cmxSdWxlcykge1xuXHQgICAgICAgIGVhY2goY29uZmlnLnVybFJ1bGVzLCBmdW5jdGlvbiAodikge1xuXHQgICAgICAgICAgdmFyIHJlZyA9IG5ldyBSZWdFeHAodi5ydWxlKTtcblx0ICAgICAgICAgIHZhciBtYXRjaGVkSW5MUztcblx0ICAgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgIG1hdGNoZWRJbkxTID0gdi5pZCA/IHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKHYuaWQpIDogJyc7XG5cdCAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuXHQgICAgICAgICAgaWYgKHJlZy50ZXN0KGxvY2F0aW9uLmhyZWYpIHx8IG1hdGNoZWRJbkxTKSB7XG5cdCAgICAgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgICAgd2luZG93LnNlc3Npb25TdG9yYWdlLnNldEl0ZW0odi5pZCwgdHJ1ZSk7XG5cdCAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG5cdCAgICAgICAgICAgIGlmICh1dGlsQXJyYXkuaXNBcnJheSh2LmNkblBhdGgpKSB7XG5cdCAgICAgICAgICAgICAgZWFjaCh2LmNkblBhdGgsIGZ1bmN0aW9uIChwYXRoKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoL1xcLmNzcyQvLnRlc3QocGF0aCkpIHtcblx0ICAgICAgICAgICAgICAgICAgX3NlbGYuYWRkU3R5bGUodi5pZCwgcGF0aCk7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKC9cXC5qcy8udGVzdChwYXRoKSkge1xuXHQgICAgICAgICAgICAgICAgICB1dGlsRG9tLmFkZFNjcmlwdChwYXRoKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICB1dGlsRG9tLmFkZFNjcmlwdCh2LmNkblBhdGgpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfSk7XG5cdCAgICAgIH1cblx0ICAgICAgLy8gYXBsdXMuYXBsdXNfcHVic3ViLnN1YnNjcmliZSgnc2V0TWV0YUluZm8nLCBmdW5jdGlvbiAobWV0YUtleSwgbWV0YVZhdWUpIHtcblx0ICAgICAgLy8gICBfc2VsZi5sb2FkQXBsdXNQbHVnaW4obWV0YUtleSwgbWV0YVZhdWUpO1xuXHQgICAgICAvLyB9KTtcblx0ICAgICAgLy8gaWYgKC9hcGx1c193ZWJ2dF9tZXNzYWdlci8udGVzdChsb2NhdGlvbi5ocmVmKSkge1xuXHQgICAgICAvLyAgIHV0aWxEb20uYWRkU2NyaXB0KHBsdWdpbl9wYXRocyk7XG5cdCAgICAgIC8vIH1cblx0ICAgIH1cblx0ICB9O1xuXHR9O1xuXG5cbi8qKiovIH0pLFxuLyogMTIzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIHByb2plY3QgLSBmaWxlcGF0aFxuXHQgKiDlj6/op4bljJbliIbmnpDmj5Lku7bliqDovb3lmahcblx0ICpcblx0ICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuXHQgKlxuXHQgKiBBdXRob3JzOlxuXHQgKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG5cdCAqL1xuXHQndXNlIHN0cmljdCc7XG5cdFxuXHR2YXIgdXRpbERvbSA9IF9fd2VicGFja19yZXF1aXJlX18oMzYpO1xuXHR2YXIgdXRpbFVybCA9IF9fd2VicGFja19yZXF1aXJlX18oMTYpO1xuXHR2YXIgdXRpbEhvdExvYWRlciA9IF9fd2VicGFja19yZXF1aXJlX18oMTI0KTtcblx0XG5cdC8qKlxuXHQgKiBET01SZWFkeeWQjuW8gOWni+aJp+ihjOWKoOi9vWFwbHVzSlPmj5Lku7bnmoTliqjkvZxcblx0ICovXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuXHQgIHJldHVybiB7XG5cdCAgICAvKipcblx0ICAgICAqIEBwYXJhbXMge09iamVjdH0gb3B0aW9ucyB7XG5cdCAgICAgKiAgIGxvZ0NvbmZpZzoge2xvZ0NvbmZpZ31cblx0ICAgICAqIH1cblx0ICAgICAqL1xuXHQgICAgaW5pdDogZnVuY3Rpb24ob3B0aW9ucykge1xuXHQgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHQgICAgfSxcblx0XG5cdCAgICBydW46IGZ1bmN0aW9uKCkge1xuXHQgICAgICB2YXIgaXNfaW5faWZyYW1lID0gcGFyZW50ICE9PSBzZWxmOyAgLy8g5b2T5YmN6aG16Z2i5piv5ZCm5ZyoIGlmcmFtZSDkuK1cblx0ICAgICAgdmFyIGNvbmZpZyA9IHRoaXMub3B0aW9ucy5jb25maWcgfHwge307XG5cdCAgICAgIHZhciBzZXNzaW9uS2V5ID0gY29uZmlnLnNlc3Npb25LZXk7XG5cdCAgICAgIHZhciBmbGFnID0gdXRpbFVybC5nZXRQYXJhbUZyb21Vcmwoc2Vzc2lvbktleSwgbG9jYXRpb24uaHJlZik7XG5cdCAgICAgIGlmICghaXNfaW5faWZyYW1lICYmIChmbGFnID09PSAncHJlJyB8fCBmbGFnID09PSAndHJ1ZScpKSB7XG5cdCAgICAgICAgdmFyIEpTUEFUSCA9IGNvbmZpZy5KU1BBVEg7XG5cdCAgICAgICAgdmFyIENTU1BBVEggPSBjb25maWcuQ1NTUEFUSDtcblx0ICAgICAgICBpZiAoZmxhZyA9PT0gJ3ByZScpIHtcblx0ICAgICAgICAgIHZhciBkZXZDZG4gPSAnZGV2LmcuYWxpY2RuLmNvbSc7XG5cdCAgICAgICAgICBKU1BBVEggPSBKU1BBVEgucmVwbGFjZSgvZ1xcLmFsaWNkblxcLmNvbS8sIGRldkNkbik7XG5cdCAgICAgICAgICBDU1NQQVRIID0gQ1NTUEFUSC5yZXBsYWNlKC9nXFwuYWxpY2RuXFwuY29tLywgZGV2Q2RuKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIHZhciBqc0lkID0gc2Vzc2lvbktleSArICdKUyc7XG5cdCAgICAgICAgdmFyIG1hdGNoZWRJbkxTO1xuXHQgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICBtYXRjaGVkSW5MUyA9IHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKGpzSWQpO1xuXHQgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG5cdCAgICAgICAgaWYgKG1hdGNoZWRJbkxTIHx8IEpTUEFUSCkge1xuXHQgICAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgd2luZG93LnNlc3Npb25TdG9yYWdlLnNldEl0ZW0oanNJZCwgdHJ1ZSk7XG5cdCAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuXHQgICAgICAgICAgdXRpbERvbS5hZGRTY3JpcHQoSlNQQVRIKTtcblx0ICAgICAgICAgIGlmIChDU1NQQVRIKSB7XG5cdCAgICAgICAgICAgIHZhciBjc3NJZCA9IHNlc3Npb25LZXkgKyAnQ1NTJztcblx0ICAgICAgICAgICAgdXRpbEhvdExvYWRlci5hZGRTdHlsZShjc3NJZCwgQ1NTUEFUSCk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfTtcblx0fTtcblxuXG4vKioqLyB9KSxcbi8qIDEyNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdC8qKlxuXHQgKiDliKTmlq3mmK/lkKbmlK/mjIF0b3VjaOS6i+S7tlxuXHQgKiBAcmV0dXJuIFtCb29sZWFuXVxuXHQgKi9cblx0ZXhwb3J0cy5hZGRTdHlsZSA9IGZ1bmN0aW9uIChpZCwgc3R5bGVVcmwpIHtcblx0ICB2YXIgc3R5bGVJZCA9IGlkICsgJ19zdHlsZSc7XG5cdCAgdmFyIHN0eWxlTm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHN0eWxlSWQpO1xuXHQgIGlmICghc3R5bGVOb2RlKSB7XG5cdCAgICBzdHlsZU5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaW5rJyk7XG5cdCAgICBzdHlsZU5vZGUuaWQgPSBzdHlsZUlkO1xuXHQgICAgc3R5bGVOb2RlLmhyZWYgPSBzdHlsZVVybDtcblx0ICAgIHN0eWxlTm9kZS5yZWwgPSAnc3R5bGVzaGVldCc7XG5cdCAgICBzdHlsZU5vZGUudHlwZSA9ICd0ZXh0L2Nzcyc7XG5cdCAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpLml0ZW0oMCkuYXBwZW5kQ2hpbGQoc3R5bGVOb2RlKTtcblx0ICB9XG5cdH07XG5cblxuLyoqKi8gfSksXG4vKiAxMjUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogYWxpbG9nL3MgLSBzcmMvcGx1Z2lucy9saWJfYXB2L21haW4uanNcblx0ICog6Ieq5YqoUFbmj5Lku7Zcblx0ICpcblx0ICpcblx0ICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuXHQgKlxuXHQgKiBBdXRob3JzOlxuXHQgKiAgIFJpY2hhcmR86LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cblx0ICovXG5cdCd1c2Ugc3RyaWN0Jztcblx0dmFyIHV0aWxMb2dnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2KTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuXHQgIHJldHVybiB7XG5cdCAgICBydW46IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgLy8g5pyJ5Y+v6KeG5YyW5Z+L54K555qE5oOF5Ya15LiL5peg6ZyA6Ieq5Yqo5omTcHbml6Xlv5dcblx0ICAgICAgaWYgKGFwbHVzLl9hcGx1c19jcGx1Z2luX3dlYnZ0KSB7XG5cdCAgICAgICAgdXRpbExvZ2dlci5sb2dnZXIoe1xuXHQgICAgICAgICAgbXNnOiAn5b2T5YmN6ZuG5oiQ5LqG5Y+v6KeG5YyW5Z+L54K55YiG5p6Q5o+S5Lu277yM6ZyA6KaB5oKo5YGa5Y+v6KeG5YyW5Z+L54K56YWN572u77yM5omN5Lya5pyJ6Ieq5YqocHblip/og70nXG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgcmV0dXJuO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIF9fd2VicGFja19yZXF1aXJlX18oMTI2KSgpOyAgXG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9O1xuXHR9O1xuXG4vKioqLyB9KSxcbi8qIDEyNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBhbGlsb2cvcyAtIHNyYy9wbHVnaW5zL2xpYl9hcHYvbWFpbi5qc1xuXHQgKiDoh6rliqhQVuaPkuS7tlxuXHQgKlxuXHQgKlxuXHQgKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG5cdCAqXG5cdCAqIEF1dGhvcnM6XG5cdCAqICAgUmljaGFyZHzosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuXHQgKi9cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIHV0aWxHb2xkbG9nID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuXHQgIHZhciBhcGx1cyA9IHV0aWxHb2xkbG9nLmdldEdsb2JhbFZhbHVlKCdhcGx1cycpO1xuXHQgIHZhciBhcGx1c19xdWV1ZSA9IHV0aWxHb2xkbG9nLmdldEdsb2JhbFZhbHVlKCdhcGx1c19xdWV1ZScpO1xuXHQgIGlmIChhcGx1cy5fYXBsdXNfYXB2KSB7XG5cdCAgICByZXR1cm47XG5cdCAgfSBlbHNlIHtcblx0ICAgIGFwbHVzLl9hcGx1c19hcHYgPSB7XG5cdCAgICAgIHN0YXR1czogJ2NvbXBsZXRlJ1xuXHQgICAgfTtcblx0ICB9XG5cdCAgYXBsdXNfcXVldWUucHVzaCh7XG5cdCAgICBhY3Rpb246ICdhcGx1cy5zZW5kUFYnLFxuXHQgICAgYXJndW1lbnRzOiBbe1xuXHQgICAgICBpc19hdXRvOiB0cnVlXG5cdCAgICB9XVxuXHQgIH0pO1xuXHR9O1xuXG5cbi8qKiovIH0pLFxuLyogMTI3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIGFsaWxvZy9zL3NyYy9hcGx1cy5qc1xuXHQgKiDmqKHlnZfljJbnmoRhcGx1c0pz5YWl5Y+jXG5cdCAqXG5cdCAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cblx0ICpcblx0ICogQXV0aG9yczpcblx0ICogICBqaXpoYS53eWpAYmxvZyBodHRwOi8vb2xkai5uZXRcblx0ICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuXHQgKi9cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXBsdXNfY29uZmlnKSB7XG5cdCAgdmFyIHdpbiA9IHdpbmRvdztcblx0ICB2YXIgX2sgPSAnZ190Yl9hcGx1c19sb2FkZWQnO1xuXHQgIGlmICh3aW5bX2tdKSByZXR1cm47XG5cdCAgd2luW19rXSA9IDE7XG5cdCAgX193ZWJwYWNrX3JlcXVpcmVfXyg0NykuaXNEZWJ1Z0FwbHVzKCk7XG5cdCAgdmFyIHV0aWxMb2dnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2KTtcblx0ICB2YXIgdXRpbFB1YnN1YiA9IF9fd2VicGFja19yZXF1aXJlX18oOTkpO1xuXHQgIHZhciB1dGlsRGFzaCA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpO1xuXHQgIHZhciBlYWNoID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNyk7XG5cdCAgdmFyIGFwbHVzaW5pdCA9IF9fd2VicGFja19yZXF1aXJlX18oMTI4KTtcblx0XG5cdCAgdmFyIFJVTk5JTkcgPSAncnVubmluZyc7XG5cdCAgLy8gdmFyIENPTVBMRVRFID0gJ2NvbXBsZXRlJztcblx0ICB2YXIgYXBsdXNTdGF0dXMgPSBbJ2FwbHVzUmVhZHknLCBSVU5OSU5HXTtcblx0ICB1dGlsUHVic3ViLmRvUHViTXNnKGFwbHVzU3RhdHVzKTtcblx0XG5cdCAgYXBsdXNpbml0LnJ1bih7XG5cdCAgICBwbHVnaW5zOiBhcGx1c19jb25maWcucGx1Z2lucyxcblx0ICAgIGNvbnRleHQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgdmFyIGNvbmZpZ19wdl9jb250ZXh0ID0ge1xuXHQgICAgICAgIFBBR0VfTE9BRF9USU1FOiBuZXcgRGF0ZSgpXG5cdCAgICAgIH07XG5cdCAgICAgIHZhciBQTFVHSU5TX1BWID0gW107XG5cdCAgICAgIGVhY2goYXBsdXNfY29uZmlnLnBsdWdpbnMsIGZ1bmN0aW9uICh2KSB7XG5cdCAgICAgICAgY29uZmlnX3B2X2NvbnRleHRbdi5uYW1lXSA9IHYuY29uZmlnIHx8IHt9O1xuXHQgICAgICAgIGlmICh2Lm5hbWUgPT09ICdhcGx1c19sb2dfaW5qZWN0JyAmJiB2LmNvbmZpZyAmJiB2LmNvbmZpZy5wbHVnaW5zKSB7XG5cdCAgICAgICAgICBQTFVHSU5TX1BWID0gdi5jb25maWcucGx1Z2lucy5wdjtcblx0ICAgICAgICAgIGVhY2goUExVR0lOU19QViwgZnVuY3Rpb24gKHYpIHtcblx0ICAgICAgICAgICAgY29uZmlnX3B2X2NvbnRleHRbdi5uYW1lXSA9IHYuY29uZmlnO1xuXHQgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9KTtcblx0ICAgICAgcmV0dXJuIHV0aWxEYXNoLmFzc2lnbihjb25maWdfcHZfY29udGV4dCwge1xuXHQgICAgICAgIGFwbHVzX2NvbmZpZzogYXBsdXNfY29uZmlnXG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgIH0sIGZ1bmN0aW9uICgpIHtcblx0ICAgIHV0aWxMb2dnZXIubG9nZ2VyKHtcblx0ICAgICAgbXNnOiAnQVBMVVPliJ3lp4vljJblrozmiJAnXG5cdCAgICB9KTtcblx0ICB9KTtcblx0fTtcblxuXG4vKioqLyB9KSxcbi8qIDEyOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBwcm9qZWN0IC0gZmlsZXBhdGhcblx0ICogYXBsdXMgQVBJXG5cdCAqXG5cdCAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cblx0ICpcblx0ICogQXV0aG9yczpcblx0ICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuXHQgKi9cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIFJlZHVjZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExMCk7XG5cdHZhciBpc0Z1bmN0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMCk7XG5cdHZhciB1dGlsUHVic3ViID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5OSk7XG5cdFxuXHQvKipcblx0ICog5bCG5ZCO57ut55qEaW5pdOWKqOS9nOmDveWBmuaIkOaPkuS7tu+8jOebruWJjeWPquaciXdoZXJlX3RvX3NlbmRwduS4gOmhuVxuXHQgKlxuXHQgKiBAcGFyYW1zIHtPYmplY3R9IG9wdHMge1xuXHQgKiAgIHBsdWdpbnNcblx0ICogICBjb250ZXh0XG5cdCAqIH1cblx0ICogQHBhcmFtcyB7RnVuY3Rpb259IGNhbGxiYWNrXG5cdCAqXG5cdCAqL1xuXHRleHBvcnRzLnJ1biA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuXHQgIHZhciByZWR1Y2VyID0gbmV3IFJlZHVjZXIoKTtcblx0ICByZWR1Y2VyLnJ1bih7XG5cdCAgICBwbHVnaW5zOiBvcHRzLnBsdWdpbnMsXG5cdCAgICBjb250ZXh0OiBvcHRzLmNvbnRleHRcblx0ICB9LCB7XG5cdCAgICBjb25maWc6IHt9LFxuXHQgICAgdXNlcmRhdGE6IHt9LFxuXHQgICAgcHVic3ViVHlwZTogJ2FwbHVzaW5pdCcsXG5cdCAgICBtZXNzYWdlRm5RdWV1ZTogW10sXG5cdCAgICBtaWRkbGV3YXJlTWVzc2FnZUtleTogJ213X2NoYW5nZV9hcGx1c2luaXQnXG5cdCAgfSwgZnVuY3Rpb24gKGN0eCkge1xuXHQgICAgdmFyIG1zZ3MgPSBbJ2FwbHVzSW5pdENvbnRleHQnLCBjdHhdO1xuXHQgICAgdXRpbFB1YnN1Yi5kb1B1Yk1zZyhtc2dzKTtcblx0ICAgIHV0aWxQdWJzdWIuZG9DYWNoZVB1YnMobXNncyk7XG5cdCAgICBpZiAoaXNGdW5jdGlvbihjYWxsYmFjaykpIHtcblx0ICAgICAgY2FsbGJhY2soKTtcblx0ICAgIH1cblx0ICB9KTtcblx0fTtcblxuXG4vKioqLyB9KVxuLyoqKioqKi8gXSk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIGFwbHVzX2Nsb3VkLmpzIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGlkOiBtb2R1bGVJZCxcbiBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay9ib290c3RyYXAgMGI4ZjA5YWNiYTY4MDc5NjQwZjkiLCIvKipcbiAqIGFsaWxvZy9hcGx1cy9zcmMvYXBsdXMuanNcbiAqIOaooeWdl+WMlueahGFwbHVzSnPlhaXlj6NcbiAqXG4gKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG4gKlxuICogQXV0aG9yczpcbiAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuLy8gcmVxdWlyZSgnLi4vYnVpbGRfYWxpL2FwbHVzX3NwYV9hdXRvX3B2LmpzJyk7XG5yZXF1aXJlKCdAdXRpbHMvdXRpbEdvbGRsb2cnKS5pbml0R2xvYmFsKHdpbmRvdyk7XG4oZnVuY3Rpb24gKCkge1xuICB2YXIgYXBsdXNfY29uZmlnID0gcmVxdWlyZSgnLi9hcGx1c19jbG91ZF9jb25maWcnKTtcbiAgcmVxdWlyZSgnLi9hcGx1c193ZWJfYmFzaWMnKShhcGx1c19jb25maWcpO1xufSkoKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2FwbHVzX2Nsb3VkLmpzXG4vLyBtb2R1bGUgaWQgPSAxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogcHJvamVjdCAtIGZpbGVwYXRoXG4gKiDmk43kvZxhcGx1c+eahOW3peWFt+exu1xuICpcbiAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cbiAqXG4gKiBBdXRob3JzOlxuICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBhcGx1c1N0YXRpYyA9IHJlcXVpcmUoJ0B1dGlscy9hcGx1c1N0YXRpYycpO1xuXG52YXIgQVBMVVMgPSBhcGx1c1N0YXRpYy5BUExVUztcbnZhciBBUExVU19RVUVVRSA9IGFwbHVzU3RhdGljLkFQTFVTX1FVRVVFO1xuXG52YXIgR09MRExPRyA9IGFwbHVzU3RhdGljLkdPTERMT0c7XG52YXIgR09MRExPR19RVUVVRSA9IGFwbHVzU3RhdGljLkdPTERMT0dfUVVFVUU7XG5cbnZhciBfYXBsdXNfY29udGV4dDtcbnZhciBpc1dlYiA9IGZhbHNlO1xudHJ5IHtcbiAgX2FwbHVzX2NvbnRleHQgPSB3aW5kb3c7XG4gIGlzV2ViID0gdHJ1ZTtcbn0gY2F0Y2ggKGUpIHt9XG5cbmV4cG9ydHMuZ2V0Q29udGV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIF9hcGx1c19jb250ZXh0O1xufTtcblxuZXhwb3J0cy5pbml0R2xvYmFsID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgaWYgKGNvbnRleHQpIHtcbiAgICBfYXBsdXNfY29udGV4dCA9IGNvbnRleHQ7XG4gIH0gZWxzZSB7XG4gICAgX2FwbHVzX2NvbnRleHQgPSB7XG4gICAgICB2OiAxLFxuICAgICAgYXBsdXM6IHt9LFxuICAgICAgYXBsdXNfcXVldWU6IFtdXG4gICAgfTtcbiAgfVxuICB2YXIgX2FwbHVzRGVmYXVsdFZhbHVlO1xuICB2YXIgX2FwbHVzUXVldWVEZWZhdWx0VmFsdWU7XG4gIGlmIChpc1dlYikge1xuICAgIHRyeSB7XG4gICAgICBfYXBsdXNEZWZhdWx0VmFsdWUgPSAoX2FwbHVzX2NvbnRleHQuYXBsdXMgfHwgKF9hcGx1c19jb250ZXh0LmFwbHVzID0ge30pKTtcbiAgICAgIHZhciBfZ29sZGxvZ19xdWV1ZSA9IChfYXBsdXNfY29udGV4dC5nb2xkbG9nX3F1ZXVlIHx8IChfYXBsdXNfY29udGV4dC5nb2xkbG9nX3F1ZXVlID0gW10pKTtcbiAgICAgIF9hcGx1c1F1ZXVlRGVmYXVsdFZhbHVlID0gKF9hcGx1c19jb250ZXh0LmFwbHVzX3F1ZXVlIHx8IChfYXBsdXNfY29udGV4dC5hcGx1c19xdWV1ZSA9IFtdKSk7XG4gICAgICBfYXBsdXNRdWV1ZURlZmF1bHRWYWx1ZSA9IF9nb2xkbG9nX3F1ZXVlLmNvbmNhdChfYXBsdXNRdWV1ZURlZmF1bHRWYWx1ZSk7ICBcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9IGVsc2Uge1xuICAgIF9hcGx1c0RlZmF1bHRWYWx1ZSA9IF9hcGx1c19jb250ZXh0LmFwbHVzO1xuICAgIF9hcGx1c1F1ZXVlRGVmYXVsdFZhbHVlID0gX2FwbHVzX2NvbnRleHQuYXBsdXNfcXVldWU7XG4gIH1cbiAgXG4gIF9hcGx1c19jb250ZXh0LmFwbHVzID0gX2FwbHVzX2NvbnRleHQuZ29sZGxvZyA9IF9hcGx1c0RlZmF1bHRWYWx1ZTtcbiAgX2FwbHVzX2NvbnRleHQuYXBsdXNfcXVldWUgPSBfYXBsdXNfY29udGV4dC5nb2xkbG9nX3F1ZXVlID0gX2FwbHVzUXVldWVEZWZhdWx0VmFsdWU7XG4gIFxuICByZXR1cm4gX2FwbHVzX2NvbnRleHQ7XG59O1xuXG52YXIgZ2V0R2xvYmFsVmFsdWUgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IEFQTFVTIHx8IGtleSA9PT0gR09MRExPRykge1xuICAgIHZhciBnID0gX2FwbHVzX2NvbnRleHRbQVBMVVNdIHx8IF9hcGx1c19jb250ZXh0W0dPTERMT0ddO1xuICAgIGlmICghZykge1xuICAgICAgZyA9IF9hcGx1c19jb250ZXh0W0FQTFVTXSA9IF9hcGx1c19jb250ZXh0W0dPTERMT0ddID0ge307XG4gICAgfVxuICAgIHJldHVybiBnO1xuICB9XG4gIHZhciBnb2xkbG9nX3F1ZXVlID0gR09MRExPR19RVUVVRTtcbiAgdmFyIGFwbHVzX3F1ZXVlID0gQVBMVVNfUVVFVUU7XG4gIGlmIChrZXkgPT09IGFwbHVzX3F1ZXVlIHx8IGtleSA9PT0gZ29sZGxvZ19xdWV1ZSkge1xuICAgIHZhciBxID0gX2FwbHVzX2NvbnRleHRbYXBsdXNfcXVldWVdIHx8IF9hcGx1c19jb250ZXh0W2dvbGRsb2dfcXVldWVdO1xuICAgIGlmICghcSkge1xuICAgICAgcSA9IF9hcGx1c19jb250ZXh0W2FwbHVzX3F1ZXVlXSA9IF9hcGx1c19jb250ZXh0W2dvbGRsb2dfcXVldWVdID0gW107XG4gICAgfVxuICAgIHJldHVybiBxO1xuICB9XG59O1xuZXhwb3J0cy5nZXRHbG9iYWxWYWx1ZSA9IGdldEdsb2JhbFZhbHVlO1xuXG5leHBvcnRzLnNldEdsb2JhbFZhbHVlID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgX2FwbHVzX2NvbnRleHRba2V5XSA9IHZhbHVlO1xufTtcblxuLyoqXG4gKiDojrflj5ZhcGx1c+WGhemDqOWPmOmHj1xuICogQHBhcmFtcyBbU3RyaW5nXSBrZXlcbiAqIEByZXR1cm4gW09iamVjdHxTdHJpbmd8TnVtYmVyfEJvb2xlYW5dXG4gKi9cbnZhciBnZXRHb2xkbG9nVmFsID0gZnVuY3Rpb24oa2V5KSB7XG4gIHZhciB2O1xuICB0cnkge1xuICAgIHZhciBhcGx1cyA9IGdldEdsb2JhbFZhbHVlKEFQTFVTKTtcbiAgICB2ID0gYXBsdXNba2V5XTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHYgPSAnJztcbiAgfSBmaW5hbGx5IHtcbiAgICByZXR1cm4gdjtcbiAgfVxufTtcbmV4cG9ydHMuZ2V0R29sZGxvZ1ZhbCA9IGdldEdvbGRsb2dWYWw7XG5cbi8qKlxuICog6K6+572uYXBsdXPlhoXpg6jlj5jph49cbiAqIEBwYXJhbXMgW1N0cmluZ10ga2V5XG4gKiBAcGFyYW1zIFtPYmplY3R8U3RyaW5nfE51bWJlcnxCb29sZWFuXSB2YWxcbiAqIEByZXR1cm4gW0Jvb2xlYW5dXG4gKi9cbnZhciBzZXRHb2xkbG9nVmFsID0gZnVuY3Rpb24oa2V5LCB2YWwpIHtcbiAgdmFyIGYgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgYXBsdXMgPSBnZXRHbG9iYWxWYWx1ZShBUExVUyk7XG4gICAgaWYgKGtleSkge1xuICAgICAgYXBsdXNba2V5XSA9IHZhbDtcbiAgICAgIGYgPSB0cnVlO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGYgPSBmYWxzZTtcbiAgfSBmaW5hbGx5IHtcbiAgICByZXR1cm4gZjtcbiAgfVxufTtcbmV4cG9ydHMuc2V0R29sZGxvZ1ZhbCA9IHNldEdvbGRsb2dWYWw7XG5cbi8qKlxuICog6I635Y+WY2xpZW50SW5mbyjmtY/op4jlmajjgIHorr7lpIfnrYnkv6Hmga8pXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiAgIHZlcnNpb246IDIsXG4gKiAgIHVhX2luZm86IHtcbiAqICAgICBiOiBcImNocm9tZTU4XCJcbiAqICAgICBpc206IFwibWFjXCJcbiAqICAgICBteDogXCIzNjBlZVwiXG4gKiAgICAgbzogXCJtYWNcIlxuICogICAgIHA6IDFcbiAqICAgICBzOiBcIjE5MjB4MTA4MFwiXG4gKiAgICAgdzogXCJ3ZWJraXRcIlxuICogICB9XG4gKiB9XG4gKi9cbmV4cG9ydHMuZ2V0Q2xpZW50SW5mbyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZ2V0R29sZGxvZ1ZhbCgnX2FwbHVzX2NsaWVudCcpIHx8IHt9O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2xpYl91L3V0aWxzL3V0aWxHb2xkbG9nLmpzXG4vLyBtb2R1bGUgaWQgPSAyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBBUExVUyA9ICdhcGx1cyc7XG52YXIgR09MRExPRyA9ICdnb2xkbG9nJztcbnZhciBBUExVU19RVUVVRSA9IEFQTFVTICsgJ19xdWV1ZSc7XG52YXIgR09MRExPR19RVUVVRSA9IEdPTERMT0cgKyAnX3F1ZXVlJztcbnZhciBNV19DSEFOR0UgPSAnbXdfY2hhbmdlJztcbnZhciBNRVRBX0lORk8gPSAnTWV0YUluZm8nO1xudmFyIEFQUEVORF9NRVRBX0lORk8gPSAnYXBwZW5kJyArIE1FVEFfSU5GTztcbnZhciBTRVRfTUVUQV9JTkZPID0gJ3NldCcgKyBNRVRBX0lORk87XG52YXIgSFRUUCA9ICdodHRwJztcbnZhciBfcHVic3ViID0gJ19wdWJzdWInO1xuXG52YXIgZGVmYXVsdENvZGUgPSAnb3RoZXInO1xudmFyIENMSyA9ICcyMTAxJztcbnZhciBFWFAgPSAnMjIwMSc7XG52YXIgSU1QRVhQID0gJzIyMDInO1xudmFyIE9USEVSID0gJzE5OTk5JztcbnZhciBBUFBfU0hPVyA9ICcxMDIzJztcbnZhciBBUFBfSElERV9PUl9VTkxPQUQgPSAnMTAxMCc7IFxudmFyIFNFU1NJT05fSU5URVJWQUwgPSAzMDAwMDsgLy8gc2Vzc2lvbklk6L+H5pyf5pe26Ze0IDMwMDAwXG52YXIgRUtWUyA9ICdla3ZzJztcbnZhciBFVkVOVF9NQVhfQ09VTlQgPSAxMDAwMDsgLy8g5pys5Zyw5pyA5aSa5a2Y5YKo6L+Z5LmI5aSaZWt25pWw5o2uXG52YXIgTUVNT1JZX01BWF9DT1VOVCA9IDE7IC8vIOWGheWtmOS4reWtmOWCqOeahOacgOWkp+aVsOaNruaVsOmHj++8jOi2hei/h+WImee8k+WtmOWIsOacrOWcsFxudmFyIEVWRU5UX1NFTkRfREVGQVVMVF9JTlRFUlZBTCA9IDMwMDA7IC8vIGVrdum7mOiupOWPkemAgemXtOmalOaXtumXtDogM+enklxudmFyIFBBR0VfU1RBUlQgPSAnJCRfcGFnZV9zdGFydCc7XG52YXIgQVBQX1NUQVJUID0gJyQkX2FwcF9zdGFydCc7XG52YXIgQVBQX0VORCA9ICckJF9hcHBfZW5kJztcbm1vZHVsZS5leHBvcnRzID0ge1xuICBQQUdFX0VOVEVSOiAnUEFHRV9FTlRFUicsXG4gIENVUlJFTlRfUEFHRV9DT05GSUc6ICdDVVJSRU5UX1BBR0VfQ09ORklHJyxcbiAgX0FOT05ZX0lEOiAnX2Fub255X2lkJyxcbiAgX1VTRVJfSUQ6ICdfdXNlcl9pZCcsXG4gIERFRkFVTFRfQ09ERTogZGVmYXVsdENvZGUsXG4gIE9USEVSOiBPVEhFUixcbiAgRVZFTlRfTUFQOiB7XG4gICAgJzIxMDEnOiAnY2xpY2snLFxuICAgICcyMjAxJzogJ2V4cG9zdXJlJyxcbiAgICAnMjIwMic6ICdleHBvc3VyZScsXG4gICAgJzE5OTk5JzogZGVmYXVsdENvZGUsXG4gICAgJzEwMjMnOiAnYXBwX3Nob3cnLFxuICAgICcxMDEwJzogJ2FwcF9oaWRlX29yX3VubG9hZCdcbiAgfSxcbiAgRVZFTlRfSURfTUFQOiB7XG4gICAgJ0VYUCc6IEVYUCxcbiAgICAnSU1QRVhQJzogSU1QRVhQLFxuICAgICdDTEsnOiBDTEssXG4gICAgJ09USEVSJzogT1RIRVIsXG4gICAgJ1NIT1cnOiBBUFBfU0hPVyxcbiAgICAnSF9PUl9VJzogQVBQX0hJREVfT1JfVU5MT0FEXG4gIH0sXG4gIEFQTFVTOiBBUExVUyxcbiAgR09MRExPRzogR09MRExPRyxcbiAgU1VCU0NSSUJFOiBBUExVUyArICcuJyArIEFQTFVTICsgX3B1YnN1YiArICcuc3Vic2NyaWJlJyxcbiAgUFVCTElTSDogQVBMVVMgKyAnLicgKyBBUExVUyArIF9wdWJzdWIgKyAnLnB1Ymxpc2gnLFxuICBDQUNIRV9QVUJTOiBBUExVUyArICcuJyArIEFQTFVTICsgX3B1YnN1YiArICcuY2FjaGVQdWJzJyxcbiAgQVBMVVNfVU5JVkVSU0FMOiBBUExVUyArICdfdW5pdmVyc2FsJyxcbiAgQVBMVVNfUVVFVUU6IEFQTFVTX1FVRVVFLFxuICBHT0xETE9HX1FVRVVFOiBHT0xETE9HX1FVRVVFLFxuICBDT01QTEVURTogJ2NvbXBsZXRlJyxcbiAgUFZfQ09ERTogJzIwMDEnLFxuICBFWFBfQ09ERTogRVhQLFxuICBDTEtfQ09ERTogQ0xLLFxuICBPVEhFUl9DT0RFOiBPVEhFUixcbiAgQ0xLOiAnQ0xLJyxcbiAgRVhQOiAnRVhQJyxcbiAgLy8gT1RIRVI6ICdPVEhFUicsXG4gIFNQTV9DTlQ6ICdzcG0tY250JyxcbiAgU1BNX1VSTDogJ3NwbS11cmwnLFxuICBTUE1fUFJFOiAnc3BtLXByZScsXG4gIE1XX0NIQU5HRV9QVjogTVdfQ0hBTkdFICsgJ19wdicsXG4gIE1XX0NIQU5HRV9ISkxKOiBNV19DSEFOR0UgKyAnX2hqbGonLFxuICBIVFRQOiBIVFRQICsgJzonLFxuICBIVFRQUzogJ2h0dHBzOicsXG4gIEFQUEVORF9NRVRBX0lORk86IEFQUEVORF9NRVRBX0lORk8sXG4gIFNFVF9NRVRBX0lORk86IFNFVF9NRVRBX0lORk8sXG4gIEFQTFVTX0FQUEVORF9NRVRBX0lORk86IEFQTFVTICsgJy4nICsgQVBQRU5EX01FVEFfSU5GTyxcbiAgQVBMVVNfU0VUX01FVEFfSU5GTzogQVBMVVMgKyAnLicgKyBTRVRfTUVUQV9JTkZPLFxuICBQVklEOidwdmlkJyxcbiAgQVBMVVNfTE9HX1BJUEU6J2FwbHVzLWxvZy1waXBlJyxcbiAgb3BlbkFQSXM6IFtcbiAgICAnc2VuZCcsICdlbnRlcicsICdzZW5kUFYnLCAncmVjb3JkJywgJ2NvbWJpbmVSZWNvcmQnLCAncmVjb3JkVWRhdGEnLFxuICAgICdzZXRQYWdlU1BNJywgJ3NldE1ldGFJbmZvJywgJ2FwcGVuZE1ldGFJbmZvJyxcbiAgICAndXBkYXRlUGFnZVByb3BlcnRpZXMnLFxuICAgICd1cGRhdGVOZXh0UGFnZVByb3BlcnRpZXMnLFxuICAgICd1cGRhdGVQYWdlVXRwYXJhbScsXG4gICAgJ3VwZGF0ZU5leHRQYWdlVXRwYXJhbScsXG4gICAgJ3BhZ2VBcHBlYXInLCAncGFnZURpc2FwcGVhcicsICdza2lwUGFnZScsXG4gICAgJ3VwZGF0ZVNlc3Npb25Qcm9wZXJ0aWVzJywgJ2dldFBhZ2VTcG1VcmwnLCAnZ2V0UGFnZVNwbVByZSdcbiAgXSxcbiAgU0VTU0lPTl9JTlRFUlZBTDogU0VTU0lPTl9JTlRFUlZBTCxcbiAgU0VTU0lPTl9QQVVTRV9USU1FOiAnc2Vzc2lvbl9wYXVzZV90aW1lJyxcbiAgSU1QUklOVDogJ2ltcHJpbnQnLFxuICBDVVJSRU5UX1NFU1NJT046ICdjdXJyZW50X3Nlc3Npb24nLFxuICBNQVhfRVZFTlRJRF9MRU5HVEg6IDEyOCxcbiAgTUFYX1BST1BFUlRZX0tFWV9MRU5HVEg6IDI1NixcbiAgTUFYX1BST1BFUlRZX0tFWVNfQ09VTlQ6IDEwMCxcbiAgUkVRVUVTVFM6ICdyZXF1ZXN0cycsXG4gIFNIQVJFUzogJ3NoYXJlcycsXG4gIEFQTFVTX1NTUkM6ICdfYXBsdXNfc3NyYycsXG4gIEVLVlM6IEVLVlMsXG4gIEVWRU5UX01BWF9DT1VOVDogRVZFTlRfTUFYX0NPVU5ULFxuICBNRU1PUllfTUFYX0NPVU5UOiBNRU1PUllfTUFYX0NPVU5ULFxuICBFVkVOVF9TRU5EX0RFRkFVTFRfSU5URVJWQUw6IEVWRU5UX1NFTkRfREVGQVVMVF9JTlRFUlZBTCxcbiAgUEFHRV9TVEFSVDogUEFHRV9TVEFSVCxcbiAgQVBQX1NUQVJUOiBBUFBfU1RBUlQsXG4gIEFQUF9FTkQ6IEFQUF9FTkRcbn07XG5cbi8vIHZhciBvcGVuQVBJcyA9IFtcbi8vICAgJ3NlbmQnLCAnZW50ZXInLCAnc2VuZFBWJywgJ3JlY29yZCcsXG4vLyAgICdzZXRQYWdlU1BNJywgJ3NldE1ldGFJbmZvJywgJ2FwcGVuZE1ldGFJbmZvJyxcbi8vICAgVVBEQVRFICsgJ1BhZ2VQcm9wZXJ0aWVzJyxcbi8vICAgVVBEQVRFICsgJ05leHRQYWdlUHJvcGVydGllcycsXG4vLyAgIFVQREFURSArICdQYWdlVXRwYXJhbScsXG4vLyAgIFVQREFURSArICdOZXh0UGFnZVV0cGFyYW0nLFxuLy8gICAncGFnZUFwcGVhcicsICdwYWdlRGlzYXBwZWFyJyxcbi8vICAgJ3NraXBQYWdlJ1xuLy8gXTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9saWJfdS91dGlscy9hcGx1c1N0YXRpYy5qc1xuLy8gbW9kdWxlIGlkID0gM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgXCJtZXRhSW5mb1wiOiB7XG4gICAgXCJhcGx1cy1pZnItcHZcIjogXCIxXCIsXG4gICAgXCJhcGx1cy1yaG9zdC12XCI6IFwiXCIsXG4gICAgXCJhcGx1cy1yaG9zdC1nXCI6IFwiXCIsXG4gICAgXCJhcGx1cy1jaGFubmVsXCI6IFwiXCIsXG4gICAgXCJhcHBJZFwiOiBcIlwiLFxuICAgIFwic2RrSWRcIjogXCJhcGx1c19jbG91ZFwiLFxuICAgIFwiYXBsdXMtY3B2ZGF0YVwiOiB7fSxcbiAgICBcImFwbHVzLWV4ZGF0YVwiOiB7fSxcbiAgICBcImFwbHVzLW1tc3RhdC10aW1lb3V0XCI6IFwiMTAwMDBcIixcbiAgICBcImFwbHVzLXRvVVRcIjogXCJcIlxuICB9LFxuICBcImdsb2JhbENvbmZpZ1wiOiB7XG4gICAgXCJpc0FsaVwiOiBmYWxzZSxcbiAgICBcIkFQTFVTX1FVRVVFXCI6IFwiYXBsdXNfcXVldWVcIixcbiAgICBcIkVUQUdfU1RPUkFHRV9LRVlcIjogXCJfX0VUQUdfX0NOQV9fSURfX1wiLFxuICAgIFwic2NyaXB0X25hbWVcIjogXCJhcGx1cy5qc1wiLFxuICAgIFwibHZlclwiOiBcIjEuMi4wXCIsXG4gICAgXCJOQU1FX1NUT1JBR0VfS0VZU1wiOiB7XG4gICAgICBcIlJFRkVSUkVSXCI6IFwid21fcmVmZXJyZXJcIixcbiAgICAgIFwiUkVGRVJSRVJfUFZfSURcIjogXCJyZWZlcl9wdl9pZFwiLFxuICAgICAgXCJMT1NUX1BWX1BBR0VfRFVSQVRJT05cIjogXCJsb3N0X3B2X3BhZ2VfZHVyYXRpb25cIixcbiAgICAgIFwiTE9TVF9QVl9QQUdFX1NQTUFCXCI6IFwibG9zdF9wdl9wYWdlX3NwbWFiXCIsXG4gICAgICBcIkxPU1RfUFZfUEFHRVwiOiBcImxvc3RfcHZfcGFnZVwiLFxuICAgICAgXCJMT1NUX1BWX1BBR0VfTVNHXCI6IFwibG9zdF9wdl9wYWdlX21zZ1wiXG4gICAgfVxuICB9LFxuICBcInBsdWdpbnNcIjogW1xuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImFwbHVzX3RyYWNrX2RlYnVnXCIsXG4gICAgICBcInBhdGhcIjogcmVxdWlyZSgnLi9wbHVnaW5zX3dlYi9hcGx1c190cmFja19kZWJ1Z19jbG91ZC5qcycpXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJhcGx1c19ib2R5X3JlYWR5XCIsXG4gICAgICBcInBhdGhcIjogcmVxdWlyZSgnLi9wbHVnaW5zX3dlYi9hcGx1c19ib2R5X3JlYWR5LmpzJylcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcInB1YnN1YlwiLFxuICAgICAgXCJwYXRoXCI6IHJlcXVpcmUoJy4vcGx1Z2lucy9saWJfbWVzc2FnZXIvcHVic3ViX3dlYi5qcycpXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJhcGx1c19jbGllbnRcIixcbiAgICAgIFwicGF0aFwiOiByZXF1aXJlKCcuL3BsdWdpbnMvYXBsdXNfY2xpZW50X3dlYi5qcycpXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJhcGx1c19tZXRhX2luamVjdFwiLFxuICAgICAgXCJwYXRoXCI6IHJlcXVpcmUoJy4vcGx1Z2lucy9hcGx1c19tZXRhX2luamVjdC5qcycpXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJhcGx1c19hY1wiLFxuICAgICAgXCJwYXRoXCI6IHJlcXVpcmUoJy4vcGx1Z2luc193ZWIvYXBsdXNfYWNfaW5qZWN0LmpzJylcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImFwbHVzX2FlXCIsXG4gICAgICBcInBhdGhcIjogcmVxdWlyZSgnLi9wbHVnaW5zX3dlYi9hcGx1c19hZV9pbmplY3QuanMnKVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwibmFtZV9zdG9yYWdlXCIsXG4gICAgICBcInBhdGhcIjogcmVxdWlyZSgnLi9wbHVnaW5zL2xpYl9tb25pdG9yL25hbWVfc3RvcmFnZS5qcycpXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJhcGx1c193ZWJfaHR0cF91bVwiLFxuICAgICAgXCJwYXRoXCI6IHJlcXVpcmUoJy4vcGx1Z2lucy9hcGx1c193ZWJfaHR0cF91bS5qcycpXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJhcGx1c193ZWJfd3NcIixcbiAgICAgIFwicGF0aFwiOiByZXF1aXJlKCcuL3BsdWdpbnMvYXBsdXNfd2ViX3dzLmpzJylcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImFwbHVzX2xvZ19pbmplY3RcIixcbiAgICAgIFwicGF0aFwiOiByZXF1aXJlKCcuL3BsdWdpbnMvYXBsdXNfbG9nX2luamVjdC5qcycpLFxuICAgICAgXCJkZXBzXCI6IFtcbiAgICAgICAgXCJhcGx1c19tZXRhX2luamVjdFwiXG4gICAgICBdLFxuICAgICAgXCJjb25maWdcIjoge1xuICAgICAgICBcInBsdWdpbnNcIjoge1xuICAgICAgICAgIFwicHZcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcIm5hbWVcIjogXCJldGFnXCIsXG4gICAgICAgICAgICAgIFwicGF0aFwiOiByZXF1aXJlKCcuL3BsdWdpbnMvbGliX2xvZy9taWRkbGV3YXJlL2NvbW1vbi9ldGFnX3dlYi5qcycpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ3aGVuX3RvX3NlbmRwdlwiLFxuICAgICAgICAgICAgICBcInBhdGhcIjogcmVxdWlyZSgnLi9wbHVnaW5zL2xpYl9sb2cvbWlkZGxld2FyZS9wdi93aGVuX3RvX3NlbmRwdi5qcycpLFxuICAgICAgICAgICAgICBcImNvbmZpZ1wiOiB7XG4gICAgICAgICAgICAgICAgXCJhcGx1c1dhaXRpbmdcIjogXCJcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ3aGVyZV90b19zZW5kXCIsXG4gICAgICAgICAgICAgIFwicGF0aFwiOiByZXF1aXJlKCcuL3BsdWdpbnMvbGliX2xvZy9taWRkbGV3YXJlL2NvbW1vbi93aGVyZV90b19zZW5kX3dlYl9jbG91ZF91bS5qcycpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ3aGF0X3RvX3NlbmRcIixcbiAgICAgICAgICAgICAgXCJwYXRoXCI6IHJlcXVpcmUoJy4vcGx1Z2lucy9saWJfbG9nL21pZGRsZXdhcmUvY29tbW9uL3doYXRfdG9fc2VuZF93ZWJfY2xvdWQuanMnKSxcbiAgICAgICAgICAgICAgXCJjb25maWdcIjoge1xuICAgICAgICAgICAgICAgIFwicHZkYXRhVG9VdFwiOiB7fVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcIm5hbWVcIjogXCJjb29raWVfZGF0YVwiLFxuICAgICAgICAgICAgICBcInBhdGhcIjogcmVxdWlyZSgnLi9wbHVnaW5zL2xpYl9sb2cvbWlkZGxld2FyZS9jb21tb24vY29va2llX2RhdGEuanMnKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgXCJuYW1lXCI6IFwid2hhdF90b19zZW5kcHZfdXNlcmRhdGFcIixcbiAgICAgICAgICAgICAgXCJwYXRoXCI6IHJlcXVpcmUoJy4vcGx1Z2lucy9saWJfbG9nL21pZGRsZXdhcmUvcHYvd2hhdF90b19zZW5kcHZfdXNlcmRhdGEuanMnKSxcbiAgICAgICAgICAgICAgXCJkZXBzXCI6IFtcbiAgICAgICAgICAgICAgICBcIndoYXRfdG9fc2VuZFwiXG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFwibmFtZVwiOiBcIndoYXRfdG9fc2VuZHB2X3VzZXJkYXRhX3dlYlwiLFxuICAgICAgICAgICAgICBcInBhdGhcIjogcmVxdWlyZSgnLi9wbHVnaW5zL2xpYl9sb2cvbWlkZGxld2FyZS9wdi93aGF0X3RvX3NlbmRwdl91c2VyZGF0YV93ZWIuanMnKSxcbiAgICAgICAgICAgICAgXCJkZXBzXCI6IFtcbiAgICAgICAgICAgICAgICBcIndoYXRfdG9fc2VuZFwiLFxuICAgICAgICAgICAgICAgIFwid2hhdF90b19zZW5kcHZfdXNlcmRhdGFcIlxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ3aGF0X3RvX3NlbmRwdl91dDJcIixcbiAgICAgICAgICAgICAgXCJwYXRoXCI6IHJlcXVpcmUoJy4vcGx1Z2lucy9saWJfbG9nL21pZGRsZXdhcmUvcHYvd2hhdF90b19zZW5kcHZfdXQyLmpzJyksXG4gICAgICAgICAgICAgIFwiZGVwc1wiOiBbXG4gICAgICAgICAgICAgICAgXCJ3aGF0X3RvX3NlbmRcIlxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ3aGF0X3RvX3NlbmRwdl91bTJuYXRpdmVcIixcbiAgICAgICAgICAgICAgXCJwYXRoXCI6IHJlcXVpcmUoJy4vcGx1Z2lucy9saWJfbG9nL21pZGRsZXdhcmUvcHYvd2hhdF90b19zZW5kcHZfdW0ybmF0aXZlLmpzJyksXG4gICAgICAgICAgICAgIFwiZGVwc1wiOiBbXG4gICAgICAgICAgICAgICAgXCJ3aGF0X3RvX3NlbmRcIlxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcIm5hbWVcIjogXCJjYW5fdG9fc2VuZHB2XCIsXG4gICAgICAgICAgICAgIFwicGF0aFwiOiByZXF1aXJlKCcuL3BsdWdpbnMvbGliX2xvZy9taWRkbGV3YXJlL3B2L2Nhbl90b19zZW5kcHYuanMnKSxcbiAgICAgICAgICAgICAgXCJjb25maWdcIjoge1xuICAgICAgICAgICAgICAgIFwiZmxhZ1wiOiBcIk5PXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiYWZ0ZXJfcHZcIixcbiAgICAgICAgICAgICAgXCJwYXRoXCI6IHJlcXVpcmUoJy4vcGx1Z2lucy9saWJfbG9nL21pZGRsZXdhcmUvcHYvYWZ0ZXJfcHYuanMnKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIF0sXG4gICAgICAgICAgXCJoamxqXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiZXRhZ1wiLFxuICAgICAgICAgICAgICBcInBhdGhcIjogcmVxdWlyZSgnLi9wbHVnaW5zL2xpYl9sb2cvbWlkZGxld2FyZS9jb21tb24vZXRhZ193ZWIuanMnKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgXCJuYW1lXCI6IFwid2hlcmVfdG9fc2VuZFwiLFxuICAgICAgICAgICAgICBcInBhdGhcIjogcmVxdWlyZSgnLi9wbHVnaW5zL2xpYl9sb2cvbWlkZGxld2FyZS9jb21tb24vd2hlcmVfdG9fc2VuZF93ZWJfY2xvdWRfdW0uanMnKSxcbiAgICAgICAgICAgICAgXCJkZXBzXCI6IFtdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ3aGF0X3RvX3NlbmRcIixcbiAgICAgICAgICAgICAgXCJwYXRoXCI6IHJlcXVpcmUoJy4vcGx1Z2lucy9saWJfbG9nL21pZGRsZXdhcmUvY29tbW9uL3doYXRfdG9fc2VuZF93ZWJfY2xvdWQuanMnKSxcbiAgICAgICAgICAgICAgXCJkZXBzXCI6IFtdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcIm5hbWVcIjogXCJjb29raWVfZGF0YVwiLFxuICAgICAgICAgICAgICBcInBhdGhcIjogcmVxdWlyZSgnLi9wbHVnaW5zL2xpYl9sb2cvbWlkZGxld2FyZS9jb21tb24vY29va2llX2RhdGEuanMnKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgXCJuYW1lXCI6IFwid2hhdF90b19oamxqX3VzZXJkYXRhXCIsXG4gICAgICAgICAgICAgIFwicGF0aFwiOiByZXF1aXJlKCcuL3BsdWdpbnMvbGliX2xvZy9taWRkbGV3YXJlL2hqbGovd2hhdF90b19oamxqX3VzZXJkYXRhLmpzJyksXG4gICAgICAgICAgICAgIFwiZGVwc1wiOiBbXG4gICAgICAgICAgICAgICAgXCJ3aGF0X3RvX3NlbmRcIlxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ3aGF0X3RvX2hqbGpfdXNlcmRhdGFfd2ViXCIsXG4gICAgICAgICAgICAgIFwicGF0aFwiOiByZXF1aXJlKCcuL3BsdWdpbnMvbGliX2xvZy9taWRkbGV3YXJlL2hqbGovd2hhdF90b19oamxqX3VzZXJkYXRhX3dlYi5qcycpLFxuICAgICAgICAgICAgICBcImRlcHNcIjogW1xuICAgICAgICAgICAgICAgIFwid2hhdF90b19zZW5kXCIsXG4gICAgICAgICAgICAgICAgXCJ3aGF0X3RvX2hqbGpfdXNlcmRhdGFcIlxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ3aGF0X3RvX2hqbGpfdXQyXCIsXG4gICAgICAgICAgICAgIFwicGF0aFwiOiByZXF1aXJlKCcuL3BsdWdpbnMvbGliX2xvZy9taWRkbGV3YXJlL2hqbGovd2hhdF90b19oamxqX3V0Mi5qcycpLFxuICAgICAgICAgICAgICBcImRlcHNcIjogW1xuICAgICAgICAgICAgICAgIFwid2hhdF90b19zZW5kXCJcbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgXCJuYW1lXCI6IFwid2hhdF90b19oamxqX3VtMm5hdGl2ZVwiLFxuICAgICAgICAgICAgICBcInBhdGhcIjogcmVxdWlyZSgnLi9wbHVnaW5zL2xpYl9sb2cvbWlkZGxld2FyZS9oamxqL3doYXRfdG9faGpsal91bTJuYXRpdmUuanMnKSxcbiAgICAgICAgICAgICAgXCJkZXBzXCI6IFtcbiAgICAgICAgICAgICAgICBcIndoYXRfdG9fc2VuZFwiXG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImFwbHVzX3NwbV9pbmplY3RcIixcbiAgICAgIFwicGF0aFwiOiByZXF1aXJlKCcuL3BsdWdpbnNfd2ViX2Nsb3VkL2FwbHVzX3NwbV9jbG91ZC5qcycpXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJhcGx1c19hcGlcIixcbiAgICAgIFwicGF0aFwiOiByZXF1aXJlKCcuL3BsdWdpbnMvYXBsdXNfYXBpLmpzJylcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIm1ldGFfcXVldWVcIixcbiAgICAgIFwicGF0aFwiOiByZXF1aXJlKCcuL3BsdWdpbnMvbGliX3F1ZXVlL21ldGFfcXVldWUuanMnKVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiZXRhZ1wiLFxuICAgICAgXCJwYXRoXCI6IHJlcXVpcmUoJy4vcGx1Z2lucy9saWJfbG9nL21pZGRsZXdhcmUvY29tbW9uL2V0YWdfd2ViLmpzJylcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImV0YWdfd2ViX3N5bmNcIixcbiAgICAgIFwicGF0aFwiOiByZXF1aXJlKCcuL3BsdWdpbnMvbGliX2xvZy9taWRkbGV3YXJlL2NvbW1vbi9ldGFnX3dlYl9zeW5jLmpzJylcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImFwbHVzVW1CcmlkZ2VcIixcbiAgICAgIFwicGF0aFwiOiByZXF1aXJlKCcuL3BsdWdpbnNfd2ViL2xpYl9qc0JyaWRnZS9BdG1CcmlkZ2UuanMnKVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiYXBsdXNfd2ViX3BhZ2Vjb25maWdcIixcbiAgICAgIFwicGF0aFwiOiByZXF1aXJlKCcuL3BsdWdpbnNfd2ViX2Nsb3VkL2FwbHVzX3dlYl9wYWdlY29uZmlnLmpzJylcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImFwbHVzX3F1ZXVlXCIsXG4gICAgICBcInBhdGhcIjogcmVxdWlyZSgnLi9wbHVnaW5zL2xpYl9xdWV1ZS9hcGx1c19xdWV1ZS5qcycpXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJob3RfbG9hZGVyXCIsXG4gICAgICBcInBhdGhcIjogcmVxdWlyZSgnLi9wbHVnaW5zX3dlYi9saWJfaG90L2hvdF9sb2FkZXIuanMnKSxcbiAgICAgIFwiY29uZmlnXCI6IHtcbiAgICAgICAgXCJ1cmxSdWxlc1wiOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJydWxlXCI6IFwiYXBsdXNfd2VidnRfbWVzc2FnZXJcIixcbiAgICAgICAgICAgIFwiY2RuUGF0aFwiOiBbXG4gICAgICAgICAgICAgIFwiaHR0cHM6Ly9kLmFsaWNkbi5jb20vYWxpbG9nL21sb2cvYXBsdXNfd2VidnRfbWVzc2FnZXIuanNcIlxuICAgICAgICAgICAgXVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiYXBsdXNfYW5hbHl0aWNzXCIsXG4gICAgICBcInBhdGhcIjogcmVxdWlyZSgnLi9wbHVnaW5zX3dlYi9saWJfaG90L2FwbHVzX2FuYWx5dGljcy5qcycpLFxuICAgICAgXCJjb25maWdcIjoge1xuICAgICAgICBcInNlc3Npb25LZXlcIjogXCJfX2FwbHVzX19hbmFseXRpY3NfX1wiLFxuICAgICAgICBcIkpTUEFUSFwiOiBcImh0dHBzOi8vZy5hbGljZG4uY29tL2FsaWxvZy9hcGx1cy1kZXNpZ24vMS40LjQvYW5hbHl0aWNzX2luZGV4LmJ1bmRsZS5qc1wiLFxuICAgICAgICBcIkNTU1BBVEhcIjogXCJodHRwczovL2cuYWxpY2RuLmNvbS9hbGlsb2cvYXBsdXMtZGVzaWduLzEuNC40L2FuYWx5dGljc19pbmRleC5idW5kbGUuY3NzXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImFwbHVzX2FwdlwiLFxuICAgICAgXCJwYXRoXCI6IHJlcXVpcmUoJy4vcGx1Z2luc193ZWIvYXBsdXNfYXB2X2luamVjdC5qcycpLFxuICAgICAgXCJkZXBzXCI6IFtcbiAgICAgICAgXCJhcGx1c19sb2dfaW5qZWN0XCIsXG4gICAgICAgIFwiYXBsdXNfYXBpXCJcbiAgICAgIF1cbiAgICB9XG4gIF1cbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvYXBsdXNfY2xvdWRfY29uZmlnLmpzXG4vLyBtb2R1bGUgaWQgPSA0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogcHJvamVjdCAtIGZpbGVwYXRoXG4gKiDkupHkuIp3ZWLln4vngrnpqozor4FhcGx1c190cmFja19kZWJ1Z19pZOazqOWFpemAu+i+kVxuICpcbiAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cbiAqXG4gKiBBdXRob3JzOlxuICogICBSaWNoYXJkfOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG4gKi9cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7XG4gICAgcnVuOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZG9jID0gZG9jdW1lbnQ7XG4gICAgICB2YXIgYXBsdXMgPSAod2luZG93LmFwbHVzIHx8ICh3aW5kb3cuYXBsdXMgPSB7fSkpO1xuICAgICAgLy8g5L+d6K+B5Y+q5Lya5pyJ5LiA5LiqYXBsdXNfcGx1Z2luX21vbml0b3Lov5DooYxcbiAgICAgIGlmIChhcGx1cy5fYXBsdXNfY3BsdWdpbl90cmFja19kZWIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBsdXMuX2FwbHVzX2NwbHVnaW5fdHJhY2tfZGViID0ge1xuICAgICAgICAnc3RhdHVzJzogJ2luaXQnXG4gICAgICB9O1xuICAgICAgdmFyIHdpbiA9IHdpbmRvdztcbiAgICAgIHZhciBpc1RyYWNrRGVidWcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdmFyIExTID0gd2luLmxvY2FsU3RvcmFnZTtcbiAgICAgICAgICB2YXIgX3RyYWNraWQgPSAnYXBsdXNfdHJhY2tfZGVidWdfaWQnO1xuICAgICAgICAgIHZhciByZWcgPSBuZXcgUmVnRXhwKCdbP3wmXScgKyBfdHJhY2tpZCArICc9KFxcXFx3KiknKTtcbiAgICAgICAgICB2YXIgbWF0Y2hfdmFsdWUgPSBsb2NhdGlvbi5ocmVmLm1hdGNoKHJlZyk7XG4gICAgICAgICAgaWYgKG1hdGNoX3ZhbHVlICYmIG1hdGNoX3ZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIExTLnNldEl0ZW0oX3RyYWNraWQsIG1hdGNoX3ZhbHVlWzFdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIF9yID0gZG9jLnJlZmVycmVyIHx8ICcnO1xuICAgICAgICAgICAgdmFyIG1hdGNoX3JlZmVyID0gX3IubWF0Y2gocmVnKTtcbiAgICAgICAgICAgIGlmIChtYXRjaF9yZWZlciAmJiBtYXRjaF9yZWZlci5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIExTLnNldEl0ZW0oX3RyYWNraWQsIG1hdGNoX3JlZmVyWzFdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZhciBfbiA9IHdpbi5uYW1lIHx8ICcnO1xuICAgICAgICAgICAgICB2YXIgbWF0Y2hfbmFtZSA9IF9uLm1hdGNoKHJlZyk7XG4gICAgICAgICAgICAgIGlmIChtYXRjaF9uYW1lICYmIG1hdGNoX25hbWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIExTLnNldEl0ZW0oX3RyYWNraWQsIG1hdGNoX25hbWVbMV0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBfdHJhY2tpZFZhbHVlID0gTFMuZ2V0SXRlbShfdHJhY2tpZCkgfHwgJyc7XG4gICAgICAgICAgaWYgKF90cmFja2lkVmFsdWUgJiYgX3RyYWNraWRWYWx1ZS5sZW5ndGggPiA1MCkge1xuICAgICAgICAgICAgdmFyIHZhbHVlcyA9IF90cmFja2lkVmFsdWUuc3BsaXQoJ18nKTtcbiAgICAgICAgICAgIHZhciBkYXRlO1xuICAgICAgICAgICAgaWYgKHZhbHVlcyAmJiB2YWx1ZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICBkYXRlID0gdmFsdWVzW3ZhbHVlcy5sZW5ndGggLSAxXS5yZXBsYWNlKC9sb2cvLCAnJyk7XG4gICAgICAgICAgICAgIHZhciBsb2dkYXRlID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgICAgdmFyIGxvZ2RhdGVUaW1lID0gbG9nZGF0ZS5nZXRUaW1lKCk7XG4gICAgICAgICAgICAgIHZhciBub3cgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgICB2YXIgbm93VGltZSA9IG5vdy5nZXRUaW1lKCk7XG4gICAgICAgICAgICAgIGxvZ2RhdGUuc2V0RnVsbFllYXIocGFyc2VJbnQoZGF0ZS5zdWJzdHIoMCwgNCkpKTtcbiAgICAgICAgICAgICAgbG9nZGF0ZS5zZXRNb250aChwYXJzZUludChkYXRlLnN1YnN0cig0LCAyKSAtIDEpKTtcbiAgICAgICAgICAgICAgbG9nZGF0ZS5zZXREYXRlKHBhcnNlSW50KGRhdGUuc3Vic3RyKDYsIDIpKSk7XG4gICAgICAgICAgICAgIGxvZ2RhdGUuc2V0SG91cnMocGFyc2VJbnQoZGF0ZS5zdWJzdHIoOCwgMikpKTtcbiAgICAgICAgICAgICAgbG9nZGF0ZS5zZXRNaW51dGVzKHBhcnNlSW50KGRhdGUuc3Vic3RyKDEwLCAyKSkpO1xuICAgICAgICAgICAgICBsb2dkYXRlLnNldFNlY29uZHMocGFyc2VJbnQoZGF0ZS5zdWJzdHIoMTIsIDIpKSk7XG4gICAgICAgICAgICAgIGxvZ2RhdGUuc2V0TWlsbGlzZWNvbmRzKDApO1xuICAgICAgICAgICAgICBsb2dkYXRlVGltZSA9IGxvZ2RhdGUuZ2V0VGltZSgpO1xuICAgICAgICAgICAgICBub3dUaW1lID0gbm93LmdldFRpbWUoKTtcbiAgICAgICAgICAgICAgdmFyIGxpbWl0ID0gbm93VGltZSAtIGxvZ2RhdGVUaW1lO1xuICAgICAgICAgICAgICByZXR1cm4gbGltaXQgPD0gMzYwMDAwMCA/IChfdHJhY2tpZFZhbHVlIHx8IG1hdGNoX3ZhbHVlWzFdKSA6IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdmFyIGFwbHVzX3RyYWNrX2RlYnVnX2lkID0gaXNUcmFja0RlYnVnKCk7XG4gICAgICBpZiAoYXBsdXNfdHJhY2tfZGVidWdfaWQpIHtcbiAgICAgICAgYXBsdXMuX2FwbHVzX2NwbHVnaW5fdHJhY2tfZGViLnN0YXR1cyA9ICdzdGFydCc7XG4gICAgICAgIHZhciBvYmogPSB7XG4gICAgICAgICAgYXBsdXNfdHJhY2tfZGVidWdfaWQ6IGFwbHVzX3RyYWNrX2RlYnVnX2lkLFxuICAgICAgICB9O1xuICAgICAgICB2YXIgcSA9IHdpbmRvdy5hcGx1c19xdWV1ZSB8fCAod2luZG93LmFwbHVzX3F1ZXVlID0gW10pO1xuICAgICAgICBxLnB1c2goe1xuICAgICAgICAgIGFjdGlvbjogJ2FwbHVzLmFwcGVuZE1ldGFJbmZvJyxcbiAgICAgICAgICBhcmd1bWVudHM6IFsnYXBsdXMtZXhkYXRhJywgb2JqXVxuICAgICAgICB9KTtcbiAgICAgICAgcS5wdXNoKHtcbiAgICAgICAgICBhY3Rpb246ICdhcGx1cy5hcHBlbmRNZXRhSW5mbycsXG4gICAgICAgICAgYXJndW1lbnRzOiBbJ2FwbHVzLWNwdmRhdGEnLCBvYmpdXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGFwbHVzLl9hcGx1c19jcGx1Z2luX3RyYWNrX2RlYi5zdGF0dXMgPSAnY29tcGxldGUnO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9wbHVnaW5zX3dlYi9hcGx1c190cmFja19kZWJ1Z19jbG91ZC5qc1xuLy8gbW9kdWxlIGlkID0gNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIOetieW+hWJvZHkgcmVhZHlcbiAqXG4gKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG4gKlxuICogQXV0aG9yczpcbiAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW1zIHtPYmplY3R9IG9wdGlvbnMge1xuICAgICAqICAgbG9nQ29uZmlnOiB7bG9nQ29uZmlnfVxuICAgICAqIH1cbiAgICAgKi9cbiAgICAvLyBpbml0OiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgLy8gICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIC8vIH0sXG5cbiAgICBydW46IGZ1bmN0aW9uIChzdGF0ZSwgY2IpIHtcbiAgICAgIHZhciBoYW5kbGVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXtcbiAgICAgICAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JykubGVuZ3RoKSB7XG4gICAgICAgICAgY2xlYXJJbnRlcnZhbChoYW5kbGVyKTtcbiAgICAgICAgICBoYW5kbGVyID0gbnVsbDtcbiAgICAgICAgICBjYigpO1xuICAgICAgICB9XG4gICAgICB9LCA1MCk7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICBjbGVhckludGVydmFsKGhhbmRsZXIpO1xuICAgICAgICB9XG4gICAgICB9LCAxMDAwKTtcbiAgICAgIHJldHVybiAxMDAwO1xuICAgIH0sXG4gIH07XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvcGx1Z2luc193ZWIvYXBsdXNfYm9keV9yZWFkeS5qc1xuLy8gbW9kdWxlIGlkID0gNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcbnZhciBQdWJTdWJXZWIgPSByZXF1aXJlKCdAY29yZS9QdWJTdWJXZWInKTtcbnZhciB1dGlsR29sZGxvZyA9IHJlcXVpcmUoJ0B1dGlscy91dGlsR29sZGxvZycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7XG4gICAgcnVuOiAgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGFwbHVzID0gdXRpbEdvbGRsb2cuZ2V0R2xvYmFsVmFsdWUoJ2FwbHVzJyk7XG4gICAgICAvLyDkv53or4Hlj6rkvJrmnInkuIDkuKpwdWJzdWLov5DooYxcbiAgICAgIGlmIChhcGx1cy5hcGx1c19wdWJzdWIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gYXBsdXMuYXBsdXNfcHVic3Vi5piv5LiA5Liq55uR5ZCs6ICF77yM5Zyo5o+S5Lu25YyW5YaF6YOo5Lya55So5Yiw5LuW77yM5pyJ5pWw5o2u5Y+Y5YyW5bCG5Lya5Y+R5bCE55u45bqU55qEZGF0YWNoYW5nZeS6i+S7tlxuICAgICAgYXBsdXMuYXBsdXNfcHVic3ViID0gUHViU3ViV2ViLmNyZWF0ZSgpO1xuICAgIH1cbiAgfTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9wbHVnaW5zL2xpYl9tZXNzYWdlci9wdWJzdWJfd2ViLmpzXG4vLyBtb2R1bGUgaWQgPSA3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBQdWJTdWIgPSByZXF1aXJlKCdAY29yZS9QdWJTdWInKTtcblxubW9kdWxlLmV4cG9ydHMgPSBQdWJTdWIuZXh0ZW5kKHtcbiAgLyoqXG4gICAqIOiuoumYheWIsOS4gOasoeWbnuiwg+WQjuWPlua2iOiuoumYhVxuICAgKiBAcGFyYW0ge1N0cmluZ30gZVR5cGUg6K6i6ZiF55qE5raI5oGv5Y+l5p+EXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGgg6K6i6ZiF55qE5raI5oGv5Zue6LCD5Ye95pWwXG4gICAqIEByZXR1cm4gY29udGV4dFxuICAgKi9cbiAgc3Vic2NyaWJlT25jZTogZnVuY3Rpb24oZVR5cGUsIGgpIHtcbiAgICAvLyDlr7nlm57osIPlh73mlbDov5vooYzmlq3oqIBcbiAgICB0aGlzLmNhbGxhYmxlKGgpO1xuXG4gICAgdmFyIF9zZWxmID0gdGhpcztcbiAgICB2YXIgb25jZTtcbiAgICB0aGlzLnN1YnNjcmliZS5jYWxsKHRoaXMsIGVUeXBlLCBvbmNlID0gZnVuY3Rpb24oKSB7XG4gICAgICBfc2VsZi51bnN1YnNjcmliZS5jYWxsKF9zZWxmLCBlVHlwZSwgb25jZSk7XG4gICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICBoLmFwcGx5KF9zZWxmLCBhcmdzKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICAvKipcbiAgICog5Y+W5raI6K6i6ZiF77yM5bCG5Lya5Y+W5raI4oCcZVR5cGXigJ3lj6Xmn4Tlr7nlupTnmoTigJxo4oCd5Zue6LCD5Ye95pWw5LiL55qE5omA5pyJ6K6i6ZiFXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBlVHlwZSDorqLpmIXnmoTmtojmga/lj6Xmn4RcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaCDorqLpmIXnmoTmtojmga/lm57osIPlh73mlbBcbiAgICogQHJldHVybiBjb250ZXh0XG4gICAqL1xuICB1bnN1YnNjcmliZTogZnVuY3Rpb24oZVR5cGUsIGgpIHtcbiAgICAvLyDlr7nlm57osIPlh73mlbDov5vooYzmlq3oqIBcbiAgICB0aGlzLmNhbGxhYmxlKGgpO1xuXG4gICAgdmFyIHMgPSB0aGlzLmhhbmRsZXJzW2VUeXBlXTtcbiAgICBpZiAoIXMpIHJldHVybiB0aGlzO1xuXG4gICAgaWYgKHR5cGVvZiBzID09PSAnb2JqZWN0JyAmJiBzLmxlbmd0aCA+IDApIHtcbiAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBoX3N0ciA9IGgudG9TdHJpbmcoKTtcbiAgICAgICAgdmFyIHNfc3RyID0gc1tpXS50b1N0cmluZygpO1xuICAgICAgICBpZiAoaF9zdHIgPT09IHNfc3RyKSB7XG4gICAgICAgICAgcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuaGFuZGxlcnNbZVR5cGVdID0gcztcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHRoaXMuaGFuZGxlcnNbZVR5cGVdO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9saWJfdS9jb3JlL1B1YlN1YldlYi5qc1xuLy8gbW9kdWxlIGlkID0gOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIGFsaWxvZy9zL3NyYy9saWJfdS9jb3JlL1B1YlN1Yi5qc1xuICog5raI5oGv6K6i6ZiF5qih5Z6LXG4gKlxuICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuICpcbiAqIEF1dGhvcnM6XG4gKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIGlzRnVuY3Rpb24gPSByZXF1aXJlKCdAdXRpbHMvaXNGdW5jdGlvbicpO1xudmFyIEJhc2UgPSByZXF1aXJlKCdAY29yZS9CYXNlJyk7XG5cbnZhciBnZXRBcmdzID0gZnVuY3Rpb24oYXJncykge1xuICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gIHZhciBfYXJncyA9IG5ldyBBcnJheShsZW4gLSAxKTtcbiAgZm9yICh2YXIgaiA9IDE7IGogPCBsZW47IGorKykge1xuICAgIF9hcmdzW2ogLSAxXSA9IGFyZ3Nbal07XG4gIH1cbiAgcmV0dXJuIF9hcmdzO1xufTtcblxudmFyIFB1YlN1YiA9IEJhc2UuZXh0ZW5kKHtcbiAgLyoqXG4gICAqIOWvuWZu6L+b6KGM5pat6KiA77yM5LiN5piv4oCYZnVuY3Rpb27igJnnsbvlnovmiqXplJnvvIzlkKbliJnov5Tlm55mblxuICAgKi9cbiAgY2FsbGFibGU6IGZ1bmN0aW9uIChmbikge1xuICAgIGlmICghaXNGdW5jdGlvbihmbikpIHRocm93IG5ldyBUeXBlRXJyb3IoZm4gKyAnIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG4gICAgcmV0dXJuIGZuO1xuICB9LFxuXG4gIGNyZWF0ZTogZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgdmFyIGluc3RhbmNlID0gbmV3IHRoaXMoKTtcbiAgICAvLyDnu5Hlrpror6Xlrp7kvovnmoTlsZ7mgKdcbiAgICBmb3IgKHZhciBuYW1lIGluIHByb3BzKSB7XG4gICAgICBpbnN0YW5jZVtuYW1lXSA9IHByb3BzW25hbWVdO1xuICAgIH1cblxuICAgIGluc3RhbmNlLmhhbmRsZXJzID0gW107XG4gICAgaW5zdGFuY2UucHVicyA9IHt9O1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfSxcblxuICBzZXRIYW5kbGVyczogZnVuY3Rpb24oaGFuZGxlcnMpIHtcbiAgICB0aGlzLmhhbmRsZXJzID0gaGFuZGxlcnM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIOiuoumYheWPpeafhOS4uuKAnGVUeXBl4oCd55qE5raI5oGv77yM5b2T5pyJ5raI5oGv6L+H5p2l5omn6KGM5Zue6LCD5Ye95pWw77ya4oCcaOKAnVxuICAgKiBAcGFyYW0ge1N0cmluZ30gZVR5cGUg6K6i6ZiF55qE5raI5oGv5Y+l5p+EXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGgg6K6i6ZiF55qE5raI5oGv5Zue6LCD5Ye95pWwXG4gICAqIEByZXR1cm4gY29udGV4dFxuICAgKi9cbiAgc3Vic2NyaWJlOiBmdW5jdGlvbihlVHlwZSwgaCl7XG4gICAgLy8g5a+55Zue6LCD5Ye95pWw6L+b6KGM5pat6KiAXG4gICAgdGhpcy5jYWxsYWJsZShoKTtcblxuICAgIHZhciBfc2VsZiA9IHRoaXM7XG4gICAgdmFyIHB1YnMgPSBfc2VsZi5wdWJzIHx8IHt9O1xuXG4gICAgdmFyIGFyciA9IHB1YnNbZVR5cGVdIHx8IFtdO1xuICAgIGlmIChhcnIpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBfYXJncyA9IGFycltpXSgpO1xuICAgICAgICBoLmFwcGx5KF9zZWxmLCBfYXJncyk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBoYW5kbGVycyA9IF9zZWxmLmhhbmRsZXJzIHx8IFtdO1xuICAgIGlmKCEoZVR5cGUgaW4gaGFuZGxlcnMpKSB7XG4gICAgICBoYW5kbGVyc1tlVHlwZV0gPSBbXTtcbiAgICB9XG4gICAgaGFuZGxlcnNbZVR5cGVdLnB1c2goaCk7XG4gICAgX3NlbGYuc2V0SGFuZGxlcnMoaGFuZGxlcnMpO1xuICAgIHJldHVybiBfc2VsZjtcbiAgfSxcblxuICAvKipcbiAgICog5raI5oGv5YiG5Y+R77yM5bCG5Lya5YiG5Y+R5Yiw5omA5pyJ6K6i6ZiFZVR5cGXlj6Xmn4TnmoTorqLpmIXogIVcbiAgICogQHBhcmFtIHtTdHJpbmd9IGVUeXBlIOWIhuWPkea2iOaBr+WPpeafhFxuICAgKi9cbiAgcHVibGlzaDogZnVuY3Rpb24gKGVUeXBlKSB7XG5cbiAgICB2YXIgYXJncyA9IGdldEFyZ3MoYXJndW1lbnRzKTtcbiAgICB2YXIgaGFuZGxlcnMgPSB0aGlzLmhhbmRsZXJzIHx8IFtdO1xuXG4gICAgdmFyIHNpemUgPSBoYW5kbGVyc1tlVHlwZV0gPyBoYW5kbGVyc1tlVHlwZV0ubGVuZ3RoIDogMDtcbiAgICBpZiAoc2l6ZSA+IDApIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgaSsrKSB7XG4gICAgICAgIHZhciBmbiA9IGhhbmRsZXJzW2VUeXBlXVtpXTtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oZm4pKSB7XG4gICAgICAgICAgZm4uYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBjYWNoZVB1YnM6IGZ1bmN0aW9uIChlVHlwZSkge1xuICAgIHZhciBwdWJzID0gdGhpcy5wdWJzIHx8IHt9O1xuICAgIHZhciBhcmdzID0gZ2V0QXJncyhhcmd1bWVudHMpO1xuICAgIGlmICghcHVic1tlVHlwZV0pIHtcbiAgICAgIHB1YnNbZVR5cGVdID0gW107XG4gICAgfVxuICAgIHB1YnNbZVR5cGVdLnB1c2goZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGFyZ3M7XG4gICAgfSk7XG4gIH0sXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBQdWJTdWI7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9saWJfdS9jb3JlL1B1YlN1Yi5qc1xuLy8gbW9kdWxlIGlkID0gOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIHByb2plY3QgLSBmaWxlcGF0aFxuICpcbiAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cbiAqXG4gKiBBdXRob3JzOlxuICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuICovXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG8pIHtcbiAgcmV0dXJuIHR5cGVvZiBvID09PSAnZnVuY3Rpb24nO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9saWJfdS91dGlscy9pc0Z1bmN0aW9uLmpzXG4vLyBtb2R1bGUgaWQgPSAxMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIGFsaWxvZy9zL3NyYy9saWJfdS9jb3JlL0Jhc2UuanNcbiAqIOWfuuexu++8jOaPkOS+m+exu+aJgOmcgOimgeeahOWfuuehgOWxnuaAp1xuICpcbiAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cbiAqXG4gKiBBdXRob3JzOlxuICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpc0Z1bmN0aW9uID0gcmVxdWlyZSgnQHV0aWxzL2lzRnVuY3Rpb24nKTtcblxuLy8g5Z+657G7XG5mdW5jdGlvbiBCYXNlKCkge31cblxuLy8g5bCGZXh0ZW5k5ZKMY3JlYXRl572u5LqOcHJvdG90eXBl5a+56LGh5Lit77yM5Lul5L6/5a2Q57G757un5om/XG5CYXNlLnByb3RvdHlwZS5leHRlbmQgPSBmdW5jdGlvbigpIHt9O1xuQmFzZS5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24oKSB7fTtcblxuLy8g5Li65LqG6IO95Zyo5Z+657G75LiK55u05o6l5LulLmV4dGVuZOeahOaWueW8j+i/m+ihjOiwg+eUqFxuQmFzZS5leHRlbmQgPSBmdW5jdGlvbihwcm9wcykge1xuICByZXR1cm4gdGhpcy5wcm90b3R5cGUuZXh0ZW5kLmNhbGwodGhpcywgcHJvcHMpO1xufTtcblxuQmFzZS5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24ocHJvcHMpIHtcbiAgLyoqXG4gICAqIGNyZWF0ZeWunumZheS4iuaYr+WvuW5ld+eahOWwgeijhe+8m1xuICAgKiBjcmVhdGXov5Tlm57nmoTlrp7kvovlrp7pmYXkuIrlsLHmmK9uZXfmnoTpgKDlh7rnmoTlrp7kvovvvJtcbiAgICogdGhpc+WNs+aMh+WQkeiwg+eUqOW9k+WJjWNyZWF0ZeeahOaehOmAoOWHveaVsO+8m1xuICAgKi9cbiAgdmFyIGluc3RhbmNlID0gbmV3IHRoaXMoKTtcbiAgLy8g57uR5a6a6K+l5a6e5L6L55qE5bGe5oCnXG4gIGZvciAodmFyIG5hbWUgaW4gcHJvcHMpIHtcbiAgICBpbnN0YW5jZVtuYW1lXSA9IHByb3BzW25hbWVdO1xuICB9XG4gIHJldHVybiBpbnN0YW5jZTtcbn07XG5cbkJhc2UucHJvdG90eXBlLmV4dGVuZCA9IGZ1bmN0aW9uKHByb3BzKSB7XG4gIC8vIOa0vueUn+WHuuadpeeahOaWsOeahOWtkOexu1xuICB2YXIgU3ViQmFzZSA9IGZ1bmN0aW9uKCkge307XG4gIHRyeSB7XG4gICAgLyoqXG4gICAgICog57un5om/54i257G755qE5bGe5oCn5ZKM5pa55rOV77yMXG4gICAgICog5b2T54S25YmN5o+Q5piv54i257G755qE5bGe5oCn6YO95pS+5ZyocHJvdG90eXBl5LitXG4gICAgICog6ICM6Z2e5LiK6Z2iY3JlYXRl5pa55rOV55qE4oCc5a6e5L6L5bGe5oCn4oCd5LitXG4gICAgICovXG4gICAgaWYgKCFpc0Z1bmN0aW9uKE9iamVjdC5jcmVhdGUpKSB7XG4gICAgICBPYmplY3QuY3JlYXRlID0gZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgZnVuY3Rpb24gRigpIHt9XG4gICAgICAgIEYucHJvdG90eXBlID0gbztcbiAgICAgICAgcmV0dXJuIG5ldyBGKCk7XG4gICAgICB9O1xuICAgIH1cbiAgICBTdWJCYXNlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUodGhpcy5wcm90b3R5cGUpO1xuXG4gICAgLy8g5bm25LiU5re75Yqg6Ieq5bex55qE5pa55rOV5ZKM5bGe5oCnXG4gICAgZm9yICh2YXIgbmFtZSBpbiBwcm9wcykge1xuICAgICAgU3ViQmFzZS5wcm90b3R5cGVbbmFtZV0gPSBwcm9wc1tuYW1lXTtcbiAgICB9XG4gICAgU3ViQmFzZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTdWJCYXNlO1xuXG4gICAgLy8g6ZyA6KaB5LulLmV4dGVuZOeahOaWueW8j+WSjC5jcmVhdGXnmoTmlrnlvI/osIPnlKjvvJpcbiAgICBTdWJCYXNlLmV4dGVuZCA9IFN1YkJhc2UucHJvdG90eXBlLmV4dGVuZDtcbiAgICBTdWJCYXNlLmNyZWF0ZSA9IFN1YkJhc2UucHJvdG90eXBlLmNyZWF0ZTtcbiAgfSBjYXRjaChlcnIpIHtcbiAgICBjb25zb2xlICYmIGNvbnNvbGUubG9nKGVycik7XG4gIH0gZmluYWxseSB7XG4gICAgcmV0dXJuIFN1YkJhc2U7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQmFzZTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2xpYl91L2NvcmUvQmFzZS5qc1xuLy8gbW9kdWxlIGlkID0gMTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBwcm9qZWN0IC0gZmlsZXBhdGhcbiAqIOWuouaIt+err+S+pua1i+iEmuacrFxuICogIEByZWY6IGh0dHBzOi8vZ2l0aHViLmNvbS9raXNzeXRlYW0va2lzc3kvYmxvYi8xLjQueC9zcmMvc2VlZC9zcmMvdWEuanNcbiAqICAgICAgICBodHRwczovL2dpdGh1Yi5jb20veXV5dTE5MTEvTWFnbmV0by9ibG9iL21hc3Rlci9zcmMvcGx1Z2lucy9jbGllbnQvdWEuanNcbiAqICAgICAgICBodHRwOi8vZ2l0bGFiLmFsaWJhYmEtaW5jLmNvbS90Yi9hcC9ibG9iL21hc3Rlci9idWlsZC8xLjAvcG9jL20vb3MuanNcbiAqICAgICAgICBodHRwOi8vZ2l0bGFiLmFsaWJhYmEtaW5jLmNvbS90Yi9hcC9ibG9iL21hc3Rlci9idWlsZC8xLjAvbS9tL3VhLmpzXG4gKiAgICAgICAgaHR0cHM6Ly9naXRodWIuY29tL2Nsb3VkY29tZS9qcXVlcnkudWEvYmxvYi9tYXN0ZXIvanF1ZXJ5LnVhLmpzXG4gKlxuICog5pSv5oyB55qE5Zu95Lqn5rWP6KeI5Zmo77yaXG4gKiAzNjBzZSAgICAgICAg5p6B6YCf5qih5byPXG4gKiAzNjBlZSAgICAgICAg5p6B6YCf5qih5byPXG4gKiDnjI7osbkgICAgICAgICAg5Y+M5qih5byPXG4gKiBRUSAgICAgICAgICAg5Y+M5qih5byPXG4gKiDlgrLmuLhcbiAqIOa3mOWunSAgICAgICAgICDmnoHpgJ/mqKHlvI9cbiAqXG4gKiAqIOebruWJjTM2MGVl55qE5rWL6K+V5piv5ryP6bG85rOV77yM5aaC5p6c5YW25LuW5Yy56YWN5LiN5LiK5bCx5piv5a6D77yM5Zug5q2k5Lya6K+v5YikXG4gKlxuICog546w5Zyo6L+Y5LiN6IO95qOA5rWL55qE5rWP6KeI5Zmo77yaXG4gKiAzNjBzZSAgICAgICAgICAgIOWFvOWuueaooeW8j1xuICogMzYwZWUgICAgICAgICAgICDlhbzlrrnmqKHlvI9cbiAqIOa3mOWunea1j+iniOWZqCAgICAgICAgIOWFvOWuueaooeW8j1xuICpcbiAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cbiAqXG4gKiBBdXRob3JzOlxuICogICBnb25naGFvLmdoXG4gKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG4gKi9cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7XG4gICAgcnVuOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgYXBsdXMgPSAod2luZG93LmFwbHVzIHx8ICh3aW5kb3cuYXBsdXMgPSB7fSkpO1xuICAgICAgYXBsdXMuX2FwbHVzX2NsaWVudCA9IHJlcXVpcmUoJy4vbGliX2NsaWVudC9tYWluJykoKTtcbiAgICB9XG4gIH07XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvcGx1Z2lucy9hcGx1c19jbGllbnRfd2ViLmpzXG4vLyBtb2R1bGUgaWQgPSAxMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIHByb2plY3QgLSBmaWxlcGF0aFxuICog5a6i5oi356uv5L6m5rWL6ISa5pysXG4gKiAgQHJlZjogaHR0cHM6Ly9naXRodWIuY29tL2tpc3N5dGVhbS9raXNzeS9ibG9iLzEuNC54L3NyYy9zZWVkL3NyYy91YS5qc1xuICogICAgICAgIGh0dHBzOi8vZ2l0aHViLmNvbS95dXl1MTkxMS9NYWduZXRvL2Jsb2IvbWFzdGVyL3NyYy9wbHVnaW5zL2NsaWVudC91YS5qc1xuICogICAgICAgIGh0dHA6Ly9naXRsYWIuYWxpYmFiYS1pbmMuY29tL3RiL2FwL2Jsb2IvbWFzdGVyL2J1aWxkLzEuMC9wb2MvbS9vcy5qc1xuICogICAgICAgIGh0dHA6Ly9naXRsYWIuYWxpYmFiYS1pbmMuY29tL3RiL2FwL2Jsb2IvbWFzdGVyL2J1aWxkLzEuMC9tL20vdWEuanNcbiAqICAgICAgICBodHRwczovL2dpdGh1Yi5jb20vY2xvdWRjb21lL2pxdWVyeS51YS9ibG9iL21hc3Rlci9qcXVlcnkudWEuanNcbiAqXG4gKiDmlK/mjIHnmoTlm73kuqfmtY/op4jlmajvvJpcbiAqIDM2MHNlICAgICAgICDmnoHpgJ/mqKHlvI9cbiAqIDM2MGVlICAgICAgICDmnoHpgJ/mqKHlvI9cbiAqIOeMjuixuSAgICAgICAgICDlj4zmqKHlvI9cbiAqIFFRICAgICAgICAgICDlj4zmqKHlvI9cbiAqIOWCsua4uFxuICog5reY5a6dICAgICAgICAgIOaegemAn+aooeW8j1xuICpcbiAqICog55uu5YmNMzYwZWXnmoTmtYvor5XmmK/mvI/psbzms5XvvIzlpoLmnpzlhbbku5bljLnphY3kuI3kuIrlsLHmmK/lroPvvIzlm6DmraTkvJror6/liKRcbiAqXG4gKiDnjrDlnKjov5jkuI3og73mo4DmtYvnmoTmtY/op4jlmajvvJpcbiAqIDM2MHNlICAgICAgICAgICAg5YW85a655qih5byPXG4gKiAzNjBlZSAgICAgICAgICAgIOWFvOWuueaooeW8j1xuICog5reY5a6d5rWP6KeI5ZmoICAgICAgICAg5YW85a655qih5byPXG4gKlxuICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuICpcbiAqIEF1dGhvcnM6XG4gKiAgIGdvbmdoYW8uZ2hcbiAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBnZXRPbGRGYXNoaW9uT3NJbmZvKHVhKSB7XG4gIHZhciB0b2tlbiA9IFtcbiAgICBbJ1dpbmRvd3MgTlQgNS4xJywgJ3dpblhQJ10sXG4gICAgWydXaW5kb3dzIE5UIDYuMScsICd3aW43J10sXG4gICAgWydXaW5kb3dzIE5UIDYuMCcsICd3aW5WaXN0YSddLFxuICAgIFsnV2luZG93cyBOVCA2LjInLCAnd2luOCddLFxuICAgIFsnV2luZG93cyBOVCA2LjMnLCAnd2luOC4xJ10sXG4gICAgWydXaW5kb3dzIE5UIDEwLjAnLCAnd2luMTAnXSxcbiAgICBbJ1VidW50dScsICd1YnVudHUnXSxcbiAgICBbJ0xpbnV4JywgJ2xpbnV4J10sXG4gICAgWydXaW5kb3dzIE5UIDUuMicsICd3aW4yMDAzJ10sXG4gICAgWydXaW5kb3dzIE5UIDUuMCcsICd3aW4yMDAwJ10sXG4gICAgWydXaW5kb3dzJywgJ3dpbk90aGVyJ10sXG4gICAgWydyaGlubycsICdyaGlubyddXG4gIF07XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0b2tlbi5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgIHZhciB0b2tlbjAgPSB0b2tlbltpXVswXTtcbiAgICBpZiAodWEuaW5kZXhPZih0b2tlbjApICE9PSAtMSkge1xuICAgICAgdmFyIG9zID0gdG9rZW4wLnNwbGl0KCcgJylbMF07XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkZXZpY2VfbW9kZWw6IG9zLFxuICAgICAgICBvczogb3MsXG4gICAgICAgIG9zX3ZlcnNpb246IHRva2VuW2ldWzFdXG4gICAgICB9O1xuICAgIH1cbiAgfVxuICB2YXIgT1RIRVIgPSAnb3RoZXInO1xuICByZXR1cm4ge1xuICAgIC8vIGRldmljZV9tb2RlbDogT1RIRVIsXG4gICAgb3M6IE9USEVSLFxuICAgIG9zX3ZlcnNpb246IE9USEVSXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldE1vZGVybk9TSW5mbyAodWEsIGRldmljZV9tb2RlbCkge1xuICAvKipcbiAgICogaVBhZDsgQ1BVIE9TIDExXzAgbGlrZSBNYWMgT1MgWFxuICAgKiBpUGhvbmU7IENQVSBpUGhvbmUgT1MgMTFfMCBsaWtlIE1hYyBPUyBYXG4gICAqIE1hY2ludG9zaDsgSW50ZWwgTWFjIE9TIFggMTBfMTRfNFxuICAgKiBMaW51eDsgQW5kcm9pZCA1LjA7IFNNLUc5MDBQIEJ1aWxkL0xSWDIxVFxuICAgKi9cbiAgdmFyIG9zSW5mbyA9IHVhLnN1YnN0cmluZyh1YS5pbmRleE9mKCcoJykgKyAxLCB1YS5pbmRleE9mKCcpJykpO1xuICB2YXIgcnMgPSB7XG4gICAgLy8gZGV2aWNlX21vZGVsOiBkZXZpY2VfbW9kZWwsXG4gIH07XG4gIHZhciBkID0gZGV2aWNlX21vZGVsLnRvTG93ZXJDYXNlKCk7XG4gIHN3aXRjaCAoZCkge1xuICBjYXNlICdpcGFkJzpcbiAgY2FzZSAnaXBob25lJzpcbiAgY2FzZSAnaXBvZCc6XG4gIGNhc2UgJ21hY2ludG9zaCc6XG4gICAgaWYgKGQgPT09ICdtYWNpbnRvc2gnKSB7XG4gICAgICBpZiAoL01hYyBPUyBYLy50ZXN0KG9zSW5mbykpIHtcbiAgICAgICAgcnMub3MgPSAnTWFjIE9TIFgnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcnMub3MgPSAnTWFjIE9TJztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcnMub3MgPSAnSU9TJztcbiAgICB9XG4gICAgcnMub3NfdmVyc2lvbiA9IG9zSW5mby5tYXRjaCgvWzAtOV8uXSsvKVswXTtcbiAgICBicmVhaztcbiAgY2FzZSAnYW5kcm9pZCc6XG4gICAgcnMub3MgPSAnQW5kcm9pZCc7XG4gICAgcnMub3NfdmVyc2lvbiA9IG9zSW5mby5tYXRjaCgvWzAtOS5dKy8pWzBdO1xuICAgIGJyZWFrO1xuICBkZWZhdWx0OlxuICAgIGJyZWFrO1xuICB9XG4gIHJzLm9zX3ZlcnNpb24gPSBycy5vc192ZXJzaW9uLnJlcGxhY2UoL18vZywgJy4nKTtcbiAgcmV0dXJuIHJzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIFVBID0gbmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgdmFyIGluZm8gPSB7fTtcbiAgdmFyIG1vZGVybk9TID0gVUEubWF0Y2goL2lwaG9uZXxpcGFkfGFuZHJvaWR8bWFjaW50b3NoL2kpO1xuICB2YXIgRGFyd2luT1MgPSBVQS5tYXRjaCgvRGFyd2luL2kpO1xuICBpZiAobW9kZXJuT1MpIHtcbiAgICBpbmZvID0gZ2V0TW9kZXJuT1NJbmZvKFVBLCBtb2Rlcm5PU1swXSk7XG4gIH0gZWxzZSBpZiAoRGFyd2luT1MpIHtcbiAgICB2YXIgX29zID0gVUEuc3BsaXQoJyAnKVsyXTtcbiAgICBpbmZvID0ge1xuICAgICAgb3M6ICdEYXJ3aW4nLFxuICAgICAgb3NfdmVyc2lvbjogX29zLm1hdGNoKC9bMC05Ll0rLylbMF1cbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIGluZm8gPSBnZXRPbGRGYXNoaW9uT3NJbmZvKFVBKTtcbiAgfVxuICB2YXIgc2NyID0gc2NyZWVuIHx8IHt9O1xuICBpbmZvLnNjcmVlbldpZHRoID0gc2NyLndpZHRoO1xuICBpbmZvLnNjcmVlbkhlaWdodCA9IHNjci5oZWlnaHQ7XG5cbiAgaWYgKG5hdmlnYXRvcikge1xuICAgIGluZm8udXNlckFnZW50ID0gbmF2aWdhdG9yLnVzZXJBZ2VudCB8fCAnLSc7XG4gICAgaW5mby5sYW5ndWFnZSA9IG5hdmlnYXRvci5sYW5ndWFnZSB8fCBuYXZpZ2F0b3IudXNlckxhbmd1YWdlIHx8ICctJztcbiAgfVxuICByZXR1cm4gaW5mbztcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9wbHVnaW5zL2xpYl9jbGllbnQvbWFpbi5qc1xuLy8gbW9kdWxlIGlkID0gMTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBwcm9qZWN0IC0gZmlsZXBhdGhcbiAqIOiOt+WPlumhtemdouS4iueahCA8bWV0YT4g5Lit5LiOIGFwbHVzIOaJk+eCueebuOWFs+eahOWAvFxuICpcbiAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cbiAqXG4gKiBBdXRob3JzOlxuICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuICovXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4ge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbXMge09iamVjdH0gb3B0aW9ucyB7XG4gICAgICogICBsb2dDb25maWc6IHtsb2dDb25maWd9XG4gICAgICogfVxuICAgICAqL1xuICAgIC8vIGluaXQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAvLyAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgLy8gfSxcblxuICAgIHJ1bjogZnVuY3Rpb24gKCkge1xuICAgICAgcmVxdWlyZSgnLi9saWJfbWV0YS9tYWluJykodGhpcy5vcHRpb25zLmNvbnRleHQuYXBsdXNfY29uZmlnKTtcbiAgICB9XG4gIH07XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvcGx1Z2lucy9hcGx1c19tZXRhX2luamVjdC5qc1xuLy8gbW9kdWxlIGlkID0gMTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBhbGlsb2cvcyAtIHNyYy9wbHVnaW5zL2xpYl9hcGkvbWFpbi5qc1xuICogbWV0YemFjee9ruaPkuS7tu+8jOiiq2FwaeaPkuS7tuS+nei1llxuICpcbiAqXG4gKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG4gKlxuICogQXV0aG9yczpcbiAqICAgUmljaGFyZHzosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuICovXG4ndXNlIHN0cmljdCc7XG5cbi8vIHZhciBhc3NpZ24gPSByZXF1aXJlKCdAdXRpbHMvYXNzaWduJyk7XG52YXIgdXRpbEdvbGRsb2cgPSByZXF1aXJlKCdAdXRpbHMvdXRpbEdvbGRsb2cnKTtcbnZhciB1dGlsVXJsID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxVcmwnKTtcbnZhciB1dGlsTmF0aXZlNEFwbHVzID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxOYXRpdmU0QXBsdXMnKTtcbnZhciB1dGlsTmFtZVN0b3JhZ2UgPSByZXF1aXJlKCdAdXRpbHMvdXRpbE5hbWVTdG9yYWdlJyk7XG52YXIgbWV0YUluZm8gPSByZXF1aXJlKCcuL21ldGFJbmZvQWxpJyk7XG5cbmZ1bmN0aW9uIGdldENkblBhdGggKCkge1xuICB2YXIgZG9jID0gZG9jdW1lbnQ7XG4gIHZhciBwYXRoID0gJy8vZy5hbGljZG4uY29tJztcbiAgaWYgKGRvYykge1xuICAgIHZhciBjdXJyZW50X25vZGUgPSBkb2MuZ2V0RWxlbWVudEJ5SWQoJ2JlYWNvbi1hcGx1cycpIHx8IGRvYy5nZXRFbGVtZW50QnlJZCgndGItYmVhY29uLWFwbHVzJyk7XG4gICAgdmFyIHBhdGhfb3RoZXJzID0gWycvL2Fzc2V0cy5hbGljZG4uY29tL2cnLCAnLy9nLWFzc2V0cy5kYWlseS50YW9iYW8ubmV0JywgJy8vYWxpZHQub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbSddO1xuICAgIGlmIChjdXJyZW50X25vZGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aF9vdGhlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHJlZyA9IG5ldyBSZWdFeHAocGF0aF9vdGhlcnNbaV0pO1xuICAgICAgICBpZiAocmVnLnRlc3QoY3VycmVudF9ub2RlLnNyYykpIHtcbiAgICAgICAgICBwYXRoID0gcGF0aF9vdGhlcnNbaV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9ICBcbiAgfVxuICByZXR1cm4gcGF0aDtcbn1cblxudmFyIGNkblBhdGg7XG4vLyDmmK/lkKblm73pmYXnjq/looNcbmZ1bmN0aW9uIGlzSW50ZXJuYXRpb25hbCAoKSB7XG4gIGlmICghY2RuUGF0aCkge1xuICAgIGNkblBhdGggPSBnZXRDZG5QYXRoKCk7XG4gIH1cbiAgdmFyIGlzSW50ID0gY2RuUGF0aCA9PT0gJy8vYXNzZXRzLmFsaWNkbi5jb20vZycgfHwgY2RuUGF0aCA9PT0gJy8vbGF6LWctY2RuLmFsaWNkbi5jb20nO1xuICByZXR1cm4gaXNJbnQgfHwgbWV0YUluZm8uZ2V0TWV0YUluZm8oJ2FwbHVzLWVudicpID09PSAnaW50Jztcbn1cblxuZnVuY3Rpb24gaXNNb2JpbGUgKCkge1xuICBpZiAobmF2aWdhdG9yICYmIG5hdmlnYXRvci51c2VyQWdlbnQpIHtcbiAgICB2YXIgaXNQaG9uZSA9ICgvaXBob25lfGFuZHJvaWQvaSkudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICB2YXIgaXNNb2JpbGUgPSBpc1Bob25lIHx8ICgvVEJcXC1QRC9pKS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgIHJldHVybiBpc01vYmlsZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gZ2V0VXRQYXJhbUZyb21VcmwgKCkge1xuICAvLyBhcGx1cy5zZXRNZXRhSW5mbygnYXBsdXMtdXRwYXJhbScpO1xuICB2YXIgcnM7XG4gIHZhciB1dHBhcmFtY250ID0gdXRpbFVybC5nZXRQYXJhbUZyb21VcmwoJ3V0cGFyYW1jbnQnLCBsb2NhdGlvbi5ocmVmKTtcbiAgaWYgKHV0cGFyYW1jbnQpIHtcbiAgICB0cnkge1xuICAgICAgcnMgPSB1dHBhcmFtY250ID0gSlNPTi5wYXJzZShkZWNvZGVVUklDb21wb25lbnQodXRwYXJhbWNudCkpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbiAgcmV0dXJuIHJzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcGx1c19jb25maWcpIHtcbiAgdmFyIGFwbHVzID0gdXRpbEdvbGRsb2cuZ2V0R2xvYmFsVmFsdWUoJ2FwbHVzJyk7XG4gIHZhciBOQU1FX1NUT1JBR0VfS0VZUyA9IGFwbHVzX2NvbmZpZy5nbG9iYWxDb25maWcuTkFNRV9TVE9SQUdFX0tFWVM7XG4gIHZhciByZWZlciA9IHJlcXVpcmUoJ0B1dGlscy91dGlsUmVmZXJyZXInKS5nZXRSZWZlcihOQU1FX1NUT1JBR0VfS0VZUyk7XG4gIC8vIGFwbHVzLmx2ZXIgPSBhcGx1c19jb25maWcuZ2xvYmFsQ29uZmlnLmx2ZXI7XG4gIGFwbHVzLm5hbWVTdG9yYWdlID0gdXRpbE5hbWVTdG9yYWdlLm5hbWVTdG9yYWdlOyAvLyDljoblj7Lljp/lm6DvvIzlnKggYXBsdXMg5LiK5pq06Zyy5Ye6IG5hbWVTdG9yYWdlXG4gIHV0aWxOYXRpdmU0QXBsdXMuaGF2ZU5hdGl2ZUZsYWdJblVBKCk7XG4gIHZhciBfJCA9IChhcGx1cy5fJCA9IGFwbHVzLl8kIHx8IHt9KTsgLy8g5YaF6YOo5L2/55So55qE5Y+Y6YePXG4gIF8kLmlzX3Rlcm1pbmFsID0gaXNNb2JpbGUoKTtcbiAgXyQuc2VuZF9wdl9jb3VudCA9IDA7XG4gIF8kLnBhZ2VfcmVmZXJyZXIgPSByZWZlcjtcbiAgXyQuc3BtID0ge1xuICAgIGRhdGE6IHt9LFxuICAgIHBhZ2VfcmVmZXJyZXI6IHJlZmVyXG4gIH07XG4gIGFwbHVzLmdsb2JhbENvbmZpZyA9IGFwbHVzX2NvbmZpZy5nbG9iYWxDb25maWc7XG4gIHZhciB1dHBhcmFtY250ID0gZ2V0VXRQYXJhbUZyb21VcmwoKTtcblxuICBfJC5tZXRhX2luZm8gPSBtZXRhSW5mby5xR2V0KCkgfHwge307XG4gIGZvciAodmFyIGsgaW4gYXBsdXNfY29uZmlnLm1ldGFJbmZvKSB7XG4gICAgaWYgKCFfJC5tZXRhX2luZm8uaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgIHZhciBtZXRhVmFsdWUgPSBhcGx1c19jb25maWcubWV0YUluZm9ba107XG4gICAgICBpZiAoayA9PT0gJ2FwbHVzLXV0cGFyYW0nKSB7XG4gICAgICAgIC8vIOi/memHjOeUqOeUqOaIt+WcqOmhtemdouS4iumFjee9rueahGFwbHVzLXV0cGFyYW3ljrttZXJnZSB1dHBhcmFtY250XG4gICAgICAgIHV0cGFyYW1jbnQgJiYgbWV0YUluZm8uYXBwZW5kTWV0YUluZm8oaywgdXRwYXJhbWNudCk7XG4gICAgICAgIG1ldGFJbmZvLmFwcGVuZE1ldGFJbmZvKGssIG1ldGFWYWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtZXRhSW5mby5zZXRNZXRhSW5mbyhrLCBtZXRhVmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBcblxuICBhcGx1cy5fJCA9IF8kO1xuICBhcGx1cy5pc0ludGVybmF0aW9uYWwgPSBpc0ludGVybmF0aW9uYWw7XG4gIGFwbHVzLmdldENkblBhdGggPSBnZXRDZG5QYXRoO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL3BsdWdpbnMvbGliX21ldGEvbWFpbi5qc1xuLy8gbW9kdWxlIGlkID0gMTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gLyoqXG4vLyAgKiDku44gdXJsIOS4reWPluWHuuWvueW6lOeahCBzcG0g5Y+C5pWwXG4vLyAgKiBAcGFyYW0gdXJsIHtTdHJpbmd9XG4vLyAgKiBAcmV0dXJuIHtTdHJpbmd9IHNwbSBhLmIuYy5kLnB2aWTvvIzkuIDlhbHkupTkvY1cbi8vICAqL1xuLy8gZnVuY3Rpb24gZ2V0U1BNRnJvbVVybCh1cmwpIHtcbi8vICAgdmFyIG0gPSB1cmwubWF0Y2gobmV3IFJlZ0V4cCgnXFxcXD8uKnNwbT0oW1xcXFx3XFxcXC5cXFxcLVxcXFwqL10rKScpKTtcbi8vICAgdmFyIHNwbTtcbi8vICAgcmV0dXJuIChtICYmIChzcG0gPSBtWzFdKSAmJiBzcG0uc3BsaXQoJy4nKS5sZW5ndGggPT0gNSkgPyBzcG0gOiBudWxsO1xuLy8gfVxuLy8gZXhwb3J0cy5nZXRTUE1Gcm9tVXJsID0gZ2V0U1BNRnJvbVVybDtcblxuLyoqXG4gKiBAYXV0aG9yIGppemhhLnd5aiAob2xkailcbiAqIEBibG9nIGh0dHA6Ly9vbGRqLm5ldFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gZ2V0UGFyYW1Gcm9tVXJsKGtleSwgdXJsKSB7XG4gIGlmIChrZXkgJiYgdXJsKSB7XG4gICAgdmFyIHBhcmFtID0gJyc7XG4gICAgdmFyIG07XG4gICAgdHJ5IHtcbiAgICAgIHZhciByZWcxID0gbmV3IFJlZ0V4cChrZXkgKyAnPShbXiZ8I3w/fFxcL10rKScpO1xuICAgICAgaWYgKGtleSA9PT0gJ3NwbScgfHwga2V5ID09PSAnc2NtJykge1xuICAgICAgICB2YXIgcmVnMiA9IG5ldyBSZWdFeHAoJ1xcXFw/LionICsga2V5ICsgJz0oW1xcXFx3XFxcXC5cXFxcLVxcXFwqL10rKScpO1xuICAgICAgICB2YXIgdG1wXzEgPSB1cmwubWF0Y2gocmVnMSk7XG4gICAgICAgIHZhciB0bXBfMiA9IHVybC5tYXRjaChyZWcyKTtcbiAgICAgICAgdmFyIHBhcmFtXzEgPSB0bXBfMSAmJiB0bXBfMS5sZW5ndGggPT09IDIgPyB0bXBfMVsxXSA6ICcnO1xuICAgICAgICB2YXIgcGFyYW1fMiA9IHRtcF8yICYmIHRtcF8yLmxlbmd0aCA9PT0gMiA/IHRtcF8yWzFdIDogJyc7XG4gICAgICAgIHBhcmFtID0gcGFyYW1fMSA+IHBhcmFtXzIgPyBwYXJhbV8xIDogcGFyYW1fMjtcbiAgICAgICAgcGFyYW0gPSBkZWNvZGVVUklDb21wb25lbnQocGFyYW0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbSA9IHVybC5tYXRjaChyZWcxKTtcbiAgICAgICAgcGFyYW0gPSBtICYmIG0ubGVuZ3RoID09PSAyID8gbVsxXSA6ICcnO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgLy8gVE9ET1xuICAgIH0gZmluYWxseSB7XG4gICAgICByZXR1cm4gcGFyYW07XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAnJztcbiAgfVxufTtcbmV4cG9ydHMuZ2V0UGFyYW1Gcm9tVXJsID0gZ2V0UGFyYW1Gcm9tVXJsO1xuXG4vKipcbiAqIOS7jiB1cmwg5Lit5Y+W5Ye65a+55bqU55qEIHNwbSDlj4LmlbBcbiAqIOS8mOW6k+Wcn+ixhnNwbUPkvY3lj6/og73lrZjlnKjnibnmrorlrZfnrKbvvIzlpoLvvJrigJxzcG09MC4wLml0ZW1fWE1UWTRPVEV5TlRBME1BPT0uQS5CaWlOUzHigJ1cbiAqIEBwYXJhbSB1cmwge1N0cmluZ31cbiAqIEByZXR1cm4ge1N0cmluZ30gc3BtIGEuYi5jLmQucHZpZO+8jOS4gOWFseS6lOS9jVxuICovXG5leHBvcnRzLmdldFNQTUZyb21VcmwgPSBmdW5jdGlvbih1cmwpIHtcbiAgcmV0dXJuIGdldFBhcmFtRnJvbVVybCgnc3BtJywgdXJsKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9saWJfdS91dGlscy91dGlsVXJsLmpzXG4vLyBtb2R1bGUgaWQgPSAxNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIHByb2plY3QgLSBmaWxlcGF0aFxuICogZGVzY3JpcHRpb25cbiAqXG4gKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG4gKlxuICogQXV0aG9yczpcbiAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbEdvbGRsb2cgPSByZXF1aXJlKCcuL3V0aWxHb2xkbG9nJyk7XG5cbnZhciBVVEZMQUcgPSAnVVQ0QXBsdXMnO1xudmFyIFVNRkxBRyA9ICdVbWVuZzRBcGx1cyc7XG5cbmV4cG9ydHMuaXNOYXRpdmU0QXBsdXMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBhcGx1cyA9IHV0aWxHb2xkbG9nLmdldEdsb2JhbFZhbHVlKCdhcGx1cycpO1xuICB2YXIgY2hhbm5lbCA9IGFwbHVzLmdldE1ldGFJbmZvKCdhcGx1cy10b1VUJyk7XG4gIHZhciBicmlkZ2VOYW1lID0gYXBsdXMuYXBsdXNCcmlkZ2VOYW1lO1xuICByZXR1cm4gKGJyaWRnZU5hbWUgPT09IFVURkxBRyAmJiBjaGFubmVsID09PSBVVEZMQUcpIHx8IGJyaWRnZU5hbWUgPT09IFVNRkxBRztcbn07XG5cbmV4cG9ydHMuaGF2ZU5hdGl2ZUZsYWdJblVBID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYXBsdXMgPSB1dGlsR29sZGxvZy5nZXRHbG9iYWxWYWx1ZSgnYXBsdXMnKTtcbiAgdmFyIGJyaWRnZU5hbWUgPSBhcGx1cy5hcGx1c0JyaWRnZU5hbWU7XG4gIC8vIOW9k2JyaWRnZU5hbWXkuLrnqbrlgLzml7bmiY3ov5vooYzku6XkuIvnmoTliKTmlq3lkozlpITnkIbpgLvovpHvvIzku6Xmj5DljYflpJrmrKHov5DooYznmoTmgKfog71cbiAgaWYgKCFicmlkZ2VOYW1lICYmIHR5cGVvZiBicmlkZ2VOYW1lICE9PSAnYm9vbGVhbicgJiYgbmF2aWdhdG9yICYmIG5hdmlnYXRvci51c2VyQWdlbnQpIHtcbiAgICB2YXIgcmVnID0gbmV3IFJlZ0V4cChbVVRGTEFHLCBVTUZMQUddLmpvaW4oJ3wnKSwgJ2knKTtcbiAgICB2YXIgbWF0Y2hSZXN1bHQgPSBuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKHJlZyk7XG4gICAgYnJpZGdlTmFtZSA9IG1hdGNoUmVzdWx0ID8gbWF0Y2hSZXN1bHRbMF0gOiBmYWxzZTtcbiAgICBhcGx1cy5hcGx1c0JyaWRnZU5hbWUgPSBicmlkZ2VOYW1lO1xuICB9XG4gIHJldHVybiAhIWJyaWRnZU5hbWU7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvbGliX3UvdXRpbHMvdXRpbE5hdGl2ZTRBcGx1cy5qc1xuLy8gbW9kdWxlIGlkID0gMTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBwcm9qZWN0IC0gZmlsZXBhdGhcbiAqIGRlc2NyaXB0aW9uXG4gKlxuICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuICpcbiAqIEF1dGhvcnM6XG4gKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxHb2xkbG9nID0gcmVxdWlyZSgnLi91dGlsR29sZGxvZycpO1xuXG4vKipcbiAqIG5hbWVTdG9yYWdlIOeahOWunueOsOaLt+i0nVxuICpcbiAqIGh0dHA6Ly9naXRsYWIuYWxpYmFiYS1pbmMuY29tL2NvZGV2L25hbWUtc3RvcmFnZS90cmVlL21hc3RlclxuICovXG52YXIgbmFtZVN0b3JhZ2UgPSAoZnVuY3Rpb24gKCkge1xuXG4gIHZhciBfbmFtZVN0b3JhZ2UgPSB1dGlsR29sZGxvZy5nZXRHbG9iYWxWYWx1ZSgnbmFtZVN0b3JhZ2UnKTtcblxuICBpZiAoX25hbWVTdG9yYWdlKSB7XG4gICAgcmV0dXJuIF9uYW1lU3RvcmFnZTtcbiAgfVxuXG4gIHZhciBTQ0hFTUUgPSBcIm5hbWVTdG9yYWdlOlwiO1xuICAvL3ZhciBSRV9OQU1FUyA9IC9ebmFtZVN0b3JhZ2U6KFteP10qKSg/OlxcPyg/OihbXj1dKyk9KFteJl0qKSkqKT8vZztcbiAgdmFyIFJFX1BBSVIgPSAvXihbXj1dKykoPzo9KC4qKSk/JC87XG4gIHZhciBRID0gXCI/XCI7XG4gIHZhciBFUSA9IFwiPVwiO1xuICB2YXIgQU5EID0gXCImXCI7XG5cbiAgdmFyIGVuY29kZSA9IGVuY29kZVVSSUNvbXBvbmVudDtcbiAgdmFyIGRlY29kZSA9IGRlY29kZVVSSUNvbXBvbmVudDtcblxuICB2YXIgU1RPUkFHRSA9IHt9O1xuICB2YXIgT1JJR0lOX05BTUU7XG5cbiAgdmFyIG5hbWVTdG9yYWdlID0ge307XG5cbiAgLy8g6Kej5p6Q5bm25Yid5aeL5YyWIG5hbWUg5pWw5o2u44CCXG4gIC8vIOagh+WHhueahCBuYW1lU3RvcmFnZSDmlbDmja7moLzlvI/kuLogYG5hbWVTdG9yYWdlOm9yaWdpbi1uYW1lP2tleT12YWx1ZWBcbiAgLy8gQHBhcmFtIHtTdHJpbmd9IG5hbWUuXG4gIChmdW5jdGlvbiBwYXJzZShuYW1lKSB7XG5cbiAgICBpZiAobmFtZSAmJiBuYW1lLmluZGV4T2YoU0NIRU1FKSA9PT0gMCkge1xuXG4gICAgICB2YXIgbWF0Y2ggPSBuYW1lLnNwbGl0KC9bOj9dLyk7XG5cbiAgICAgIG1hdGNoLnNoaWZ0KCk7IC8vIHNjaGVtZTogbWF0Y2hbMF07XG4gICAgICBPUklHSU5fTkFNRSA9IGRlY29kZShtYXRjaC5zaGlmdCgpKSB8fCBcIlwiOyAvLyBtYXRjaFsxXVxuXG4gICAgICB2YXIgcGFyYW1zID0gbWF0Y2guam9pbihcIlwiKTsgLy8gbWF0Y2hbMiwuLi5dXG5cbiAgICAgIHZhciBwYWlycyA9IHBhcmFtcy5zcGxpdChBTkQpO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIHBhaXIsIGtleSwgdmFsdWUsIGwgPSBwYWlycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgcGFpciA9IHBhaXJzW2ldLm1hdGNoKFJFX1BBSVIpO1xuICAgICAgICBpZiAoIXBhaXIgfHwgIXBhaXJbMV0pIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGtleSA9IGRlY29kZShwYWlyWzFdKTtcbiAgICAgICAgdmFsdWUgPSBkZWNvZGUocGFpclsyXSkgfHwgXCJcIjtcblxuICAgICAgICBTVE9SQUdFW2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG5cbiAgICAgIE9SSUdJTl9OQU1FID0gbmFtZSB8fCBcIlwiO1xuXG4gICAgfVxuXG4gIH0pKHdpbmRvdy5uYW1lKTtcblxuICAvLyDlhpnlhaXmlbDmja7jgIJcbiAgLy8gQHBhcmFtIHtTdHJpbmd9IGtleSwg6ZSu5ZCN44CCXG4gIC8vIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZSwg6ZSu5YC844CCXG4gIG5hbWVTdG9yYWdlLnNldEl0ZW0gPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgIGlmICgha2V5IHx8IFwidW5kZWZpbmVkXCIgPT09IHR5cGVvZiB2YWx1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBTVE9SQUdFW2tleV0gPSBTdHJpbmcodmFsdWUpO1xuICAgIHNhdmUoKTtcbiAgfTtcblxuICAvLyDor7vlj5bmlbDmja7jgIJcbiAgLy8gQHBhcmFtIHtTdHJpbmd9IGtleSwg6ZSu5ZCN44CCXG4gIC8vIEByZXR1cm4ge1N0cmluZ30g6ZSu5YC844CC5aaC5p6c5LiN5a2Y5Zyo77yM5YiZ6L+U5ZueIGBudWxsYOOAglxuICBuYW1lU3RvcmFnZS5nZXRJdGVtID0gZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBTVE9SQUdFLmhhc093blByb3BlcnR5KGtleSkgPyBTVE9SQUdFW2tleV0gOiBudWxsO1xuICB9O1xuXG4gIC8vIOenu+mZpOaVsOaNruOAglxuICAvLyBAcGFyYW0ge1N0cmluZ30ga2V5LCDplK7lkI3jgIJcbiAgbmFtZVN0b3JhZ2UucmVtb3ZlSXRlbSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoIVNUT1JBR0UuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBTVE9SQUdFW2tleV0gPSBudWxsO1xuICAgIGRlbGV0ZSBTVE9SQUdFW2tleV07XG4gICAgc2F2ZSgpO1xuICB9O1xuXG4gIC8vIOa4heepuiBuYW1lU3RvcmFnZeOAglxuICBuYW1lU3RvcmFnZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICBTVE9SQUdFID0ge307XG4gICAgc2F2ZSgpO1xuICB9O1xuXG4gIG5hbWVTdG9yYWdlLnZhbHVlT2YgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFNUT1JBR0U7XG4gIH07XG5cbiAgbmFtZVN0b3JhZ2UudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG5hbWUgPSB3aW5kb3cubmFtZTtcbiAgICByZXR1cm4gbmFtZS5pbmRleE9mKFNDSEVNRSkgPT09IDAgPyBuYW1lIDogU0NIRU1FICsgbmFtZTtcbiAgfTtcblxuICAvLyDkv53lrZjmlbDmja7liLAgd2luZG93Lm5hbWVcbiAgLy8g5aaC5p6c5rKh5pyJ5a2Y5YKo5pWw5o2u77yM5YiZ5oGi5aSN5Y6f5aeL56qX5Y+j5ZCN56ewKHdpbmRvdy5uYW1lKeOAglxuICBmdW5jdGlvbiBzYXZlKCkge1xuICAgIHZhciBwYWlycyA9IFtdO1xuICAgIHZhciBlbXB0eSA9IHRydWU7XG4gICAgdmFyIHZhbHVlO1xuXG4gICAgZm9yICh2YXIga2V5IGluIFNUT1JBR0UpIHtcbiAgICAgIGlmIChTVE9SQUdFLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgZW1wdHkgPSBmYWxzZTtcbiAgICAgICAgdmFsdWUgPSBTVE9SQUdFW2tleV0gfHwgXCJcIjtcbiAgICAgICAgcGFpcnMucHVzaChlbmNvZGUoa2V5KSArIEVRICsgZW5jb2RlKHZhbHVlKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgd2luZG93Lm5hbWUgPSBlbXB0eSA/IE9SSUdJTl9OQU1FIDogU0NIRU1FICsgZW5jb2RlKE9SSUdJTl9OQU1FKSArIFEgKyBwYWlycy5qb2luKEFORCk7XG4gIH07XG5cbiAgLy8gYWRkRXZlbnRMaXN0ZXIgaW1wbGVtZW50YXRpb25cbiAgLy8gQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudC5cbiAgLy8gQHBhcmFtIHtTdHJpbmd9IGV2ZW50TmFtZS5cbiAgLy8gQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlci5cbiAgZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihlbGVtZW50LCBldmVudE5hbWUsIGhhbmRsZXIpIHtcbiAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyLCBmYWxzZSk7XG4gICAgfSBlbHNlIGlmIChlbGVtZW50LmF0dGFjaEV2ZW50KSB7XG4gICAgICBlbGVtZW50LmF0dGFjaEV2ZW50KCdvbicgKyBldmVudE5hbWUsIGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgaGFuZGxlci5jYWxsKGVsZW1lbnQsIGV2dCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgLy8gU2F2ZSB0aGUgbGFzdCBkYXRhIGZvciB0aGUgbmV4dCBwYWdlLlxuICBhZGRFdmVudExpc3RlbmVyKHdpbmRvdywgJ2JlZm9yZXVubG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICBzYXZlKCk7XG4gIH0pO1xuXG4gIHJldHVybiBuYW1lU3RvcmFnZTtcblxufSkoKTtcblxuZXhwb3J0cy5uYW1lU3RvcmFnZSA9IG5hbWVTdG9yYWdlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvbGliX3UvdXRpbHMvdXRpbE5hbWVTdG9yYWdlLmpzXG4vLyBtb2R1bGUgaWQgPSAxOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIHByb2plY3QgLSBmaWxlcGF0aFxuICog6I635Y+W6aG16Z2i5LiK55qEIDxtZXRhPiDkuK3kuI4gYXBsdXMg5omT54K555u45YWz55qE5YC8XG4gKiDpmL/ph4zns7vkuJrliqHotbDov5nkuKrpgLvovpFcbiAqXG4gKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG4gKlxuICogQXV0aG9yczpcbiAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZm9ybWF0ID0gcmVxdWlyZSgnQHV0aWxzL2Zvcm1hdCcpO1xudmFyIHV0aWxEYXNoID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxEYXNoJyk7XG52YXIgdXRpbERhdGEgPSByZXF1aXJlKCdAdXRpbHMvdXRpbERhdGEnKTtcbnZhciB1dGlsTG9nZ2VyID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxMb2dnZXInKTtcbnZhciBlYWNoID0gcmVxdWlyZSgnQHV0aWxzL2VhY2gnKTtcbnZhciB1dGlsQXR0cmlidXRlID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxBdHRyaWJ1dGUnKTtcbnZhciB1dGlsTWV0YSA9IHJlcXVpcmUoJ0B1dGlscy91dGlsTWV0YScpO1xuLy8gdmFyIHV0aWxFeGluZm8gPSByZXF1aXJlKCdAdXRpbHMvdXRpbEV4aW5mbycpO1xuXG52YXIgaW5mbyA9IHt9O1xudmFyIEFQTFVTX1hfU0VUVElOR1MgPSAnYXBsdXMteC1zZXR0aW5ncyc7XG52YXIgcHJpb3JpdHlNZXRhSW5mbztcblxuLy8g5Yig6Zmk5aSn6YeP55qEQXJycmF577yM5L+d55WZ5Y6G5Y+y5LiN6KeE6IyD55qEbWV0YU5hbWUgMjAxOC0wMS0xMCBA6LCL5aOrXG4vLyDor6bop4EgaHR0cHM6Ly9sYXJrLmFsaXBheS5jb20vYXBsdXNqcy9kb2NzL2xweXZjbVxudmFyIGtleXMgPSBbJ2Fob3QtYXBsdXMnLCAnaXNvbmVwYWdlJywgJ3NwbS1pZCcsICdkYXRhLXNwbScsICdtaWNyb3Njb3BlLWRhdGEnXTtcblxuLyoqXG4gKiDlj5blvpcgaGVhZCAvIG1ldGEg5Lit55qE5pi+5b6u6ZWc55qE5pWw5o2u77yMXG4gKiDlvaLlpoLvvJpcbiAqIDxtZXRhIG5hbWU9XCJtaWNyb3Njb3BlLWRhdGFcIiBjb250ZW50PVwicGFnZUlkPTEyMzsgc2l0ZUlkPTQ1NlwiPlxuICog5Y+v6IO95pyJ5aSa5p2hIG1ldGEg5pWw5o2u44CCXG4gKlxuICog55u45YWz5qC85byP5Y+K6K+05piO6KeB77yaXG4gKiBodHRwOi8vd2lraS51ZWQudGFvYmFvLm5ldC9kb2t1LnBocD9pZD10ZWFtOnVkYzpmMmU6d2VidHJhY2VyOmRldi1kb2NzOmV4dHJhLWRhdGFcbiAqL1xuZnVuY3Rpb24gZ2V0TWV0YU1pY3Jvc2NvcGVEYXRhIChtZXRhX25vZGVzKSB7XG4gIHZhciBpO1xuICB2YXIgbWV0YTtcbiAgdmFyIGwgPSBtZXRhX25vZGVzLmxlbmd0aDtcbiAgdmFyIGNvbnRlbnQ7XG4gIHZhciBfbWljcm9zY29wZV9kYXRhID0ge307XG4gIGluZm8uX21pY3Jvc2NvcGVfZGF0YSA9IF9taWNyb3Njb3BlX2RhdGE7XG5cbiAgZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuICAgIG1ldGEgPSBtZXRhX25vZGVzW2ldO1xuICAgIGlmICh1dGlsQXR0cmlidXRlLnRyeVRvR2V0QXR0cmlidXRlKG1ldGEsICduYW1lJykgPT09ICdtaWNyb3Njb3BlLWRhdGEnKSB7XG4gICAgICBjb250ZW50ID0gdXRpbEF0dHJpYnV0ZS50cnlUb0dldEF0dHJpYnV0ZShtZXRhLCAnY29udGVudCcpO1xuICAgICAgdXRpbERhdGEucGFyc2VTZW1pY29sb25Db250ZW50KGNvbnRlbnQsIF9taWNyb3Njb3BlX2RhdGEpO1xuICAgICAgaW5mby5pc19oZWFkX2hhc19tZXRhX21pY3Jvc2NvcGVfZGF0YSA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgaW5mby5fbWljcm9zY29wZV9kYXRhX3BhcmFtcyA9IGZvcm1hdC5vYmoycGFyYW0oX21pY3Jvc2NvcGVfZGF0YSk7XG5cbiAgaW5mby5tc19kYXRhX3BhZ2VfaWQgPSBfbWljcm9zY29wZV9kYXRhWydwYWdlSWQnXTtcbiAgaW5mby5tc19kYXRhX3Nob3BfaWQgPSBfbWljcm9zY29wZV9kYXRhWydzaG9wSWQnXTtcbiAgaW5mby5tc19kYXRhX2luc3RhbmNlX2lkID0gX21pY3Jvc2NvcGVfZGF0YVsnc2l0ZUluc3RhbmNlSWQnXTtcbiAgaW5mby5tc19kYXRhX3NpdGVDYXRlZ29yeUlkID0gX21pY3Jvc2NvcGVfZGF0YVsnc2l0ZUNhdGVnb3J5J107XG4gIGluZm8ubXNfcHJvdG90eXBlX2lkID0gX21pY3Jvc2NvcGVfZGF0YVsncHJvdG90eXBlSWQnXTtcbiAgaW5mby5zaXRlX2luc3RhbmNlX2lkX29yX3Nob3BfaWQgPSBpbmZvLm1zX2RhdGFfaW5zdGFuY2VfaWQgfHwgaW5mby5tc19kYXRhX3Nob3BfaWQ7XG5cbiAgLy8g56e76Zmk5LqGIGF0cC1iZWFjb24g5Yqf6IO977yM5pqC5pe25L+d55WZ5YWl5Y+jIEDosIvlo6sgMjAxOC0wMS0xMFxuICBpbmZvLl9hdHBfYmVhY29uX2RhdGEgPSB7fTtcbiAgaW5mby5fYXRwX2JlYWNvbl9kYXRhX3BhcmFtcyA9ICcnO1xufTtcblxuLyoqXG4gKiA8bWV0YSBuYW1lPVwiZGF0YS1zcG1cIiBjb250ZW50PVwiMVwiIGRhdGEtc3BtLXByb3RvY29sPVwiaVwiIC8+XG4gKlxuICog5Y+W5b6XIGRhdGEtc3BtIOi/meS4qiBtZXRhIOS4iueahCBkYXRhLXNwbS1wcm90b2NvbCDnmoTlgLxcbiAqIOWmguaenOacieiuvue9ruS4lOWAvOS4uiAnaSfvvIjkvb/nlKggaW1nIOWNj+iuru+8ie+8jOWImemhtemdouS4iuaJgOacieeahCA8YT4vPGFyZWE+IOmTvuaOpeiiq+eCueWHu+aXtumDveS4jea3u+WKoCBzcG0g5Y+C5pWw77yM6ICM5pivXG4gKiDlj5HpgIHkuIDkuKogbmV3IEltYWdlKCkg6K+35rGCXG4gKi9cbmZ1bmN0aW9uIGdldFNQTVByb3RvY29sRnJvbU1ldGEgKG1ldGFfbm9kZXMpIHtcbiAgdmFyIG1ldGFfc3BtX3Byb3RvY29sO1xuICB2YXIgZ2V0TWV0YUJ5RGF0YXNwbSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX21ldGE7XG4gICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IpIHtcbiAgICAgIF9tZXRhID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbWV0YVtuYW1lPWRhdGEtc3BtXScpO1xuICAgIH1cbiAgICBlYWNoKG1ldGFfbm9kZXMsIGZ1bmN0aW9uIChtKSB7XG4gICAgICBpZiAodXRpbEF0dHJpYnV0ZS50cnlUb0dldEF0dHJpYnV0ZShtLCAnbmFtZScpID09PSAnZGF0YS1zcG0nKSB7XG4gICAgICAgIF9tZXRhID0gbTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gX21ldGE7XG4gIH07XG4gIHZhciBtZXRhID0gZ2V0TWV0YUJ5RGF0YXNwbSgpO1xuICBpZiAobWV0YSkge1xuICAgIG1ldGFfc3BtX3Byb3RvY29sID0gdXRpbEF0dHJpYnV0ZS50cnlUb0dldEF0dHJpYnV0ZShtZXRhLCAnZGF0YS1zcG0tcHJvdG9jb2wnKTtcbiAgfVxuICByZXR1cm4gbWV0YV9zcG1fcHJvdG9jb2w7XG59O1xuXG5mdW5jdGlvbiBwYXJzZU9uZVBhZ2UoaW5mbykge1xuICB2YXIgY29udGVudCA9IGluZm8uaXNvbmVwYWdlIHx8ICctMSc7XG4gIHZhciBhcnJfY29udGVudCA9IGNvbnRlbnQuc3BsaXQoJ3wnKTtcbiAgdmFyIGlzb25lcGFnZSA9IGFycl9jb250ZW50WzBdO1xuICB2YXIgdXJscGFnZW5hbWUgPSBhcnJfY29udGVudFsxXSA/IGFycl9jb250ZW50WzFdIDogJyc7XG5cbiAgaW5mby5pc29uZXBhZ2VfZGF0YSA9IHtcbiAgICBpc29uZXBhZ2U6IGlzb25lcGFnZSxcbiAgICB1cmxwYWdlbmFtZTogdXJscGFnZW5hbWVcbiAgfTtcbn07XG5cbi8qKlxuICogQHJldHVybnMge3t9fVxuICovXG52YXIgbGFzdF9pbmZvO1xuZnVuY3Rpb24gZ2V0SW5mbygpIHtcbiAgaWYgKGRvY3VtZW50KSB7XG4gICAgdmFyIG1ldGFfbm9kZXMgPSB1dGlsTWV0YS5nZXRNZXRhVGFncygpO1xuICAgIGdldE1ldGFNaWNyb3Njb3BlRGF0YShtZXRhX25vZGVzKTtcblxuICAgIC8vIHN0ZXAx44CB5ou/5Yiw5omA5pyJYXBsdXPlhbPplK7or43lvIDlpLTnmoRtZXRhVmFsdWVcbiAgICBlYWNoKG1ldGFfbm9kZXMsIGZ1bmN0aW9uKG0pe1xuICAgICAgdmFyIG1ldGFOYW1lID0gdXRpbEF0dHJpYnV0ZS50cnlUb0dldEF0dHJpYnV0ZShtLCAnbmFtZScpO1xuICAgICAgaWYgKC9eYXBsdXMvLnRlc3QobWV0YU5hbWUpKSB7XG4gICAgICAgIGluZm9bbWV0YU5hbWVdID0gdXRpbE1ldGEuZ2V0TWV0YUNudChtZXRhTmFtZSk7XG4gICAgICAgIGlmIChtZXRhTmFtZSA9PT0gQVBMVVNfWF9TRVRUSU5HUykge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwcmlvcml0eU1ldGFJbmZvID0gaW5mb1ttZXRhTmFtZV0gPSBKU09OLnBhcnNlKHV0aWxNZXRhLmdldE1ldGFDbnQobWV0YU5hbWUpKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgLy8gc3RlcDLjgIHmi7/liLDpmaTkuoZhcGx1c+WFs+mUruivjeW8gOWktOeahO+8jOWOhuWPsuaatOmcsueahOaOpeWPo21ldGFWYWx1ZVxuICAgIGVhY2goa2V5cywgZnVuY3Rpb24gKGspIHtcbiAgICAgIGluZm9ba10gPSB1dGlsTWV0YS5nZXRNZXRhQ250KGspO1xuICAgIH0pO1xuXG4gICAgaW5mby5zcG1fcHJvdG9jb2wgPSBnZXRTUE1Qcm90b2NvbEZyb21NZXRhKG1ldGFfbm9kZXMpO1xuICAgIGlmIChwcmlvcml0eU1ldGFJbmZvKSB7XG4gICAgICBpbmZvID0gdXRpbERhc2guYXNzaWduKGluZm8sIHByaW9yaXR5TWV0YUluZm8pO1xuICAgIH1cblxuICAgIC8vIHN0ZXAz44CB5rWu54K55pWw54m55q6K5aSE55CGXG4gICAgdmFyIGZsb2F0X2tleXMgPSBbJ2FwbHVzLXJhdGUtYWhvdCddO1xuICAgIHZhciBpO1xuICAgIHZhciBrO1xuICAgIHZhciBsID0gZmxvYXRfa2V5cy5sZW5ndGg7XG4gICAgZm9yIChpID0gMDsgaSA8IGw7IGkgKyspIHtcbiAgICAgIGsgPSBmbG9hdF9rZXlzW2ldO1xuICAgICAgaW5mb1trXSA9IHBhcnNlRmxvYXQoaW5mb1trXSk7XG4gICAgfVxuXG4gICAgcGFyc2VPbmVQYWdlKGluZm8pO1xuICB9XG4gIGxhc3RfaW5mbyA9IGluZm8gfHwge307XG4gIHJldHVybiBpbmZvO1xufTtcbmV4cG9ydHMuZ2V0SW5mbyA9IGdldEluZm87XG5cbi8vIOWmguaenOaciee8k+WtmO+8jOS9v+eUqOe8k+WtmOeahOWAvO+8jOayoeaciee8k+WtmOWImeS7jiBET00g5Lit6K+75Y+WXG5leHBvcnRzLnFHZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBsYXN0X2luZm8gfHwgZ2V0SW5mbygpO1xufTtcblxuZnVuY3Rpb24gbG9nZ2VyUHJpb3JpdHlJbmZvIChrKSB7XG4gIHV0aWxMb2dnZXIubG9nZ2VyKHtcbiAgICBtc2c6ICdwbGVhc2UgZG8gbm90IHJlcGVhdCBzZXRQcmlvcml0eU1ldGFJbmZvICcgKyBrXG4gIH0pO1xufVxuXG4vKipcbiAqIOWKqOaAgemFjee9rm1ldGFcbiAqIOWuuemUmeagoemqjOenu+akjeWIsGFwbHVz5Y+v6KeG5YyW5Z+L54K56aqM6K+B5bel5YW35YaFIDIwMTgtMDEtMTAgQOiwi+Wjq1xuICog6K+m6KeB77yaaHR0cHM6Ly9sYXJrLmFsaXBheS5jb20vYXBsdXNqcy9wcm9qZWN0L3BlcmZvcm1hbmNlXG4gKlxuICogQHBhcmFtcyB7U3RyaW5nfSBrXG4gKiBAcGFyYW1zIHtPYmplY3R9IHZcbiAqIEBwYXJhbXMge09iamVjdH0gb3B0cyB7IHByaW9yaXR5OiAxIH0gfHwgbnVsbFxuICovXG5leHBvcnRzLnNldE1ldGFJbmZvID0gZnVuY3Rpb24gKGssIHYpIHtcbiAgaWYgKCFsYXN0X2luZm8pIHtcbiAgICBsYXN0X2luZm8gPSB7fTtcbiAgfVxuICAvLyDlhajlsYDphY3nva7lj6ropoHmnInlsLHkuI3og73lho3mrKHorr7nva7vvIzmlYXov5nph4znm7TmjqVyZXR1cm5cbiAgaWYgKHR5cGVvZiBwcmlvcml0eU1ldGFJbmZvID09PSAnb2JqZWN0JyAmJiBwcmlvcml0eU1ldGFJbmZvW2tdKSB7XG4gICAgbG9nZ2VyUHJpb3JpdHlJbmZvKGspO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChrID09PSBBUExVU19YX1NFVFRJTkdTKSB7XG4gICAgaWYgKCFwcmlvcml0eU1ldGFJbmZvKSB7XG4gICAgICB0cnkge1xuICAgICAgICBwcmlvcml0eU1ldGFJbmZvID0gdHlwZW9mIHYgPT09ICdvYmplY3QnID8gdiA6IEpTT04ucGFyc2Uodik7XG4gICAgICAgIGxhc3RfaW5mbyA9IHV0aWxEYXNoLmFzc2lnbihsYXN0X2luZm8sIHByaW9yaXR5TWV0YUluZm8pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlICYmIGNvbnNvbGUubG9nKGUpO1xuICAgICAgfSAgXG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZ2dlclByaW9yaXR5SW5mbyhrKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoayA9PT0gJ2FwbHVzLWV4aW5mbycpIHtcbiAgICBsYXN0X2luZm9ba10gPSB0eXBlb2YgdiA9PT0gJ29iamVjdCcgPyB2IDogZm9ybWF0LnBhcmFtMm9iaih2KTtcbiAgfSBlbHNlIHtcbiAgICBsYXN0X2luZm9ba10gPSB2O1xuICB9XG4gIHJldHVybiB0cnVlO1xufTtcblxuLyoqXG4gKiBnZXQgbWV0YUluZm8gYnkga2V5XG4gKiDlrrnplJnmoKHpqoznp7vmpI3liLBhcGx1c+WPr+inhuWMluWfi+eCuemqjOivgeW3peWFt+WGhSAyMDE4LTAxLTEwIEDosIvlo6tcbiAqIOivpuinge+8mmh0dHBzOi8vbGFyay5hbGlwYXkuY29tL2FwbHVzanMvcHJvamVjdC9wZXJmb3JtYW5jZVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfVxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG52YXIgZ2V0TWV0YUluZm8gPSBmdW5jdGlvbihrKSB7XG4gIGlmICghbGFzdF9pbmZvKSB7XG4gICAgbGFzdF9pbmZvID0ge307XG4gIH1cbiAgcmV0dXJuIGxhc3RfaW5mb1trXSB8fCAnJztcbn07XG5leHBvcnRzLmdldE1ldGFJbmZvID0gZ2V0TWV0YUluZm87XG5cblxuLyoqXG4gKiBUbyBhcHBlbmQgYG1ldGFgIHRhZyBpZiB0aGVyZSdzIG5vbmUgYXBsdXMgbWV0YS5cbiAqIE90aGVyd2lzZSwgbWVyZ2UgY29udGVudCBhdHRyaWJ1dGVzOlxuICogIC0gYEFycmF5LnByb3RvdHlwZS5jb25jYXRgIGNhbGxlZCBvbiBBcnJheSB2YWx1ZXMuXG4gKiAgLSBgT2JqZWN0LmFzc2lnbmAgY2FsbGVkIG9uIE9iamVjdCB2YWx1ZXMuXG4gKiAgQHBhcmFtIGtcbiAqICBAcGFyYW0gdlxuICovXG5leHBvcnRzLmFwcGVuZE1ldGFJbmZvID0gZnVuY3Rpb24gKGssIHYpIHtcbiAgaWYgKGsgJiYgdikge1xuICAgIC8vIGFwbHVzLXV0cGFyYW0gfHwgYXBsdXMtbmV4dHBhZ2UtdXRwYXJhbSB8fCBhcGx1cy1leGRhdGFcbiAgICB2YXIgcHJvY2Vzc09iamVjdCA9IGZ1bmN0aW9uIChvbGRfdmFsdWUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBuZXdfdmFsdWUgPSB0eXBlb2YgdiA9PT0gJ3N0cmluZycgPyBKU09OLnBhcnNlKHYpIDogdjtcbiAgICAgICAgdG9TZXRNZXRhSW5mbyhrLCB1dGlsRGFzaC5hc3NpZ24ob2xkX3ZhbHVlLCBuZXdfdmFsdWUpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfTtcbiAgICAvLyBhcGx1cy1hdXRvLWV4cCB8fCBhcGx1cy1hdXRvLWNsa1xuICAgIHZhciBwcm9jZXNzQXJyYXkgPSBmdW5jdGlvbiAob2xkX3ZhbHVlKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgbmV3X3ZhbHVlID0gdHlwZW9mIHYgPT09ICdzdHJpbmcnID8gSlNPTi5wYXJzZSh2KSA6IHY7XG4gICAgICAgIHRvU2V0TWV0YUluZm8oaywgb2xkX3ZhbHVlLmNvbmNhdChuZXdfdmFsdWUpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfTtcblxuICAgIHZhciBwcm9jZXNzT2JqID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUuY29uc3RydWN0b3IgPT09IEFycmF5KSB7XG4gICAgICAgIHByb2Nlc3NBcnJheSh2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzT2JqZWN0KHZhbHVlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciB0b1NldE1ldGFJbmZvID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgIGFwbHVzLnNldE1ldGFJbmZvKGtleSwgdmFsdWUsIHtcbiAgICAgICAgZnJvbTogJ2FwcGVuZE1ldGFJbmZvJ1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8vIGh0dHBzOi8vbGFyay5hbGlwYXkuY29tL2FwbHVzanMvZG9jcy9tZXRhI21ldGEtYXBsdXMtZXhpbmZvXG4gICAgdmFyIHByb2Nlc3NBcGx1c0V4aW5mbyA9IGZ1bmN0aW9uIChvbGRfdmFsdWUpIHtcbiAgICAgIHZhciBleGluZm9zX25ldyA9IGZvcm1hdC5wYXJhbTJvYmoodik7XG4gICAgICB0b1NldE1ldGFJbmZvKGssIHV0aWxEYXNoLmFzc2lnbihvbGRfdmFsdWUsIGV4aW5mb3NfbmV3KSk7IC8vIGV4aW5mb3Nfb2xkLmNvbmNhdChleGluZm9zX25ldykuam9pbignJicpXG4gICAgfTtcblxuICAgIHZhciBmbGFnO1xuICAgIHZhciBfb2xkVmFsdWUgPSBhcGx1cy5nZXRNZXRhSW5mbyhrKTtcbiAgICBpZiAoayA9PT0gJ2FwbHVzLWV4aW5mbycpIHtcbiAgICAgIHByb2Nlc3NBcGx1c0V4aW5mbyhfb2xkVmFsdWUpO1xuICAgICAgZmxhZyA9IHRydWU7XG4gICAgfVxuICAgIGlmIChfb2xkVmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgX29sZFZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgICBwcm9jZXNzT2JqKF9vbGRWYWx1ZSk7XG4gICAgICAgIGZsYWcgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB2YXIgdG1wX3BhcnNlID0gSlNPTi5wYXJzZShfb2xkVmFsdWUpO1xuICAgICAgICAgIGlmICh0eXBlb2YgdG1wX3BhcnNlID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgcHJvY2Vzc09iaih0bXBfcGFyc2UpO1xuICAgICAgICAgICAgZmxhZyA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFmbGFnKSB7XG4gICAgICB0b1NldE1ldGFJbmZvKGssIHYpO1xuICAgIH1cbiAgfVxufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9wbHVnaW5zL2xpYl9tZXRhL21ldGFJbmZvQWxpLmpzXG4vLyBtb2R1bGUgaWQgPSAxOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIGFsaWxvZy9zL3V0aWwvZm9ybWF0LmpzXG4gKiDlt6XlhbfnsbtcbiAqXG4gKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG4gKlxuICogQXV0aG9yczpcbiAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vLyB2YXIgdHJ5VG9EZWNvZGUgPSByZXF1aXJlKCcuL3RyeVRvRGVjb2RlJyk7XG5cbmV4cG9ydHMuYXJyMm9iaiA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgdmFyIHJldCA9IHt9O1xuICB2YXIgaztcbiAgdmFyIHY7XG4gIHZhciBpO1xuICB2YXIgbGVuID0gYXJyLmxlbmd0aDtcblxuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBrID0gYXJyW2ldWzBdO1xuICAgIHYgPSBhcnJbaV1bMV07XG4gICAgcmV0W2tdID0gdjtcbiAgfVxuICByZXR1cm4gcmV0O1xufTtcblxuLyoqXG4gKiBwYXJhbSB0byBvYmplY3RcbiAqIOWwhuS4gOS4queugOWNleeahOW9ouWmgiBhPTEmYj0yJmM9MyDov5nmoLfnmoTlj4LmlbDovazljJbkuLrnroDljZXnmoQgb2JqZWN0IOagvOW8j++8jOWmgu+8mlxuICoge1xuICogICBhOiBcIjFcIixcbiAqICAgYjogXCIyXCIsXG4gKiAgIGM6IFwiM1wiXG4gKiB9XG4gKiBAcGFyYW0gcGFyYW1zIHtTdHJpbmd9XG4gKi9cbmV4cG9ydHMucGFyYW0yb2JqID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICBpZiAodHlwZW9mIHBhcmFtcyA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gcGFyYW1zO1xuICB9XG4gIGlmICghcGFyYW1zKSBwYXJhbXMgPSAnJztcblxuICB2YXIgb2JqID0ge307XG4gIHZhciBhID0gcGFyYW1zLnNwbGl0KCcmJyk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gYVtpXTtcbiAgICB2YXIgaW5kZXggPSBpdGVtLmluZGV4T2YoJz0nKTtcbiAgICB2YXIgZnJhZ21lbnQgPSBpdGVtLnNwbGl0KCc9Jyk7XG4gICAgdmFyIGxlbiA9IGl0ZW0ubGVuZ3RoO1xuICAgIGlmIChmcmFnbWVudC5sZW5ndGggPT09IDIpIHtcbiAgICAgIG9ialtmcmFnbWVudFswXV0gPSBmcmFnbWVudFsxXSB8fCAnJzsgIFxuICAgIH0gZWxzZSBpZiAoaW5kZXggPiAwKSB7XG4gICAgICB2YXIga2V5ID0gaXRlbS5zbGljZSgwLCBpbmRleCk7XG4gICAgICB2YXIgdmFsdWUgPSBpdGVtLnNsaWNlKGluZGV4ICsgMSwgbGVuKSB8fCAnJztcbiAgICAgIG9ialtrZXldID0gdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9ialtmcmFnbWVudFswXV0gPSAnJztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9iajtcbn07XG5cbi8vIGNvbnNvbGUubG9nKCdUT0RPIGRlbGV0ZSBzX3BsYWluX29iaicpO1xudmFyIHNfcGxhaW5fb2JqID0gJzo6LXBsYWluLTo6JztcbmV4cG9ydHMuc19wbGFpbl9vYmogPSBzX3BsYWluX29iajtcblxuLyoqXG4gKiBhcnJheSB0byBwYXJhbVxuICog5bCG5LiA5Liq566A5Y2V55qE5pWw57uE6L2s5YyW5Li6IHVybCDlj4LmlbDnmoTlvaLlvI/vvIxcbiAqIOWFtuS4reaVsOe7hOS4ulxuICogICAgICBbW2sxLCB2MV0sIFtrMiwgdjJdLCBbazMsIHYzXSwgLi4uXVxuICog55qE5b2i5byP44CCXG4gKiDkuI4gb2JqMnBhcmFtIOebuOavlO+8jOi/meS4quaWueazleeahOWlveWkhOaYr+WPr+S7peS/neivgeacgOWQjuWPguaVsOeahOmhuuW6j1xuICogQHBhcmFtIGFyciB7QXJyYXl9XG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGFycjJwYXJhbShhcnIsIHNraXBFbmNvZGUpIHtcbiAgdmFyIGEgPSBbXSxcbiAgICBrLFxuICAgIHYsXG4gICAgaSxcbiAgICBsZW4gPSBhcnIubGVuZ3RoO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGsgPSBhcnJbaV1bMF07XG4gICAgdiA9IGFycltpXVsxXTtcbiAgICB2YXIgaXNJblBsYW5PYmogPSBrLmluZGV4T2Yoc19wbGFpbl9vYmopID09PSAwO1xuICAgIHZhciBfdmFsdWUgPSBpc0luUGxhbk9iaiB8fCBza2lwRW5jb2RlID8gdiA6IGVuY29kZVVSSUNvbXBvbmVudCh2KTtcbiAgICBhLnB1c2goaXNJblBsYW5PYmogPyBfdmFsdWUgOiAoayArICc9JyArIF92YWx1ZSkpO1xuICB9XG4gIHJldHVybiBhLmpvaW4oJyYnKTtcbn07XG5leHBvcnRzLmFycjJwYXJhbSA9IGFycjJwYXJhbTtcblxuLyoqXG4gKiBvYmplY3QgdG8gcGFyYW1cbiAqIOWwhuS4gOS4queugOWNleWvueixoei9rOWMluS4uiB1cmwg5Y+C5pWw55qE5b2i5byPXG4gKiDlj4Lop4EgYXJyMnBhcmFtKCkg5pa55rOVXG4gKiBAcGFyYW0gb2JqIHtPYmplY3R9XG4gKiBAcGFyYW0gY29tbVRyYW5zbGF0ZSB7Qm9vbGVhbn0g5pmu6YCa6L2s5o2i5LiN5YGaaXNTdGFydFdpdGjmoKHpqoxcbiAqXG4gKi9cbmV4cG9ydHMub2JqMnBhcmFtID0gZnVuY3Rpb24gKG9iaiwgY29tbVRyYW5zbGF0ZSkge1xuICB2YXIgYSA9IFtdO1xuICB2YXIgaztcbiAgdmFyIHY7XG4gIHZhciBfdjtcbiAgZm9yIChrIGluIG9iailcbiAgICBpZiAoayAmJiBvYmouaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgIHYgPSAnJyArIG9ialtrXTtcbiAgICAgIF92ID0gayArICc9JyArIHY7XG4gICAgICBpZiAoIWNvbW1UcmFuc2xhdGUpIHtcbiAgICAgICAgYS5wdXNoKGsuaW5kZXhPZihzX3BsYWluX29iaikgPT09IDAgPyB2IDogX3YpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYS5wdXNoKF92KTtcbiAgICAgIH1cbiAgICB9XG4gIHJldHVybiBhLmpvaW4oJyYnKTtcbn07XG5cbmV4cG9ydHMuZW5jb2RlR29rZXlWYWx1ZSA9IGZ1bmN0aW9uIChnb2tleSkge1xuICAvLyB2YXIgYXBsdXMgPSByZXF1aXJlKCdAdXRpbHMvdXRpbEdvbGRsb2cnKS5nZXRHbG9iYWxWYWx1ZSgnYXBsdXMnKTtcbiAgLy8gLy8g5a+5Z29rZXnlhoXnmoR2YWx1Zee7n+S4gOWKoOS4gOWxgue8lueggVxuICAvLyBpZiAodHlwZW9mIGdva2V5ID09PSAnb2JqZWN0JyAmJiBhcGx1cy5nbG9iYWxDb25maWcuaXNBbGkpIHtcbiAgLy8gICBmb3IgKHZhciBrIGluIGdva2V5KSB7XG4gIC8vICAgICBpZiAodHlwZW9mIGdva2V5W2tdID09PSAnc3RyaW5nJykge1xuICAvLyAgICAgICB0cnkge1xuICAvLyAgICAgICAgIGdva2V5W2tdID0gZW5jb2RlVVJJQ29tcG9uZW50KGRlY29kZVVSSUNvbXBvbmVudChnb2tleVtrXSkpO1xuICAvLyAgICAgICB9IGNhdGNoIChlKSB7fVxuICAvLyAgICAgfVxuICAvLyAgIH1cbiAgLy8gfVxuICByZXR1cm4gZ29rZXk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvbGliX3UvdXRpbHMvZm9ybWF0LmpzXG4vLyBtb2R1bGUgaWQgPSAyMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIHByb2plY3QgLSBmaWxlcGF0aFxuICogZGVzY3JpcHRpb25cbiAqXG4gKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG4gKlxuICogQXV0aG9yczpcbiAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLmFzc2lnbiA9IHJlcXVpcmUoJy4vYXNzaWduJyk7XG5cbi8qKlxuICog55Sf5oiQ5LiA5Liq55So5LqO6YG/5YWN57yT5a2Y55qE6ZqP5py65pWwXG4gKiDkuLrkuoblh4/lsJEgdXJsIOmVv+W6pu+8jOi/meS4qumaj+acuuaVsOaNrueahOmVv+W6puWumuS4uiA3IOS9je+8jFxuICog5Li65LqG5YeP5bCR56Kw5pKe77yM5L2/55SoIDE2IOi/m+WItuaVsOWtl1xuICpcbiAqIDI2ODQzNTQ1NiA9IDIgXiAyOCA9IDB4ZmZmZmZmZiArIDFcbiAqL1xuZXhwb3J0cy5tYWtlQ2FjaGVOdW0gPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyNjg0MzU0NTYpLnRvU3RyaW5nKDE2KTtcbn07XG5cbi8qKlxuICog5Yik5pat5a2X56ym5LiyIHMxIOaYr+WQpuS7peWtl+espuS4siBzMiDlvIDlpLRcbiAqIEBwYXJhbSBzMSB7U3RyaW5nfVxuICogQHBhcmFtIHMyIHtTdHJpbmd9XG4gKi9cbmV4cG9ydHMuaXNTdGFydFdpdGggPSBmdW5jdGlvbihzMSwgczIpIHtcbiAgcmV0dXJuIHMxLmluZGV4T2YoczIpID09PSAwO1xufTtcbi8qKlxuICog5Yik5pat5a2X56ym5LiyIHMxIOaYr+a7nuS7peWtl+espuS4siBzMiDnu5PlsL5cbiAqIEBwYXJhbSBzMSB7U3RyaW5nfVxuICogQHBhcmFtIHMyIHtTdHJpbmd9XG4gKi9cbmV4cG9ydHMuaXNFbmRXaXRoID0gZnVuY3Rpb24oczEsIHMyKSB7XG4gIHZhciBsMSA9IHMxLmxlbmd0aCwgbDIgPSBzMi5sZW5ndGg7XG4gIHJldHVybiBsMSA+PSBsMiAmJiBzMS5pbmRleE9mKHMyKSA9PSAobDEgLSBsMik7XG59O1xuXG5leHBvcnRzLmFueSA9IGZ1bmN0aW9uKGFyciwgZm4pIHtcbiAgdmFyIGk7XG4gIHZhciBsID0gYXJyLmxlbmd0aDtcbiAgZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuICAgIGlmIChmbihhcnJbaV0pKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuZXhwb3J0cy5pc051bWJlciA9IGZ1bmN0aW9uKHYpIHtcbiAgcmV0dXJuIHR5cGVvZiB2ID09PSAnbnVtYmVyJztcbn07XG5cbi8qKlxuICog5Yik5pat5a2X56ym5LiyIHMxIOaYr+WQpuWMheWQq+Wtl+espuS4siBzMlxuICogQHBhcmFtIHMxIHtTdHJpbmd9XG4gKiBAcGFyYW0gczIge1N0cmluZ31cbiAqL1xuZXhwb3J0cy5pc0NvbnRhaW4gPSBmdW5jdGlvbiAoczEsIHMyKSB7XG4gIHJldHVybiBzMS5pbmRleE9mKHMyKSA+IC0xO1xufTtcblxuLyoqXG4gKiDlhYvpmobkuIDkuKpvYmplY3RcbiAqL1xudmFyIGNsb25lRGVlcCA9IGZ1bmN0aW9uKG9iaikge1xuICB2YXIgc3RyO1xuICB2YXIgbmV3b2JqID0gb2JqLmNvbnN0cnVjdG9yID09PSBBcnJheSA/IFtdIDoge307XG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybjtcbiAgfSBlbHNlIGlmIChKU09OICYmIEpTT04ucGFyc2UpIHtcbiAgICBzdHIgPSBKU09OLnN0cmluZ2lmeShvYmopOyAvL+ezu+WIl+WMluWvueixoVxuICAgIG5ld29iaiA9IEpTT04ucGFyc2Uoc3RyKTsgLy/ov5jljp9cbiAgfSBlbHNlIHtcbiAgICBmb3IgKHZhciBpIGluIG9iaikge1xuICAgICAgbmV3b2JqW2ldID0gdHlwZW9mIG9ialtpXSA9PT0gJ29iamVjdCcgPyBjbG9uZURlZXAob2JqW2ldKSA6IG9ialtpXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5ld29iajtcbn07XG5cbmV4cG9ydHMuY2xvbmVEZWVwID0gY2xvbmVEZWVwO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvbGliX3UvdXRpbHMvdXRpbERhc2guanNcbi8vIG1vZHVsZSBpZCA9IDIxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlxuLyoqXG4gKiDlr7nosaFtZXJnZVxuICogIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9hc3NpZ25cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0T2JqLCBhcmdzT2JqKSB7XG4gIGlmICh0eXBlb2YgT2JqZWN0LmFzc2lnbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICB2YXIgdG8gPSBPYmplY3QodGFyZ2V0KTtcbiAgICAgIGZvciAodmFyIGluZGV4ID0gMTsgaW5kZXggPCBhcmd1bWVudHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHZhciBuZXh0U291cmNlID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgICAgaWYgKG5leHRTb3VyY2UgIT09IG51bGwpIHsgLy8gU2tpcCBvdmVyIGlmIHVuZGVmaW5lZCBvciBudWxsXG4gICAgICAgICAgZm9yICh2YXIgbmV4dEtleSBpbiBuZXh0U291cmNlKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG5leHRTb3VyY2UsIG5leHRLZXkpKSB7XG4gICAgICAgICAgICAgIHRvW25leHRLZXldID0gbmV4dFNvdXJjZVtuZXh0S2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0bztcbiAgICB9KHRhcmdldE9iaiwgYXJnc09iaik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHRhcmdldE9iaiwgYXJnc09iaik7XG4gIH1cbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvbGliX3UvdXRpbHMvYXNzaWduLmpzXG4vLyBtb2R1bGUgaWQgPSAyMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIHByb2plY3QgLSBmaWxlcGF0aFxuICogZGVzY3JpcHRpb25cbiAqXG4gKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG4gKlxuICogQXV0aG9yczpcbiAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbFRyaW0gPSByZXF1aXJlKCcuL3V0aWxUcmltJyk7XG52YXIgdXRpbFN0b3JlID0gcmVxdWlyZSgnLi91dGlsU3RvcmUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHRyeVRvRGVjb2RlVVJJQ29tcG9uZW50OiBmdW5jdGlvbiAodmFsLCBkZWZhdWx0X3ZhbCkge1xuICAgIHZhciB2ID0gZGVmYXVsdF92YWwgfHwgJyc7XG4gICAgaWYgKHZhbCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdiA9IGRlY29kZVVSSUNvbXBvbmVudCh2YWwpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdjtcbiAgfSxcbiAgXG4gIC8qKlxuICAgKiDlsIblvaLlpoIgXCJwYWdlSWQ9MTIzOyBzaXRlSWQ9NDU2XCIg55qE5YaF5a656Kej5p6Q5Li6IE9iamVjdFxuICAgKiBAcGFyYW0gcyB7U3RyaW5nfVxuICAgKiBAcGFyYW0gW2RpY3RdIHtPYmplY3R9XG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICovXG4gIHBhcnNlU2VtaWNvbG9uQ29udGVudDogZnVuY3Rpb24gKHMsIGRpY3QsIHVuZGVjb2RlKSB7XG4gICAgZGljdCA9IGRpY3QgfHwge307XG4gICAgdmFyIGEgPSBzLnNwbGl0KCc7Jyk7XG4gICAgdmFyIGo7XG4gICAgdmFyIGFfbGVuID0gYS5sZW5ndGg7XG4gICAgdmFyIGEyO1xuXG4gICAgZm9yIChqID0gMDsgaiA8IGFfbGVuOyBqKyspIHtcbiAgICAgIGEyID0gYVtqXS5zcGxpdCgnPScpO1xuICAgICAgdmFyIF92YWx1ZSA9IHV0aWxUcmltLnRyaW0oYTIuc2xpY2UoMSkuam9pbignPScpKTtcbiAgICAgIGRpY3RbdXRpbFRyaW0udHJpbShhMlswXSkgfHwgJyddID0gdW5kZWNvZGUgPyBfdmFsdWUgOiB0aGlzLnRyeVRvRGVjb2RlVVJJQ29tcG9uZW50KF92YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRpY3Q7XG4gIH0sXG5cbiAgLyoqXG4gICAqIOWwhuS4gOS4qiBub2RlIGxpc3Qg6L2s5Li65pWw57uEXG4gICAqIEBwYXJhbSBub2RlcyB7Tm9kZUxpc3R9XG4gICAqIOWPguinge+8mmh0dHA6Ly93d3cucGxhbmFiYy5uZXQvMjAxMC8wMS8wNi9hcmd1bWVudHNfdG9fYXJyYXkvXG4gICAqL1xuICBub2RlTGlzdFRvQXJyYXk6IGZ1bmN0aW9uIChub2Rlcykge1xuICAgIHZhciBhcnI7XG4gICAgdmFyIGxlbmd0aDtcblxuICAgIHRyeSB7XG4gICAgICAvLyB3b3JrcyBpbiBldmVyeSBicm93c2VyIGV4Y2VwdCBJRVxuICAgICAgYXJyID0gW10uc2xpY2UuY2FsbChub2Rlcyk7XG4gICAgICByZXR1cm4gYXJyO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgLy8gc2xvd2VyLCBidXQgd29ya3MgaW4gSUVcbiAgICAgIGFyciA9IFtdO1xuICAgICAgbGVuZ3RoID0gbm9kZXMubGVuZ3RoO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGFyci5wdXNoKG5vZGVzW2ldKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFycjtcbiAgICB9XG4gIH0sXG5cbiAgZ2V0THNDbmE6IGZ1bmN0aW9uIChFVEFHX1NUT1JBR0VfS0VZLCBkYXRlKSB7XG4gICAgaWYgKHV0aWxTdG9yZS5zZXQgJiYgdXRpbFN0b3JlLnRlc3QoKSkge1xuICAgICAgdmFyIF9sc19jbmEgPSAnJztcbiAgICAgIHZhciBfdmFsdWUgPSB1dGlsU3RvcmUuZ2V0KEVUQUdfU1RPUkFHRV9LRVkpO1xuICAgICAgaWYgKF92YWx1ZSkge1xuICAgICAgICB2YXIgX2FyciA9IF92YWx1ZS5zcGxpdCgnXycpIHx8IFtdO1xuICAgICAgICBpZiAoZGF0ZSkge1xuICAgICAgICAgIF9sc19jbmEgPSBfYXJyLmxlbmd0aCA+IDEgJiYgZGF0ZSA9PT0gX2FyclswXSA/IF9hcnJbMV0gOiAnJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfbHNfY25hID0gX2Fyci5sZW5ndGggPiAxID8gX2FyclsxXSA6ICcnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KF9sc19jbmEpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9LFxuXG4gIC8vIHV0aWxTdG9yZS5zZXQodGhpcy5FVEFHX1NUT1JBR0VfS0VZLCAgdGhpcy50b2RheSArICdfJyArIGVuY29kZVVSSUNvbXBvbmVudChjbmEpKTtcbiAgc2V0THNDbmE6IGZ1bmN0aW9uIChFVEFHX1NUT1JBR0VfS0VZLCB0b2RheSwgY25hKSB7XG4gICAgaWYgKGNuYSAmJiB1dGlsU3RvcmUuc2V0ICYmIHV0aWxTdG9yZS50ZXN0KCkpIHtcbiAgICAgIHV0aWxTdG9yZS5zZXQoRVRBR19TVE9SQUdFX0tFWSwgIHRvZGF5ICsgJ18nICsgZW5jb2RlVVJJQ29tcG9uZW50KGNuYSkpO1xuICAgIH1cbiAgfSxcblxuICBnZXRVcmw6IGZ1bmN0aW9uICh1cmwpIHtcbiAgICB2YXIgZWdVcmwgPSB1cmwgfHwgJy8vbG9nLm1tc3RhdC5jb20vZWcuanMnO1xuICAgIHRyeSB7XG4gICAgICB2YXIgcmhvc3RfdiA9IGFwbHVzLmdldE1ldGFJbmZvKCdhcGx1cy1yaG9zdC12Jyk7XG4gICAgICB2YXIgcmVnID0gL1tbYS16fFxcLXxcXF98MC05XFwuXStbYS16fFxcLXxcXF98MC05XS87XG4gICAgICB2YXIgY3VzdG9tX2hvc3QgPSByaG9zdF92Lm1hdGNoKHJlZyk7XG4gICAgICBpZiAoY3VzdG9tX2hvc3QgJiYgY3VzdG9tX2hvc3RbMF0pIHtcbiAgICAgICAgLy8gZWdVcmwgPSBlZ1VybC5yZXBsYWNlKHJlZywgY3VzdG9tX2hvc3RbMF0pO1xuICAgICAgICBlZ1VybCA9ICcvLycgKyBjdXN0b21faG9zdFswXSArICcvZWcuanMnO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICB9XG4gICAgcmV0dXJuIGVnVXJsO1xuICB9XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvbGliX3UvdXRpbHMvdXRpbERhdGEuanNcbi8vIG1vZHVsZSBpZCA9IDIzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogcHJvamVjdCAtIGZpbGVwYXRoXG4gKiDlr7nlrZfnrKbkuLLov5vooYx0cmlt5aSE55CGXG4gKlxuICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuICpcbiAqIEF1dGhvcnM6XG4gKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG4gKi9cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiDljrvmjonlrZfnrKbkuLIgcyDliY3lkI7nmoTnqbrmoLxcbiAqIEBwYXJhbSBzIHtTdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIHRyaW0ocykge1xuICByZXR1cm4gKHR5cGVvZiBzID09PSAnc3RyaW5nJykgPyBzLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKSA6ICcnO1xufTtcbmV4cG9ydHMudHJpbSA9IHRyaW07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9saWJfdS91dGlscy91dGlsVHJpbS5qc1xuLy8gbW9kdWxlIGlkID0gMjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBwcm9qZWN0IC0gZmlsZXBhdGhcbiAqIGRlc2NyaXB0aW9uXG4gKlxuICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuICpcbiAqIEF1dGhvcnM6XG4gKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG4gKi9cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogZnVuY3Rpb24gKGssIHYpIHtcbiAgICB0cnkge1xuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oaywgdik7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9LFxuICAvLyDnu4/ov4d0ZXN05LmL5ZCOZ2V05bqU6K+l5LiN5Lya5pyJ6Zeu6aKYXG4gIGdldDogZnVuY3Rpb24gKGspIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGxvY2FsU3RvcmFnZS5nZXRJdGVtKGspO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH0sXG4gIHRlc3Q6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGVzdEtleSA9ICdncmV5X3Rlc3Rfa2V5JztcbiAgICB0cnkge1xuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0odGVzdEtleSwgMSk7XG4gICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSh0ZXN0S2V5KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0sXG4gIHJlbW92ZTogZnVuY3Rpb24gKGspIHtcbiAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShrKTtcbiAgfVxufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2xpYl91L3V0aWxzL3V0aWxTdG9yZS5qc1xuLy8gbW9kdWxlIGlkID0gMjVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBwcm9qZWN0IC0gZmlsZXBhdGhcbiAqIOaXpeW/l+exu+W3peWFt+mbhuWQiFxuICpcbiAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cbiAqXG4gKiBBdXRob3JzOlxuICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuICovXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQHBhcmFtcyB7T2JqZWN0fSBvIDp7XG4gKiAgIGxldmVsOiAnd2Fybi9pbmZvL2xvZycgZGVmYXVsdCBpcyB3YXJuXG4gKiAgIG1zZzogJ21zZydcbiAqIH1cbiAqL1xudmFyIHByZWZpeCA9ICdbYXBsdXPml6Xlv5ddOiAnO1xuZXhwb3J0cy5sb2dnZXIgPSBmdW5jdGlvbiAobykge1xuICBpZiAoIW8pIHtcbiAgICBvID0ge307XG4gIH1cbiAgdmFyIGxldmVsID0gby5sZXZlbCB8fCAnd2Fybic7XG4gIGNvbnNvbGUgJiYgY29uc29sZVtsZXZlbF0gJiYgY29uc29sZVtsZXZlbF0ocHJlZml4K28ubXNnKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9saWJfdS91dGlscy91dGlsTG9nZ2VyLmpzXG4vLyBtb2R1bGUgaWQgPSAyNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIHByb2plY3QgLSBmaWxlcGF0aFxuICogZG9t5pON5L2c5bel5YW357G777yM6L+Z5Liq5Z+656GA5bel5YW357G75Lya6KKr5YW25LuW5bel5YW357G75byV55So77yM5pWF5Lil56aB5Zyo6L+Z6YeM5YaN5byV55So5YW25LuW5qih5Z2X5Lul5YWN5Ye6546w6Zeu6aKYXG4gKlxuICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuICpcbiAqIEF1dGhvcnM6XG4gKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG4gKi9cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJyLCBmbikge1xuICB2YXIgaTtcbiAgdmFyIGwgPSBhcnIubGVuZ3RoO1xuICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIHJzID0gZm4oYXJyW2ldLCBpKTtcbiAgICBpZiAocnMgPT09ICdicmVhaycpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9saWJfdS91dGlscy9lYWNoLmpzXG4vLyBtb2R1bGUgaWQgPSAyN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIGFsaWxvZy9zL3NyYy9saWJfdS91dGlscy91dGlsQXR0cmlidXRlLmpzXG4gKlxuICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuICpcbiAqIEF1dGhvcnM6XG4gKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG4gKi9cbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy50cnlUb0dldEF0dHJpYnV0ZSA9IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHJfbmFtZSkge1xuICByZXR1cm4gZWxlbWVudCAmJiBlbGVtZW50LmdldEF0dHJpYnV0ZSA/IChlbGVtZW50LmdldEF0dHJpYnV0ZShhdHRyX25hbWUpIHx8ICcnKSA6ICcnO1xufTtcblxudmFyIHRyeVRvU2V0QXR0cmlidXRlID0gZnVuY3Rpb24gKGVsZW1lbnQsIGF0dHJfbmFtZSwgYXR0cl92YWx1ZSkge1xuICBpZiAoZWxlbWVudCAmJiBlbGVtZW50LnNldEF0dHJpYnV0ZSkge1xuICAgIHRyeSB7XG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShhdHRyX25hbWUsIGF0dHJfdmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICB9XG4gIH1cbn07XG5leHBvcnRzLnRyeVRvU2V0QXR0cmlidXRlID0gdHJ5VG9TZXRBdHRyaWJ1dGU7XG5cbmV4cG9ydHMudHJ5VG9SZW1vdmVBdHRyaWJ1dGUgPSBmdW5jdGlvbiAoZWxlbWVudCwgYXR0cl9uYW1lKSB7XG4gIGlmIChlbGVtZW50ICYmIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKSB7XG4gICAgdHJ5IHtcbiAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGF0dHJfbmFtZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdHJ5VG9TZXRBdHRyaWJ1dGUoZWxlbWVudCwgYXR0cl9uYW1lLCAnJyk7XG4gICAgfVxuICB9XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvbGliX3UvdXRpbHMvdXRpbEF0dHJpYnV0ZS5qc1xuLy8gbW9kdWxlIGlkID0gMjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBwcm9qZWN0IC0gZmlsZXBhdGhcbiAqIOaTjeS9nG1ldGHnmoTlt6XlhbfnsbtcbiAqXG4gKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG4gKlxuICogQXV0aG9yczpcbiAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2hlYWRfbm9kZTtcbnZhciBfbWV0YV9ub2RlcztcblxudmFyIHV0aWxBdHRyaWJ1dGUgPSByZXF1aXJlKCcuL3V0aWxBdHRyaWJ1dGUnKTtcbi8qKlxuICog5Y+W5b6X6aG16Z2i5LiKIGhlYWQg5Lit55qE5omA5pyJIG1ldGEg5YWD57SgXG4gKiBAcGFyYW0gW2ZvcmNlXSB7Ym9vbGVhbn0g5piv5ZCm5by65Yi26I635Y+W5paw5YaF5a65XG4gKi9cbmZ1bmN0aW9uIGdldE1ldGFUYWdzKGZvcmNlKSB7XG4gIF9oZWFkX25vZGUgPSBfaGVhZF9ub2RlIHx8IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF07XG5cbiAgaWYgKF9tZXRhX25vZGVzICYmICFmb3JjZSkge1xuICAgIHJldHVybiBfbWV0YV9ub2RlcztcbiAgfVxuXG4gIHJldHVybiBfaGVhZF9ub2RlID8gKF9tZXRhX25vZGVzID0gX2hlYWRfbm9kZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnbWV0YScpKSA6IFtdO1xufTtcbmV4cG9ydHMuZ2V0TWV0YVRhZ3MgPSBnZXRNZXRhVGFncztcblxuLyoqXG4gKiDlj5blvpcgaGVhZCAvIG1ldGEg5Lit5oyH5a6aIG1ldGEg55qEIChhdHRyIHx8IGNvbnRlbnQpIOWAvFxuICogPG1ldGEgbmFtZT1cImFwbHVzLXRlcm1pbmFsXCIgY29udGVudD1cIjFcIj5cbiAqL1xuZnVuY3Rpb24gZ2V0TWV0YUNudChuYW1lLCBhdHRyKSB7XG4gIHZhciBpO1xuICB2YXIgbWV0YTtcbiAgdmFyIG1ldGFfbm9kZXMgPSBnZXRNZXRhVGFncygpO1xuICB2YXIgbCA9IG1ldGFfbm9kZXMubGVuZ3RoO1xuICB2YXIgY29udGVudDtcblxuICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgbWV0YSA9IG1ldGFfbm9kZXNbaV07XG4gICAgaWYgKHV0aWxBdHRyaWJ1dGUudHJ5VG9HZXRBdHRyaWJ1dGUobWV0YSwgJ25hbWUnKSA9PT0gbmFtZSkge1xuICAgICAgY29udGVudCA9IHV0aWxBdHRyaWJ1dGUudHJ5VG9HZXRBdHRyaWJ1dGUobWV0YSwgYXR0ciB8fCAnY29udGVudCcpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjb250ZW50IHx8ICcnO1xufTtcbmV4cG9ydHMuZ2V0TWV0YUNudCA9IGdldE1ldGFDbnQ7XG5cblxuLyoqXG4gKiDnoa7lrpogaGVhZCAvIG1ldGEg5Lit55qEIGlzb25lcGFnZSDnmoTmlbDmja5cbiAqIOW9ouWmgu+8mlxuICogPG1ldGEgbmFtZT1cImlzb25lcGFnZVwiIGNvbnRlbnQ9XCIwXCIgLz4g6KGo56S65LiN5pivb25lcGFnZVxuICogPG1ldGEgbmFtZT1cImlzb25lcGFnZVwiIGNvbnRlbnQ9XCIxfGh0dHA6Ly9oNS5tLnRhb2Jhby5jb20vd2UvaW5kZXguaHRtI2RldGFpbFwiIC8+IOihqOekuuaYr29uZXBhZ2VcbiAqL1xuZnVuY3Rpb24gZ2V0T25lUGFnZUluZm8obWV0YUluZm8pIHtcbiAgdmFyIG9iaiA9IHtcbiAgICBpc29uZXBhZ2U6ICctMScsXG4gICAgdXJscGFnZW5hbWU6ICcnXG4gIH07XG4gIHZhciBtZXRhX2luZm8gPSBtZXRhSW5mby5xR2V0KCk7XG4gIGlmIChtZXRhX2luZm8gJiYgbWV0YV9pbmZvLmhhc093blByb3BlcnR5KCdpc29uZXBhZ2VfZGF0YScpKSB7XG4gICAgb2JqLmlzb25lcGFnZSA9IG1ldGFfaW5mby5pc29uZXBhZ2VfZGF0YS5pc29uZXBhZ2U7XG4gICAgb2JqLnVybHBhZ2VuYW1lID0gbWV0YV9pbmZvLmlzb25lcGFnZV9kYXRhLnVybHBhZ2VuYW1lO1xuICB9IGVsc2Uge1xuICAgIHZhciBjb250ZW50ID0gZ2V0TWV0YUNudCgnaXNvbmVwYWdlJykgfHwgJy0xJztcbiAgICB2YXIgYXJyX2NvbnRlbnQgPSBjb250ZW50LnNwbGl0KFwifFwiKTtcbiAgICBvYmouaXNvbmVwYWdlID0gYXJyX2NvbnRlbnRbMF07XG4gICAgb2JqLnVybHBhZ2VuYW1lID0gYXJyX2NvbnRlbnRbMV0gPyBhcnJfY29udGVudFsxXSA6IFwiXCI7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn07XG5leHBvcnRzLmdldE9uZVBhZ2VJbmZvID0gZ2V0T25lUGFnZUluZm87XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9saWJfdS91dGlscy91dGlsTWV0YS5qc1xuLy8gbW9kdWxlIGlkID0gMjlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBwcm9qZWN0IC0gZmlsZXBhdGhcbiAqIHJlZmVycmVy5bel5YW357G7XG4gKlxuICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuICpcbiAqIEF1dGhvcnM6XG4gKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIG5hbWVTdG9yYWdlID0gcmVxdWlyZSgnLi91dGlsTmFtZVN0b3JhZ2UnKS5uYW1lU3RvcmFnZTtcblxuZXhwb3J0cy5nZXRSZWZlciA9IGZ1bmN0aW9uIChOQU1FX1NUT1JBR0VfS0VZUykge1xuICByZXR1cm4gZG9jdW1lbnQucmVmZXJyZXIgfHwgbmFtZVN0b3JhZ2UuZ2V0SXRlbShOQU1FX1NUT1JBR0VfS0VZUy5SRUZFUlJFUikgfHwgJyc7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvbGliX3UvdXRpbHMvdXRpbFJlZmVycmVyLmpzXG4vLyBtb2R1bGUgaWQgPSAzMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIGFsaWxvZy9zIC0gc3JjL2FwbHVzX2F1dG9fY2xrLmpzXG4gKiBhcGx1c+S4k+mhuemHh+mbhjog6aG16Z2i5YWD57Sg54K55Ye76Ieq5Yqo6YeH6ZuGXG4gKlxuICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuICpcbiAqIEF1dGhvcnM6XG4gKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG4gKi9cbid1c2Ugc3RyaWN0JztcblxuLy8gPG1ldGEgbmFtZT1cImFwbHVzLWF1dG8tY2xrXCIgY29udGVudD1cInt7bG9na2V5OlwiL2EuYi5jXCIsdGFnOlwiZGl2XCIsZmlsdGVyOlwic2NtPTEyMzRcIn19XCI+XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4ge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbXMge09iamVjdH0gb3B0aW9ucyB7XG4gICAgICogICBsb2dDb25maWc6IHtsb2dDb25maWd9XG4gICAgICogfVxuICAgICAqL1xuICAgIC8vIGluaXQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAvLyAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgLy8gfSxcblxuICAgIHJ1bjogZnVuY3Rpb24gKCkge1xuICAgICAgcmVxdWlyZSgnLi9saWJfYWMvbWFpbicpKCk7XG4gICAgfVxuICB9O1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9wbHVnaW5zX3dlYi9hcGx1c19hY19pbmplY3QuanNcbi8vIG1vZHVsZSBpZCA9IDMxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogcHJvamVjdCAtIGZpbGVwYXRoXG4gKiBkZXNjcmlwdGlvblxuICpcbiAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cbiAqXG4gKiBBdXRob3JzOlxuICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciB0cmFja2VyVXRpbCA9IHJlcXVpcmUoJ0B1dGlscy90cmFja2VyVXRpbCcpO1xudmFyIGFwbHVzU3RhdGljID0gcmVxdWlyZSgnQHV0aWxzL2FwbHVzU3RhdGljJyk7XG52YXIgdXRpbExvZ2dlciA9IHJlcXVpcmUoJ0B1dGlscy91dGlsTG9nZ2VyJyk7XG5cbnZhciB3YXRjaENMSyA9IHJlcXVpcmUoJy4vd2F0Y2hDTEsnKTtcbnZhciBXYXRjaERPTSA9IHJlcXVpcmUoJy4vd2F0Y2hET00nKTtcblxudmFyIGNvbmZpZyA9IHJlcXVpcmUoJy4uL2xpYl9jb21tb24vY29uZmlnJyk7XG5cbmZ1bmN0aW9uIGluaXQgKGNiKSB7XG4gIHZhciBhcGx1cyA9ICh3aW5kb3cuYXBsdXMgfHwgKHdpbmRvdy5hcGx1cyA9IHt9KSk7XG5cbiAgdmFyIGFwbHVzX2FjX2luaXQgPSBmYWxzZTtcbiAgdmFyIF9jb25maWc7IC8vIGxhc3RDb25maWdcbiAgdmFyIGRvX2luaXQgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoIWFwbHVzX2FjX2luaXQpIHtcbiAgICAgIHRyYWNrZXJVdGlsLndyYXAoZnVuY3Rpb24oKXtcbiAgICAgICAgLy8g6aG65bqP5LiN6IO95Lmx77yM546v546v55u45omjIVxuICAgICAgICAvLyAx44CB55uR5ZCsZG9t5Y+Y5YyWXG4gICAgICAgIF9jb25maWcgPSBjb25maWcuZ2V0QXV0b0Nsa0NvbmZpZygpO1xuICAgICAgICB2YXIgd2F0Y2hET007XG5cbiAgICAgICAgaWYgKF9jb25maWcgJiYgX2NvbmZpZy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgd2F0Y2hET00gPSBXYXRjaERPTS5jcmVhdGUoe1xuICAgICAgICAgICAgYXV0b0Nsa0NvbmZpZzogX2NvbmZpZ1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHdhdGNoRE9NLmluaXQoKTtcbiAgICAgICAgICAvLyAy44CB55uR5ZCs54K55Ye75bm25pel5b+X5Y+R6YCBXG4gICAgICAgICAgd2F0Y2hDTEsud2F0Y2hfY2xrKCk7XG4gICAgICAgIH1cblxuICAgICAgICBhcGx1cy5hcGx1c19wdWJzdWIuc3Vic2NyaWJlKCdzZXRNZXRhSW5mbycsIGZ1bmN0aW9uIChtZXRhS2V5LCBtZXRhVmF1ZSwgb3B0cykge1xuICAgICAgICAgIGlmIChtZXRhS2V5ID09PSAnYXBsdXMtYXV0by1jbGsnKSB7XG4gICAgICAgICAgICAvLyAy44CB6I635Y+W6YWN572u5bm25Yik5pat6YWN572u5q2j56Gu5oCn77yMZ2V0QXV0b0V4cENvbmZpZ+WGheWBmuS6huW8uuagoemqjO+8jOWHuumUmeWQjuS8muaJk+WNsOmUmeivr+S/oeaBr1xuICAgICAgICAgICAgdmFyIF9jb25maWcyID0gY29uZmlnLmdldEF1dG9DbGtDb25maWcobWV0YVZhdWUpO1xuICAgICAgICAgICAgaWYgKEpTT04uc3RyaW5naWZ5KF9jb25maWcyKSA9PT0gSlNPTi5zdHJpbmdpZnkoX2NvbmZpZykpIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgX2NvbmZpZyA9IF9jb25maWcyO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB3YXRjaENMSy5jbGVhcigpO1xuICAgICAgICAgICAgaWYgKCFvcHRzKSB7XG4gICAgICAgICAgICAgIG9wdHMgPSB7XG4gICAgICAgICAgICAgICAgZnJvbTogJ3NldE1ldGFJbmZvJ1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2F0Y2hET00gJiYgd2F0Y2hET00uY2xlYXIob3B0cyk7XG4gICAgICAgICAgICB3YXRjaERPTSAmJiB3YXRjaERPTS5jbGVhckRvbSh7XG4gICAgICAgICAgICAgIGF1dG9DbGtDb25maWc6IF9jb25maWdcbiAgICAgICAgICAgIH0sIG9wdHMpO1xuICAgICAgICAgICAgaWYgKG1ldGFWYXVlKSB7XG4gICAgICAgICAgICAgIGlmICh3YXRjaERPTSkge1xuICAgICAgICAgICAgICAgIHdhdGNoRE9NLnJlc2V0KHtcbiAgICAgICAgICAgICAgICAgIGF1dG9DbGtDb25maWc6IF9jb25maWdcbiAgICAgICAgICAgICAgICB9LCBvcHRzKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB3YXRjaERPTSA9IFdhdGNoRE9NLmNyZWF0ZSh7XG4gICAgICAgICAgICAgICAgICBhdXRvQ2xrQ29uZmlnOiBfY29uZmlnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgd2F0Y2hET00uaW5pdCgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHdhdGNoQ0xLLndhdGNoX2NsaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9LCAnZG9faW5pdCcpO1xuICAgICAgYXBsdXNfYWNfaW5pdCA9IHRydWU7XG4gICAgfVxuICB9O1xuXG4gIC8vIHV0aWxFdmVudC5ET01SZWFkeShmdW5jdGlvbigpIHtcbiAgLy8gNXPlkI7ov5jmsqHmnInlrozmiJDliqDovb3vvIzmjqfliLblj7DmiZPlh7rkuIDmnaHorablkYrvvIxUT0RPIOebkeaOp+i/meWdl+WGheWuuVxuICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgaWYgKCFhcGx1c19hY19pbml0KSB7XG4gICAgICB1dGlsTG9nZ2VyLmxvZ2dlcih7XG4gICAgICAgIG1zZzogJ2FwbHVzX2FjX2luaXQgZmFpbGVkISBwbGVhc2UgY2hlY2sgd2hldGhlciBhcGx1c0pzIGlzIGxvYWRlZCBjb3JyZWN0bHkhJ1xuICAgICAgfSk7XG4gICAgfVxuICB9LCA1MDAwKTtcbiAgLy8g5pyJYXBsdXNfcHVic3Vi5LqL5Lu255uR5ZCs6ICF5qih5Z6L55qE5oOF5Ya15LiL77yM55uR5ZCsYXBsdXNSZWFkeeS6i+S7tlxuICB2YXIgXyQgPSBhcGx1cy5fJCB8fCB7fTtcbiAgdmFyIGdfc3BtID0gd2luZG93LmdfU1BNIHx8IHt9O1xuICBpZiAoXyQuc3RhdHVzID09PSAnY29tcGxldGUnICYmIGdfc3BtLnNwbSkge1xuICAgIGRvX2luaXQoKTtcbiAgfVxuICAvLyBhcGx1cy5hcGx1c19wdWJzdWIuc3Vic2NyaWJlKCdhcGx1c1JlYWR5JywgZnVuY3Rpb24oc3RhdHVzKSB7XG4gIC8vICAgaWYgKHN0YXR1cyA9PT0gJ2NvbXBsZXRlJykge1xuICAvLyAgICAgZG9faW5pdCgpO1xuICAvLyAgIH1cbiAgLy8gfSk7XG4gIHZhciBxID0gKHdpbmRvdy5hcGx1c19xdWV1ZSB8fCAod2luZG93LmFwbHVzX3F1ZXVlID0gW10pKTtcbiAgcS5wdXNoKHtcbiAgICBhY3Rpb246IGFwbHVzU3RhdGljLlNVQlNDUklCRSxcbiAgICBhcmd1bWVudHM6IFsnYXBsdXNSZWFkeScsIGZ1bmN0aW9uIChzdGF0dXMpIHtcbiAgICAgIGlmIChzdGF0dXMgPT09ICdjb21wbGV0ZScpIHtcbiAgICAgICAgZG9faW5pdCgnYXBsdXNSZWFkeScpO1xuICAgICAgfVxuICAgIH1dXG4gIH0pO1xuICBpZiAodHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IoKTtcbiAgfVxuICAvLyB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBhcGx1cyA9ICh3aW5kb3cuYXBsdXMgfHwgKHdpbmRvdy5hcGx1cyA9IHt9KSk7XG4gIGlmIChhcGx1cy5fYXBsdXNfYWMpIHtcbiAgICByZXR1cm47XG4gIH0gZWxzZSB7XG4gICAgYXBsdXMuX2FwbHVzX2FjID0ge1xuICAgICAgc3RhdHVzOiAnaW5pdCcsXG4gICAgICBlbGVtZW50U2VsZWN0b3JTaXplTWFwOiB7fVxuICAgIH07XG4gICAgaW5pdChmdW5jdGlvbiAoKSB7XG4gICAgICBhcGx1cy5fYXBsdXNfYWMuc3RhdHVzID0gJ2NvbXBsZXRlJztcbiAgICB9KTtcbiAgfVxufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL3BsdWdpbnNfd2ViL2xpYl9hYy9tYWluLmpzXG4vLyBtb2R1bGUgaWQgPSAzMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIGFsaWxvZy9zIC0gc3JjL2xpYl91L21vbml0b3IvdHJhY2tlclV0aWwuanNcbiAqIHRyYWNrZXJVdGlsXG4gKlxuICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuICpcbiAqIEF1dGhvcnM6XG4gKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxHb2xkbG9nID0gcmVxdWlyZSgnLi91dGlsR29sZGxvZycpO1xuXG4vKipcbiAqIGFwbHVz5Zyo57q/6LCD6K+V77yM5pel5b+X5Lya5Ye6546w5Zyo5Zyo57q/6LCD6K+V5bmz5Y+w5LitXG4gKiBodHRwczovL21sb2cuYWxpYmFiYS1pbmMuY29tL2FwbHVzdHJhY2tcbiAqIEBwYXJhbXMgbyB7T2JqZWN0fSB7XG4gKiAgIG1ldGhvZE5hbWU6IHVwZGF0ZU5leHRQYWdlVXRwYXJhbS9wYWdlQXBwZWFyL29uVVRDYWxsQmFjay4uLlxuICogICBwYXJhbXM6IHsuLi59XG4gKiB9XG4gKi9cbnZhciBkb190cmFja2VyMiA9IGZ1bmN0aW9uIChwYXJhbXMsIG1ldGhvZF9uYW1lKSB7XG4gIHZhciBxID0gdXRpbEdvbGRsb2cuZ2V0R2xvYmFsVmFsdWUoJ2FwbHVzX3F1ZXVlJywgW10pO1xuICBxLnB1c2goe1xuICAgIGFjdGlvbjogJ2FwbHVzLl9hcGx1c19jcGx1Z2luX3RyYWNrX2RlYi5tb25pdG9yJyxcbiAgICBhcmd1bWVudHM6IFt7XG4gICAgICBrZXk6ICdBUExVU19QTFVHSU5fREVCVUcnLFxuICAgICAgdGl0bGU6ICdhcGx1c19jb3JlJyxcbiAgICAgIG1zZzogW1xuICAgICAgICAnX2Vycm9yXzptZXRob2ROYW1lPScgKyBtZXRob2RfbmFtZSArICcscGFyYW1zPScgKyBKU09OLnN0cmluZ2lmeShwYXJhbXMpXG4gICAgICBdLFxuICAgICAgdHlwZTogJ3VwZGF0ZU1zZycsXG4gICAgICBkZXNjcmlwdGlvbjogbWV0aG9kX25hbWUgfHwgJ2FwbHVzX2NvcmUnXG4gICAgfV1cbiAgfSk7XG59O1xuXG52YXIgZG9fdHJhY2tlciA9IGZ1bmN0aW9uIChwYXJhbXMsIG1ldGhvZF9uYW1lLCBjYikge1xuICB2YXIgcSA9IHV0aWxHb2xkbG9nLmdldEdsb2JhbFZhbHVlKCdhcGx1c19xdWV1ZScsIFtdKTtcbiAgcS5wdXNoKHtcbiAgICBhY3Rpb246IFsnYXBsdXMnLCAnX2FwbHVzX2NwbHVnaW5fbScsIG1ldGhvZF9uYW1lXS5qb2luKCcuJyksXG4gICAgYXJndW1lbnRzOiBbcGFyYW1zLCBjYl1cbiAgfSk7XG59O1xuXG4vKipcbiAqIOiusOW9leKAnUpT6ZSZ6K+v4oCcXG4gKlxuICogQHBhcmFtcyB7T2JqZWN0fSBjb25maWcgOiB7XG4gKiAgIGxvZ2tleTogJ2ZzcC4xLjEnLFxuICogICBtZXNzYWdlOiAnJyxcbiAqICAgZXJyb3I6IGVycm9yLFxuICogICBmaWxlbmFtZTogJ2ZpbGVuYW1lJyxcbiAqIH1cbiAqXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5leHBvcnRzLmRvX3RyYWNrZXJfanNlcnJvciA9IGZ1bmN0aW9uKHBhcmFtcywgY2IpIHtcbiAgdmFyIG5hbWUgPSAnZG9fdHJhY2tlcl9qc2Vycm9yJztcbiAgZG9fdHJhY2tlcihwYXJhbXMsIG5hbWUsIGNiKTtcbiAgZG9fdHJhY2tlcjIocGFyYW1zLCBuYW1lKTtcbiAgdmFyIGFwbHVzID0gdXRpbEdvbGRsb2cuZ2V0R2xvYmFsVmFsdWUoJ2FwbHVzJyk7XG4gIGlmIChhcGx1cyAmJiBhcGx1cy5hcGx1c0RlYnVnICYmIGNvbnNvbGUpIHtcbiAgICBjb25zb2xlLndhcm4ocGFyYW1zKTtcbiAgfVxufTtcblxuLyoqXG4gKiDljIXoo7nmlrnms5XvvIznu5nmlrnms5XliqB0cnkgY2F0Y2gg5ZKM6ZSZ6K+v55uR5o6nXG4gKiBAcGFyYW0gZm4ge0Z1bmN0aW9ufVxuICogQHBhcmFtIGZuX25hbWUge1N0cmluZ31cbiAqL1xuZXhwb3J0cy53cmFwID0gZnVuY3Rpb24oZm4pIHtcbiAgaWYgKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRyeSB7XG4gICAgICBmbigpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgZG9fdHJhY2tlcjIoe1xuICAgICAgICBtc2c6IGVyci5tZXNzYWdlIHx8IGVyclxuICAgICAgfSwgJ2V4Y2VwdGlvbicpO1xuICAgIH0gZmluYWxseSB7XG4gICAgfVxuICB9XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2xpYl91L3V0aWxzL3RyYWNrZXJVdGlsLmpzXG4vLyBtb2R1bGUgaWQgPSAzM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIHByb2plY3QgLSBmaWxlcGF0aFxuICogZGVzY3JpcHRpb25cbiAqXG4gKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG4gKlxuICogQXV0aG9yczpcbiAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbEFycmF5ID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxBcnJheScpO1xudmFyIHV0aWxBdHRyaWJ1dGUgPSByZXF1aXJlKCdAdXRpbHMvdXRpbEF0dHJpYnV0ZScpO1xudmFyIHV0aWxEb20gPSByZXF1aXJlKCdAdXRpbHMvdXRpbERvbScpO1xudmFyIHV0aWxHb2xkbG9nID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxHb2xkbG9nJyk7XG52YXIgdXRpbERhc2ggPSByZXF1aXJlKCdAdXRpbHMvdXRpbERhc2gnKTtcbnZhciBlYWNoTWFwID0gcmVxdWlyZSgnQHV0aWxzL2VhY2hNYXAnKTtcbnZhciBlYWNoID0gcmVxdWlyZSgnQHV0aWxzL2VhY2gnKTtcblxudmFyIHV0aWxFdmVudCA9IHJlcXVpcmUoJy4uL2xpYl9hZS91dGlsL2V2ZW50Jyk7XG52YXIgdXRpbF9hY19hZSA9IHJlcXVpcmUoJy4uL2xpYl9jb21tb24vdXRpbF9hY19hZScpO1xudmFyIGNvbmZpZyA9IHJlcXVpcmUoJy4uL2xpYl9jb21tb24vY29uZmlnJyk7XG5cbi8vIHZhciBpc1RvdWNoRW5hYmxlZCA9IGZ1bmN0aW9uKCkge1xuLy8gICB2YXIgXyQgPSB1dGlsR29sZGxvZy5nZXRHb2xkbG9nVmFsKCdfJCcpIHx8IHt9O1xuLy8gICB2YXIgbWV0YV9pbmZvID0gXyQubWV0YV9pbmZvIHx8IHt9O1xuLy8gICB2YXIgYXBsdXNUb3VjaCA9IG1ldGFfaW5mb1snYXBsdXMtdG91Y2gnXTtcbi8vICAgcmV0dXJuIHV0aWxEb20uaXNUb3VjaCgpICYmIChhcGx1c1RvdWNoID09PSAnMScgfHwgYXBsdXNUb3VjaCA9PT0gJ3RhcCcpO1xuLy8gfTtcblxudmFyIHdpbiA9IHdpbmRvdztcbnZhciB0YWdzID0gWydpZnJhbWUnLCAnaHRtbCcsICdib2R5JywgJ2hlYWQnXTtcbnZhciBMT0dLRVlfQVRUUiA9IGNvbmZpZy5EQVRBX0FQTFVTX0FDX0tFWTtcblxudmFyIHRyeUdldFBhcmFtcyA9IGZ1bmN0aW9uKGVsKSB7XG4gIHZhciBjbGtDb25maWdzID0gW107XG4gIHZhciBoYXNoX3ZhbHVlID0gZWwgPyB1dGlsQXR0cmlidXRlLnRyeVRvR2V0QXR0cmlidXRlKGVsLCBMT0dLRVlfQVRUUikgOiAnJztcbiAgaWYgKGhhc2hfdmFsdWUpIHtcbiAgICB2YXIgX2FwbHVzX2FjID0gdXRpbEdvbGRsb2cuZ2V0R29sZGxvZ1ZhbCgnX2FwbHVzX2FjJykgfHwge307XG4gICAgdmFyIF9hY0hhc2hNYXAgPSBfYXBsdXNfYWMuX2FjSGFzaE1hcCB8fCB7fTtcbiAgICBlYWNoTWFwKF9hY0hhc2hNYXAsIGZ1bmN0aW9uIChsb2drZXksIGFycikge1xuICAgICAgZWFjaChhcnIsIGZ1bmN0aW9uICh2KSB7XG4gICAgICAgIGlmICh2Lmhhc2hfdmFsdWUgPT09IGhhc2hfdmFsdWUpIHtcbiAgICAgICAgICBjbGtDb25maWdzLnB1c2godi5jbGtDb25maWcpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGNsa0NvbmZpZ3M6IGNsa0NvbmZpZ3MsXG4gICAgZWw6IGVsXG4gIH07XG59O1xuXG52YXIgZ2V0UGFyYW1zID0gZnVuY3Rpb24oZWwpIHtcbiAgdmFyIHBhcmFtcyA9IHRyeUdldFBhcmFtcyhlbCk7XG4gIGlmIChwYXJhbXMgJiYgcGFyYW1zLmNsa0NvbmZpZ3MgJiYgcGFyYW1zLmNsa0NvbmZpZ3MubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBwYXJhbXM7XG4gIH1cblxuICB3aGlsZSAoKGVsID0gZWwucGFyZW50Tm9kZSkgJiYgdXRpbEFycmF5LmluZGV4b2YodGFncywgZWwudGFnTmFtZSA/IGVsLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA6ICdodG1sJykgPT09IC0xKSB7XG4gICAgcGFyYW1zID0gdHJ5R2V0UGFyYW1zKGVsKTtcbiAgICBpZiAocGFyYW1zICYmIHBhcmFtcy5jbGtDb25maWdzICYmIHBhcmFtcy5jbGtDb25maWdzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiBwYXJhbXM7XG4gICAgfVxuICB9XG59O1xuXG52YXIgaGFuZGxlcl9hdXRvX2NsayA9IGZ1bmN0aW9uKGUpIHtcbiAgZSA9IGUgfHwgd2luLmV2ZW50O1xuICB2YXIgZWwgPSBlLnRhcmdldCB8fCBlLnNyY0VsZW1lbnQ7XG5cbiAgdmFyIHBhcmFtcyA9IGdldFBhcmFtcyhlbCkgfHwge307XG4gIHZhciBjbGtDb25maWdzID0gcGFyYW1zLmNsa0NvbmZpZ3M7XG4gIGlmIChwYXJhbXMgJiYgY2xrQ29uZmlncyAmJiBwYXJhbXMuZWwpe1xuICAgIGVhY2goY2xrQ29uZmlncywgZnVuY3Rpb24gKHYpIHtcbiAgICAgIHZhciBjbGtDb25maWcgPSB2O1xuICAgICAgZWwgPSBwYXJhbXMuZWw7XG4gICAgICB2YXIgc3BtX2FiID0gYXBsdXMuc3BtX2FiID8gYXBsdXMuc3BtX2FiLmpvaW4oJy4nKSA6ICcwLjAnOyAvLyDkv53lupVzcG1BQlxuICAgICAgdmFyIHNwbSA9IHNwbV9hYiArICcuMC4wJztcbiAgICAgIHZhciBzY20gPSAnJztcbiAgICAgIGlmICh3aW4uZ19TUE0gJiYgdHlwZW9mIHdpbi5nX1NQTS5zcG0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgc3BtID0gd2luLmdfU1BNLnNwbShlbCk7XG4gICAgICB9XG4gICAgICB2YXIgZ29rZXkgPSBbXTtcbiAgICAgIHZhciBleGFyZ3Nfb3JpZ2luID0ge1xuICAgICAgICAvLyBfeHBhdGg6IHV0aWxfYWNfYWUuZ2V0WFBhdGgoZWwpLFxuICAgICAgfTtcbiAgICAgIC8vIOivu+WPluiiq+abneWFieWFg+e0oOS4iueahOeJueWumuWxnuaAp++8jOi/meS6m+eJueWumuWxnuaAp+aYr+mAmui/h+abneWFieWfi+eCueS6i+WFiOWfi+i/m+WOu+eahFxuICAgICAgdmFyIGV4YXJncyA9IHV0aWxfYWNfYWUuZmlsbFByb3BzRGF0YShjbGtDb25maWcsIGVsLCBleGFyZ3Nfb3JpZ2luKTtcbiAgICAgIGV4YXJncyA9IHV0aWxfYWNfYWUuZmlsbEZpbHRlckRhdGEoY2xrQ29uZmlnLCBlbCwgZXhhcmdzX29yaWdpbik7XG4gICAgICB2YXIgYWNBdXRvVXNlckZuID0gY29uZmlnLmdldEF1dG9DbGtVc2VyRm4oKTtcbiAgICAgIGlmIChhY0F1dG9Vc2VyRm4pIHtcbiAgICAgICAgdmFyIHJzID0gdXRpbF9hY19hZS5hdXRvVXNlckZuSGFuZGxlcihhY0F1dG9Vc2VyRm4sIGVsLCBjbGtDb25maWcuZWxlbWVudFNlbGVjdG9yLCBlKTtcbiAgICAgICAgaWYgKHR5cGVvZiBycyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHJzLnVzZXJkYXRhID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgZXhhcmdzID0gdXRpbERhc2guYXNzaWduKGV4YXJncywgcnMudXNlcmRhdGEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyDlj6/op4bljJbln4vngrnkvJrliqjmgIHms6jlhaVzcG3jgIFzY23vvIzor6bop4EgL3Mvc3JjL3BsdWdpbnMvbGliX3dlYnZ0L0xvZ0cuanM6IGdldEF0dHJBcmdzXG4gICAgICAgICAgaWYgKHJzLnNwbSkge1xuICAgICAgICAgICAgc3BtID0gcnMuc3BtO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocnMuc2NtKSB7XG4gICAgICAgICAgICBzY20gPSBycy5zY207XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHJzID09PSBmYWxzZSkgeyAvLyDov5Tlm54gZmFsc2Ug5YiZ5LiN5LiK5oql5Z+L54K5XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoYXBsdXMuZ2xvYmFsQ29uZmlnLmlzQWxpKSB7XG4gICAgICAgIGdva2V5LnB1c2goJ2Nsa2RhdGE9JyArIEpTT04uc3RyaW5naWZ5KFt7XG4gICAgICAgICAgZXhhcmdzOiBleGFyZ3MsXG4gICAgICAgICAgc2NtOiBzY20sIC8vIFRPRE9cbiAgICAgICAgICBzcG06IHNwbSxcbiAgICAgICAgICBhcGx1c0NvbnRlbnRJZDogJycsXG4gICAgICAgIH1dKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKHZhciBrIGluIGV4YXJncykge1xuICAgICAgICAgIGdva2V5LnB1c2goayArICc9JyArIGV4YXJnc1trXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIFxuICAgICAgZ29rZXkucHVzaCgnX2lzX2F1dG9fY2xrPTEnKTtcbiAgICAgIHZhciBfbWV0aG9kID0gY2xrQ29uZmlnLm1ldGhvZCB8fCAnUE9TVCc7XG4gICAgICBpZiAoIWFwbHVzLmdsb2JhbENvbmZpZy5pc0FsaSkge1xuICAgICAgICBfbWV0aG9kID0gJ0dFVCc7XG4gICAgICB9XG4gICAgICBpZiAoY2xrQ29uZmlnLmxvZ2tleSAhPT0gJyQkX0FQTFVTJykge1xuICAgICAgICBhcGx1c19xdWV1ZS5wdXNoKHtcbiAgICAgICAgICBhY3Rpb246ICdhcGx1cy5yZWNvcmQnLFxuICAgICAgICAgIGFyZ3VtZW50czogW2Nsa0NvbmZpZy5sb2drZXksICdDTEsnLCBnb2tleS5qb2luKCcmJyksIF9tZXRob2RdXG4gICAgICAgIH0pOyAgXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBjb25zb2xlLmxvZygnY2xrQ29uZmlnLmxvZ2tleSA9PT0gJywgY2xrQ29uZmlnLmxvZ2tleSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn07XG5cbmV4cG9ydHMud2F0Y2hfY2xrID0gZnVuY3Rpb24oKSB7XG4gIC8qKlxuICAgKiDnu5HlrpogZG9jdW1lbnQg55qEIG1vdXNlZG93buOAgXRvdWNoIOS6i+S7tu+8jOW9k+WFg+e0oOiiq+eCueWHu+aIlnRvdWNo5pe26Ieq5Yqo5Y+R6YCB5Y+v6KeG5YyW5Luk566tXG4gICAqL1xuICBpZiAodXRpbERvbS5pc1RvdWNoKCkpIHtcbiAgICB1dGlsRXZlbnQub24oZG9jdW1lbnQsICd0YXAnLCBoYW5kbGVyX2F1dG9fY2xrKTtcbiAgfSBlbHNlIHtcbiAgICB1dGlsRXZlbnQub24oZG9jdW1lbnQsICdtb3VzZWRvd24nLCBoYW5kbGVyX2F1dG9fY2xrKTtcbiAgfVxufTtcblxuZXhwb3J0cy5jbGVhciA9IGZ1bmN0aW9uKCkge1xuICBpZiAodXRpbERvbS5pc1RvdWNoKCkpIHtcbiAgICB1dGlsRXZlbnQudW4oZG9jdW1lbnQsICd0YXAnLCBoYW5kbGVyX2F1dG9fY2xrKTtcbiAgfSBlbHNlIHtcbiAgICB1dGlsRXZlbnQudW4oZG9jdW1lbnQsICdtb3VzZWRvd24nLCBoYW5kbGVyX2F1dG9fY2xrKTtcbiAgfVxufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL3BsdWdpbnNfd2ViL2xpYl9hYy93YXRjaENMSy5qc1xuLy8gbW9kdWxlIGlkID0gMzRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBwcm9qZWN0IC0gZmlsZXBhdGhcbiAqIOaVsOe7hOW3peWFt1xuICpcbiAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cbiAqXG4gKiBBdXRob3JzOlxuICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuICovXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogSUU45LiN5pSv5oyB5pWw57uE5Y6f55Sf55qEaW5kZXhPZu+8jOaVheiHquihjOWunueOsOS4gOS4qmluZGV4b2ZcbiAqIEBwYXJhbSBbQXJyYXldIGFyclxuICogQHBhcmFtIFtPYmplY3RdIGl0ZW1cbiAqIEByZXR1cm4gW051bWJlcl0gaW5kZXhcbiAqL1xuZXhwb3J0cy5pbmRleG9mID0gZnVuY3Rpb24oYXJyLCBpdGVtKSB7XG4gIHZhciBpbmRleCA9IC0xO1xuICB0cnkge1xuICAgIGluZGV4ID0gYXJyLmluZGV4T2YoaXRlbSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IGFyci5sZW5ndGg7IGorKykge1xuICAgICAgaWYgKGFycltqXSA9PT0gaXRlbSkge1xuICAgICAgICBpbmRleCA9IGo7XG4gICAgICB9XG4gICAgfVxuICB9IGZpbmFsbHkge1xuICAgIHJldHVybiBpbmRleDtcbiAgfVxufTtcblxuZXhwb3J0cy5pc0FycmF5ID0gZnVuY3Rpb24gKG8pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShvKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gL0FycmF5Ly50ZXN0KE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKSk7XG4gIH1cbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9saWJfdS91dGlscy91dGlsQXJyYXkuanNcbi8vIG1vZHVsZSBpZCA9IDM1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogcHJvamVjdCAtIGZpbGVwYXRoXG4gKiBkb23mk43kvZzlt6XlhbfnsbvvvIzov5nkuKrln7rnoYDlt6XlhbfnsbvkvJrooqvlhbbku5blt6XlhbfnsbvlvJXnlKjvvIzmlYXkuKXnpoHlnKjov5nph4zlho3lvJXnlKjlhbbku5bmqKHlnZfku6XlhY3lh7rnjrDpl67pophcbiAqXG4gKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG4gKlxuICogQXV0aG9yczpcbiAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbEF0dHJpYnV0ZSA9IHJlcXVpcmUoJy4vdXRpbEF0dHJpYnV0ZScpO1xudmFyIGFwbHVzU3RhdGljID0gcmVxdWlyZSgnQHV0aWxzL2FwbHVzU3RhdGljJyk7XG5cbnZhciBfaGVhZF9ub2RlO1xudmFyIF9jdXJyZW50Tm9kZTtcblxuZnVuY3Rpb24gZ2V0Q3VycmVudE5vZGUgKCkge1xuICBpZiAoIV9jdXJyZW50Tm9kZSkge1xuICAgIF9jdXJyZW50Tm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdiZWFjb24tYXBsdXMnKSB8fCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGItYmVhY29uLWFwbHVzJyk7XG4gIH1cbiAgcmV0dXJuIF9jdXJyZW50Tm9kZTtcbn1cbmV4cG9ydHMuZ2V0Q3VycmVudE5vZGUgPSBnZXRDdXJyZW50Tm9kZTtcblxuLyoqXG4gKiBBcGx1c+aUr+aMgemHh+mbhkNTUOino+WGs+aWueahiFxuICogZnJvbSDkupHmnbAgIDIwMTgtMTItMTcgIGh0dHBzOi8vYW9uZS5hbGliYWJhLWluYy5jb20vcmVxLzE4MjQxMTU0P2Zyb209YWsmZnJvbT1hayZcbiAqL1xuZnVuY3Rpb24gc2V0Tm9uY2UgKG5vZGUpIHtcbiAgdmFyIGN1cnJlbnRfbm9kZSA9IGdldEN1cnJlbnROb2RlKCk7XG4gIHZhciBub25jZSA9IHV0aWxBdHRyaWJ1dGUudHJ5VG9HZXRBdHRyaWJ1dGUoY3VycmVudF9ub2RlLCAnY3NweCcpO1xuICBpZiAobm9kZSAmJiBub25jZSkge1xuICAgIG5vZGUubm9uY2UgPSBub25jZTtcbiAgfVxufVxuXG4vKipcbiAqIOWcqOW9k+WJjemhtemdoua3u+WKoOS4gOS4qiBqc1xuICogQHBhcmFtIHNyY1xuICogQHBhcmFtIFtodHRwc19zcmNdXG4gKi9cbmV4cG9ydHMuYWRkU2NyaXB0ID0gZnVuY3Rpb24gKHNyYywgaHR0cHNfc3JjLCBpZCkge1xuICB2YXIgcyA9ICdzY3JpcHQnO1xuICB2YXIgdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQocyk7XG4gIHQudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xuICB0LmFzeW5jID0gdHJ1ZTtcbiAgdmFyIGN1cnJlbnRfbm9kZSA9IGdldEN1cnJlbnROb2RlKCk7XG4gIHZhciBoYXNDcm9zc09yaWdpbiA9IGN1cnJlbnRfbm9kZSAmJiBjdXJyZW50X25vZGUuaGFzQXR0cmlidXRlKCdjcm9zc29yaWdpbicpO1xuICBpZiAoaGFzQ3Jvc3NPcmlnaW4pIHtcbiAgICB0LmNyb3NzT3JpZ2luID0gJ2Fub255bW91cyc7XG4gIH1cblxuICB2YXIgdXJsID0gYXBsdXNTdGF0aWMuSFRUUFMgPT09IGxvY2F0aW9uLnByb3RvY29sID8gKGh0dHBzX3NyYyB8fCBzcmMpIDogc3JjO1xuICBpZiAodXJsLmluZGV4T2YoJy8vJykgPT09IDApIHtcbiAgICB1cmwgPSBhcGx1c1N0YXRpYy5IVFRQUyArIHVybDtcbiAgfVxuICB0LnNyYyA9IHVybDtcbiAgaWYgKGlkKSB7XG4gICAgdC5pZCA9IGlkO1xuICB9XG4gIHNldE5vbmNlKHQpO1xuICB2YXIgbSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKHMpWzBdO1xuICBfaGVhZF9ub2RlID0gX2hlYWRfbm9kZSB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdO1xuICBpZiAobSkge1xuICAgIG0ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodCwgbSk7XG4gIH0gZWxzZSBpZiAoX2hlYWRfbm9kZSkge1xuICAgIF9oZWFkX25vZGUuYXBwZW5kQ2hpbGQodCk7XG4gIH1cbn07XG5cbi8qKlxuICog5Zyo5b2T5YmN6aG16Z2i5re75Yqg5LiA5LiqIGpz77yM5bm25omn6KGM5Zue6LCDXG4gKiBAcGFyYW0gc3JjXG4gKiBAcGFyYW0gW2h0dHBzX3NyY11cbiAqL1xuZXhwb3J0cy5sb2FkU2NyaXB0ID0gZnVuY3Rpb24odXJsLCBjYWxsYmFjaykge1xuICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICBfaGVhZF9ub2RlID0gX2hlYWRfbm9kZSB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdO1xuICBub2RlLmFzeW5jID0gdHJ1ZTtcblxuICBpZiAoXCJvbmxvYWRcIiBpbiBub2RlKSB7XG4gICAgbm9kZS5vbmxvYWQgPSBvbmxvYWQ7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKC9sb2FkZWR8Y29tcGxldGUvLnRlc3Qobm9kZS5yZWFkeVN0YXRlKSkge1xuICAgICAgICBvbmxvYWQoKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIG5vZGUub25yZWFkeXN0YXRlY2hhbmdlID0gb25yZWFkeXN0YXRlY2hhbmdlO1xuXG4gICAgLy8g5LiA5byA5aeL5Lmf5Yik5pat5LiA5qyh54q25oCBXG4gICAgb25yZWFkeXN0YXRlY2hhbmdlKCk7XG4gIH1cblxuICBub2RlLm9uZXJyb3IgPSBmdW5jdGlvbihlKSB7XG4gICAgb25sb2FkKGUpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG9ubG9hZChlcnJvcikge1xuICAgIG5vZGUub25yZWFkeXN0YXRlY2hhbmdlID0gbm9kZS5vbmxvYWQgPSBub2RlLm9uZXJyb3IgPSBudWxsO1xuICAgIG5vZGUgPSBudWxsO1xuXG4gICAgY2FsbGJhY2soZXJyb3IpO1xuICB9XG5cbiAgbm9kZS5zcmMgPSB1cmw7XG4gIHNldE5vbmNlKG5vZGUpO1xuICBfaGVhZF9ub2RlLmFwcGVuZENoaWxkKG5vZGUpO1xufTtcblxuLyoqXG4gKiDliKTmlq3mmK/lkKbmlK/mjIF0b3VjaOS6i+S7tlxuICogQHJldHVybiBbQm9vbGVhbl1cbiAqL1xuZXhwb3J0cy5pc1RvdWNoID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAnb250b3VjaGVuZCcgaW4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG59O1xuXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9saWJfdS91dGlscy91dGlsRG9tLmpzXG4vLyBtb2R1bGUgaWQgPSAzNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIHByb2plY3QgLSBmaWxlcGF0aFxuICog5a+5bWFw6L+b6KGM6auY5oCn6IO955qE6YGN5Y6GXG4gKlxuICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuICpcbiAqIEF1dGhvcnM6XG4gKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG4gKi9cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWFwLCBjYWxsYmFjaykge1xuICBpZiAoT2JqZWN0ICYmIE9iamVjdC5rZXlzKSB7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhtYXApO1xuICAgIHZhciBsZW4gPSBrZXlzLmxlbmd0aDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgazEgPSBrZXlzW2ldO1xuICAgICAgY2FsbGJhY2soazEsIG1hcFtrMV0pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKHZhciBrIGluIG1hcCkge1xuICAgICAgY2FsbGJhY2soaywgbWFwW2tdKTtcbiAgICB9XG4gIH1cbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9saWJfdS91dGlscy9lYWNoTWFwLmpzXG4vLyBtb2R1bGUgaWQgPSAzN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIHByb2plY3QgLSBmaWxlcGF0aFxuICogZGVzY3JpcHRpb25cbiAqXG4gKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG4gKlxuICogQXV0aG9yczpcbiAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXR0YSA9ICEhZG9jdW1lbnQuYXR0YWNoRXZlbnQ7XG52YXIgYXBsdXNUYXAgPSByZXF1aXJlKCdAdXRpbHMvYXBsdXNUYXAnKTtcblxuZnVuY3Rpb24gZ2V0Q3VzdG9tVGFwICgpIHtcbiAgdmFyIF8kID0gYXBsdXMuXyQgfHwge307XG4gIHZhciBtZXRhX2luZm8gPSBfJC5tZXRhX2luZm8gfHwge307XG4gIHZhciBhcGx1c19jdGFwID0gbWV0YV9pbmZvLmFwbHVzX2N0YXAgfHwge307XG4gIGlmIChhcGx1c19jdGFwICYmIHR5cGVvZiBhcGx1c19jdGFwLm9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGFwbHVzX2N0YXA7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHRhcEV2ZW50QmluZChlbGVtZW50LCBmbikge1xuICAvLyDlpoLmnpzkuJrliqHmlrnmnInoh6rlrprkuYnlrp7njrDnmoR0YXDkuovku7bmj5Lku7bvvIzkvJjlhYjmjInor6Xkuovku7bmiafooYxcbiAgdmFyIGN1c3RvbVRhcCA9IGdldEN1c3RvbVRhcCgpO1xuICBpZiAoY3VzdG9tVGFwKSB7XG4gICAgY3VzdG9tVGFwLm9uKGVsZW1lbnQsIGZuKTtcbiAgfSBlbHNlIHtcbiAgICBhcGx1c1RhcC5vbihlbGVtZW50LCBmbik7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHRhcEV2ZW50VW5CaW5kKGVsZW1lbnQsIGZuKSB7XG4gIC8vIOWmguaenOS4muWKoeaWueacieiHquWumuS5ieWunueOsOeahHRhcOS6i+S7tuaPkuS7tu+8jOS8mOWFiOaMieivpeS6i+S7tuaJp+ihjFxuICB2YXIgY3VzdG9tVGFwID0gZ2V0Q3VzdG9tVGFwKCk7XG4gIGlmIChjdXN0b21UYXApIHtcbiAgICBjdXN0b21UYXAudW4oZWxlbWVudCwgZm4pO1xuICB9IGVsc2Uge1xuICAgIGFwbHVzVGFwLnVuKGVsZW1lbnQsIGZuKTtcbiAgfVxufTtcblxuLyoqXG4gKiDnu5Hlrprkuovku7ZcbiAqIEBwYXJhbSBvYmoge1dpbmRvd3xFbGVtZW50fSBET00g5YWD57SgXG4gKiBAcGFyYW0gZXZlbnRfdHlwZVxuICogQHBhcmFtIGZcbiAqL1xuZXhwb3J0cy5vbiA9IGZ1bmN0aW9uKG9iaiwgZXZlbnRfdHlwZSwgZikge1xuICBpZiAoZXZlbnRfdHlwZSA9PT0gJ3RhcCcpIHtcbiAgICB0YXBFdmVudEJpbmQob2JqLCBmKTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGF0dGEpIHtcbiAgICBvYmpbJ2F0dGFjaEV2ZW50J10oZXZlbnRfdHlwZSwgZik7XG4gIH0gZWxzZSB7XG4gICAgb2JqWydhZGRFdmVudExpc3RlbmVyJ10oZXZlbnRfdHlwZSwgZik7XG4gIH1cbn07XG5cbi8qKlxuICog56e76Zmk57uR5a6a5LqL5Lu2XG4gKiBAcGFyYW0gb2JqIHtXaW5kb3d8RWxlbWVudH0gRE9NIOWFg+e0oFxuICogQHBhcmFtIGV2ZW50X3R5cGVcbiAqIEBwYXJhbSBmXG4gKi9cbmV4cG9ydHMudW4gPSBmdW5jdGlvbihvYmosIGV2ZW50X3R5cGUsIGYpIHtcbiAgaWYgKGV2ZW50X3R5cGUgPT09ICd0YXAnKSB7XG4gICAgdGFwRXZlbnRVbkJpbmQob2JqLCBmKTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGF0dGEpIHtcbiAgICBvYmpbJ2RldGFjaEV2ZW50J10oZXZlbnRfdHlwZSwgZik7XG4gIH0gZWxzZSB7XG4gICAgb2JqWydyZW1vdmVFdmVudExpc3RlbmVyJ10oZXZlbnRfdHlwZSwgZik7XG4gIH1cbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9wbHVnaW5zX3dlYi9saWJfYWUvdXRpbC9ldmVudC5qc1xuLy8gbW9kdWxlIGlkID0gMzhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiB0YXBcbiAqIHRoYW5rcyBA6JmO54mZXG4gKiBodHRwOi8vZ2l0bGFiLmFsaWJhYmEtaW5jLmNvbS9hbGlsb2cvYXBsdXNfcGx1Z2luX2FsaXRyaXAvdHJlZS9tYXN0ZXIvc3JjL2xpYl90YXBcbiAqIEF1dGhvcnM6XG4gKiAgIOiZjueJmSA8aHV5YS5uemJAYWxpYmFiYS1pbmMuY29tPlxuICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGlzSW5pdGlhbGl6ZWQgPSBmYWxzZTtcblxuLy8gdmFyIGRvYyA9IHdpbmRvdy5kb2N1bWVudDtcbi8vIHZhciBkb2NFbCA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG52YXIgZ2VzdHVyZXMgPSB7fTtcbnZhciBUT1VDSF9TVEFSVCA9ICd0b3VjaHN0YXJ0JztcbnZhciBUT1VDSF9FTkQgPSAndG91Y2hlbmQnO1xudmFyIFRPVVJDSF9NT1ZFID0gJ3RvdWNobW92ZSc7XG52YXIgVEFQUElORyA9ICd0YXBwaW5nJztcbnZhciBUT1VDSF9DQU5DRUwgPSAndG91Y2hjYW5jZWwnO1xuXG5mdW5jdGlvbiBnZXRSYW5kb20obWluLCBtYXgpIHtcbiAgcmV0dXJuIG1pbiArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSk7XG59O1xudmFyIEFQTFVTX1RBUCA9ICdhcGx1c190YXAnICsgZ2V0UmFuZG9tKDEsIDEwMDAwMCk7XG5cbmZ1bmN0aW9uIGZpcmVFdmVudChlbGVtZW50LCB0eXBlLCBleHRyYSkge1xuICB2YXIgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnSFRNTEV2ZW50cycpO1xuICBldmVudC5pbml0RXZlbnQodHlwZSwgdHJ1ZSwgdHJ1ZSk7XG5cbiAgaWYgKHR5cGVvZiBleHRyYSA9PT0gJ29iamVjdCcpIHtcbiAgICBmb3IgKHZhciBwIGluIGV4dHJhKSB7XG4gICAgICBldmVudFtwXSA9IGV4dHJhW3BdO1xuICAgIH1cbiAgfVxuXG4gIGVsZW1lbnQuZGlzcGF0Y2hFdmVudChldmVudCk7XG59XG5cbmZ1bmN0aW9uIHRvdWNoc3RhcnRIYW5kbGVyKGV2ZW50KSB7XG4gIHZhciBkb2NFbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgaWYgKE9iamVjdC5rZXlzKGdlc3R1cmVzKS5sZW5ndGggPT09IDApIHtcbiAgICBkb2NFbC5hZGRFdmVudExpc3RlbmVyKFRPVVJDSF9NT1ZFLCB0b3VjaG1vdmVIYW5kbGVyLCBmYWxzZSk7XG4gICAgZG9jRWwuYWRkRXZlbnRMaXN0ZW5lcihUT1VDSF9FTkQsIHRvdWNoZW5kSGFuZGxlciwgZmFsc2UpO1xuICAgIGRvY0VsLmFkZEV2ZW50TGlzdGVuZXIoVE9VQ0hfQ0FOQ0VMLCB0b3VjaGVuZEhhbmRsZXIsIGZhbHNlKTtcbiAgfVxuXG4gIC8vIHJlY29yZCBldmVyeSB0b3VjaFxuICBmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50LmNoYW5nZWRUb3VjaGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHRvdWNoID0gZXZlbnQuY2hhbmdlZFRvdWNoZXNbaV07XG4gICAgdmFyIHRvdWNoUmVjb3JkID0ge307XG5cbiAgICBmb3IgKHZhciBwIGluIHRvdWNoKSB7XG4gICAgICB0b3VjaFJlY29yZFtwXSA9IHRvdWNoW3BdO1xuICAgIH1cblxuICAgIHZhciBnZXN0dXJlID0ge1xuICAgICAgc3RhcnRUb3VjaDogdG91Y2hSZWNvcmQsXG4gICAgICBzdGFydFRpbWU6IERhdGUubm93KCksXG4gICAgICBzdGF0dXM6IFRBUFBJTkcsXG4gICAgICBlbGVtZW50OiBldmVudC5zcmNFbGVtZW50IHx8IGV2ZW50LnRhcmdldFxuICAgIH07XG4gICAgZ2VzdHVyZXNbdG91Y2guaWRlbnRpZmllcl0gPSBnZXN0dXJlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRvdWNobW92ZUhhbmRsZXIoZXZlbnQpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudC5jaGFuZ2VkVG91Y2hlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0b3VjaCA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzW2ldO1xuICAgIHZhciBnZXN0dXJlID0gZ2VzdHVyZXNbdG91Y2guaWRlbnRpZmllcl07XG5cbiAgICBpZiAoIWdlc3R1cmUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZGlzcGxhY2VtZW50WCA9IHRvdWNoLmNsaWVudFggLSBnZXN0dXJlLnN0YXJ0VG91Y2guY2xpZW50WDtcbiAgICB2YXIgZGlzcGxhY2VtZW50WSA9IHRvdWNoLmNsaWVudFkgLSBnZXN0dXJlLnN0YXJ0VG91Y2guY2xpZW50WTtcbiAgICB2YXIgZGlzdGFuY2UgPSBNYXRoLnNxcnQoTWF0aC5wb3coZGlzcGxhY2VtZW50WCwgMikgKyBNYXRoLnBvdyhkaXNwbGFjZW1lbnRZLCAyKSk7XG5cbiAgICAvLyBtYWdpYyBudW1iZXIgMTA6IG1vdmluZyAxMHB4IG1lYW5zIHBhbiwgbm90IHRhcFxuICAgIGlmICgoZ2VzdHVyZS5zdGF0dXMgPT09IFRBUFBJTkcgfHwgZ2VzdHVyZS5zdGF0dXMgPT09ICdwcmVzc2luZycpICYmIGRpc3RhbmNlID4gMTApIHtcbiAgICAgIGdlc3R1cmUuc3RhdHVzID0gJ3Bhbm5pbmcnO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB0b3VjaGVuZEhhbmRsZXIoZXZlbnQpIHtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50LmNoYW5nZWRUb3VjaGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHRvdWNoID0gZXZlbnQuY2hhbmdlZFRvdWNoZXNbaV07XG4gICAgdmFyIGlkID0gdG91Y2guaWRlbnRpZmllcjtcbiAgICB2YXIgZ2VzdHVyZSA9IGdlc3R1cmVzW2lkXTtcblxuICAgIGlmICghZ2VzdHVyZSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKGdlc3R1cmUuc3RhdHVzID09PSBUQVBQSU5HICYmIGV2ZW50LnR5cGUgPT09IFRPVUNIX0VORCkge1xuICAgICAgZ2VzdHVyZS50aW1lc3RhbXAgPSBEYXRlLm5vdygpO1xuICAgICAgLy8gZmlyZSBjbGljaywgbm90IHRhcC5cbiAgICAgIGZpcmVFdmVudChnZXN0dXJlLmVsZW1lbnQsIEFQTFVTX1RBUCwge1xuICAgICAgICB0b3VjaDogdG91Y2gsXG4gICAgICAgIHRvdWNoRXZlbnQ6IGV2ZW50XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBkZWxldGUgZ2VzdHVyZXNbaWRdO1xuICB9XG5cbiAgdmFyIGRvY0VsID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICBpZiAoT2JqZWN0LmtleXMoZ2VzdHVyZXMpLmxlbmd0aCA9PT0gMCkge1xuICAgIGRvY0VsLnJlbW92ZUV2ZW50TGlzdGVuZXIoVE9VUkNIX01PVkUsIHRvdWNobW92ZUhhbmRsZXIsIGZhbHNlKTtcbiAgICBkb2NFbC5yZW1vdmVFdmVudExpc3RlbmVyKFRPVUNIX0VORCwgdG91Y2hlbmRIYW5kbGVyLCBmYWxzZSk7XG4gICAgZG9jRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihUT1VDSF9DQU5DRUwsIHRvdWNoZW5kSGFuZGxlciwgZmFsc2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpeElPU1RvdWNoQnVnKGVsZW1lbnQpIHtcbiAgaWYgKCFlbGVtZW50Ll9fZml4VG91Y2hFdmVudCkge1xuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihUT1VDSF9TVEFSVCwgZnVuY3Rpb24gKCkge1xuICAgIH0sIGZhbHNlKTtcbiAgICBlbGVtZW50Ll9fZml4VG91Y2hFdmVudCA9IHRydWU7XG4gIH1cbn1cbmZ1bmN0aW9uIGluaXQgKCkge1xuICBpZiAoIWlzSW5pdGlhbGl6ZWQpIHtcbiAgICB2YXIgZG9jRWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgZG9jRWwuYWRkRXZlbnRMaXN0ZW5lcihUT1VDSF9TVEFSVCwgdG91Y2hzdGFydEhhbmRsZXIsIGZhbHNlKTtcbiAgICBpc0luaXRpYWxpemVkID0gdHJ1ZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgb246IGZ1bmN0aW9uKGVsZW1lbnQsIGNhbGxiYWNrKSB7XG4gICAgaW5pdCgpO1xuICAgIGlmIChlbGVtZW50ICYmIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciAmJiBjYWxsYmFjaykge1xuICAgICAgZml4SU9TVG91Y2hCdWcoZWxlbWVudCk7XG4gICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoQVBMVVNfVEFQLCAoY2FsbGJhY2suX2FwbHVzX3RhcF9jYWxsYmFjayA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgY2FsbGJhY2soZSwgZS50YXJnZXQpO1xuICAgICAgfSksIGZhbHNlKTtcbiAgICB9XG4gIH0sXG4gIHVuOiBmdW5jdGlvbihlbGVtZW50LCBjYWxsYmFjaykge1xuICAgIGlmIChlbGVtZW50ICYmIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciAmJiBjYWxsYmFjayAmJiBjYWxsYmFjay5fYXBsdXNfdGFwX2NhbGxiYWNrKSB7XG4gICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoQVBMVVNfVEFQLCBjYWxsYmFjay5fYXBsdXNfdGFwX2NhbGxiYWNrLCBmYWxzZSk7XG4gICAgfVxuICB9XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvbGliX3UvdXRpbHMvYXBsdXNUYXAuanNcbi8vIG1vZHVsZSBpZCA9IDM5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogcHJvamVjdCAtIGZpbGVwYXRoXG4gKiBkZXNjcmlwdGlvblxuICpcbiAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cbiAqXG4gKiBBdXRob3JzOlxuICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBkb2MgPSBkb2N1bWVudDtcbnZhciB3aW4gPSB3aW5kb3c7XG5cbnZhciB1dGlsR29sZGxvZyA9IHJlcXVpcmUoJ0B1dGlscy91dGlsR29sZGxvZycpO1xudmFyIHV0aWxMb2dnZXIgPSByZXF1aXJlKCdAdXRpbHMvdXRpbExvZ2dlcicpO1xudmFyIHV0aWxIYXNoID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxIYXNoJyk7XG52YXIgZWFjaCA9IHJlcXVpcmUoJ0B1dGlscy9lYWNoJyk7XG52YXIgZWFjaE1hcCA9IHJlcXVpcmUoJ0B1dGlscy9lYWNoTWFwJyk7XG52YXIgdXRpbEVuY29kZSA9IHJlcXVpcmUoJ0B1dGlscy91dGlsRW5jb2RlJyk7XG5cbnZhciBjb25maWcgPSByZXF1aXJlKCcuL2NvbmZpZycpO1xuXG52YXIgaXNBcnJheSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG5leHBvcnRzLmlzQXJyYXkgPSBpc0FycmF5O1xuXG4vKipcbiAqIEBzZWUgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8yNjYxODE4L2phdmFzY3JpcHQtZ2V0LXhwYXRoLW9mLWEtbm9kZVxuICogQHBhcmFtIGVsXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKi9cbmV4cG9ydHMuZ2V0WFBhdGggPSBmdW5jdGlvbiAoZWwpIHtcbiAgdmFyIGFsbF9ub2RlcyA9IGRvYy5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIiksXG4gICAgc2VncywgaSwgc2liLCB1bmlxdWVfaWRfY291bnQsXG4gICAgbm9kZSwgZWxfaWQ7XG4gIGZvciAoc2VncyA9IFtdOyBlbCAmJiBlbC5ub2RlVHlwZSA9PSAxOyBlbCA9IGVsLnBhcmVudE5vZGUpIHtcbiAgICBpZiAoZWwuaWQpIHtcbiAgICAgIGVsX2lkID0gZWwuaWQ7XG4gICAgICB1bmlxdWVfaWRfY291bnQgPSAwO1xuICAgICAgZm9yIChpID0gMDsgaSA8IGFsbF9ub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBub2RlID0gYWxsX25vZGVzW2ldO1xuICAgICAgICBpZiAobm9kZS5pZCAmJiBub2RlLmlkID09IGVsX2lkKSB7XG4gICAgICAgICAgdW5pcXVlX2lkX2NvdW50Kys7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHNlZ3MudW5zaGlmdChlbC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgKyBcIltAaWQ9XFxcIlwiICsgZWxfaWQgKyBcIlxcXCJdXCIpO1xuICAgICAgaWYgKHVuaXF1ZV9pZF9jb3VudCA9PSAxKSB7XG4gICAgICAgIHNlZ3MudW5zaGlmdChcIi9cIik7XG4gICAgICAgIHJldHVybiBzZWdzLmpvaW4oXCIvXCIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGkgPSAxLCBzaWIgPSBlbC5wcmV2aW91c1NpYmxpbmc7IHNpYjsgc2liID0gc2liLnByZXZpb3VzU2libGluZykge1xuICAgICAgICBpZiAoc2liLnRhZ05hbWUgPT0gZWwudGFnTmFtZSkgIGkrKztcbiAgICAgIH1cbiAgICAgIHNlZ3MudW5zaGlmdChlbC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgKyBcIltcIiArIGkgKyBcIl1cIik7XG4gICAgfVxuICB9XG4gIHJldHVybiBzZWdzLmxlbmd0aCA/IFwiL1wiICsgc2Vncy5qb2luKFwiL1wiKSA6IG51bGw7XG59O1xuXG52YXIgbm9kZWxpc3RUb0FycmF5ID0gZnVuY3Rpb24gKG5vZGVsaXN0LCBub2Rlcykge1xuICBpZiAoIW5vZGVzIHx8IG5vZGVzLmxlbmd0aCA9PT0gMCkge1xuICAgIG5vZGVzID0gW107XG4gIH1cbiAgaWYgKG5vZGVsaXN0ICYmIG5vZGVsaXN0Lmxlbmd0aCA+IDApIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBub2Rlcy5wdXNoKG5vZGVsaXN0W2ldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5vZGVzO1xufTtcbmV4cG9ydHMubm9kZWxpc3RUb0FycmF5ID0gbm9kZWxpc3RUb0FycmF5O1xuXG4vKipcbiAqIOagueaNruW6lOeUqOWfi+eahOWFg+e0oOmAieaLqeWZqOiOt+WPluWFg+e0oFxuICogQHBhcmFtIHtPYmplY3R9IHtcbiAqICAgIGxvZ2tleTogL2EuYi5jMyxcbiAqICAgIGVsZW1lbnRTZWxlY3RvcjogJ3BbZGF0YS1zcG0tY2xpY2tdJyxcbiAqICAgIHRhZzogcCxcbiAqICAgIGZpbHRlcjogZGF0YS1zcG0tY2xpY2tcbiAqIH1cbiAqIEByZXR1cm4ge0FycmF5fSBlbGVtZW50c1xuICovXG5leHBvcnRzLmdldEVsZW1lbnRzID0gZnVuY3Rpb24obywgX2RvY3VtZW50KSB7XG4gIHZhciBfZG9jID0gX2RvY3VtZW50IHx8IGRvYztcbiAgdmFyIGVsZW1lbnRzID0gW107XG4gIC8vIOaUr+aMgXF1ZXJ5U2VsZWN0b3JBbGznmoTmtY/op4jlmajmjInov5nkuKrmnaXlj5bvvIzlkKbliJnmjInkvKDnu5/nmoTmlrnms5VcbiAgaWYgKF9kb2MucXVlcnlTZWxlY3RvckFsbCkge1xuICAgIGVsZW1lbnRzID0gbm9kZWxpc3RUb0FycmF5KF9kb2MucXVlcnlTZWxlY3RvckFsbChvLmVsZW1lbnRTZWxlY3RvcikgfHwgW10pO1xuICAgIC8vIHZhciBlbGVfc2VsZWN0b3Jfc2VsZiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioby5lbGVtZW50U2VsZWN0b3IpO1xuICAgIC8vIGlmIChfZG9jdW1lbnQgJiYgZWxlX3NlbGVjdG9yX3NlbGYgPT09IF9kb2N1bWVudCkge1xuICAgIC8vICAgZWxlbWVudHMucHVzaChfZG9jdW1lbnQpO1xuICAgIC8vIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFncyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKG8udGFnKTtcbiAgICB2YXIgYXR0cnMgPSBvLmZpbHRlci5zcGxpdCgnPScpO1xuICAgIHZhciBhdHRyX2tleSA9IGF0dHJzLmxlbmd0aCA+IDAgPyBhdHRyc1swXS50cmltKCkgOiAnJztcbiAgICB2YXIgYXR0cl92YWx1ZSA9IGF0dHJzLmxlbmd0aCA+IDEgPyBhdHRyc1sxXS50cmltKCkgOiAnJztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGFncy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHRtcF90YWcgPSB0YWdzW2ldO1xuICAgICAgdmFyIHRtcF92YWx1ZSA9IHRtcF90YWcuZ2V0QXR0cmlidXRlKGF0dHJfa2V5KTtcbiAgICAgIHZhciBoYXNLZXkgPSB0bXBfdGFnLmhhc0F0dHJpYnV0ZShhdHRyX2tleSk7XG4gICAgICBpZiAoaGFzS2V5ICYmIChhdHRyX3ZhbHVlID8gYXR0cl92YWx1ZSA9PT0gdG1wX3ZhbHVlIDogdHJ1ZSkpIHtcbiAgICAgICAgZWxlbWVudHMucHVzaCh0bXBfdGFnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGVsZW1lbnRzO1xufTtcblxudmFyIGlzRGVidWcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC9hcGx1c0RlYnVnPXRydWUvLnRlc3QobG9jYXRpb24uc2VhcmNoKTtcbn07XG52YXIgSVNfREVCVUcgPSBpc0RlYnVnKCk7XG5cbmV4cG9ydHMuSVNfREVCVUcgPSBJU19ERUJVRztcblxuLyoqXG4gKiDor7vlj5booqvmm53lhYkv54K55Ye75YWD57Sg5LiK55qE54m55a6a5bGe5oCn77yM6L+Z5Lqb54m55a6a5bGe5oCn5piv6YCa6L+H5pud5YWJ5Z+L54K55LqL5YWI5Z+L6L+b5Y6755qE77yM5aaC6L+Z5Liq5L6L5a2Q6YeM55qEcHJvcHPvvJpcbiAqIDxtZXRhIG5hbWU9XCJhcGx1cy1hdXRvLWV4cFwiIGNvbnRlbnQ9J1t7XCJsb2drZXlcIjpcIi9hYmMxXCIsXCJ0YWdcIjpcImFcIixcImZpbHRlclwiOlwiZGF0YS1zY21cIixcInByb3BzXCI6W1wiY2F0ZVwiLCBcIm5hbWVcIl19XSc+XG4gKiA8bWV0YSBuYW1lPVwiYXBsdXMtYXV0by1jbGtcIiBjb250ZW50PSdbe1wibG9na2V5XCI6XCIvYWJjMVwiLFwidGFnXCI6XCJhXCIsXCJmaWx0ZXJcIjpcImRhdGEtc2NtXCIsXCJwcm9wc1wiOltcImNhdGVcIiwgXCJuYW1lXCJdfV0nPlxuICog6L+Z5Liq5pa55rOV5Lya6K+75Y+WZWxlbWVudOS4iueahG5hbWXlsZ7mgKflkoxjYXRl5bGe5oCn55qE5YC8XG4gKiBAcmV0dXJuIHtPYmplY3R9IG9ialxuICovXG5leHBvcnRzLmZpbGxQcm9wc0RhdGEgPSBmdW5jdGlvbiAoZXhwQ29uZmlnLCBlbGVtZW50LCBvYmopIHtcbiAgaWYgKCFvYmopIHtcbiAgICBvYmogPSB7fTtcbiAgfVxuICB0cnkge1xuICAgIHZhciBfZXhwX3Byb3BzID0gZXhwQ29uZmlnLnByb3BzIHx8IFtdO1xuICAgIGlmIChfZXhwX3Byb3BzICYmIGlzQXJyYXkoX2V4cF9wcm9wcykgJiYgX2V4cF9wcm9wcy5sZW5ndGggPiAwKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IF9leHBfcHJvcHMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgaWYgKGVsZW1lbnQgJiYgZWxlbWVudC5nZXRBdHRyaWJ1dGUpIHtcbiAgICAgICAgICB2YXIga2V5ID0gX2V4cF9wcm9wc1trXTtcbiAgICAgICAgICB2YXIgX3ZhbCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKGtleSk7XG4gICAgICAgICAgaWYgKHR5cGVvZiBfdmFsICE9PSB1bmRlZmluZWQgJiYgX3ZhbCAhPT0gbnVsbCAmJiBfdmFsICE9PSAnJykge1xuICAgICAgICAgICAgb2JqW2tleV0gPSBlbmNvZGVVUklDb21wb25lbnQoX3ZhbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgdXRpbExvZ2dlci5sb2dnZXIoe1xuICAgICAgbXNnOiBlICYmIGUubWVzc2FnZVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBvYmo7XG59O1xuXG4vKipcbiAqIOivu+WPluiiq+abneWFiS/ngrnlh7vlhYPntKDkuIrnmoRmaWx0ZXLlsZ7mgKfvvIzlpoLov5nkuKrkvovlrZDvvJpcbiAqIDxtZXRhIG5hbWU9XCJhcGx1cy1hdXRvLWV4cFwiIGNvbnRlbnQ9J1t7XCJsb2drZXlcIjpcIi9hYmMxXCIsXCJ0YWdcIjpcImFcIixcImZpbHRlclwiOlwiZGF0YS1zY21cIixcInByb3BzXCI6W1wiY2F0ZVwiLCBcIm5hbWVcIl19XSc+XG4gKiA8bWV0YSBuYW1lPVwiYXBsdXMtYXV0by1jbGtcIiBjb250ZW50PSdbe1wibG9na2V5XCI6XCIvYWJjMVwiLFwidGFnXCI6XCJhXCIsXCJmaWx0ZXJcIjpcImRhdGEtc2NtXCIsXCJwcm9wc1wiOltcImNhdGVcIiwgXCJuYW1lXCJdfV0nPlxuICog6L+Z5Liq5pa55rOV5Lya6K+75Y+WZWxlbWVudOS4iueahGRhdGEtc2Nt5bGe5oCn55qE5YC8XG4gKiBAcmV0dXJuIHtPYmplY3R9IG9ialxuICovXG5leHBvcnRzLmZpbGxGaWx0ZXJEYXRhID0gZnVuY3Rpb24gKGV4cENvbmZpZywgZWxlbWVudCwgb2JqKSB7XG4gIGlmICghb2JqKSB7XG4gICAgb2JqID0ge307XG4gIH1cbiAgdHJ5IHtcbiAgICB2YXIgZmlsdGVyID0gZXhwQ29uZmlnLmZpbHRlciB8fCAnJztcbiAgICB2YXIgdG1wcyA9IGZpbHRlci5zcGxpdCgnPScpO1xuXG4gICAgaWYgKGlzQXJyYXkodG1wcykgJiYgdG1wc1sxXSkge1xuICAgICAgb2JqW3RtcHNbMF1dID0gdG1wc1sxXTtcbiAgICB9IGVsc2UgaWYgKHRtcHNbMF0gJiYgZWxlbWVudCAmJiBlbGVtZW50LmdldEF0dHJpYnV0ZSkge1xuICAgICAgdmFyIF92YWwgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSh0bXBzWzBdKSB8fCAnJztcbiAgICAgIGlmICh0eXBlb2YgX3ZhbCAhPT0gdW5kZWZpbmVkICYmIF92YWwgIT09IG51bGwgJiYgX3ZhbCAhPT0gJycpIHtcbiAgICAgICAgb2JqW3RtcHNbMF1dID0gX3ZhbDtcbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB1dGlsTG9nZ2VyLmxvZ2dlcih7XG4gICAgICBtc2c6IGUgJiYgZS5tZXNzYWdlXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn07XG5cbnZhciBpc01ldGhvZCA9IGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgcmV0dXJuICEhL15QT1NUfEdFVCQvaS50ZXN0KG1ldGhvZCk7XG59O1xuZXhwb3J0cy5pc01ldGhvZCA9IGlzTWV0aG9kO1xuXG52YXIgaXNQa2dTaXplID0gZnVuY3Rpb24gKHBrZ1NpemUpIHtcbiAgdmFyIGlzX3BrZ19zaXplID0gISEvXlxcZCskLy50ZXN0KHBrZ1NpemUpO1xuICBpZiAoaXNfcGtnX3NpemUgJiYgcGFyc2VJbnQocGtnU2l6ZSkgPiAwKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcbmV4cG9ydHMuaXNQa2dTaXplID0gaXNQa2dTaXplO1xuXG4vKipcbiAqIGFkZGVkIGJ5IEBSaWNoYXJkfOiwi+WjqyBpbiAyMDE3LTExLTI4IOWinuWKoOaXpeW/l+aJk+WMheadoeaVsFwicGtnU2l6ZVwiLCDml6Xlv5flj5HpgIHmlrnlvI9cIm1ldGhvZFwi5Lik5Liq6YWN572u6aG5XG4gKiBAcGFyYW1zIGV4cENvbmZpZyB7T2JqZWN0fVxuICogICAgZWc6IHtcbiAqICAgICAgIFwibG9na2V5XCI6XCIvYWJjMVwiLFwidGFnXCI6XCJhXCIsXCJmaWx0ZXJcIjpcImRhdGEtc2NtXCIsXCJwcm9wc1wiOltcIm5hbWVcIixcImFnZVwiXSxcInBrZ1NpemVcIjo5LFwibWV0aG9kXCI6XCJHRVRcIlxuICogICAgIH1cbiAqIEByZXR1cm4ge09iamVjdH0ge21ldGhvZDogJ0dFVC9QT1NUJywgcGtnU2l6ZTogbnVtYmVyfVxuICovXG5leHBvcnRzLmZpbHRlckV4cENvbmZpZ1JlcXVlc3RDZmcgPSBmdW5jdGlvbiAoZXhwQ29uZmlnKSB7XG4gIHZhciBjZmcgPSBjb25maWcuZ2V0RGVmYXVsdFJlcXVlc3RDZmcoKSB8fCB7fTtcbiAgdHJ5IHtcbiAgICB2YXIgb2JqID0gZXhwQ29uZmlnIHx8IHt9O1xuICAgIGlmIChpc01ldGhvZChvYmoubWV0aG9kKSkge1xuICAgICAgY2ZnLm1ldGhvZCA9IG9iai5tZXRob2Q7XG4gICAgfVxuICAgIGlmIChpc1BrZ1NpemUob2JqLnBrZ1NpemUpKSB7XG4gICAgICBjZmcucGtnU2l6ZSA9IHBhcnNlSW50KG9iai5wa2dTaXplKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB1dGlsTG9nZ2VyLmxvZ2dlcih7XG4gICAgICBtc2c6IGUgJiYgZS5tZXNzYWdlXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGNmZztcbn07XG5cbnZhciBzdHJpbmdUb09iamVjdCA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgdmFyIHBhcmFtc0FyciA9IHBhcmFtcy5zcGxpdCgnJicpO1xuICB2YXIgb2JqID0ge307XG4gIGlmIChwYXJhbXNBcnIubGVuZ3RoID4gMCkge1xuICAgIGVhY2gocGFyYW1zQXJyLCBmdW5jdGlvbiAodikge1xuICAgICAgdmFyIHRtcCA9IHYuc3BsaXQoJz0nKTtcbiAgICAgIGlmICh0bXAubGVuZ3RoID09PSAyKSB7XG4gICAgICAgIG9ialt0bXBbMF1dID0gdXRpbEVuY29kZS50cnlUb0VuY29kZVVSSUNvbXBvbmVudCh0bXBbMV0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBvYmo7XG59O1xuXG5leHBvcnRzLmF1dG9Vc2VyRm5IYW5kbGVyID0gZnVuY3Rpb24gKGF1dG9Vc2VyRm4sIGVsLCBlbGVtZW50U2VsZWN0b3IsIGUpe1xuICB2YXIgcnMgPSB7XG4gICAgdXNlcmRhdGE6IHt9LFxuICAgIHNwbTogJycsXG4gICAgc2NtOiAnJ1xuICB9O1xuICB0cnkge1xuICAgIHZhciB1c2VyUGFyYW1zID0gYXV0b1VzZXJGbihlbCwgZWxlbWVudFNlbGVjdG9yLCBlKTtcbiAgICBpZiAodXNlclBhcmFtcykge1xuICAgICAgaWYgKHR5cGVvZiB1c2VyUGFyYW1zID09PSAnc3RyaW5nJykge1xuICAgICAgICAvLyByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHVzZXJQYXJhbXMpO1xuICAgICAgICBycy51c2VyZGF0YSA9IHN0cmluZ1RvT2JqZWN0KHVzZXJQYXJhbXMpOyAvLyDlrZfnrKbkuLLkvKDpgJLkuI3mlK/mjIHms6jlhaVzcG3jgIFzY21cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHVzZXJQYXJhbXMgPT09ICdvYmplY3QnICYmIHR5cGVvZiB1c2VyUGFyYW1zLnVzZXJkYXRhID09PSAnb2JqZWN0Jykge1xuICAgICAgICAvLyBycy51c2VyZGF0YSA9IHR5cGVvZiB1c2VyUGFyYW1zLnVzZXJkYXRhID09PSAnb2JqZWN0JyA/IHVzZXJQYXJhbXMudXNlcmRhdGEgOiAge307XG4gICAgICAgIGVhY2hNYXAodXNlclBhcmFtcy51c2VyZGF0YSwgZnVuY3Rpb24gKGssIHYpIHtcbiAgICAgICAgICBycy51c2VyZGF0YVtrXSA9IHV0aWxFbmNvZGUudHJ5VG9FbmNvZGVVUklDb21wb25lbnQodik7XG4gICAgICAgIH0pO1xuICAgICAgICBycy5zcG0gPSB1c2VyUGFyYW1zLnNwbTtcbiAgICAgICAgcnMuc2NtID0gdXNlclBhcmFtcy5zY207XG4gICAgICB9XG4gICAgfVxuICB9IGNhdGNoKGUpIHtcbiAgICBjb25zb2xlLmxvZyhlKTtcbiAgfVxuICByZXR1cm4gcnM7XG59O1xuXG52YXIgZ2V0RWxlQXR0cmlidXRlcyA9IGZ1bmN0aW9uKGVsZSwgY29uZmlnKSB7XG4gIHZhciBhdHRyaWJ1dGVzID0gJyc7XG4gIGlmIChlbGUgJiYgY29uZmlnKSB7XG4gICAgdmFyIGF0dHJfdmFsdWVzID0gW2VsZS5nZXRBdHRyaWJ1dGUoY29uZmlnLmZpbHRlcildO1xuICAgIHZhciBwcm9wcyA9IGNvbmZpZy5wcm9wcyB8fCBbXTtcbiAgICBpZiAocHJvcHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYXR0cl92YWx1ZXMucHVzaChlbGUuZ2V0QXR0cmlidXRlKHByb3BzW2ldKSk7XG4gICAgICB9XG4gICAgfVxuICAgIGF0dHJpYnV0ZXMgPSBhdHRyX3ZhbHVlcy5qb2luKCdfJyk7XG4gIH1cbiAgcmV0dXJuIGF0dHJpYnV0ZXM7XG59O1xuXG4vKipcbiAqIEByZXR1cm4ge09iamVjdH0gc3BtIHtcbiAqICAgYTogYWFhLFxuICogICBiOiBiYmIsXG4gKiAgIGM6IGNjYyxcbiAqICAgZDogZGRkLFxuICogICBlOiBwdmlkLFxuICogfVxuICovXG52YXIgZ2V0U3BtT2JqID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgLy8gY29uc29sZS50aW1lKCdnZXRTcG1PYmonKTtcbiAgdmFyIHNwbUFuY2hvcklkID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3BtLWFuY2hvci1pZCcpO1xuICBpZiAoc3BtQW5jaG9ySWQpIHtcbiAgICB2YXIgYW5jaG9yX2lkID0gc3BtQW5jaG9ySWQuc3BsaXQoJy4nKTtcbiAgICByZXR1cm4ge1xuICAgICAgYTogYW5jaG9yX2lkWzBdLFxuICAgICAgYjogYW5jaG9yX2lkWzFdLFxuICAgICAgYzogYW5jaG9yX2lkWzJdLFxuICAgICAgZDogYW5jaG9yX2lkWzNdLFxuICAgICAgZTogYW5jaG9yX2lkWzRdLFxuICAgIH07XG4gIH1cbiAgLy8gY29uc29sZS50aW1lRW5kKCdnZXRTcG1PYmonKTtcbiAgcmV0dXJuO1xufTtcbmV4cG9ydHMuZ2V0U3BtT2JqID0gZ2V0U3BtT2JqO1xuXG4vKipcbiAqIEBwYXJhbXMge09iamVjdH0gY29uZmlnIDoge1xuICogICBjc3NTZWxlY3RvcjogXCJbZGF0YS10cmFja2VyPVwibHpkbW9kLWx6ZC1hY3QtcHJvZHVjdC1zbG90M1wiXVwiXG4gKiAgIGVsZW1lbnRTZWxlY3RvcjogXCJbZGF0YS10cmFja2VyPVwibHpkbW9kLWx6ZC1hY3QtcHJvZHVjdC1zbG90M1wiXVwiXG4gKiAgIGxvZ2tleTogXCIvemFjLnRlc3QucHJvZHVjdDFcIlxuICogICBzb3VyY2U6IFwiYXBsdXNfd2VidnRcIiAgLy8g6KGo56S65p2l6Ieq5Y+v6KeG5YyW5Z+L54K5XG4gKiB9XG4gKiBAcGFyYW1zIHtPYmplY3R9IG9wdGlvbnMgOiB7XG4gKiAgICBpZ25vcmVfYXR0cjogdHJ1ZSxcbiAqICAgIGluZGV4OiBpLFxuICogICAgZWxlOiBlbGVcbiAqICB9XG4gKi9cbmV4cG9ydHMuZ2V0RWxlbWVudEhhc2ggPSBmdW5jdGlvbiAoY29uZmlnLCBvcHRpb25zKSB7XG4gIHZhciBzcG0gPSB7fTtcbiAgaWYgKGNvbmZpZy5zb3VyY2UgIT09ICdhcGx1c193ZWJ2dCcpIHtcbiAgICBzcG0gPSBnZXRTcG1PYmoob3B0aW9ucy5lbGUpIHx8ICh3aW5kb3cuZ19TUE0gID8gd2luZG93LmdfU1BNLmdldFBhcmFtKG9wdGlvbnMuZWxlKSA6IHt9KTsgLy8gVE9ETyDmraTlpITmgKfog73mjZ/ogJfovoPlpKdcbiAgfVxuXG4gIHZhciBoYXNoX3ZhbHVlX2luZGV4cyA9ICcnO1xuICAvLyBzcG3miJZ4cGF0aFxuICB2YXIgRUlOREVYID0gJ3gnICsgb3B0aW9ucy5pbmRleDtcbiAgaWYgKHNwbS5hICYmIHNwbS5iICYmIHNwbS5jICYmIHNwbS5kKSB7XG4gICAgdmFyIFNQTUQgPSAvXmkvLnRlc3Qoc3BtLmQpID8gRUlOREVYIDogc3BtLmQ7XG4gICAgaGFzaF92YWx1ZV9pbmRleHMgPSBzcG0uYSArICdfJyArIHNwbS5iICsgJ18nICsgc3BtLmMgKyAnXycgKyBTUE1EO1xuICAgIGlmIChzcG0uZSkge1xuICAgICAgaGFzaF92YWx1ZV9pbmRleHMgKz0gJ18nICsgc3BtLmU7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFRPRE8g5aaC5p6ceHBhdGjmsqHmnInmgKfog73pl67popjvvIznlKh4cGF0aOS7o+abv+WmguS4i+i/meauteS7o+eggSBA6LCL5aOrIGluIDIwMTgtMTEtMTlcbiAgICBoYXNoX3ZhbHVlX2luZGV4cyA9IEVJTkRFWDtcbiAgICBpZiAoYXBsdXMucHZpZCkge1xuICAgICAgaGFzaF92YWx1ZV9pbmRleHMgKz0gYXBsdXMucHZpZDtcbiAgICB9XG4gIH1cbiAgLy8g6KGl5YWFZWxlbWVudFNlbGVjdG9y44CB5bGe5oCn5Y+Y5YyWXG4gIGlmICghb3B0aW9ucy5pZ25vcmVfYXR0cikge1xuICAgIGhhc2hfdmFsdWVfaW5kZXhzICs9IGNvbmZpZy5sb2drZXkgKyAnXyc7XG4gICAgaGFzaF92YWx1ZV9pbmRleHMgKz0gY29uZmlnLmVsZW1lbnRTZWxlY3RvciArICdfJztcbiAgICBoYXNoX3ZhbHVlX2luZGV4cyArPSBnZXRFbGVBdHRyaWJ1dGVzKG9wdGlvbnMuZWxlLCBjb25maWcpOyAgXG4gIH1cbiAgdmFyIF90bXAgPSBFSU5ERVggKyAnXycgKyB1dGlsSGFzaC5oYXNoKGhhc2hfdmFsdWVfaW5kZXhzKTtcbiAgcmV0dXJuIF90bXA7XG59O1xuLy8gY29weSBmcm9tIHV0aWxBYy5qc1xuXG4vLyDov4fmu6TkuI3mg7PkuIrkvKDnmoTlsZ7mgKdcbmV4cG9ydHMuZmlsdGVyVW5sb2FkQXR0ciA9IGZ1bmN0aW9uKHN0cikge1xuICBpZiAoc3RyKSB7XG4gICAgc3RyID0gc3RyLnJlcGxhY2UoLyhocmVmfHN0eWxlfGRhdGEtc3BtLWFuY2hvci1pZCk9W1xcJ3xcXFwiXVtcXHd8XFxXfFxcLl0rW1xcJ3xcXFwiXS8sICcnKTtcbiAgICBzdHIgPSBzdHIucmVwbGFjZSgvXFxzXFw+L2csICc+Jyk7XG4gICAgc3RyID0gc3RyLnJlcGxhY2UobmV3IFJlZ0V4cChjb25maWcuREFUQV9BUExVU19BRV9LRVkgKyAnPVtcXFxcXFwnfFxcXFxcXFwiXVxcXFxcXHcrW1xcXFxcXCd8XFxcXFxcXCJdJyksICcnKTtcbiAgICBzdHIgPSBzdHIucmVwbGFjZShuZXcgUmVnRXhwKGNvbmZpZy5EQVRBX0FQTFVTX0FDX0tFWSArICc9W1xcXFxcXCd8XFxcXFxcXCJdXFxcXFxcdytbXFxcXFxcJ3xcXFxcXFxcIl0nKSwgJycpO1xuICB9XG4gIHJldHVybiBzdHI7XG59O1xuXG4vKipcbiAqIOabtOaWsGFwbHVzLl9hY0hhc2hNYXBcbiAqL1xudmFyIHVwZGF0ZU1hcFZhbHVlID0gZnVuY3Rpb24odG1wSGFzaHMsIG9iaikge1xuICB2YXIgdXBGbGFnO1xuICB2YXIgaSA9IDA7XG4gIHZhciBsZW4gPSB0bXBIYXNocy5sZW5ndGg7XG4gIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgdmFyIHRtcE9iaiA9IHRtcEhhc2hzW2ldIHx8IHt9O1xuICAgIGlmICh0bXBPYmouaGFzaF92YWx1ZSA9PT0gb2JqLmhhc2hfdmFsdWUpIHtcbiAgICAgIHRtcEhhc2hzW2ldID0gb2JqO1xuICAgICAgdXBGbGFnID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0bXBIYXNocztcbiAgICB9XG4gICAgaSsrO1xuICB9XG4gIC8vIGZvcih2YXIgaSA9IDA7IGkgPCB0bXBIYXNocy5sZW5ndGg7IGkrKykge1xuICAvLyB9XG4gIGlmICghdXBGbGFnKSB7XG4gICAgdG1wSGFzaHMucHVzaChvYmopO1xuICB9XG4gIHJldHVybiB0bXBIYXNocztcbn07XG5cbmZ1bmN0aW9uIHVwZGF0ZUhhc2hzIChsb2drZXksIG9wdHMsIGFwbHVzS2V5KSB7XG4gIHZhciBoYXNoX3ZhbHVlID0gb3B0cy5oYXNoX3ZhbHVlO1xuICB2YXIgR00gPSB1dGlsR29sZGxvZy5nZXRHb2xkbG9nVmFsKGFwbHVzS2V5KSB8fCB7fTtcbiAgaWYgKCFHTS5oYXNoX3ZhbHVlKSB7XG4gICAgR00uaGFzaF92YWx1ZSA9IHt9O1xuICB9XG4gIGlmICghR00uaGFzaF92YWx1ZVtsb2drZXldKSB7XG4gICAgR00uaGFzaF92YWx1ZVtsb2drZXldID0gd2luLk1hcCA/IG5ldyB3aW4uTWFwKCkgOiB7fTtcbiAgfVxuICBpZiAod2luLk1hcCkge1xuICAgIHZhciB0bXBWYWx1ZSA9IEdNLmhhc2hfdmFsdWVbbG9na2V5XS5nZXQoaGFzaF92YWx1ZSk7XG4gICAgaWYgKHRtcFZhbHVlKSB7XG4gICAgICArK3RtcFZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0bXBWYWx1ZSA9IDE7XG4gICAgfVxuICAgIEdNLmhhc2hfdmFsdWVbbG9na2V5XS5zZXQoaGFzaF92YWx1ZSwgdG1wVmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIGlmIChHTS5oYXNoX3ZhbHVlW2xvZ2tleV1baGFzaF92YWx1ZV0pIHtcbiAgICAgICsrR00uaGFzaF92YWx1ZVtsb2drZXldW2hhc2hfdmFsdWVdO1xuICAgIH0gZWxzZSB7XG4gICAgICBHTS5oYXNoX3ZhbHVlW2xvZ2tleV1baGFzaF92YWx1ZV0gPSAxO1xuICAgIH1cbiAgfVxuICB1dGlsR29sZGxvZy5zZXRHb2xkbG9nVmFsKGFwbHVzS2V5LCBHTSk7IFxufTtcblxuLyoqXG4gKiDmm7TmlrBcImFwbHVzLl9hY0hhc2hNYXBcIu+8jFwiYXBsdXMuX2FjSGFzaE1hcFwi5qC85byP5aaC5LiLXG4gKiB7XG4gKiAgICcvYS5iLmMxJzogWyczNTU4NWI0YycsICczNTU4NWI0ZCcsICczNTU4NWI0ZSddLFxuICogICAnL2EuYi5jMic6IFsnMzU1ODViNWMnLCAnMzU1ODViNWQnLCAnMzU1ODViNWUnXSxcbiAqICAgJy9hLmIuYzMnOiBbJzM1NTg1YjVjJywgJzM1NTg1YjVkJywgJzM1NTg1YjVlJ10sXG4gKiB9XG4gKiBAcGFyYW0ge1N0cmluZ30gbG9na2V5ID0+ICcvYS5iLmMxJ1xuICogQHBhcmFtIHtPYmplY3R9IG9iajoge1xuICAgICAgIGhhc2hfdmFsdWUgPT4gJzM1NTg1YjRjJ1xuICAgICAgIGVsZTogeHh4XG4gICB9XG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZSA9PiBDTEVBUi9BREQvVVBEQVRFIGRlZmF1bHQgdmFsdWUgaXMgQUREXG4gKi9cbnZhciB1cGRhdGVIYXNoTWFwID0gZnVuY3Rpb24obG9na2V5LCBvYmosIHR5cGUsIGFwbHVzS2V5KSB7XG4gIGlmKCF0eXBlKSB7XG4gICAgdHlwZSA9ICdBREQnO1xuICB9XG4gIGlmICghbG9na2V5IHx8IHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBHTSA9IHV0aWxHb2xkbG9nLmdldEdvbGRsb2dWYWwoYXBsdXNLZXkpIHx8IHt9O1xuICB2YXIgX2FjSGFzaE1hcCA9IEdNLl9hY0hhc2hNYXAgfHwge307XG4gIHZhciB0bXBIYXNocyA9IF9hY0hhc2hNYXBbbG9na2V5XSB8fCBbXTtcblxuICB2YXIgY2hlY2tWYWx1ZUluZGV4ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBsZW4gPSB0bXBIYXNocy5sZW5ndGg7XG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIHZhciB0bXBPYmogPSB0bXBIYXNoc1tpXSB8fCB7fTtcbiAgICAgIGlmICh0bXBPYmouaGFzaF92YWx1ZSA9PT0gb2JqLmhhc2hfdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGk7XG4gICAgICB9XG4gICAgICBpKys7XG4gICAgfVxuICAgIC8vIGZvcih2YXIgaSA9IDA7IGkgPCB0bXBIYXNocy5sZW5ndGg7IGkrKykge1xuICAgIC8vIH1cbiAgICByZXR1cm4gLTE7XG4gIH07XG5cbiAgdmFyIGluZGV4ID0gY2hlY2tWYWx1ZUluZGV4KCk7XG5cbiAgaWYgKHR5cGUgPT09ICdBREQnICYmIGluZGV4ID09PSAtMSkge1xuICAgIHRtcEhhc2hzLnB1c2gob2JqKTtcbiAgICB1cGRhdGVIYXNocyhsb2drZXksIG9iaiwgYXBsdXNLZXkpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdDTEVBUicgJiYgaW5kZXggPiAtMSkge1xuICAgIHRtcEhhc2hzLnNwbGljZShpbmRleCwgMSk7XG4gICAgLy8gdG1wSGFzaHNbaW5kZXhdID0gbnVsbDtcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnVVBEQVRFJykge1xuICAgIHRtcEhhc2hzID0gdXBkYXRlTWFwVmFsdWUodG1wSGFzaHMsIG9iaik7XG4gIH1cblxuICBfYWNIYXNoTWFwW2xvZ2tleV0gPSB0bXBIYXNocztcbiAgR00uX2FjSGFzaE1hcCA9IF9hY0hhc2hNYXA7XG4gIHV0aWxHb2xkbG9nLnNldEdvbGRsb2dWYWwoYXBsdXNLZXksIEdNKTtcbn07XG5cblxuZXhwb3J0cy51cGRhdGVFeHBIYXNoTWFwID0gZnVuY3Rpb24obG9na2V5LCBvYmosIHR5cGUpIHtcbiAgdXBkYXRlSGFzaE1hcChsb2drZXksIG9iaiwgdHlwZSwgJ19hcGx1c19hdXRvX2V4cCcpO1xufTtcbmV4cG9ydHMudXBkYXRlQ2xrSGFzaE1hcCA9IGZ1bmN0aW9uKGxvZ2tleSwgb2JqLCB0eXBlKSB7XG4gIHVwZGF0ZUhhc2hNYXAobG9na2V5LCBvYmosIHR5cGUsICdfYXBsdXNfYWMnKTtcbn07XG5cbi8vIGV4cG9ydHMuZGVib3VuY2UgPSBmdW5jdGlvbiAoZnVuYywgd2FpdCwgaW1tZWRpYXRlKSB7XG4vLyAgIHZhciB0aW1lb3V0O1xuLy8gICByZXR1cm4gZnVuY3Rpb24oKSB7XG4vLyAgICAgdHJ5IHtcbi8vICAgICAgIHZhciBjb250ZXh0ID0gdGhpcywgYXJncyA9IGFyZ3VtZW50cztcbi8vICAgICAgIHZhciBsYXRlciA9IGZ1bmN0aW9uKCkge1xuLy8gICAgICAgICB0aW1lb3V0ID0gbnVsbDtcbi8vICAgICAgICAgaWYgKCFpbW1lZGlhdGUpIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4vLyAgICAgICB9O1xuLy8gICAgICAgdmFyIGNhbGxOb3cgPSBpbW1lZGlhdGUgJiYgIXRpbWVvdXQ7XG4vLyAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4vLyAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCk7XG4vLyAgICAgICBpZiAoY2FsbE5vdykgZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbi8vICAgICB9IGNhdGNoIChlKSB7XG4vLyAgICAgfVxuLy8gICB9O1xuLy8gfTtcblxudmFyIGdldE5vdyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xufTtcblxuLy8gUmV0dXJucyBhIGZ1bmN0aW9uLCB0aGF0LCB3aGVuIGludm9rZWQsIHdpbGwgb25seSBiZSB0cmlnZ2VyZWQgYXQgbW9zdCBvbmNlXG4vLyBkdXJpbmcgYSBnaXZlbiB3aW5kb3cgb2YgdGltZS4gTm9ybWFsbHksIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gd2lsbCBydW5cbi8vIGFzIG11Y2ggYXMgaXQgY2FuLCB3aXRob3V0IGV2ZXIgZ29pbmcgbW9yZSB0aGFuIG9uY2UgcGVyIGB3YWl0YCBkdXJhdGlvbjtcbi8vIGJ1dCBpZiB5b3UnZCBsaWtlIHRvIGRpc2FibGUgdGhlIGV4ZWN1dGlvbiBvbiB0aGUgbGVhZGluZyBlZGdlLCBwYXNzXG4vLyBge2xlYWRpbmc6IGZhbHNlfWAuIFRvIGRpc2FibGUgZXhlY3V0aW9uIG9uIHRoZSB0cmFpbGluZyBlZGdlLCBkaXR0by5cbmV4cG9ydHMudGhyb3R0bGUgPSBmdW5jdGlvbihmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gIHZhciB0aW1lb3V0LCBjb250ZXh0LCBhcmdzLCByZXN1bHQ7XG4gIHZhciBwcmV2aW91cyA9IDA7XG4gIGlmICghb3B0aW9ucykgb3B0aW9ucyA9IHt9O1xuXG4gIHZhciBsYXRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHByZXZpb3VzID0gb3B0aW9ucy5sZWFkaW5nID09PSBmYWxzZSA/IDAgOiBnZXROb3coKTtcbiAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgIGlmICghdGltZW91dCkgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICB9O1xuXG4gIHZhciB0aHJvdHRsZWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbm93ID0gZ2V0Tm93KCk7XG4gICAgaWYgKCFwcmV2aW91cyAmJiBvcHRpb25zLmxlYWRpbmcgPT09IGZhbHNlKSBwcmV2aW91cyA9IG5vdztcbiAgICB2YXIgcmVtYWluaW5nID0gd2FpdCAtIChub3cgLSBwcmV2aW91cyk7XG4gICAgY29udGV4dCA9IHRoaXM7XG4gICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICBpZiAocmVtYWluaW5nIDw9IDAgfHwgcmVtYWluaW5nID4gd2FpdCkge1xuICAgICAgaWYgKHRpbWVvdXQpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHByZXZpb3VzID0gbm93O1xuICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgIGlmICghdGltZW91dCkgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICAgIH0gZWxzZSBpZiAoIXRpbWVvdXQgJiYgb3B0aW9ucy50cmFpbGluZyAhPT0gZmFsc2UpIHtcbiAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCByZW1haW5pbmcpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHRocm90dGxlZC5jYW5jZWwgPSBmdW5jdGlvbigpIHtcbiAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgcHJldmlvdXMgPSAwO1xuICAgIHRpbWVvdXQgPSBjb250ZXh0ID0gYXJncyA9IG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIHRocm90dGxlZDtcbn07XG5cblxuLyoqXG4gKiDpqozor4FoYXNoX3ZhbHVl5piv5ZCm5ZyoXCJhcGx1cy5fYWNIYXNoTWFwXCLkuK3vvIxcImFwbHVzLl9hY0hhc2hNYXBcIuagvOW8j+WmguS4i1xuICogQHBhcmFtIG9wdHMge1xuICogICBsb2drZXk6ICcvYXV0b2xvZy5haWd1YW5namllLmhvbWVfYmFubmVyX2FwcCcsXG4gKiAgIGhhc2hfdmFsdWU6ICc1ODE1NTViOCdcbiAqICAgYTMxMHBfNzQwMzM3MF9pc2hvcHBpbmdfaW5kZXhfaTBfMzFhNzY2ZjhYT3NocG9fKltkYXRhLXNwbT1pc2hvcHBpbmdfaW5kZXhdIC5pc2hvcHBpbmdfc2xpZGVfXG4gKiAgIGFwbHVzS2V5OiAnX2FwbHVzX2F1dG9fZXhwJyB8fCAnX2FwbHVzX2FjJ1xuICogfVxuICovXG5leHBvcnRzLmNoZWNrSXNJbkhhc2hNYXAgPSBmdW5jdGlvbiAob3B0cykge1xuICB2YXIgR00gPSB1dGlsR29sZGxvZy5nZXRHb2xkbG9nVmFsKG9wdHMuYXBsdXNLZXkpIHx8IHt9O1xuICB2YXIgX2hhc2hzID0gR00uaGFzaF92YWx1ZSB8fCB7fTtcbiAgdmFyIF9sb2drZXlIYXNocyA9IF9oYXNoc1tvcHRzLmxvZ2tleV0gfHwgKHdpbi5NYXAgPyBuZXcgd2luLk1hcCgpIDoge30pO1xuXG4gIHZhciByID0gX2xvZ2tleUhhc2hzICYmIF9sb2drZXlIYXNocy5nZXQgPyBfbG9na2V5SGFzaHMuZ2V0KG9wdHMuaGFzaF92YWx1ZSkgOiBfbG9na2V5SGFzaHNbb3B0cy5oYXNoX3ZhbHVlXTtcbiAgaWYgKHIgPiAxKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIF9hY0hhc2hNYXAgPSBHTS5fYWNIYXNoTWFwIHx8IHt9O1xuICB2YXIgdmFsdWVzID0gX2FjSGFzaE1hcFtvcHRzLmxvZ2tleV0gfHwgW107XG4gIHZhciBsZW4gPSB2YWx1ZXMubGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKHZhbHVlc1tpXS5oYXNoX3ZhbHVlID09PSBvcHRzLmhhc2hfdmFsdWUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG5cbi8vIOabneWFieaIkOWKn+aJk+S4quagh1xuZXhwb3J0cy5zZXRSZWNvcmRTdWNjZXNzID0gZnVuY3Rpb24oZWxlbWVudE9iaiwgYXBsdXNEb21BdHRyS2V5KSB7XG4gIHRyeSB7XG4gICAgdmFyIGVsZW1lbnQgPSBlbGVtZW50T2JqID8gZWxlbWVudE9iai5lbGVtZW50IDoge307XG4gICAgdmFyIGhhc2hfdmFsdWUgPSBlbGVtZW50T2JqLmhhc2hfdmFsdWUgfHwgJyc7XG4gICAgaWYgKGVsZW1lbnQgJiYgZWxlbWVudC5zZXRBdHRyaWJ1dGUpIHtcbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGFwbHVzRG9tQXR0cktleSwgaGFzaF92YWx1ZSk7XG4gICAgfVxuICB9IGNhdGNoKGUpIHt9XG59O1xuXG4vLyBleHBvcnRzLmVhY2hNYXAgPSBmdW5jdGlvbiAobWFwLCBjYWxsYmFjaykge1xuLy8gICBpZiAoT2JqZWN0ICYmIE9iamVjdC5rZXlzKSB7XG4vLyAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhtYXApO1xuLy8gICAgIHZhciBsZW4gPSBrZXlzLmxlbmd0aDtcbi8vICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4vLyAgICAgICB2YXIgazEgPSBrZXlzW2ldO1xuLy8gICAgICAgY2FsbGJhY2soazEsIG1hcFtrMV0pO1xuLy8gICAgIH1cbi8vICAgfSBlbHNlIHtcbi8vICAgICBmb3IgKHZhciBrIGluIG1hcCkge1xuLy8gICAgICAgY2FsbGJhY2soaywgbWFwW2tdKTtcbi8vICAgICB9XG4vLyAgIH1cbi8vIH07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9wbHVnaW5zX3dlYi9saWJfY29tbW9uL3V0aWxfYWNfYWUuanNcbi8vIG1vZHVsZSBpZCA9IDQwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogcHJvamVjdCAtIGZpbGVwYXRoXG4gKiBkZXNjcmlwdGlvblxuICpcbiAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cbiAqXG4gKiBBdXRob3JzOlxuICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuICovXG4ndXNlIHN0cmljdCc7XG5cbi8vIOagueaNruWvhumSpXPlr7nlrZfnrKbkuLJzdHLov5vooYzovazkuYlcbmV4cG9ydHMuaGFzaCA9IGZ1bmN0aW9uKHN0ciwgcykge1xuICB2YXIgZGVmX3YgPSAxMzE1NDIzOTExO1xuICB2YXIgaGFzaCA9IHMgfHwgZGVmX3YsIGksIGNoO1xuICBmb3IgKGkgPSBzdHIubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBjaCA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgIGhhc2ggXj0gKChoYXNoIDw8IDUpICsgY2ggKyAoaGFzaCA+PiAyKSk7XG4gIH1cbiAgdmFyIHJzID0gKGhhc2ggJiAweDdGRkZGRkZGKS50b1N0cmluZygxNik7XG4gIHJldHVybiBycztcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9saWJfdS91dGlscy91dGlsSGFzaC5qc1xuLy8gbW9kdWxlIGlkID0gNDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiDlj6/op4bljJbln4vngrkgLSB3YXRjaCBTaW5nbGUgUGFnZSBBcHBsaWNhdGlvbiBcbiAqIHdhdGNoIFNQQSdzIGhpc3Rvcnkgb3IgaGFzaCBjaGFuZ2UsIHRoZW4gYXV0byBzZW5kUFZcbiAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cbiAqXG4gKiBBdXRob3JzOlxuICogICBSaWNoYXJkfOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG4gKi9cbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy50cnlUb0VuY29kZVVSSUNvbXBvbmVudCA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgdmFyIHYgPSB2YWwgfHwgJyc7XG4gIGlmICh2YWwpIHtcbiAgICB0cnkge1xuICAgICAgdiA9IGVuY29kZVVSSUNvbXBvbmVudChkZWNvZGVVUklDb21wb25lbnQodmFsKSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgIH1cbiAgfVxuICByZXR1cm4gdjtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvbGliX3UvdXRpbHMvdXRpbEVuY29kZS5qc1xuLy8gbW9kdWxlIGlkID0gNDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBwcm9qZWN0IC0gZmlsZXBhdGhcbiAqIGRlc2NyaXB0aW9uXG4gKlxuICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuICpcbiAqIEF1dGhvcnM6XG4gKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxBcnJheSA9IHJlcXVpcmUoJ0B1dGlscy91dGlsQXJyYXknKTtcbnZhciB1dGlsTWV0YSA9IHJlcXVpcmUoJ0B1dGlscy91dGlsTWV0YScpO1xudmFyIHV0aWxMb2dnZXIgPSByZXF1aXJlKCdAdXRpbHMvdXRpbExvZ2dlcicpO1xuXG5leHBvcnRzLkRBVEFfQVBMVVNfQUVfS0VZID0gJ2RhdGEtYXBsdXMtYWUnO1xuZXhwb3J0cy5EQVRBX0FQTFVTX0FDX0tFWSA9ICdkYXRhLWFwbHVzLWNsayc7XG5cbi8vIOS4jeaUr+aMgW9ic2VydmVy55qE5oOF5Ya15LiL77yM6L2u6K+i6Ze06ZqU77yIbXMpXG5leHBvcnRzLkxPT1BfVElNRSA9IDEwMDA7XG5cbmV4cG9ydHMuZ2V0RGVmYXVsdFJlcXVlc3RDZmcgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7XG4gICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgcGtnU2l6ZTogMTBcbiAgfTtcbn07XG5cbmZ1bmN0aW9uIGdldE1ldGFWYWx1ZSAoa2V5KSB7XG4gIGlmIChhcGx1cyAmJiBhcGx1cy5nZXRNZXRhSW5mbykge1xuICAgIHJldHVybiBhcGx1cy5nZXRNZXRhSW5mbyhrZXkpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB1dGlsTWV0YS5nZXRNZXRhQ250KGtleSk7XG4gIH1cbn1cblxuLy8g6Ieq5Yqo5pud5YWJ5omT54K5IC0g5Yik5a6a5Y+v6KeG55qE5q+U5L6L546HXG52YXIgZ2V0QXV0b0V4cFZpZXdSYXRlID0gZnVuY3Rpb24oZGVmYXVsdF92YWx1ZSkge1xuICB2YXIgcmF0ZSA9IGRlZmF1bHRfdmFsdWU7XG4gIHRyeSB7XG4gICAgdmFyIHZpc2libGVfcmF0ZSA9IGdldE1ldGFWYWx1ZSgnYXBsdXMtYXV0by1leHAtdmlzaWJsZScpO1xuICAgIGlmICh2aXNpYmxlX3JhdGUpIHtcbiAgICAgIHJhdGUgPSBwYXJzZUZsb2F0KHZpc2libGVfcmF0ZSk7XG4gICAgfVxuICAgIGlmIChyYXRlIDw9IDApIHtcbiAgICAgIHJhdGUgPSBkZWZhdWx0X3ZhbHVlO1xuICAgIH1cbiAgfSBjYXRjaChlKSB7XG4gICAgcmF0ZSA9IGRlZmF1bHRfdmFsdWU7XG4gIH0gZmluYWxseSB7XG4gICAgcmV0dXJuIHJhdGU7XG4gIH1cbn07XG5leHBvcnRzLkFVVE9fQVRfVklFV19SQVRFID0gZ2V0QXV0b0V4cFZpZXdSYXRlKDAuMyk7XG5cbi8vIHZhciBFWFBfREVCT1VOQ0VfRFVSQVRJT04gPSAxMDA7IC8vIGRlYm91Y2UgZHVyYXRpb24gMTAwbXNcblxuLyoqXG4gKiDmnInmlYjmm53lhYnml7bplb/lupXnur8gLSDmr6vnp5LmlbAobXMpXG4gKiBAcGFyYW1zIHtOdW1iZXJ9IGRlZmF1bHRfdmFsdWUgaXMgMzAwbXNcbiAqIEByZXR1cm4ge051bWJlcn0gZHVyYXRpb25cbiAqL1xudmFyIGdldEF1dG9FeHBEdXJhdGlvbiA9IGZ1bmN0aW9uKGRlZmF1bHRfdmFsdWUpIHtcbiAgdmFyIGR1cmF0aW9uID0gZGVmYXVsdF92YWx1ZTtcbiAgdHJ5IHtcbiAgICB2YXIgdG1wX2R1cmF0aW9uID0gZ2V0TWV0YVZhbHVlKCdhcGx1cy1hdXRvLWV4cC1kdXJhdGlvbicpO1xuICAgIHZhciBkdXJhdGlvbl9uID0gcGFyc2VJbnQodG1wX2R1cmF0aW9uKTtcbiAgICBpZiAoKGR1cmF0aW9uX24gKyAnJykgIT09ICdOYU4nKSB7XG4gICAgICBkdXJhdGlvbiA9IGR1cmF0aW9uX247XG4gICAgfVxuICB9IGNhdGNoKGUpIHtcbiAgfSBmaW5hbGx5IHtcbiAgICByZXR1cm4gZHVyYXRpb247XG4gIH1cbn07XG5leHBvcnRzLkVYUF9EVVJBVElPTiA9IGdldEF1dG9FeHBEdXJhdGlvbigzMDApOyAvL+m7mOiupDMwMG1zXG5cbi8vIGRlYm91Y2UgZHVyYXRpb24gMTAwbXNcbi8vIGV4cG9ydHMuZ2V0RGVib3VuY2VEdXJhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbi8vICAgcmV0dXJuIEVYUF9ERUJPVU5DRV9EVVJBVElPTjtcbi8vIH07XG5cbi8qKlxuICog6I635Y+W6Ieq5Yqo5pud5YWJ6YWN572u6aG577yM5bm25bCGZmlsdGVy44CBdGFn5ZKMY3NzU2VsZWN0b3LlkIjlubbkuLplbGVtZW50U2VsZWN0b3JcbiAqIFRPRE8gSlNPTi5wYXJzZSDku4XmlK/mjIFJRTjlj4rku6XkuIrmtY/op4jlmaggPT4ganMgYXBpXG4gKiBAcGFyYW1zIGtleSB7U3RyaW5nfSAnYXBsdXMtYXV0by1leHAnLydhcGx1cy1hdXRvLWNsaydcbiAqIEByZXR1cm4ge0FycmF5fSBbe1xuICogICAgbG9na2V5OiAvYS5iLmMxLFxuICogICAgZWxlbWVudFNlbGVjdG9yOiAnZGl2W3NjbT0xMjM0XScsXG4gKiAgICB0YWc6IGRpdixcbiAqICAgIGZpbHRlcjogc2NtPTEyMzRcbiAqICAgIHBvc2l0aW9uU2VsZWN0b3I6IHRydWUvLnBhcmVudENsYXNzbmFtZSAvLyDnm7jlr7nlrprkvY3kuJrliqHln4vngrlcbiAqIH0sIHtcbiAqICAgIGxvZ2tleTogL2EuYi5jMixcbiAqICAgIGVsZW1lbnRTZWxlY3RvcjogJ3Bbc2NtPTIzNDVdLm9uZScsXG4gKiAgICB0YWc6IHAsXG4gKiAgICBmaWx0ZXI6IHNjbT0yMzQ1LFxuICogICAgY3NzU2VsZWN0b3I6IC5vbmVcbiAqIH0sIHtcbiAqICAgIGxvZ2tleTogL2EuYi5jMyxcbiAqICAgIGVsZW1lbnRTZWxlY3RvcjogJ3BbZGF0YS1zcG0tY2xpY2tdJyxcbiAqICAgIHRhZzogcCxcbiAqICAgIGZpbHRlcjogZGF0YS1zcG0tY2xpY2tcbiAqIH1dXG4gKi9cbnZhciBnZXRBdXRvQ29uZmlnID0gZnVuY3Rpb24oY29uZmlnS2V5LCBtZXRhT2JqKSB7XG4gIHZhciBjb25maWdzID0gW107XG4gIC8vIHZhciB0bXBfbG9na2V5cyA9IFtdO1xuICB2YXIgdG1wX3RhZ19maWx0ZXIgPSBbXTtcbiAgdmFyIGFwbHVzQXV0b0V4cDtcbiAgdHJ5IHtcbiAgICBhcGx1c0F1dG9FeHAgPSBtZXRhT2JqIHx8IGdldE1ldGFWYWx1ZShjb25maWdLZXkpO1xuICAgIHZhciB0ZW1wcyA9IFtdO1xuICAgIGlmIChhcGx1c0F1dG9FeHAgJiYgdHlwZW9mIGFwbHVzQXV0b0V4cCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRlbXBzID0gSlNPTi5wYXJzZShhcGx1c0F1dG9FeHApO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0ZW1wcyA9IEpTT04ucGFyc2UoYXBsdXNBdXRvRXhwLnJlcGxhY2UoLycvZywgJ1wiJykpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGFwbHVzQXV0b0V4cCA9PT0gJ29iamVjdCcgJiYgYXBsdXNBdXRvRXhwLmNvbnN0cnVjdG9yID09PSBBcnJheSkge1xuICAgICAgdGVtcHMgPSBhcGx1c0F1dG9FeHA7XG4gICAgfVxuICAgIGlmICh0ZW1wcyAmJiB0ZW1wcy5jb25zdHJ1Y3RvciA9PT0gQXJyYXkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGVtcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHRtcCA9IHRlbXBzW2ldIHx8IHt9O1xuICAgICAgICB2YXIgbG9na2V5ID0gdG1wLmxvZ2tleSB8fCAnJztcbiAgICAgICAgdmFyIHRhZyA9IHRtcC50YWcgPyB0bXAudGFnIDogJyc7XG4gICAgICAgIHZhciBmaWx0ZXIgPSB0bXAuZmlsdGVyO1xuICAgICAgICB2YXIgY3NzU2VsZWN0b3IgPSB0bXAuY3NzU2VsZWN0b3I7XG4gICAgICAgIHZhciB3aG9sZVNlbGVjdG9yID0gY3NzU2VsZWN0b3IgfHwgKHRhZyAmJiBmaWx0ZXIpO1xuICAgICAgICBpZiAoIWxvZ2tleSB8fCAhd2hvbGVTZWxlY3Rvcikge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbWV0YSAnICsgY29uZmlnS2V5ICsgJyBjb25maWcgZXJyb3IsICcgKyBKU09OLnN0cmluZ2lmeSh0bXApKTtcbiAgICAgICAgfVxuICAgICAgICAvLyAyMDE3LTExLTIzIOaJi+a3mOaOpeWFpeWSjGxhemFkYeS4muWKoemcgOaxgu+8jOWFgeiuuGxvZ2tleemHjeWkjVxuICAgICAgICAvLyBpZiAodXRpbEFycmF5LmluZGV4b2YodG1wX2xvZ2tleXMsIGxvZ2tleSkgPiAtMSkge1xuICAgICAgICAvLyAgIHRocm93IG5ldyBFcnJvcignbWV0YSAnICsgY29uZmlnS2V5ICsgJyBjb25maWcgZXJyb3IsIGxvZ2tleSAnICsgbG9na2V5ICsgJyByZXBlYXRlZCcpO1xuICAgICAgICAvLyB9XG4gICAgICAgIGZpbHRlciA9IHR5cGVvZiBmaWx0ZXIgPT09ICdzdHJpbmcnID8gZmlsdGVyLnNwbGl0KFwiPVwiKSA6IFtdO1xuICAgICAgICB2YXIgdGFnX2ZpbHRlciA9IHRhZztcbiAgICAgICAgaWYgKGZpbHRlci5sZW5ndGggPj0gMikge1xuICAgICAgICAgIHRhZ19maWx0ZXIgKz0gJ1snICsgZmlsdGVyLnNoaWZ0KCkgKyAnPVwiJyArIGRlY29kZVVSSUNvbXBvbmVudChmaWx0ZXIuam9pbignJykpICsgJ1wiXSc7XG4gICAgICAgIH0gZWxzZSBpZiAoZmlsdGVyLmxlbmd0aCA9PSAxICYmIGZpbHRlclswXSkge1xuICAgICAgICAgIHRhZ19maWx0ZXIgKz0gJ1snICsgZGVjb2RlVVJJQ29tcG9uZW50KGZpbHRlclswXSkgKyAnXSc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNzc1NlbGVjdG9yKSB7XG4gICAgICAgICAgdGFnX2ZpbHRlciArPSBjc3NTZWxlY3RvcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRtcC5lbGVtZW50U2VsZWN0b3IgPSB0YWdfZmlsdGVyO1xuICAgICAgICBpZiAodXRpbEFycmF5LmluZGV4b2YodG1wX3RhZ19maWx0ZXIsIHRhZ19maWx0ZXIpID4gLTEpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ21ldGEgJyArIGNvbmZpZ0tleSArICcgY29uZmlnIGVycm9yLCB0YWdfZmlsdGVyX2Nzc1NlbGVjdG9yICcgKyB0YWdfZmlsdGVyICsgJyByZXBlYXRlZCcpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHRtcF9sb2drZXlzLnB1c2gobG9na2V5KTtcbiAgICAgICAgdG1wX3RhZ19maWx0ZXIucHVzaCh0YWdfZmlsdGVyKTtcbiAgICAgICAgY29uZmlncy5wdXNoKHRtcCk7XG4gICAgICB9XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBUT0RPIOebkeaOp+i/meWdl+WGheWuuVxuICAgIHV0aWxMb2dnZXIubG9nZ2VyKHtcbiAgICAgIG1zZzogZXJyXG4gICAgfSk7XG4gIH0gZmluYWxseSB7XG4gICAgcmV0dXJuIGNvbmZpZ3M7XG4gIH1cbn07XG5cbi8qKlxuICog6I635Y+W5pud5YWJ6Ieq5Yqo6YeH6ZuG55qE6YWN572u6aG5XG4gKi9cbmV4cG9ydHMuZ2V0QXV0b0V4cENvbmZpZyA9IGZ1bmN0aW9uKG1ldGFPYmopIHtcbiAgcmV0dXJuIGdldEF1dG9Db25maWcoJ2FwbHVzLWF1dG8tZXhwJywgbWV0YU9iaikgfHwgW107XG59O1xuLyoqXG4gKiDojrflj5bmm53lhYnoh6rliqjph4fpm4bnmoTphY3nva7poblcbiAqL1xuZXhwb3J0cy5nZXRBdXRvRXhwVXNlckZuID0gZnVuY3Rpb24oKSB7XG4gIHZhciBhZUF1dG9Vc2VyRm4gPSBnZXRNZXRhVmFsdWUoJ2FwbHVzLWF1dG8tZXhwLXVzZXJmbicpO1xuICBpZiAoYWVBdXRvVXNlckZuKSB7XG4gICAgdmFyIGZuID0gd2luZG93W2FlQXV0b1VzZXJGbl0gfHwgYWVBdXRvVXNlckZuO1xuICAgIGlmICh0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBmbjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuXG4vLyA8bWV0YSBuYW1lPVwiYXBsdXMtYXV0by1leHAtd2F0Y2hkb21cIiBjb250ZW50PVwidGhyb3R0bGVcIiAvPlxuZXhwb3J0cy5pc1Rocm90dGxlV2F0Y2hEb20gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBycyA9IGZhbHNlO1xuICB0cnkge1xuICAgIHJzID0gZ2V0TWV0YVZhbHVlKCdhcGx1cy1hdXRvLWV4cC13YXRjaGRvbScpID09PSAndGhyb3R0bGUnO1xuICB9IGNhdGNoIChlKSB7XG4gIH1cbiAgcmV0dXJuIHJzO1xufTtcbi8qKlxuICog6I635Y+W54K55Ye76Ieq5Yqo6YeH6ZuG55qE6YWN572u6aG5XG4gKi9cbmV4cG9ydHMuZ2V0QXV0b0Nsa0NvbmZpZyA9IGZ1bmN0aW9uKG1ldGFPYmopIHtcbiAgcmV0dXJuIGdldEF1dG9Db25maWcoJ2FwbHVzLWF1dG8tY2xrJywgbWV0YU9iaikgfHwgW107XG59O1xuLyoqXG4gKiDojrflj5bngrnlh7voh6rliqjph4fpm4bnmoTphY3nva7poblcbiAqL1xuZXhwb3J0cy5nZXRBdXRvQ2xrVXNlckZuID0gZnVuY3Rpb24oKSB7XG4gIHZhciBhY0F1dG9Vc2VyRm4gPSBnZXRNZXRhVmFsdWUoJ2FwbHVzLWF1dG8tY2xrLXVzZXJmbicpO1xuICBpZiggYWNBdXRvVXNlckZuICl7XG4gICAgdmFyIGZuID0gd2luZG93W2FjQXV0b1VzZXJGbl0gfHwgYWNBdXRvVXNlckZuO1xuICAgIGlmKCB0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicgKXtcbiAgICAgIHJldHVybiBmbjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvcGx1Z2luc193ZWIvbGliX2NvbW1vbi9jb25maWcuanNcbi8vIG1vZHVsZSBpZCA9IDQzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogcHJvamVjdCAtIGZpbGVwYXRoXG4gKiDnm5HlkKxkb23lj5jljJbvvIzmlLbpm4blvoXmm53lhYnlhYPntKBcbiAqXG4gKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG4gKlxuICogQXV0aG9yczpcbiAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQmFzZSA9IHJlcXVpcmUoJ0Bjb3JlL0Jhc2UnKTtcblxudmFyIHRyYWNrZXJVdGlsID0gcmVxdWlyZSgnQHV0aWxzL3RyYWNrZXJVdGlsJyk7XG52YXIgdXRpbExvZ2dlciA9IHJlcXVpcmUoJ0B1dGlscy91dGlsTG9nZ2VyJyk7XG5cbnZhciB1dGlsRXZlbnQgPSByZXF1aXJlKCcuLi9saWJfYWUvdXRpbC9ldmVudCcpO1xudmFyIHV0aWxfYWNfYWUgPSByZXF1aXJlKCcuLi9saWJfY29tbW9uL3V0aWxfYWNfYWUnKTtcbnZhciBjb25maWcgPSByZXF1aXJlKCcuLi9saWJfY29tbW9uL2NvbmZpZycpO1xuXG52YXIgd2luID0gd2luZG93O1xudmFyIGRvYyA9IGRvY3VtZW50O1xuXG4vKipcbiAqIOWGhemDqOWvueixoVxuICogQG9iamVjdCAgdGhpcy5fb2JzZXJ2ZXIgICAgICAvLyBNdXRhdGlvbk9ic2VydmVy55uR5ZCs6ICFXG4gKiBAb2JqZWN0ICB0aGlzLl9sb29wX29ic2VydmVyIC8vIOS4jeaUr+aMgU11dGF0aW9uT2JzZXJ2ZXLnmoTmtY/op4jlmajvvIzova7or6Lnm5HlkKzogIVcbiAqIEBvYmplY3QgIHRoaXMuYXV0b0Nsa0NvbmZpZyAgLy8g6YWN572u5Y+C5pWwXG4gKlxuICogQHBhcmFtIHtoYW5kbGVyX2RvbV9jaGFuZ2V9IGNiXG4gKi9cbnZhciBXYXRjaERvbSA9IEJhc2UuZXh0ZW5kKHtcbiAgZWFjaEVsZW1lbnRzOiBmdW5jdGlvbiAoZWxlbWVudHMsIGNsa0NvbmZpZykge1xuICAgIC8vIGNvbnNvbGUubG9nKCdjbGtDb25maWcgPT09PSAnLCBjbGtDb25maWcpO1xuICAgIHZhciBsb2drZXkgPSBjbGtDb25maWcubG9na2V5IHx8ICcnO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBlbGUgPSBlbGVtZW50c1tpXTtcbiAgICAgIGlmIChjbGtDb25maWcuX3Bvc19pZCAmJiAhZWxlLmdldEF0dHJpYnV0ZSgnZGF0YS1hcGx1cy1wb3MtaWQnKSkge1xuICAgICAgICBlbGUuc2V0QXR0cmlidXRlKCdkYXRhLWFwbHVzLXBvcy1pZCcsIGNsa0NvbmZpZy5fcG9zX2lkKTtcbiAgICAgIH1cbiAgICAgIHZhciBfaW5kZXggPSBlbGUuZ2V0QXR0cmlidXRlKGNvbmZpZy5EQVRBX0FQTFVTX0FDX0tFWSk7XG4gICAgICBpZiAoX2luZGV4ICYmIF9pbmRleC5pbmRleE9mKCdfJykgPiAwKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzTmFOKHBhcnNlSW50KF9pbmRleCkpKSB7XG4gICAgICAgIF9pbmRleCA9IGFwbHVzLl9hcGx1c19hYy5lbGVtZW50U2VsZWN0b3JTaXplTWFwW2Nsa0NvbmZpZy5lbGVtZW50U2VsZWN0b3JdKys7XG4gICAgICAgIGVsZS5zZXRBdHRyaWJ1dGUoY29uZmlnLkRBVEFfQVBMVVNfQUNfS0VZLCBfaW5kZXgpO1xuICAgICAgfVxuICAgICAgdmFyIGhhc2hfdmFsdWUgPSB1dGlsX2FjX2FlLmdldEVsZW1lbnRIYXNoKGNsa0NvbmZpZywge1xuICAgICAgICBpZ25vcmVfYXR0cjogZmFsc2UsXG4gICAgICAgIGluZGV4OiBfaW5kZXgsXG4gICAgICAgIGVsZTogZWxlXG4gICAgICB9KTtcblxuICAgICAgLy8g6aqM6K+B5piv5ZCm5bey57uP6K6w5b2V6L+H5LqG77yM5aaC5p6c5rKh5pyJ6K6w5b2V5omN57un57utXG4gICAgICAvLyB2YXIgaXNSZWNvcmQgPSB1dGlsRWxlbWVudEFjLmNoZWNrSXNSZWNvcmQoZWxlLCBoYXNoX3ZhbHVlLCBjb25maWcuREFUQV9BUExVU19BQ19LRVkpO1xuICAgICAgaWYgKCF1dGlsX2FjX2FlLmNoZWNrSXNJbkhhc2hNYXAoe1xuICAgICAgICBsb2drZXk6IGxvZ2tleSxcbiAgICAgICAgaGFzaF92YWx1ZTogaGFzaF92YWx1ZSxcbiAgICAgICAgYXBsdXNLZXk6ICdfYXBsdXNfYWMnXG4gICAgICB9KSkge1xuICAgICAgICB2YXIgX29iaiA9IHtcbiAgICAgICAgICBjbGtDb25maWc6IGNsa0NvbmZpZyxcbiAgICAgICAgICBoYXNoX3ZhbHVlOiBoYXNoX3ZhbHVlLFxuICAgICAgICAgIGVsZW1lbnQ6IGVsZSxcbiAgICAgICAgICBzdGF0dXM6IDAsICAgLy8g5Yid5aeL54q25oCBXG4gICAgICAgICAgZWxlbWVudFNlbGVjdG9yOiBjbGtDb25maWcuZWxlbWVudFNlbGVjdG9yXG4gICAgICAgIH07XG4gICAgICAgIC8vIOWwhuW+heeCueWHu+WFg+e0oOWtmOWFpWFwbHVzLl9hcGx1c19hYy5fYWNIYXNoTWFwXG4gICAgICAgIHV0aWxfYWNfYWUudXBkYXRlQ2xrSGFzaE1hcChsb2drZXksIF9vYmosICdBREQnKTtcbiAgICAgICAgdXRpbF9hY19hZS5zZXRSZWNvcmRTdWNjZXNzKF9vYmosIGNvbmZpZy5EQVRBX0FQTFVTX0FDX0tFWSk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICAvKipcbiAgICog6K+l5pa55rOV6KKrb2JzZXJ2ZXLmiJbova7or6LosIPnlKhcbiAgICog5aKe6YeP5pu05paw5b6F5pud5YWJ55qE5YWD57Sg77yM5Yid5aeL5YyW5YWD57Sg5Z2Q5qCHXG4gICAqIOW5tuWwhuW+heabneWFieWFg+e0oOWtmOWFpWFwbHVzLl9hcGx1c19hYy5fdG9kb19hY19lbGVtZW50c++8iOW5s+ihjOeahHdhdGNoRXhwb3N1cmUuanPkvJrnm5HlkKznqpflj6Plj5jljJbmnaXnm5Hmjqfov5nkupvlvoXmm53lhYnlhYPntKDmmK/lkKbmm53lhYnvvIlcbiAgICovXG4gIGhhbmRsZXJfZG9tX2NoYW5nZTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIF9zZWxmID0gdGhpcztcbiAgICB2YXIgYXV0b0Nsa0NvbmZpZyA9IF9zZWxmLmF1dG9DbGtDb25maWcgfHwgW107XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBhdXRvQ2xrQ29uZmlnLmxlbmd0aDsgaisrKSB7XG4gICAgICB2YXIgY2xrQ29uZmlnID0gYXV0b0Nsa0NvbmZpZ1tqXTtcbiAgICAgIGlmICghYXBsdXMuX2FwbHVzX2FjLmVsZW1lbnRTZWxlY3RvclNpemVNYXBbY2xrQ29uZmlnLmVsZW1lbnRTZWxlY3Rvcl0pIHtcbiAgICAgICAgYXBsdXMuX2FwbHVzX2FjLmVsZW1lbnRTZWxlY3RvclNpemVNYXBbY2xrQ29uZmlnLmVsZW1lbnRTZWxlY3Rvcl0gPSAxO1xuICAgICAgfVxuICAgICAgdmFyIGVsZW1lbnRzID0gdXRpbF9hY19hZS5nZXRFbGVtZW50cyhjbGtDb25maWcsIGRvYyk7IC8vIOiOt+WPluaJgOaciXh4eOagh+etvuS4i+W4puaciXl5eeWxnuaAp+eahOWFg+e0oFxuICAgICAgX3NlbGYuZWFjaEVsZW1lbnRzKGVsZW1lbnRzLCBjbGtDb25maWcpO1xuICAgIH1cbiAgfSxcblxuICB0aHJvdHRsZV9oYW5kbGVyX2RvbV9jaGFuZ2U6IHV0aWxfYWNfYWUudGhyb3R0bGUoZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuaGFuZGxlcl9kb21fY2hhbmdlKCk7XG4gIH0sIDIwMCksXG5cbiAgLyoqXG4gICAqIOWIneWni+WMlm9ic2VydmVy55uR5ZCs77yM55uR5ZCsZG9t5Y+Y5YyWXG4gICAqIEBwYXJhbSB7TU9ic2VydmVyfSBNT2JzZXJ2ZXJcbiAgICogQHBhcmFtIHtoYW5kbGVyX2RvbV9jaGFuZ2V9IGNiXG4gICAqL1xuICBpbml0X29ic2VydmVyOiBmdW5jdGlvbihNT2JzZXJ2ZXIsIGNiKSB7XG4gICAgLy8g5Yib5bu66KeC5a+f6ICF5a+56LGhXG4gICAgdmFyIF9vYnNlcnZlciA9IG5ldyBNT2JzZXJ2ZXIoZnVuY3Rpb24oKSB7IC8vIFRPRE/lvaLlj4JtdXRhdGlvbnNcbiAgICAgIC8vIFRPRE/lop7ph4/mm7TmlrAgVlMg5YWo6YeP5pu05pawXG4gICAgICAvLyBtdXRhdGlvbnMuZm9yRWFjaChmdW5jdGlvbihtdXRhdGlvbikge1xuICAgICAgLy8gfSk7XG4gICAgICB0cmFja2VyVXRpbC53cmFwKGZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciBfYXBsdXNfYWMgPSBhcGx1cy5fYXBsdXNfYWMgfHwge307XG4gICAgICAgICsrX2FwbHVzX2FjLm9ic2VydmVyX3RpbWVzO1xuICAgICAgICBjYigpO1xuICAgICAgfSwgJ2luaXRfb2JzZXJ2ZXJfaW5pdF9lbGVtZW50cycpO1xuICAgIH0pO1xuICAgIC8vIOmFjee9ruinguWvn+mAiemhuTpcbiAgICB2YXIgY29uZmlnID0ge1xuICAgICAgYXR0cmlidXRlczogdHJ1ZSwgICAgLy8g5bGe5oCn55qE5Y+Y5YqoICBUT0RPIOmqjOivgWFwbHVz6Ieq6Lqr5o+S5YWl55qE55qE5LiA5Lqb5bGe5oCn5Y+Y5YyWXG4gICAgICBjaGlsZExpc3Q6IHRydWUsICAgICAvLyDlrZDoioLngrnnmoTlj5jliqhcbiAgICAgIGNoYXJhY3RlckRhdGE6IHRydWUsIC8vIOiKgueCueWGheWuueaIluiKgueCueaWh+acrOeahOWPmOWKqFxuICAgICAgc3VidHJlZTogdHJ1ZSwgICAgICAgLy8g5omA5pyJ5ZCO5Luj6IqC54K555qE5Y+Y5YqoXG4gICAgfTtcblxuICAgIC8vIOS8oOWFpeebruagh+iKgueCueWSjOinguWvn+mAiemhuVxuICAgIF9vYnNlcnZlci5vYnNlcnZlKGRvYy5ib2R5LCBjb25maWcpO1xuICAgIGlmICh1dGlsX2FjX2FlLklTX0RFQlVHKSB7XG4gICAgICB1dGlsTG9nZ2VyLmxvZ2dlcih7XG4gICAgICAgIG1zZzogJ2FwbHVzX2FjIGluaXQgTXV0YXRpb25PYnNlcnZlciBzdWNjZXNzISdcbiAgICAgIH0pO1xuICAgIH1cbiAgICB0aGlzLl9vYnNlcnZlciA9IF9vYnNlcnZlcjtcbiAgfSxcblxuICAvKipcbiAgICog6ZKI5a+55LiN5pSv5oyBb2JzZXJ2ZXLnmoTmtY/op4jlmajnlKjova7or6LnmoTmlrnlvI/nm5HlkKxkb23lj5jljJZcbiAgICogQHBhcmFtIHtoYW5kbGVyX2RvbV9jaGFuZ2V9IGNiXG4gICAqL1xuICBpbml0X3dhdGNoX2RvbTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIF9zZWxmID0gdGhpcztcbiAgICB2YXIgX2FwbHVzX2FjID0gYXBsdXMuX2FwbHVzX2FjIHx8IHt9O1xuICAgIF9zZWxmLl9sb29wX29ic2VydmVyID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgaWYgKF9hcGx1c19hYy5jdXJyZW50X3dpbl9zdGF0dXMgIT09ICdibHVyJykge1xuICAgICAgICBpZiAodXRpbF9hY19hZS5JU19ERUJVRykge1xuICAgICAgICAgIHV0aWxMb2dnZXIubG9nZ2VyKHtcbiAgICAgICAgICAgIG1zZzogJ3dhdGNoX2RvbSBpbiBhYyBMT09QX1RJTUUgaXMgJyArIGNvbmZpZy5MT09QX1RJTUUgKyAnbXMgdG90YWw6ICcgKyArK19hcGx1c19hYy53YXRjaF90aW1lc1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIF9zZWxmLnRocm90dGxlX2hhbmRsZXJfZG9tX2NoYW5nZSgpOyAvLyDlop7ph4/mm7TmlrDlvoXmm53lhYnnmoTlhYPntKDvvIzlubbliJ3lp4vljJblhYPntKDlnZDmoIdcbiAgICAgICAgX3NlbGYuaW5pdF93YXRjaF9kb20oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9hcGx1c19hYy53YXRjaF9kb21fcnVubmluZyA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgfSwgY29uZmlnLkxPT1BfVElNRSk7XG4gIH0sXG5cbiAgb25Gb2N1c0hhbmRsZXI6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3NlbGYgPSB0aGlzO1xuICAgIHZhciBfYXBsdXNfYWMgPSBhcGx1cy5fYXBsdXNfYWMgfHwge307XG4gICAgX2FwbHVzX2FjLmN1cnJlbnRfd2luX3N0YXR1cyA9ICdmb2N1cyc7XG4gICAgaWYgKCFfYXBsdXNfYWMud2F0Y2hfZG9tX3J1bm5pbmcpIHtcbiAgICAgIF9zZWxmLmluaXRfd2F0Y2hfZG9tKCk7XG4gICAgfVxuICB9LFxuXG4gIG9uQmx1ckhhbmRsZXI6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX2FwbHVzX2FjID0gYXBsdXMuX2FwbHVzX2FjIHx8IHt9O1xuICAgIF9hcGx1c19hYy5jdXJyZW50X3dpbl9zdGF0dXMgPSAnYmx1cic7XG4gIH0sXG5cbiAgb25WaXNpYmlsaXR5Q2hhbmdlOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgX3NlbGYgPSB0aGlzO1xuICAgIGlmIChkb2MudmlzaWJpbGl0eVN0YXRlID09PSAndmlzaWJsZScpIHtcbiAgICAgIF9zZWxmLm9uRm9jdXNIYW5kbGVyKCk7XG4gICAgfSBlbHNlIGlmIChkb2MudmlzaWJpbGl0eVN0YXRlID09PSAnaGlkZGVuJykge1xuICAgICAgX3NlbGYub25CbHVySGFuZGxlcigpO1xuICAgIH1cbiAgfSxcblxuICAvLyDlop7liqDlkITnp43nm5HlkKxcbiAgYWRkQWxsTGlzdGVuZXI6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3NlbGYgPSB0aGlzO1xuICAgIHZhciBfYXBsdXNfYWMgPSBhcGx1cy5fYXBsdXNfYWMgfHwge307XG5cbiAgICBfYXBsdXNfYWMud2F0Y2hfdGltZXMgPSAwO1xuICAgIF9hcGx1c19hYy53YXRjaF9kb21fcnVubmluZyA9IHRydWU7XG4gICAgX3NlbGYuaW5pdF93YXRjaF9kb20oKTtcblxuICAgIC8vIOmSiOWvueaJi+a3mOOAgeaJi+eMq+eahOeJueauiuWkhOeQhumAu+i+kVxuICAgIGlmICh3aW4uV2luZFZhbmUgJiYgZG9jLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIHV0aWxFdmVudC5vbihkb2MsICdXVi5FdmVudC5BUFAuQWN0aXZlJywgX3NlbGYub25Gb2N1c0hhbmRsZXIsIGZhbHNlKTtcbiAgICAgIHV0aWxFdmVudC5vbihkb2MsICdXVi5FdmVudC5BUFAuQmFja2dyb3VuZCcsIF9zZWxmLm9uQmx1ckhhbmRsZXIsIGZhbHNlKTtcbiAgICB9XG5cbiAgICAvLyDmtY/op4jlmajkuI3mlK/mjIFNdXRhdGlvbk9ic2VydmVy77yM5pS555So6L2u6K+i55qE6ICB5Yqe5rOV77yM5L2G5Y+q5pyJ5Zyo56qX5Y+j5r+A5rS75pe25omN5omn6KGMXG4gICAgaWYgKCdoaWRkZW4nIGluIGRvYykge1xuICAgICAgLy8gd2Via2l05YaF5qC4XG4gICAgICB1dGlsRXZlbnQub24od2luLCAndmlzaWJpbGl0eWNoYW5nZScsIF9zZWxmLm9uVmlzaWJpbGl0eUNoYW5nZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElF5YaF5qC4XG4gICAgICB1dGlsRXZlbnQub24od2luLCAnYmx1cicsIF9zZWxmLm9uQmx1ckhhbmRsZXIpO1xuICAgICAgdXRpbEV2ZW50Lm9uKHdpbiwgJ2ZvY3VzJywgX3NlbGYub25Gb2N1c0hhbmRsZXIpO1xuICAgIH1cbiAgfSxcblxuICAvLyDnp7vpmaTlkITnp43nm5HlkKxcbiAgcmVtb3ZlQWxsTGlzdGVuZXI6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3NlbGYgPSB0aGlzO1xuICAgIC8vIOmSiOWvueaJi+a3mOOAgeaJi+eMq+eahOeJueauiuWkhOeQhumAu+i+kVxuICAgIGlmICh3aW4uV2luZFZhbmUgJiYgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIHV0aWxFdmVudC51bihkb2MsICdXVi5FdmVudC5BUFAuQWN0aXZlJywgX3NlbGYub25Gb2N1c0hhbmRsZXIsIGZhbHNlKTtcbiAgICAgIHV0aWxFdmVudC51bihkb2MsICdXVi5FdmVudC5BUFAuQmFja2dyb3VuZCcsIF9zZWxmLm9uQmx1ckhhbmRsZXIsIGZhbHNlKTtcbiAgICB9XG5cbiAgICAvLyDmtY/op4jlmajkuI3mlK/mjIFNdXRhdGlvbk9ic2VydmVy77yM5pS555So6L2u6K+i55qE6ICB5Yqe5rOV77yM5L2G5Y+q5pyJ5Zyo56qX5Y+j5r+A5rS75pe25omN5omn6KGMXG4gICAgaWYgKCdoaWRkZW4nIGluIGRvYykge1xuICAgICAgLy8gd2Via2l05YaF5qC4XG4gICAgICB1dGlsRXZlbnQudW4od2luLCAndmlzaWJpbGl0eWNoYW5nZScsIF9zZWxmLm9uVmlzaWJpbGl0eUNoYW5nZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElF5YaF5qC4XG4gICAgICB1dGlsRXZlbnQudW4od2luLCAnYmx1cicsIF9zZWxmLm9uQmx1ckhhbmRsZXIpO1xuICAgICAgdXRpbEV2ZW50LnVuKHdpbiwgJ2ZvY3VzJywgX3NlbGYub25Gb2N1c0hhbmRsZXIpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICog55uR5ZCsZG9t5Y+Y5YyW77yM5pyJ5Y+Y5YyW5omn6KGM5Zue6LCDXG4gICAqIEBwYXJhbSB7aGFuZGxlcl9kb21fY2hhbmdlfSBjYlxuICAgKi9cbiAgaW5pdDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIF9zZWxmID0gdGhpcztcbiAgICB2YXIgX2FwbHVzX2FjID0gYXBsdXMuX2FwbHVzX2FjIHx8IHt9O1xuICAgIC8vIHN0ZXAxXG4gICAgX3NlbGYudGhyb3R0bGVfaGFuZGxlcl9kb21fY2hhbmdlKCk7XG4gICAgLy8gc3RlcDIg55uR5ZCsZG9t5Y+Y5YyWXG4gICAgdmFyIE1PYnNlcnZlciA9IHdpbi5NdXRhdGlvbk9ic2VydmVyIHx8IHdpbi5XZWJLaXRNdXRhdGlvbk9ic2VydmVyIHx8IHdpbi5Nb3pNdXRhdGlvbk9ic2VydmVyO1xuICAgIGlmIChNT2JzZXJ2ZXIpIHtcbiAgICAgIF9hcGx1c19hYy5vYnNlcnZlcl90aW1lcyA9IDA7XG4gICAgICBfc2VsZi5pbml0X29ic2VydmVyKE1PYnNlcnZlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfc2VsZi50aHJvdHRsZV9oYW5kbGVyX2RvbV9jaGFuZ2UoKTtcbiAgICAgIH0pOyAvLyDlop7ph4/mm7TmlrDlvoXmm53lhYnnmoTlhYPntKDvvIzlubbliJ3lp4vljJblhYPntKDlnZDmoIdcbiAgICB9IGVsc2Uge1xuICAgICAgLy8g5aKe5Yqg5ZCE56eN55uR5ZCsXG4gICAgICBfc2VsZi5hZGRBbGxMaXN0ZW5lcigpO1xuICAgIH1cbiAgfSxcblxuICBjbGVhckRvbTogZnVuY3Rpb24ob2JqLCBvcHRzKSB7XG4gICAgdmFyIF9jbGtDb25maWcgPSB0aGlzLmF1dG9DbGtDb25maWcgfHwgW107XG4gICAgaWYgKG9wdHMgJiYgb3B0cy5mcm9tICE9PSAnYXBwZW5kTWV0YUluZm8nKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IF9jbGtDb25maWcubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB2YXIgZWxlbWVudFNlbGVjdG9yID0gX2Nsa0NvbmZpZ1tpXS5lbGVtZW50U2VsZWN0b3I7XG4gICAgICAgICAgdmFyIF9kb2NzID0gZG9jLnF1ZXJ5U2VsZWN0b3JBbGwoZWxlbWVudFNlbGVjdG9yKTtcbiAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IF9kb2NzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBfZG9jc1tqXS5zZXRBdHRyaWJ1dGUoY29uZmlnLkRBVEFfQVBMVVNfQUNfS0VZLCAnJyk7ICBcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuYXV0b0Nsa0NvbmZpZyA9IG9iaiAmJiBvYmouYXV0b0Nsa0NvbmZpZztcbiAgfSxcblxuICBjbGVhcjogZnVuY3Rpb24gKG9wdHMpIHtcbiAgICBpZiAob3B0cyAmJiBvcHRzLmZyb20gPT09ICdhcHBlbmRNZXRhSW5mbycpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIF9hcGx1c19hYyA9IGFwbHVzLl9hcGx1c19hYyB8fCB7fTtcbiAgICBpZiAoX2FwbHVzX2FjLl9hY0hhc2hNYXApIHtcbiAgICAgIF9hcGx1c19hYy5fYWNIYXNoTWFwID0ge307XG4gICAgfVxuICAgIGlmIChfYXBsdXNfYWMuaGFzaF92YWx1ZSkge1xuICAgICAgX2FwbHVzX2FjLmhhc2hfdmFsdWUgPSB7fTtcbiAgICB9XG4gICAgYXBsdXMuX2FwbHVzX2FjID0gX2FwbHVzX2FjO1xuICAgIC8vIOa4hemZpOi9ruivouebkeWQrFxuICAgIGlmICh0aGlzLl9sb29wX29ic2VydmVyKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5fbG9vcF9vYnNlcnZlcik7XG4gICAgICB0aGlzLl9sb29wX29ic2VydmVyID0gbnVsbDtcbiAgICB9XG4gICAgLy8g6K6p6K+l6KeC5a+f6ICF5a+56LGh5YGc5q2i6KeC5a+f5oyH5a6a55uu5qCH55qERE9N5Y+Y5YyWLuebtOWIsOWGjeasoeiwg+eUqOWFtm9ic2VydmUoKeaWueazlSzor6Xop4Llr5/ogIXlr7nosaHljIXlkKvnmoTlm57osIPlh73mlbDpg73kuI3kvJrlho3ooqvosIPnlKguXG4gICAgaWYgKHRoaXMuX29ic2VydmVyKSB7XG4gICAgICB0aGlzLl9vYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXIoKTtcbiAgICB9XG4gIH0sXG5cbiAgLy8g5Y+C5pWw5pu05pS577yM5YGa5LiA5Lqb6YeN572u5bel5L2cXG4gIHJlc2V0OiBmdW5jdGlvbiAob2JqLCBvcHRzKSB7XG4gICAgdGhpcy5jbGVhckRvbShvYmosIG9wdHMpO1xuICAgIHRoaXMuaW5pdCgpO1xuICB9XG5cbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBXYXRjaERvbTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL3BsdWdpbnNfd2ViL2xpYl9hYy93YXRjaERPTS5qc1xuLy8gbW9kdWxlIGlkID0gNDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBhbGlsb2cvcyAtIHNyYy9hcGx1c19hdXRvX2V4cC5qc1xuICogYXBsdXPkuJPpobnph4fpm4Y6IOmhtemdouWFg+e0oOabneWFieiHquWKqOmHh+mbhlxuICog5L6d6LWWYXBsdXPlkoxhcGx1c19wbHVnaW5fc3BtLmpz5o+S5Lu2XG4gKlxuICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuICpcbiAqIEF1dGhvcnM6XG4gKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG4gKi9cbid1c2Ugc3RyaWN0JztcblxuLy8gPG1ldGEgbmFtZT1cImFwbHVzLWF1dG8tZXhwXCIgY29udGVudD1cInt7bG9na2V5OlwiL2EuYi5jXCIsdGFnOlwiZGl2XCIsZmlsdGVyOlwic2NtPTEyMzRcIn19XCI+XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4ge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbXMge09iamVjdH0gb3B0aW9ucyB7XG4gICAgICogICBsb2dDb25maWc6IHtsb2dDb25maWd9XG4gICAgICogfVxuICAgICAqL1xuICAgIC8vIGluaXQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAvLyAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgLy8gfSxcblxuICAgIHJ1bjogZnVuY3Rpb24gKCkge1xuICAgICAgcmVxdWlyZSgnLi9saWJfYWUvbWFpbicpKCk7XG4gICAgfVxuICB9O1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9wbHVnaW5zX3dlYi9hcGx1c19hZV9pbmplY3QuanNcbi8vIG1vZHVsZSBpZCA9IDQ1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogcHJvamVjdCAtIGZpbGVwYXRoXG4gKiBkZXNjcmlwdGlvblxuICpcbiAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cbiAqXG4gKiBBdXRob3JzOlxuICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciB0cmFja2VyVXRpbCA9IHJlcXVpcmUoJ0B1dGlscy90cmFja2VyVXRpbCcpO1xudmFyIGFwbHVzU3RhdGljID0gcmVxdWlyZSgnQHV0aWxzL2FwbHVzU3RhdGljJyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdAdXRpbHMvZGVidWcnKTtcbnZhciB1dGlsTG9nZ2VyID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxMb2dnZXInKTtcblxudmFyIFdhdGNoRE9NO1xudmFyIHdhdGNoRXhwb3N1cmU7XG52YXIgd2F0Y2hSZWNvcmQ7XG52YXIgY29uZmlnO1xuXG5mdW5jdGlvbiBpbml0Rm4gKCkge1xuICBXYXRjaERPTSA9IHJlcXVpcmUoJy4vd2F0Y2hET00nKTtcbiAgaWYgKHdpbmRvdy5JbnRlcnNlY3Rpb25PYnNlcnZlcikge1xuICAgIHdhdGNoRXhwb3N1cmUgPSByZXF1aXJlKCcuL3dhdGNoRXhwb3N1cmVJT2JzZXJ2ZXInKTtcbiAgfSBlbHNlIHtcbiAgICB3YXRjaEV4cG9zdXJlID0gcmVxdWlyZSgnLi93YXRjaEV4cG9zdXJlJyk7XG4gIH1cbiAgd2F0Y2hSZWNvcmQgPSByZXF1aXJlKCcuL3dhdGNoUmVjb3JkJyk7XG4gIGNvbmZpZyA9IHJlcXVpcmUoJy4uL2xpYl9jb21tb24vY29uZmlnJyk7XG59XG5cbmZ1bmN0aW9uIGluaXQgKGNiKSB7XG4gIHZhciBhcGx1cyA9ICh3aW5kb3cuYXBsdXMgfHwgKHdpbmRvdy5hcGx1cyA9IHt9KSk7XG5cbiAgdmFyIGFwbHVzX2F1dG9fZXhwX2luaXQgPSBmYWxzZTtcbiAgdmFyIGRvX2luaXRfZmxhZyA9IGZhbHNlO1xuICB2YXIgX2NvbmZpZzsgLy8gbGFzdENvbmZpZ1xuXG4gIHZhciBkb19pbml0ID0gZnVuY3Rpb24gKGZsYWcpIHtcbiAgICBpZiAoZG9faW5pdF9mbGFnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGRvX2luaXRfZmxhZyA9IGZsYWc7XG4gICAgaWYgKCFhcGx1c19hdXRvX2V4cF9pbml0KSB7XG4gICAgICB0cmFja2VyVXRpbC53cmFwKGZ1bmN0aW9uKCl7XG4gICAgICAgIC8vIOmhuuW6j+S4jeiDveS5se+8jOeOr+eOr+ebuOaJoyFcbiAgICAgICAgLy8gMOOAgeiOt+WPlumFjee9ruW5tuWIpOaWremFjee9ruato+ehruaAp++8jGdldEF1dG9FeHBDb25maWflhoXlgZrkuoblvLrmoKHpqozvvIzlh7rplJnlkI7kvJrmiZPljbDplJnor6/kv6Hmga9cbiAgICAgICAgX2NvbmZpZyA9IGNvbmZpZy5nZXRBdXRvRXhwQ29uZmlnKCkgfHwgW107XG4gICAgICAgIGlmIChkZWJ1Zy5pc0RlYnVnQXBsdXMoKSkge1xuICAgICAgICAgIHV0aWxMb2dnZXIubG9nZ2VyKHtcbiAgICAgICAgICAgIG1zZzogJ2FwbHVzLWF1dG8tZXhwIG1ldGFWYXVlIGluaXQ6ICcgKyBKU09OLnN0cmluZ2lmeShfY29uZmlnKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHZhciB3YXRjaERPTTtcblxuICAgICAgICBpZiAoX2NvbmZpZyAmJiBfY29uZmlnLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAvLyAx44CB55uR5ZCs5pel5b+X5Y+R6YCBXG4gICAgICAgICAgd2F0Y2hSZWNvcmQud2F0Y2hfZGF0YV9jaGFuZ2UoKTtcbiAgICAgICAgICAvLyAy44CB55uR5ZCs5pud5YWJXG4gICAgICAgICAgd2F0Y2hFeHBvc3VyZS53YXRjaF9leHBvc3VyZV9jaGFuZ2UoX2NvbmZpZyk7XG4gICAgICAgICAgLy8gM+OAgeebkeWQrGRvbeWPmOWMllxuICAgICAgICAgIHdhdGNoRE9NID0gV2F0Y2hET00uY3JlYXRlKHtcbiAgICAgICAgICAgIGlzVGhyb3R0bGVXYXRjaDogY29uZmlnLmlzVGhyb3R0bGVXYXRjaERvbSgpLFxuICAgICAgICAgICAgYXV0b0V4cENvbmZpZzogX2NvbmZpZ1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHdhdGNoRE9NLmluaXQoe3R5cGU6ICdpbml0J30pO1xuICAgICAgICB9XG5cbiAgICAgICAgYXBsdXMuYXBsdXNfcHVic3ViLnN1YnNjcmliZSgnc2V0TWV0YUluZm8nLCBmdW5jdGlvbiAobWV0YUtleSwgbWV0YVZhdWUsIG9wdHMpIHtcbiAgICAgICAgICBpZiAobWV0YUtleSA9PT0gJ2FwbHVzLWF1dG8tZXhwJykge1xuICAgICAgICAgICAgaWYgKGRlYnVnLmlzRGVidWdBcGx1cygpKSB7XG4gICAgICAgICAgICAgIHV0aWxMb2dnZXIubG9nZ2VyKHtcbiAgICAgICAgICAgICAgICBtc2c6ICdhcGx1cy1hdXRvLWV4cCBtZXRhVmF1ZSBjaGFuZ2U6ICcgKyBKU09OLnN0cmluZ2lmeShtZXRhVmF1ZSlcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIDLjgIHojrflj5bphY3nva7lubbliKTmlq3phY3nva7mraPnoa7mgKfvvIxnZXRBdXRvRXhwQ29uZmln5YaF5YGa5LqG5by65qCh6aqM77yM5Ye66ZSZ5ZCO5Lya5omT5Y2w6ZSZ6K+v5L+h5oGvXG4gICAgICAgICAgICB2YXIgX2NvbmZpZzIgPSBjb25maWcuZ2V0QXV0b0V4cENvbmZpZyhtZXRhVmF1ZSk7XG4gICAgICAgICAgICBpZiAoSlNPTi5zdHJpbmdpZnkoX2NvbmZpZzIpID09PSBKU09OLnN0cmluZ2lmeShfY29uZmlnKSkge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBfY29uZmlnID0gX2NvbmZpZzI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIDHjgIFjbGVhciAtIOWFgeiuuOe9ruepum1ldGFWYWx1ZeS7peWBnOatouabneWFieebkeWQrFxuICAgICAgICAgICAgd2F0Y2hSZWNvcmQuY2xlYXIoKTtcbiAgICAgICAgICAgIGlmICghb3B0cykge1xuICAgICAgICAgICAgICBvcHRzID0ge1xuICAgICAgICAgICAgICAgIGZyb206ICdzZXRNZXRhSW5mbydcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdhdGNoRXhwb3N1cmUuY2xlYXIoX2NvbmZpZywgb3B0cyk7XG4gICAgICAgICAgICB3YXRjaERPTSAmJiB3YXRjaERPTS5jbGVhcihvcHRzKTtcblxuICAgICAgICAgICAgaWYgKG1ldGFWYXVlICYmIF9jb25maWcgJiYgX2NvbmZpZy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIC8vIDIuMeOAgeebkeWQrOaXpeW/l+WPkemAgVxuICAgICAgICAgICAgICB3YXRjaFJlY29yZC53YXRjaF9kYXRhX2NoYW5nZSgpO1xuICAgICAgICAgICAgICAvLyAyLjLjgIHnm5HlkKzmm53lhYlcbiAgICAgICAgICAgICAgd2F0Y2hFeHBvc3VyZS53YXRjaF9leHBvc3VyZV9jaGFuZ2UoX2NvbmZpZyk7XG5cbiAgICAgICAgICAgICAgdmFyIF93YXRjaF9kb21fY2ZnID0ge1xuICAgICAgICAgICAgICAgIGlzVGhyb3R0bGVXYXRjaDogY29uZmlnLmlzVGhyb3R0bGVXYXRjaERvbSgpLFxuICAgICAgICAgICAgICAgIGF1dG9FeHBDb25maWc6IF9jb25maWdcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgaWYgKHdhdGNoRE9NKSB7XG4gICAgICAgICAgICAgICAgd2F0Y2hET00ucmVzZXQoX3dhdGNoX2RvbV9jZmcsIG9wdHMpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHdhdGNoRE9NID0gV2F0Y2hET00uY3JlYXRlKF93YXRjaF9kb21fY2ZnKTtcbiAgICAgICAgICAgICAgICB3YXRjaERPTS5pbml0KHt0eXBlOiAnaW5pdCd9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9LCAnZG9faW5pdCcpO1xuICAgICAgYXBsdXNfYXV0b19leHBfaW5pdCA9IHRydWU7XG4gICAgfVxuICB9O1xuXG4gIC8vIHV0aWxFdmVudC5ET01SZWFkeShmdW5jdGlvbigpIHtcbiAgLy8gNXPlkI7ov5jmsqHmnInlrozmiJDliqDovb3vvIzmjqfliLblj7DmiZPlh7rkuIDmnaHorablkYrvvIxUT0RPIOebkeaOp+i/meWdl+WGheWuuVxuICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgaWYgKCFhcGx1c19hdXRvX2V4cF9pbml0KSB7XG4gICAgICB1dGlsTG9nZ2VyLmxvZ2dlcih7XG4gICAgICAgIG1zZzogJ2FwbHVzX2F1dG9fZXhwX2luaXQgZmFpbGVkISBwbGVhc2UgY2hlY2sgd2hldGhlciBhcGx1c0pzIGlzIGxvYWRlZCBjb3JyZWN0bHkhJ1xuICAgICAgfSk7XG4gICAgfVxuICB9LCA1MDAwKTtcbiAgLy8g5pyJYXBsdXNfcHVic3Vi5LqL5Lu255uR5ZCs6ICF5qih5Z6L55qE5oOF5Ya15LiL77yM55uR5ZCsYXBsdXNSZWFkeeS6i+S7tlxuICB2YXIgXyQgPSBhcGx1cy5fJCB8fCB7fTtcbiAgdmFyIGdfc3BtID0gd2luZG93LmdfU1BNIHx8IHt9O1xuICBpZiAoXyQuc3RhdHVzID09PSAnY29tcGxldGUnICYmIGdfc3BtLnNwbSkge1xuICAgIGRvX2luaXQoKTtcbiAgfVxuICAvLyBhcGx1cy5hcGx1c19wdWJzdWIuc3Vic2NyaWJlKCdhcGx1c1JlYWR5JywgZnVuY3Rpb24oc3RhdHVzKSB7XG4gIC8vICAgaWYgKHN0YXR1cyA9PT0gJ2NvbXBsZXRlJykge1xuICAvLyAgICAgZG9faW5pdCgnYXBsdXNSZWFkeScpO1xuICAvLyAgIH1cbiAgLy8gfSk7XG4gIHZhciBxID0gKHdpbmRvdy5hcGx1c19xdWV1ZSB8fCAod2luZG93LmFwbHVzX3F1ZXVlID0gW10pKTtcbiAgcS5wdXNoKHtcbiAgICBhY3Rpb246IGFwbHVzU3RhdGljLlNVQlNDUklCRSxcbiAgICBhcmd1bWVudHM6IFsnYXBsdXNSZWFkeScsIGZ1bmN0aW9uIChzdGF0dXMpIHtcbiAgICAgIGlmIChzdGF0dXMgPT09ICdjb21wbGV0ZScpIHtcbiAgICAgICAgZG9faW5pdCgnYXBsdXNSZWFkeScpO1xuICAgICAgfVxuICAgIH1dXG4gIH0pO1xuICBpZiAodHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IoKTtcbiAgfVxuICAvLyB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBhcGx1cyA9ICh3aW5kb3cuYXBsdXMgfHwgKHdpbmRvdy5hcGx1cyA9IHt9KSk7XG4gIGlmIChhcGx1cy5fYXBsdXNfYXV0b19leHApIHtcbiAgICByZXR1cm47XG4gIH0gZWxzZSB7XG4gICAgYXBsdXMuX2FwbHVzX2F1dG9fZXhwID0ge1xuICAgICAgdGFnczoge30sXG4gICAgICBzdGF0dXM6ICdpbml0JyxcbiAgICAgIGV4cF90aW1lczogMCxcbiAgICAgIGVsZW1lbnRTZWxlY3RvclNpemVNYXA6IHt9XG4gICAgfTsgICAgXG4gICAgaW5pdEZuKCk7XG4gICAgaW5pdChmdW5jdGlvbiAoKSB7XG4gICAgICBhcGx1cy5fYXBsdXNfYXV0b19leHAuc3RhdHVzID0gJ2NvbXBsZXRlJztcbiAgICB9KTtcbiAgfSAgXG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvcGx1Z2luc193ZWIvbGliX2FlL21haW4uanNcbi8vIG1vZHVsZSBpZCA9IDQ2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogcHJvamVjdCAtIGZpbGVwYXRoXG4gKiBkb23mk43kvZzlt6XlhbfnsbvvvIzov5nkuKrln7rnoYDlt6XlhbfnsbvkvJrooqvlhbbku5blt6XlhbfnsbvlvJXnlKjvvIzmlYXkuKXnpoHlnKjov5nph4zlho3lvJXnlKjlhbbku5bmqKHlnZfku6XlhY3lh7rnjrDpl67pophcbiAqXG4gKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG4gKlxuICogQXV0aG9yczpcbiAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbEdvbGRsb2cgPSByZXF1aXJlKCcuL3V0aWxHb2xkbG9nJyk7XG5cbnZhciBpc0RlYnVnO1xuXG4vKipcbiAqIOaYr+WQpuW8gOWQr2RlYnVn5qih5byP5YWl5Y+j77yM5ZyodXJs5Lit5Yqg5YWlZGVidWdBcGx1cz10cnVlXG4gKi9cbmV4cG9ydHMuaXNEZWJ1Z0FwbHVzID0gZnVuY3Rpb24gKGRlYnVnKSB7XG4gIGlmICh0eXBlb2YgaXNEZWJ1ZyA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgcmV0dXJuIGlzRGVidWc7XG4gIH1cbiAgaWYgKHR5cGVvZiBkZWJ1ZyA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgaXNEZWJ1ZyA9IGRlYnVnO1xuICB9XG4gIGlmIChsb2NhbFN0b3JhZ2UgJiYgbG9jYXRpb24pIHtcbiAgICB2YXIgbWF0Y2hfdmFsdWUgPSBsb2NhdGlvbi5ocmVmLm1hdGNoKC9hcGx1c0RlYnVnPSh0cnVlfGZhbHNlKS8pO1xuICAgIGlmIChtYXRjaF92YWx1ZSAmJiBtYXRjaF92YWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnYXBsdXNEZWJ1ZycsIG1hdGNoX3ZhbHVlWzFdKTtcbiAgICB9XG4gICAgaXNEZWJ1ZyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdhcGx1c0RlYnVnJykgPT09ICd0cnVlJztcbiAgfSBlbHNlIHtcbiAgICBpc0RlYnVnID0gZmFsc2U7XG4gIH1cbiAgdXRpbEdvbGRsb2cuc2V0R29sZGxvZ1ZhbCgnYXBsdXNEZWJ1ZycsIGlzRGVidWcpOyAgXG4gIHJldHVybiBpc0RlYnVnO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2xpYl91L3V0aWxzL2RlYnVnLmpzXG4vLyBtb2R1bGUgaWQgPSA0N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIHByb2plY3QgLSBmaWxlcGF0aFxuICog55uR5ZCsZG9t5Y+Y5YyW77yM5pS26ZuG5b6F5pud5YWJ5YWD57SgXG4gKlxuICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuICpcbiAqIEF1dGhvcnM6XG4gKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIEJhc2UgPSByZXF1aXJlKCdAY29yZS9CYXNlJyk7XG52YXIgdHJhY2tlclV0aWwgPSByZXF1aXJlKCdAdXRpbHMvdHJhY2tlclV0aWwnKTtcbnZhciB1dGlsTG9nZ2VyID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxMb2dnZXInKTtcblxudmFyIHV0aWxFdmVudCA9IHJlcXVpcmUoJy4vdXRpbC9ldmVudCcpO1xudmFyIHV0aWxFbGVtZW50QWMgPSByZXF1aXJlKCcuL3V0aWwvdXRpbEVsZW1lbnRBYycpO1xuXG52YXIgdXRpbF9hY19hZSA9IHJlcXVpcmUoJy4uL2xpYl9jb21tb24vdXRpbF9hY19hZScpO1xudmFyIGNvbmZpZyA9IHJlcXVpcmUoJy4uL2xpYl9jb21tb24vY29uZmlnJyk7XG5cbnZhciB3aW4gPSB3aW5kb3c7XG52YXIgZG9jID0gZG9jdW1lbnQ7XG5cbi8qKlxuICog5YaF6YOo5a+56LGhXG4gKiBAb2JqZWN0ICB0aGlzLl9vYnNlcnZlciAgICAgIC8vIE11dGF0aW9uT2JzZXJ2ZXLnm5HlkKzogIVcbiAqIEBvYmplY3QgIHRoaXMuX2xvb3Bfb2JzZXJ2ZXIgLy8g5LiN5pSv5oyBTXV0YXRpb25PYnNlcnZlcueahOa1j+iniOWZqO+8jOi9ruivouebkeWQrOiAhVxuICogQG9iamVjdCAgdGhpcy5hdXRvRXhwQ29uZmlnICAvLyDphY3nva7lj4LmlbBcbiAqXG4gKiBAcGFyYW0ge2hhbmRsZXJfZG9tX2NoYW5nZX0gY2JcbiAqL1xuXG5cbnZhciBXYXRjaERvbSA9IEJhc2UuZXh0ZW5kKHtcblxuICBlYWNoRWxlbWVudHM6IGZ1bmN0aW9uIChlbGVtZW50cywgZXhwQ29uZmlnKSB7XG4gICAgdmFyIGxvZ2tleSA9IGV4cENvbmZpZy5sb2drZXkgfHwgJyc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGVsZSA9IGVsZW1lbnRzW2ldO1xuICAgICAgdmFyIF9pbmRleCA9IGVsZS5nZXRBdHRyaWJ1dGUoY29uZmlnLkRBVEFfQVBMVVNfQUVfS0VZKTtcbiAgICAgIGlmIChfaW5kZXggJiYgX2luZGV4LmluZGV4T2YoJ18nKSA+IDApIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNOYU4ocGFyc2VJbnQoX2luZGV4KSkpIHtcbiAgICAgICAgX2luZGV4ID0gYXBsdXMuX2FwbHVzX2F1dG9fZXhwLmVsZW1lbnRTZWxlY3RvclNpemVNYXBbZXhwQ29uZmlnLmVsZW1lbnRTZWxlY3Rvcl0rKztcbiAgICAgICAgZWxlLnNldEF0dHJpYnV0ZShjb25maWcuREFUQV9BUExVU19BRV9LRVksIF9pbmRleCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBoYXNoX3ZhbHVlID0gdXRpbF9hY19hZS5nZXRFbGVtZW50SGFzaChleHBDb25maWcsIHtcbiAgICAgICAgaWdub3JlX2F0dHI6IGZhbHNlLFxuICAgICAgICBpbmRleDogX2luZGV4LFxuICAgICAgICBlbGU6IGVsZVxuICAgICAgfSk7XG4gICAgICAvLyDpqozor4HmmK/lkKblt7Lnu4/orrDlvZXov4fkuobvvIzlpoLmnpzmsqHmnInorrDlvZXmiY3nu6fnu61cbiAgICAgIHZhciBpc1JlY29yZCA9IHV0aWxFbGVtZW50QWMuY2hlY2tJc1JlY29yZChlbGUsIGhhc2hfdmFsdWUsIGNvbmZpZy5EQVRBX0FQTFVTX0FFX0tFWSk7XG4gICAgICB2YXIgaXNJbkhhc2hNYXAgPSB1dGlsX2FjX2FlLmNoZWNrSXNJbkhhc2hNYXAoe1xuICAgICAgICBsb2drZXk6IGxvZ2tleSxcbiAgICAgICAgaGFzaF92YWx1ZTogaGFzaF92YWx1ZSxcbiAgICAgICAgYXBsdXNLZXk6ICdfYXBsdXNfYXV0b19leHAnXG4gICAgICB9KTtcbiAgICAgIGlmICghaXNSZWNvcmQgJiYgIWlzSW5IYXNoTWFwKSB7XG4gICAgICAgIHZhciBfb2JqID0ge1xuICAgICAgICAgIGV4cENvbmZpZzogZXhwQ29uZmlnLFxuICAgICAgICAgIGhhc2hfdmFsdWU6IGhhc2hfdmFsdWUsXG4gICAgICAgICAgZWxlbWVudDogZWxlLFxuICAgICAgICAgIHN0YXR1czogMCwgICAvLyDliJ3lp4vnirbmgIFcbiAgICAgICAgICBlbGVtZW50U2VsZWN0b3I6IGV4cENvbmZpZy5lbGVtZW50U2VsZWN0b3JcbiAgICAgICAgfTtcbiAgICAgICAgLy8g5bCG5b6F5pud5YWJ5YWD57Sg5a2Y5YWlYXBsdXMuX2FwbHVzX2F1dG9fZXhwLl9hY0hhc2hNYXBcbiAgICAgICAgdXRpbF9hY19hZS51cGRhdGVFeHBIYXNoTWFwKGxvZ2tleSwgX29iaiwgJ0FERCcpO1xuICAgICAgfVxuICAgICAgLy8gaWYgKCFlbGUuZ2V0QXR0cmlidXRlKGNvbmZpZy5EQVRBX0FQTFVTX0FFX0tFWSkpIHtcbiAgICAgIC8vICAgY29uc29sZS5lcnJvcignaXNSZWNvcmQgPSAnICsgaXNSZWNvcmQgKyAnLCBpc0luSGFzaE1hcCA9ICcgKyBpc0luSGFzaE1hcCArICcsIF9pbmRleCA9ICcgKyBfaW5kZXgpO1xuICAgICAgLy8gICBjb25zb2xlLmxvZyhlbGUpO1xuICAgICAgLy8gfVxuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICog6K+l5pa55rOV6KKrb2JzZXJ2ZXLmiJbova7or6LosIPnlKhcbiAgICog5aKe6YeP5pu05paw5b6F5pud5YWJ55qE5YWD57Sg77yM5Yid5aeL5YyW5YWD57Sg5Z2Q5qCHXG4gICAqIOW5tuWwhuW+heabneWFieWFg+e0oOWtmOWFpWFwbHVzLl9hcGx1c19hdXRvX2V4cC5fdG9kb19hY19lbGVtZW50c++8iOW5s+ihjOeahHdhdGNoRXhwb3N1cmUuanPkvJrnm5HlkKznqpflj6Plj5jljJbmnaXnm5Hmjqfov5nkupvlvoXmm53lhYnlhYPntKDmmK/lkKbmm53lhYnvvIlcbiAgICogQHBhcmFtcyBfZWxlIHtFbGVtZW50fVxuICAgKiBAcGFyYW1zIG9wdHMge09iamVjdH0ge1xuICAgKiAgIHR5cGU6ICdwb2xsaW5nJy8nY2hpbGRMaXN0Jy8nY2hhcmFjdGVyRGF0YScvJ3N1YnRyZWUnLydhdHRyaWJ1dGVzXyhjbGFzc3xzdHlsZSknXG4gICAqIH1cbiAgICovXG4gIGhhbmRsZXJfZG9tX2NoYW5nZTogZnVuY3Rpb24oX2VsZSwgb3B0cykge1xuICAgIHRyeSB7XG4gICAgICB2YXIgZXhwQ29uZmlncyA9IHRoaXMuYXV0b0V4cENvbmZpZyB8fCBbXTtcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZXhwQ29uZmlncy5sZW5ndGg7IGorKykge1xuICAgICAgICB2YXIgZXhwQ29uZmlnID0gZXhwQ29uZmlnc1tqXTtcbiAgICAgICAgdmFyIGVsZW1lbnRzID0gdXRpbF9hY19hZS5nZXRFbGVtZW50cyhleHBDb25maWcsIGRvYyk7IC8vIOiOt+WPluaJgOaciXh4eOagh+etvuS4i+W4puaciXl5eeWxnuaAp+eahOWFg+e0oFxuXG4gICAgICAgIGlmICghYXBsdXMuX2FwbHVzX2F1dG9fZXhwLmVsZW1lbnRTZWxlY3RvclNpemVNYXBbZXhwQ29uZmlnLmVsZW1lbnRTZWxlY3Rvcl0pIHtcbiAgICAgICAgICBhcGx1cy5fYXBsdXNfYXV0b19leHAuZWxlbWVudFNlbGVjdG9yU2l6ZU1hcFtleHBDb25maWcuZWxlbWVudFNlbGVjdG9yXSA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lYWNoRWxlbWVudHMoZWxlbWVudHMsIGV4cENvbmZpZyk7XG4gICAgICB9XG4gICAgICBhcGx1cy5hcGx1c19wdWJzdWIucHVibGlzaCgnQVBMVVNfQUVfRE9NX0NIQU5HRScsIG9wdHMgfHwge30pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHV0aWxMb2dnZXIubG9nZ2VyKHtcbiAgICAgICAgbXNnOiBlICYmIGUubWVzc2FnZVxuICAgICAgfSk7XG4gICAgfVxuICB9LFxuXG4gIHRocm90dGxlX2hhbmRsZXJfZG9tX2NoYW5nZTogdXRpbF9hY19hZS50aHJvdHRsZShmdW5jdGlvbiAoX2VsZSwgb3B0cykge1xuICAgIHRoaXMuaGFuZGxlcl9kb21fY2hhbmdlKF9lbGUsIG9wdHMpO1xuICB9LCAyMDApLFxuXG4gIC8qKlxuICAgKiDpkojlr7nkuI3mlK/mjIFvYnNlcnZlcueahOa1j+iniOWZqOeUqOi9ruivoueahOaWueW8j+ebkeWQrGRvbeWPmOWMllxuICAgKiBAcGFyYW0ge2hhbmRsZXJfZG9tX2NoYW5nZX0gY2JcbiAgICovXG4gIGluaXRfd2F0Y2hfZG9tOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgX3NlbGYgPSB0aGlzO1xuICAgIHZhciBfYXBsdXNfYXV0b19leHAgPSBhcGx1cy5fYXBsdXNfYXV0b19leHAgfHwge307XG4gICAgX3NlbGYuX2xvb3Bfb2JzZXJ2ZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICBpZiAoX2FwbHVzX2F1dG9fZXhwLmN1cnJlbnRfd2luX3N0YXR1cyAhPT0gJ2JsdXInKSB7XG4gICAgICAgIGlmIChhcGx1cy5hcGx1c0RlYnVnKSB7XG4gICAgICAgICAgdXRpbExvZ2dlci5sb2dnZXIoe1xuICAgICAgICAgICAgbXNnOiAnd2F0Y2hfZG9tIGluIGFlIExPT1BfVElNRSBpcyAnICsgY29uZmlnLkxPT1BfVElNRSArICdtcyB0b3RhbDogJyArICsrX2FwbHVzX2F1dG9fZXhwLndhdGNoX3RpbWVzXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgX3NlbGYuaGFuZGxlcl9kb21fY2hhbmdlKG51bGwsIHtcbiAgICAgICAgICB0eXBlOiAncG9sbGluZydcbiAgICAgICAgfSk7IC8vIOWinumHj+abtOaWsOW+heabneWFieeahOWFg+e0oO+8jOW5tuWIneWni+WMluWFg+e0oOWdkOagh1xuICAgICAgICBfc2VsZi5pbml0X3dhdGNoX2RvbSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2FwbHVzX2F1dG9fZXhwLndhdGNoX2RvbV9ydW5uaW5nID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICB9LCBjb25maWcuTE9PUF9USU1FKTtcbiAgfSxcblxuICBvbkZvY3VzSGFuZGxlcjogZnVuY3Rpb24gKCkge1xuICAgIHZhciBfc2VsZiA9IHRoaXM7XG4gICAgdmFyIF9hZSA9IGFwbHVzLl9hcGx1c19hdXRvX2V4cCB8fCB7fTtcbiAgICBfYWUuY3VycmVudF93aW5fc3RhdHVzID0gJ2ZvY3VzJztcbiAgICBpZiAoIV9hZS53YXRjaF9kb21fcnVubmluZykge1xuICAgICAgX3NlbGYuaW5pdF93YXRjaF9kb20oKTtcbiAgICB9XG4gIH0sXG5cbiAgb25CbHVySGFuZGxlcjogZnVuY3Rpb24gKCkge1xuICAgIHZhciBfYWUgPSBhcGx1cy5fYXBsdXNfYXV0b19leHAgfHwge307XG4gICAgX2FlLmN1cnJlbnRfd2luX3N0YXR1cyA9ICdibHVyJztcbiAgfSxcblxuICBvblZpc2liaWxpdHlDaGFuZ2U6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBfc2VsZiA9IHRoaXM7XG4gICAgaWYgKGRvYy52aXNpYmlsaXR5U3RhdGUgPT09ICd2aXNpYmxlJykge1xuICAgICAgX3NlbGYub25Gb2N1c0hhbmRsZXIoKTtcbiAgICB9IGVsc2UgaWYgKGRvYy52aXNpYmlsaXR5U3RhdGUgPT09ICdoaWRkZW4nKSB7XG4gICAgICBfc2VsZi5vbkJsdXJIYW5kbGVyKCk7XG4gICAgfVxuICB9LFxuXG4gIC8vIOWinuWKoOWQhOenjeebkeWQrFxuICBhZGRBbGxMaXN0ZW5lcjogZnVuY3Rpb24gKCkge1xuICAgIHZhciBfc2VsZiA9IHRoaXM7XG4gICAgdmFyIF9hZSA9IGFwbHVzLl9hcGx1c19hdXRvX2V4cCB8fCB7fTtcbiAgICBfYWUud2F0Y2hfdGltZXMgPSAwO1xuICAgIF9hZS53YXRjaF9kb21fcnVubmluZyA9IHRydWU7XG4gICAgX3NlbGYuaW5pdF93YXRjaF9kb20oKTtcblxuICAgIC8vIOmSiOWvueaJi+a3mOOAgeaJi+eMq+eahOeJueauiuWkhOeQhumAu+i+kVxuICAgIGlmICh3aW4uV2luZFZhbmUgJiYgZG9jLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIHV0aWxFdmVudC5vbihkb2MsICdXVi5FdmVudC5BUFAuQWN0aXZlJywgX3NlbGYub25Gb2N1c0hhbmRsZXIsIGZhbHNlKTtcbiAgICAgIHV0aWxFdmVudC5vbihkb2MsICdXVi5FdmVudC5BUFAuQmFja2dyb3VuZCcsIF9zZWxmLm9uQmx1ckhhbmRsZXIsIGZhbHNlKTtcbiAgICB9XG5cbiAgICAvLyDmtY/op4jlmajkuI3mlK/mjIFNdXRhdGlvbk9ic2VydmVy77yM5pS555So6L2u6K+i55qE6ICB5Yqe5rOV77yM5L2G5Y+q5pyJ5Zyo56qX5Y+j5r+A5rS75pe25omN5omn6KGMXG4gICAgaWYgKCdoaWRkZW4nIGluIGRvYykge1xuICAgICAgLy8gd2Via2l05YaF5qC4XG4gICAgICB1dGlsRXZlbnQub24od2luLCAndmlzaWJpbGl0eWNoYW5nZScsIF9zZWxmLm9uVmlzaWJpbGl0eUNoYW5nZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElF5YaF5qC4XG4gICAgICB1dGlsRXZlbnQub24od2luLCAnYmx1cicsIF9zZWxmLm9uQmx1ckhhbmRsZXIpO1xuICAgICAgdXRpbEV2ZW50Lm9uKHdpbiwgJ2ZvY3VzJywgX3NlbGYub25Gb2N1c0hhbmRsZXIpO1xuICAgIH1cbiAgfSxcblxuICAvLyDnp7vpmaTlkITnp43nm5HlkKxcbiAgcmVtb3ZlQWxsTGlzdGVuZXI6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3NlbGYgPSB0aGlzO1xuICAgIC8vIOmSiOWvueaJi+a3mOOAgeaJi+eMq+eahOeJueauiuWkhOeQhumAu+i+kVxuICAgIGlmICh3aW4uV2luZFZhbmUgJiYgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIHV0aWxFdmVudC51bihkb2MsICdXVi5FdmVudC5BUFAuQWN0aXZlJywgX3NlbGYub25Gb2N1c0hhbmRsZXIsIGZhbHNlKTtcbiAgICAgIHV0aWxFdmVudC51bihkb2MsICdXVi5FdmVudC5BUFAuQmFja2dyb3VuZCcsIF9zZWxmLm9uQmx1ckhhbmRsZXIsIGZhbHNlKTtcbiAgICB9XG5cbiAgICAvLyDmtY/op4jlmajkuI3mlK/mjIFNdXRhdGlvbk9ic2VydmVy77yM5pS555So6L2u6K+i55qE6ICB5Yqe5rOV77yM5L2G5Y+q5pyJ5Zyo56qX5Y+j5r+A5rS75pe25omN5omn6KGMXG4gICAgaWYgKCdoaWRkZW4nIGluIGRvYykge1xuICAgICAgLy8gd2Via2l05YaF5qC4XG4gICAgICB1dGlsRXZlbnQudW4od2luLCAndmlzaWJpbGl0eWNoYW5nZScsIF9zZWxmLm9uVmlzaWJpbGl0eUNoYW5nZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElF5YaF5qC4XG4gICAgICB1dGlsRXZlbnQudW4od2luLCAnYmx1cicsIF9zZWxmLm9uQmx1ckhhbmRsZXIpO1xuICAgICAgdXRpbEV2ZW50LnVuKHdpbiwgJ2ZvY3VzJywgX3NlbGYub25Gb2N1c0hhbmRsZXIpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICog5Yid5aeL5YyWb2JzZXJ2ZXLnm5HlkKzvvIznm5HlkKxkb23lj5jljJZcbiAgICogQHBhcmFtIHtNT2JzZXJ2ZXJ9IE1PYnNlcnZlclxuICAgKiBAcGFyYW0ge2hhbmRsZXJfZG9tX2NoYW5nZX0gY2JcbiAgICovXG4gIGluaXRfb2JzZXJ2ZXI6IGZ1bmN0aW9uKE1PYnNlcnZlciwgY2FsbGJhY2spIHtcbiAgICB2YXIgaWdub3JlcyA9IFsnSUZSQU1FJywgJ0JPRFknLCAnT0JKRUNUJywgJ1NDUklQVCcsICdOT1NDUklQVCcsICdMSU5LJywgJ1NUWUxFJ107XG4gICAgdmFyIGF0dHJzID0gWydjbGFzcycsICdzdHlsZSddO1xuXG4gICAgdmFyIGdldEF0dHJzQ2hhcnNOb2RlcyA9IGZ1bmN0aW9uIChtdXRhdGlvbikge1xuICAgICAgaWYgKG11dGF0aW9uLnR5cGUgPT09ICdjaGFyYWN0ZXJEYXRhJykge1xuICAgICAgICByZXR1cm4gW211dGF0aW9uLnRhcmdldF07XG4gICAgICB9IGVsc2UgaWYgKG11dGF0aW9uLnR5cGUgPT09ICdhdHRyaWJ1dGVzJyAmJiBhdHRycy5pbmRleE9mKG11dGF0aW9uLmF0dHJpYnV0ZU5hbWUpID4gLTEpIHtcbiAgICAgICAgcmV0dXJuIFttdXRhdGlvbi50YXJnZXRdO1xuICAgICAgfSBlbHNlIGlmIChtdXRhdGlvbi50eXBlICE9PSAnY2hpbGRMaXN0Jykge1xuICAgICAgICAvLyBsb2dnZXIoJ2lnbm9yZSBhdXRvLWV4cCBtdXRhdGlvbi50eXBlID0gJyArIG11dGF0aW9uLnR5cGUgKyAnLCBtdXRhdGlvbi5hdHRyaWJ1dGVOYW1lID0gJyArIG11dGF0aW9uLmF0dHJpYnV0ZU5hbWUpO1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciBlYWNoX25vZGVzID0gZnVuY3Rpb24gKG5vZGVzLCBtdXRhdGlvbikge1xuICAgICAgaWYgKG5vZGVzICYmIG5vZGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBub2Rlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHZhciBlbGUgPSBub2Rlc1tqXSB8fCB7fTtcbiAgICAgICAgICB2YXIgX25vZGVOYW1lID0gZWxlLm5vZGVOYW1lO1xuICAgICAgICAgIHZhciB0YWdzID0gYXBsdXMuX2FwbHVzX2F1dG9fZXhwLnRhZ3MgfHwge307XG4gICAgICAgICAgaWYoIXRhZ3NbX25vZGVOYW1lXSl7XG4gICAgICAgICAgICB0YWdzW19ub2RlTmFtZV0gPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0YWdzW19ub2RlTmFtZV0rKztcbiAgICAgICAgICBhcGx1cy5fYXBsdXNfYXV0b19leHAudGFncyA9IHRhZ3M7XG4gICAgICAgICAgaWYgKGlnbm9yZXMuaW5kZXhPZihfbm9kZU5hbWUpID09PSAtMSkge1xuICAgICAgICAgICAgdHJhY2tlclV0aWwud3JhcChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICB2YXIgX2FwbHVzX2F1dG9fZXhwID0gYXBsdXMuX2FwbHVzX2F1dG9fZXhwIHx8IHt9O1xuICAgICAgICAgICAgICArK19hcGx1c19hdXRvX2V4cC5vYnNlcnZlcl90aW1lcztcbiAgICAgICAgICAgICAgdmFyIGF0dHJOYW1lID0gbXV0YXRpb24uYXR0cmlidXRlTmFtZTtcbiAgICAgICAgICAgICAgY2FsbGJhY2soZWxlLCB7XG4gICAgICAgICAgICAgICAgdHlwZTogbXV0YXRpb24udHlwZSArIChhdHRyTmFtZSA/ICdfJyArIGF0dHJOYW1lIDogJycpXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgJ2luaXRfb2JzZXJ2ZXJfaW5pdF9lbGVtZW50cycpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyDliJvlu7rop4Llr5/ogIXlr7nosaHvvIzms6jmhI/kuI3og73lpJrmrKFuZXcgTU9ic2VydmVy77yM5Lya5pyJ5oCn6IO96Zeu6aKYIEDosIvlo6sgMjAxOC0wNC0xMFxuICAgIGlmICghdGhpcy5fb2JzZXJ2ZXIpIHtcbiAgICAgIHRoaXMuX29ic2VydmVyID0gbmV3IE1PYnNlcnZlcihmdW5jdGlvbiAobXV0YXRpb25zKSB7XG4gICAgICAgIC8vIOWinumHj+abtOaWsCBpbiAyMDE3LTExLTE3XG4gICAgICAgIGlmIChtdXRhdGlvbnMgJiYgbXV0YXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG11dGF0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIG11dGF0aW9uID0gbXV0YXRpb25zW2ldIHx8IHt9O1xuICAgICAgICAgICAgLy8g5aKe6YeP5pu05pawIOebkeWQrOWxnuaAp+WPmOWMluS7peWFvOWuuWRpc3BsYXk6bm9uZS9ibG9ja+etieWFg+e0oOWPmOWMliBpbiAyMDE3LTExLTI3XG4gICAgICAgICAgICB2YXIgbm9kZXMgPSB1dGlsX2FjX2FlLm5vZGVsaXN0VG9BcnJheShtdXRhdGlvbi5hZGRlZE5vZGVzIHx8IFtdKTtcbiAgICAgICAgICAgIG5vZGVzID0gdXRpbF9hY19hZS5ub2RlbGlzdFRvQXJyYXkoZ2V0QXR0cnNDaGFyc05vZGVzKG11dGF0aW9uKSwgbm9kZXMpO1xuICAgICAgICAgICAgZWFjaF9ub2Rlcyhub2RlcywgbXV0YXRpb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7ICBcbiAgICB9XG4gICAgXG4gICAgLy8g6YWN572u6KeC5a+f6YCJ6aG5OlxuICAgIHZhciBfY2ZnID0ge1xuICAgICAgYXR0cmlidXRlczogdHJ1ZSwgICAgLy8g5bGe5oCn55qE5Y+Y5YqoXG4gICAgICBjaGlsZExpc3Q6IHRydWUsICAgICAvLyDlrZDoioLngrnnmoTlj5jliqhcbiAgICAgIGNoYXJhY3RlckRhdGE6IHRydWUsIC8vIOiKgueCueWGheWuueaIluiKgueCueaWh+acrOeahOWPmOWKqFxuICAgICAgc3VidHJlZTogdHJ1ZSwgICAgICAgLy8g5omA5pyJ5ZCO5Luj6IqC54K555qE5Y+Y5YqoXG4gICAgfTtcblxuICAgIC8vIOS8oOWFpeebruagh+iKgueCueWSjOinguWvn+mAiemhuVxuICAgIHRoaXMuX29ic2VydmVyLm9ic2VydmUoZG9jLmJvZHksIF9jZmcpO1xuICAgIGlmICh1dGlsX2FjX2FlLklTX0RFQlVHKSB7XG4gICAgICB1dGlsTG9nZ2VyLmxvZ2dlcih7XG4gICAgICAgIG1zZzogJ2FwbHVzX2F1dG9fZXhwIGluaXQgTXV0YXRpb25PYnNlcnZlciBzdWNjZXNzISdcbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcblxuICBpbml0OiBmdW5jdGlvbihvcHRzKSB7XG4gICAgdmFyIF9zZWxmID0gdGhpcztcbiAgICB2YXIgX2FlID0gYXBsdXMuX2FwbHVzX2F1dG9fZXhwIHx8IHt9O1xuICAgIGlmIChvcHRzICYmIG9wdHMudHlwZSAhPT0gJ3Jlc2V0JyAmJiAhX2FlLmhhc2hfdmFsdWUpIHtcbiAgICAgIF9hZS5oYXNoX3ZhbHVlID0ge307XG4gICAgfVxuXG4gICAgX3NlbGYuaGFuZGxlcl9kb21fY2hhbmdlKG51bGwsIHtcbiAgICAgIHR5cGU6ICdhcGx1c19pbml0J1xuICAgIH0pO1xuXG4gICAgLy8gc3RlcDIg55uR5ZCsZG9t5Y+Y5YyWXG4gICAgdmFyIE1PYnNlcnZlciA9IHdpbi5NdXRhdGlvbk9ic2VydmVyIHx8IHdpbi5XZWJLaXRNdXRhdGlvbk9ic2VydmVyIHx8IHdpbi5Nb3pNdXRhdGlvbk9ic2VydmVyO1xuICAgIGlmIChNT2JzZXJ2ZXIpIHtcbiAgICAgIF9hZS5vYnNlcnZlcl90aW1lcyA9IDA7XG4gICAgICAvLyDlop7ph4/mm7TmlrDlvoXmm53lhYnnmoTlhYPntKDvvIzlubbliJ3lp4vljJblhYPntKDlnZDmoIdcbiAgICAgIF9zZWxmLmluaXRfb2JzZXJ2ZXIoTU9ic2VydmVyLCBmdW5jdGlvbiAoZWxlLCBvcHRzKSB7XG4gICAgICAgIHZhciBfZWxlID0gZWxlICYmIGVsZS5wYXJlbnRFbGVtZW50ID8gZWxlLnBhcmVudEVsZW1lbnQgOiBlbGU7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdfc2VsZi5pc1Rocm90dGxlV2F0Y2ggPSAnICsgX3NlbGYuaXNUaHJvdHRsZVdhdGNoKTtcbiAgICAgICAgLy8gaWYgKF9zZWxmLmlzVGhyb3R0bGVXYXRjaCkge1xuICAgICAgICBfc2VsZi50aHJvdHRsZV9oYW5kbGVyX2RvbV9jaGFuZ2UoX2VsZSwgb3B0cyk7XG4gICAgICAgIC8vIH0gZWxzZSB7XG4gICAgICAgIC8vICAgX3NlbGYuaGFuZGxlcl9kb21fY2hhbmdlKF9lbGUsIG9wdHMpO1xuICAgICAgICAvLyB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8g5aKe5Yqg5ZCE56eN55uR5ZCsXG4gICAgICBfc2VsZi5hZGRBbGxMaXN0ZW5lcigpO1xuICAgIH1cbiAgfSxcblxuICBjbGVhcjogZnVuY3Rpb24ob3B0cykge1xuICAgIGlmIChvcHRzICYmIG9wdHMuZnJvbSA9PT0gJ2FwcGVuZE1ldGFJbmZvJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgX2FwbHVzX2F1dG9fZXhwID0gYXBsdXMuX2FwbHVzX2F1dG9fZXhwIHx8IHt9O1xuICAgIGlmIChfYXBsdXNfYXV0b19leHAuX2FjSGFzaE1hcCkge1xuICAgICAgX2FwbHVzX2F1dG9fZXhwLl9hY0hhc2hNYXAgPSB7fTtcbiAgICB9XG4gICAgaWYgKF9hcGx1c19hdXRvX2V4cC5oYXNoX3ZhbHVlKSB7XG4gICAgICBfYXBsdXNfYXV0b19leHAuaGFzaF92YWx1ZSA9IHt9O1xuICAgIH1cbiAgICBhcGx1cy5fYXBsdXNfYXV0b19leHAgPSBfYXBsdXNfYXV0b19leHA7XG4gICAgLy8g5riF6Zmk6L2u6K+i55uR5ZCsXG4gICAgaWYgKHRoaXMuX2xvb3Bfb2JzZXJ2ZXIpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9sb29wX29ic2VydmVyKTtcbiAgICAgIHRoaXMuX2xvb3Bfb2JzZXJ2ZXIgPSBudWxsO1xuICAgIH1cbiAgICAvLyDorqnor6Xop4Llr5/ogIXlr7nosaHlgZzmraLop4Llr5/mjIflrprnm67moIfnmoRET03lj5jljJYu55u05Yiw5YaN5qyh6LCD55So5YW2b2JzZXJ2ZSgp5pa55rOVLOivpeinguWvn+iAheWvueixoeWMheWQq+eahOWbnuiwg+WHveaVsOmDveS4jeS8muWGjeiiq+iwg+eUqC5cbiAgICBpZiAodGhpcy5fb2JzZXJ2ZXIpIHtcbiAgICAgIHRoaXMuX29ic2VydmVyLnRha2VSZWNvcmRzKCk7IC8vIOa4heepuuinguWvn+iAheWvueixoeeahOiusOW9lemYn+WIlyzlubbov5Tlm57ph4zpnaLnmoTlhoXlrrkuXG4gICAgICB0aGlzLl9vYnNlcnZlci5kaXNjb25uZWN0KCk7IC8vIOWBnOatouinguWvn+aMh+Wumuebruagh+eahERPTeWPmOWMli7nm7TliLDlho3mrKHosIPnlKjlhbZvYnNlcnZlKCnmlrnms5VcbiAgICB9IGVsc2Uge1xuICAgICAgLy8g56e76Zmk5ZCE56eN55uR5ZCsXG4gICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVyKCk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiDlsJ3or5XlnKjpnZ7lop7ph4/mm7TmlrDoh6rliqjmm53lhYnln4vngrnphY3nva7lnLrmma/kuIvmuIXnkIZkb23oioLngrnkuIrnmoToh6rliqjmm53lhYnmoIflv5dcbiAgICogQHBhcmFtcyBvYmoge09iamVjdH0ge1xuICAgKiAgIGF1dG9FeHBDb25maWc6IFt7XG4gICAqICAgICBjc3NTZWxlY3RvcjogXCJESVZbbG9na2V5PVwiL2RhY3UuMS4xLjFcIl1cIlxuICAgKiAgICAgZWxlbWVudFNlbGVjdG9yOiBcIkRJVltsb2drZXk9XCIvZGFjdS4xLjEuMVwiXVwiXG4gICAqICAgICBsb2drZXk6IFwiL2RhY3UuMS4xLjFcIlxuICAgKiAgICAgcHJvcHM6IFtcIl9sa2FcIl1cbiAgICogICB9XSxcbiAgICogICBpc1Rocm90dGxlV2F0Y2g6IGZhbHNlXG4gICAqIH1cbiAgICogQHBhcmFtcyBvcHRzIHtPYmplY3R9IHtcbiAgICogICBmcm9tOiAnYXBwZW5kTWV0YUluZm8nXG4gICAqIH1cbiAgICovXG4gIGNsZWFyRG9tOiBmdW5jdGlvbihvYmosIG9wdHMpIHtcbiAgICB2YXIgX2V4cENvbmZpZyA9IHRoaXMuYXV0b0V4cENvbmZpZyB8fCBbXTtcbiAgICBpZiAob3B0cyAmJiBvcHRzLmZyb20gIT09ICdhcHBlbmRNZXRhSW5mbycpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgX2V4cENvbmZpZy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHZhciBlbGVtZW50U2VsZWN0b3IgPSBfZXhwQ29uZmlnW2ldLmVsZW1lbnRTZWxlY3RvcjtcbiAgICAgICAgICB2YXIgX2RvY3MgPSBkb2MucXVlcnlTZWxlY3RvckFsbChlbGVtZW50U2VsZWN0b3IpO1xuICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgX2RvY3MubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIF9kb2NzW2pdLnNldEF0dHJpYnV0ZShjb25maWcuREFUQV9BUExVU19BRV9LRVksICcnKTsgIFxuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5hdXRvRXhwQ29uZmlnID0gb2JqICYmIG9iai5hdXRvRXhwQ29uZmlnID8gb2JqLmF1dG9FeHBDb25maWcgOiBbXTtcbiAgICAvLyB0aGlzLmlzVGhyb3R0bGVXYXRjaCA9IG9iaiA/IG9iai5pc1Rocm90dGxlV2F0Y2ggOiBmYWxzZTtcbiAgfSxcblxuICAvKipcbiAgICog6YeN572uZG9t6IqC54K55LiK55qE6Ieq5Yqo5pud5YWJ5qCH5b+XICYmIOmHjeaWsOWIneWni+WMlndhdGNoRE9NXG4gICAqIEBwYXJhbXMgb2JqIHtPYmplY3R9IHtcbiAgICogICBhdXRvRXhwQ29uZmlnOiBbe1xuICAgKiAgICAgY3NzU2VsZWN0b3I6IFwiRElWW2xvZ2tleT1cIi9kYWN1LjEuMS4xXCJdXCJcbiAgICogICAgIGVsZW1lbnRTZWxlY3RvcjogXCJESVZbbG9na2V5PVwiL2RhY3UuMS4xLjFcIl1cIlxuICAgKiAgICAgbG9na2V5OiBcIi9kYWN1LjEuMS4xXCJcbiAgICogICAgIHByb3BzOiBbXCJfbGthXCJdXG4gICAqICAgfV0sXG4gICAqICAgaXNUaHJvdHRsZVdhdGNoOiBmYWxzZVxuICAgKiB9XG4gICAqIEBwYXJhbXMgb3B0cyB7T2JqZWN0fSB7XG4gICAqICAgZnJvbTogJ2FwcGVuZE1ldGFJbmZvJ1xuICAgKiB9XG4gICAqL1xuICByZXNldDogZnVuY3Rpb24gKG9iaiwgb3B0cykge1xuICAgIHRoaXMuY2xlYXJEb20ob2JqLCBvcHRzKTtcbiAgICB0aGlzLmluaXQoe3R5cGU6ICdyZXNldCd9KTtcbiAgfVxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IFdhdGNoRG9tO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvcGx1Z2luc193ZWIvbGliX2FlL3dhdGNoRE9NLmpzXG4vLyBtb2R1bGUgaWQgPSA0OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIHByb2plY3QgLSBmaWxlcGF0aFxuICogZGVzY3JpcHRpb25cbiAqXG4gKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG4gKlxuICogQXV0aG9yczpcbiAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vLyB2YXIgY29uZmlnID0gcmVxdWlyZSgnLi4vLi4vbGliX2NvbW1vbi9jb25maWcnKTtcblxudmFyIGRvYyA9IGRvY3VtZW50O1xuXG4vKipcbiAqIOWIpOaWreafkOS4gOS4quWdkOagh+aYr+WQpuWcqOWPr+inhueql+WGhe+8jOWPqumcgOimgeWIpOaWreWPr+inhueql+eahOW3puS4iuinkuS4juWPs+S4i+inkuWNs+WPr1xuICogQHBhcmFtcyB7T2JqZWN0fSB3aW5Qb3NpdGlvbnNcbiAqIEBwYXJhbXMge09iamVjdH0gdiA6IHsgeDogMSwgeTEgfVxuICpcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbnZhciBwb3NpdGlvbklzSW5XaW4gPSBmdW5jdGlvbih3aW5Qb3NpdGlvbnMsIHYpIHtcbiAgaWYgKHYueCA+PSB3aW5Qb3NpdGlvbnMucExlZnRUb3BbMF1cbiAgICYmIHYueCA8PSB3aW5Qb3NpdGlvbnMucFJpZ2h0Qm90dG9tWzBdXG4gICAmJiB2LnkgPj0gd2luUG9zaXRpb25zLnBMZWZ0VG9wWzFdXG4gICAmJiB2LnkgPD0gd2luUG9zaXRpb25zLnBSaWdodEJvdHRvbVsxXSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuLyoqXG4gKiDmoLnmja7lj6/op4bnqpflm5vkuKrpobbngrnnmoTlnZDmoIfpm4blkozlvZPliY3lhYPntKDlgZrorqHnrpfvvIzliKTmlq3lvZPliY3lhYPntKDlnKjlj6/op4bnqpflhoXnmoTpnaLnp6/kuI7lhYPntKDmnKzouqvnmoTpnaLnp6/mr5TkvovvvIzljbPlj6/op4bnjodcbiAqIEBwYXJhbXMge09iamVjdH0gd2luUG9zaXRpb25zXG4gKiBAcGFyYW1zIHtFbGVtZW50fSB2XG4gKlxuICogQHJldHVybiB7RmxvYXR9IHJhdGUgMC4zXFwwLjFcXDAuOVxcMSAuLi4uLi5cbiAqL1xudmFyIGdldFZpZXdhYmlsaXR5UmF0ZSA9IGZ1bmN0aW9uKHdpblBvc2l0aW9ucywgdikge1xuICB2YXIgcmF0ZSA9IDA7XG4gIC8vIDHjgIHlt6bkuIrop5LmmK/lkKblnKjlj6/op4bnqpflhoVcbiAgdmFyIGVsZUxlZnRUb3BJc0luV2luID0gcG9zaXRpb25Jc0luV2luKHdpblBvc2l0aW9ucywgdik7XG5cbiAgLy8gMuOAgeWPs+S4iuinkuaYr+WQpuWcqOWPr+inhueql+WGhVxuICB2YXIgZWxlUmlnaHRUb3BJc0luV2luID0gcG9zaXRpb25Jc0luV2luKHdpblBvc2l0aW9ucywge1xuICAgICd4Jzogdi54ICsgdi53aWR0aCxcbiAgICAneSc6IHYueVxuICB9KTtcblxuICAvLyAz44CB5bem5LiL6KeS5piv5ZCm5Zyo5Y+v6KeG56qX5YaFXG4gIHZhciBlbGVMZWZ0Qm90dG9tSXNJbldpbiA9IHBvc2l0aW9uSXNJbldpbih3aW5Qb3NpdGlvbnMsIHtcbiAgICAneCc6IHYueCxcbiAgICAneSc6IHYueSArIHYuaGVpZ2h0XG4gIH0pO1xuXG4gIC8vIDTjgIHlj7PkuIvop5LmmK/lkKblnKjlj6/op4bnqpflhoVcbiAgdmFyIGVsZVJpZ2h0Qm90dG9tSXNJbldpbiA9IHBvc2l0aW9uSXNJbldpbih3aW5Qb3NpdGlvbnMsIHtcbiAgICAneCc6IHYueCArIHYud2lkdGgsXG4gICAgJ3knOiB2LnkgKyB2LmhlaWdodFxuICB9KTtcblxuICAvLyA9PT09PT0gMeOAgeaVtOS4quWHuueOsCA9PT09PT1cbiAgdmFyIGZ1bGwgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcnMgPSAwO1xuICAgIGlmIChlbGVMZWZ0VG9wSXNJbldpbiAmJiBlbGVSaWdodEJvdHRvbUlzSW5XaW4pIHtcbiAgICAgIC8vIFRPRE8g55u05o6l566X5pud5YWJXG4gICAgICBycyA9IHYuc2l6ZSAvIHYuc2l6ZTtcbiAgICB9XG4gICAgcmV0dXJuIHJzO1xuICB9O1xuXG4gIC8vID09PT09PSAy44CB5LiA6L655Ye6546wID09PT09PVxuICB2YXIgaGFsZiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB3aWR0aCA9IDAsIGhlaWdodCA9IDA7XG4gICAgaWYgKGVsZUxlZnRUb3BJc0luV2luICYmIGVsZVJpZ2h0VG9wSXNJbldpbiAmJiAhZWxlTGVmdEJvdHRvbUlzSW5XaW4gJiYgIWVsZVJpZ2h0Qm90dG9tSXNJbldpbikge1xuICAgICAgLy8gMi4x44CB5LiK5Y2K6YOo5YiG5Ye6546w5Zyo5Y+v6KeG56qX5YaFXG4gICAgICB3aWR0aCA9IHYud2lkdGg7XG4gICAgICBoZWlnaHQgPSB3aW5Qb3NpdGlvbnMucExlZnRCb3R0b21bMV0gLSB2Lnk7XG4gICAgfSBlbHNlIGlmICghZWxlTGVmdFRvcElzSW5XaW4gJiYgZWxlUmlnaHRUb3BJc0luV2luICYmICFlbGVMZWZ0Qm90dG9tSXNJbldpbiAmJiBlbGVSaWdodEJvdHRvbUlzSW5XaW4pIHtcbiAgICAgIC8vIDIuMuOAgeWPs+WNiumDqOWIhuWHuueOsOWcqOWPr+inhueql+WGhVxuICAgICAgd2lkdGggPSB3aW5Qb3NpdGlvbnMucExlZnRUb3BbMF0gLSB2Lng7XG4gICAgICBoZWlnaHQgPSB2Lnk7XG4gICAgfSBlbHNlIGlmICghZWxlTGVmdFRvcElzSW5XaW4gJiYgIWVsZVJpZ2h0VG9wSXNJbldpbiAmJiBlbGVMZWZ0Qm90dG9tSXNJbldpbiAmJiBlbGVSaWdodEJvdHRvbUlzSW5XaW4pIHtcbiAgICAgIC8vIDIuM+OAgeS4i+WNiumDqOWIhuWHuueOsOWcqOWPr+inhueql+WGhVxuICAgICAgd2lkdGggPSB2LndpZHRoO1xuICAgICAgLy8gaGVpZ2h0ID0gd2luUG9zaXRpb25zLnBMZWZ0VG9wWzFdIC0gdi55O1xuICAgICAgaGVpZ2h0ID0gdi5oZWlnaHQgLSBNYXRoLmFicyh3aW5Qb3NpdGlvbnMucExlZnRUb3BbMV0gLSB2LnkpO1xuICAgIH0gZWxzZSBpZiAoZWxlTGVmdFRvcElzSW5XaW4gJiYgIWVsZVJpZ2h0VG9wSXNJbldpbiAmJiBlbGVMZWZ0Qm90dG9tSXNJbldpbiAmJiAhZWxlUmlnaHRCb3R0b21Jc0luV2luKSB7XG4gICAgICAvLyAyLjTjgIHlt6bljYrpg6jliIblh7rnjrDlnKjlj6/op4bnqpflhoVcbiAgICAgIHdpZHRoID0gd2luUG9zaXRpb25zLnBSaWdodFRvcFswXSAtIHYueDtcbiAgICAgIC8vIGhlaWdodCA9IHYueTtcbiAgICAgIGhlaWdodCA9IHYuaGVpZ2h0O1xuICAgIH1cbiAgICByZXR1cm4gdi5zaXplID4gMCA/IE1hdGguYWJzKHdpZHRoICogaGVpZ2h0KSAvIHYuc2l6ZSA6IDA7XG4gIH07XG5cbiAgLy8gPT09PT09IDPjgIHkuIDkuKrop5Llh7rnjrAgPT09PT09XG4gIHZhciBjb3JuZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgd2lkdGggPSAwLCBoZWlnaHQgPSAwO1xuICAgIGlmIChlbGVMZWZ0VG9wSXNJbldpbiAmJiAhZWxlUmlnaHRUb3BJc0luV2luICYmICFlbGVMZWZ0Qm90dG9tSXNJbldpbiAmJiAhZWxlUmlnaHRCb3R0b21Jc0luV2luKSB7XG4gICAgICAvLyAzLjHjgIHlt6bkuIrop5Llh7rnjrDlnKjlj6/op4bnqpflhoVcbiAgICAgIHdpZHRoID0gd2luUG9zaXRpb25zLnBSaWdodEJvdHRvbVswXSAtIHYueDtcbiAgICAgIGhlaWdodCA9IHdpblBvc2l0aW9ucy5wUmlnaHRCb3R0b21bMV0gLSB2Lnk7XG4gICAgfSBlbHNlIGlmICghZWxlTGVmdFRvcElzSW5XaW4gJiYgZWxlUmlnaHRUb3BJc0luV2luICYmICFlbGVMZWZ0Qm90dG9tSXNJbldpbiAmJiAhZWxlUmlnaHRCb3R0b21Jc0luV2luKSB7XG4gICAgICAvLyAzLjLjgIHlj7PkuIrop5Llh7rnjrDlnKjlj6/op4bnqpflhoVcbiAgICAgIHdpZHRoID0gd2luUG9zaXRpb25zLnBMZWZ0Qm90dG9tWzBdIC0gdi54O1xuICAgICAgaGVpZ2h0ID0gd2luUG9zaXRpb25zLnBMZWZ0Qm90dG9tWzFdIC0gdi55O1xuICAgIH0gZWxzZSBpZiAoIWVsZUxlZnRUb3BJc0luV2luICYmICFlbGVSaWdodFRvcElzSW5XaW4gJiYgZWxlTGVmdEJvdHRvbUlzSW5XaW4gJiYgIWVsZVJpZ2h0Qm90dG9tSXNJbldpbikge1xuICAgICAgLy8gMy4z44CB5bem5LiL6KeS5Ye6546w5Zyo5Y+v6KeG56qX5YaFXG4gICAgICB3aWR0aCA9IHdpblBvc2l0aW9ucy5wUmlnaHRUb3BbMF0gLSB2Lng7XG4gICAgICBoZWlnaHQgPSB3aW5Qb3NpdGlvbnMucFJpZ2h0VG9wWzFdIC0gdi55O1xuICAgIH0gZWxzZSBpZiAoIWVsZUxlZnRUb3BJc0luV2luICYmICFlbGVSaWdodFRvcElzSW5XaW4gJiYgIWVsZUxlZnRCb3R0b21Jc0luV2luICYmIGVsZVJpZ2h0Qm90dG9tSXNJbldpbikge1xuICAgICAgLy8gMy4044CB5Y+z5LiL6KeS5Ye6546w5Zyo5Y+v6KeG56qX5YaFXG4gICAgICB3aWR0aCA9IHdpblBvc2l0aW9ucy5wTGVmdFRvcFswXSAtIHYueDtcbiAgICAgIGhlaWdodCA9IHdpblBvc2l0aW9ucy5wTGVmdFRvcFsxXSAtIHYueTtcbiAgICB9XG4gICAgcmV0dXJuIHYuc2l6ZSA+IDAgPyBNYXRoLmFicyh3aWR0aCAqIGhlaWdodCkgLyB2LnNpemUgOiAwO1xuICB9O1xuXG4gIC8vIOi/memHjOS7juWkp+WIsOWwj+eahOmhuuW6j+S4jeiDveaUuSAx44CBZnVsbCA9PiAy44CBaGFsZiA9PiAz44CBY29ybmVyXG4gIHJhdGUgPSBmdWxsKCk7XG4gIGlmIChyYXRlID4gMCkge1xuICAgIHJldHVybiByYXRlO1xuICB9XG5cbiAgcmF0ZSA9IGhhbGYoKTtcbiAgaWYgKHJhdGUgPiAwKSB7XG4gICAgcmV0dXJuIHJhdGU7XG4gIH1cblxuICByYXRlID0gY29ybmVyKCk7XG4gIGlmIChyYXRlID4gMCkge1xuICAgIHJldHVybiByYXRlO1xuICB9XG5cbiAgcmV0dXJuIHJhdGU7XG59O1xuXG5leHBvcnRzLndyYXBWaWV3YWJpbGl0eVJhdGUgPSBmdW5jdGlvbih3aW5Qb3NpdGlvbnMsIHYsIEFDX1JBVEUpIHtcbiAgdmFyIHJhdGUgPSAwO1xuICBpZiAod2luUG9zaXRpb25zKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB3aW5Qb3NpdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHJhdGUgPSBnZXRWaWV3YWJpbGl0eVJhdGUod2luUG9zaXRpb25zW2ldLCB2KTtcbiAgICAgIGlmIChyYXRlIDwgQUNfUkFURSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByYXRlO1xufTtcblxuLy8g6I635Y+W5b2T5YmN5YWD57Sg55qEWOaIllnlnZDmoIcsIFRPRE/ms6jmhI9wb3NpdGlvbuWumuS9jemXrumimFxuLy8gdmFyIGdldEVsZW1lbnRPZmZzZXQgPSBmdW5jdGlvbihlbGVtZW50LCB0eXBlKSB7XG4vLyAgIHZhciBhY3R1YWxPZmZzZXQgPSBlbGVtZW50W3R5cGVdO1xuLy8gICB2YXIgY3VycmVudCA9IGVsZW1lbnQub2Zmc2V0UGFyZW50O1xuXG4vLyAgIHZhciBwb3NpdGlvbiA9IGN1cnJlbnQgJiYgY3VycmVudC5zdHlsZSA/IGN1cnJlbnQuc3R5bGUucG9zaXRpb24gOiAnc3RhdGljJztcbi8vICAgd2hpbGUgKGN1cnJlbnQgIT09IG51bGwgJiYgcG9zaXRpb24gIT09ICdyZWxhdGl2ZScpIHtcbi8vICAgICBhY3R1YWxPZmZzZXQgKz0gY3VycmVudFt0eXBlXTtcbi8vICAgICBjdXJyZW50ID0gY3VycmVudC5vZmZzZXRQYXJlbnQ7XG4vLyAgIH1cbi8vICAgcmV0dXJuIGFjdHVhbE9mZnNldDtcbi8vIH07XG5cbnZhciBpc051bWJlciA9IGZ1bmN0aW9uIChuKSB7XG4gIHJldHVybiB0eXBlb2YgbiA9PT0gJ251bWJlcicgJiYgbiAhPT0gTmFOO1xufTtcblxuLyoqXG4gKiBAcGFyYW1zIGVsZW1lbnRcbiAqIEByZXR1cm4ge1xuICAgICB3aWR0aDogMTU5Ljk4NDM3NSwgLy8gbXVzdFxuICAgICBoZWlnaHQ6IDE2LCAgICAgICAgLy8gbXVzdFxuICAgICB4OiA2OCwgICAgICAgICAgICAgLy8gbXVzdFxuICAgICB5OiAxNDE5LCAgICAgICAgICAgLy8gbXVzdFxuICAgICBib3R0b206IDE0MzUsICAgICAgLy8gZW5hYmxlXG4gICAgIGxlZnQ6IDY4LCAgICAgICAgICAvLyBlbmFibGVcbiAgICAgcmlnaHQ6IDIyNy45ODQzNzUsIC8vIGVuYWJsZVxuICAgICB0b3A6IDE0MTksICAgICAgICAgLy8gZW5hYmxlXG4gICB9XG4gKi9cbnZhciBnZXRFbGVtZW50UG9zaXRpb24gPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICB2YXIgcG9zID0ge307XG4gIGlmIChlbGVtZW50KSB7XG4gICAgaWYgKHR5cGVvZiBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcG9zID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSB8fCB7fTtcbiAgICB9XG4gICAgLy8g5qiq5Z2Q5qCHXG4gICAgaWYgKCFpc051bWJlcihwb3MueCkpIHtcbiAgICAgIGlmIChpc051bWJlcihwb3MubGVmdCkpIHtcbiAgICAgICAgcG9zLnggPSBwb3MubGVmdDtcbiAgICAgIH1cbiAgICAgIC8vIGVsc2Uge1xuICAgICAgLy8gICBwb3MueCA9IGdldEVsZW1lbnRPZmZzZXQoZWxlbWVudCwgJ29mZnNldExlZnQnKTtcbiAgICAgIC8vIH1cbiAgICB9XG4gICAgLy8g57q15Z2Q5qCHXG4gICAgaWYgKCFpc051bWJlcihwb3MueSkpIHtcbiAgICAgIGlmIChpc051bWJlcihwb3MudG9wKSkge1xuICAgICAgICBwb3MueSA9IHBvcy50b3A7XG4gICAgICB9XG4gICAgICAvLyBlbHNlIHtcbiAgICAgIC8vICAgcG9zLnkgPSBnZXRFbGVtZW50T2Zmc2V0KGVsZW1lbnQsICdvZmZzZXRUb3AnKTtcbiAgICAgIC8vIH1cbiAgICB9XG4gICAgaWYgKCFpc051bWJlcihwb3Mud2lkdGgpKSB7XG4gICAgICBwb3Mud2lkdGggPSBlbGVtZW50Lm9mZnNldFdpZHRoO1xuICAgIH1cbiAgICBpZiAoIWlzTnVtYmVyKHBvcy5oZWlnaHQpKSB7XG4gICAgICBwb3MuaGVpZ2h0ID0gZWxlbWVudC5vZmZzZXRIZWlnaHQ7XG4gICAgfVxuICB9XG4gIHJldHVybiBwb3M7XG59O1xuZXhwb3J0cy5nZXRFbGVtZW50UG9zaXRpb24gPSBnZXRFbGVtZW50UG9zaXRpb247XG5cbi8qKlxuICogQHBhcmFtcyB7U3RyaW5nfSBwb3NpdGlvblNlbGVjdG9yIChlbmFibGUpIC8vIGVnOiBkaXYuY2xhc3NOYW1lXG4gKiDojrflj5blj6/op4bnqpfnmoTlm5vkuKrln7rmnKzlj4LmlbBjbGllbnRXaWR0aOOAgWNsaWVudEhlaWdodOOAgXNjcm9sbFRvcOOAgXNjcm9sbExlZnRcbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmV4cG9ydHMuZ2V0V2luUG9zaXRpb25zID0gZnVuY3Rpb24ocG9zaXRpb25TZWxlY3Rvcikge1xuICB2YXIgcG9zdGlvbnMgPSBbXTtcbiAgaWYgKHBvc2l0aW9uU2VsZWN0b3IgJiYgdHlwZW9mIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgc2VsZWN0b3JFbGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHBvc2l0aW9uU2VsZWN0b3IpO1xuICAgIGlmIChzZWxlY3RvckVsZSkge1xuICAgICAgdmFyIF9wb3MgPSBnZXRFbGVtZW50UG9zaXRpb24oc2VsZWN0b3JFbGUpIHx8IHt9O1xuICAgICAgaWYgKGlzTnVtYmVyKF9wb3MueCkgJiYgaXNOdW1iZXIoX3Bvcy55KSAmJiBpc051bWJlcihfcG9zLndpZHRoKSAmJiBpc051bWJlcihfcG9zLmhlaWdodCkpIHtcbiAgICAgICAgcG9zdGlvbnMucHVzaCh7XG4gICAgICAgICAgcExlZnRUb3A6IFtfcG9zLngsIF9wb3MueV0sXG4gICAgICAgICAgcFJpZ2h0VG9wOiBbX3Bvcy54ICsgX3Bvcy53aWR0aCwgX3Bvcy55XSxcbiAgICAgICAgICBwTGVmdEJvdHRvbTogW19wb3MueCwgX3Bvcy55ICsgX3Bvcy5oZWlnaHRdLFxuICAgICAgICAgIHBSaWdodEJvdHRvbTogW19wb3MueCArIF9wb3Mud2lkdGgsIF9wb3MueSArIF9wb3MuaGVpZ2h0XVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgdmFyIGVsZTEgPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuICB2YXIgZWxlMiA9IGRvYy5ib2R5O1xuICB2YXIgY2xpZW50V2lkdGggPSBlbGUxLmNsaWVudFdpZHRoIHx8IGVsZTIub2Zmc2V0V2lkdGggfHwgMDtcbiAgdmFyIGNsaWVudEhlaWdodCA9IGVsZTEuY2xpZW50SGVpZ2h0IHx8IGVsZTIub2Zmc2V0SGVpZ2h0IHx8IDA7XG4gIHBvc3Rpb25zLnB1c2goe1xuICAgIHBMZWZ0VG9wOiBbMCwgMF0sXG4gICAgcFJpZ2h0VG9wOiBbY2xpZW50V2lkdGgsIDBdLFxuICAgIHBMZWZ0Qm90dG9tOiBbMCwgY2xpZW50SGVpZ2h0XSxcbiAgICBwUmlnaHRCb3R0b206IFtjbGllbnRXaWR0aCwgY2xpZW50SGVpZ2h0XVxuICB9KTtcbiAgcmV0dXJuIHBvc3Rpb25zO1xufTtcblxuLy8g6aqM6K+B5piv5ZCm5bey5pud5YWJXG5leHBvcnRzLmNoZWNrSXNSZWNvcmQgPSBmdW5jdGlvbihlbGVtZW50LCBvbGRfaGFzaF92YWx1ZSwgYXBsdXNEb21BdHRyS2V5KSB7XG4gIHZhciBpc1JlY29yZDtcbiAgdHJ5IHtcbiAgICBpZiAoZWxlbWVudCAmJiBlbGVtZW50LmdldEF0dHJpYnV0ZSkge1xuICAgICAgdmFyIGF0dHJfdmFsdWUgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShhcGx1c0RvbUF0dHJLZXkpIHx8ICcnO1xuICAgICAgaXNSZWNvcmQgPSBvbGRfaGFzaF92YWx1ZSA/IGF0dHJfdmFsdWUgPT09IG9sZF9oYXNoX3ZhbHVlIDogISFhdHRyX3ZhbHVlO1xuICAgIH1cbiAgfSBjYXRjaChlKSB7fVxuICAvLyBjb25zb2xlLmxvZygnaXNSZWNvcmQgPSAnICsgaXNSZWNvcmQpO1xuICByZXR1cm4gaXNSZWNvcmQ7XG59O1xuXG5leHBvcnRzLmdldFZpZXdhYmlsaXR5UmF0ZUluV2luZG93ID0gZnVuY3Rpb24od2luUG9zaXRpb25zLCBlbGVtZW50QXJlYSwgQUNfUkFURSkge1xuICB2YXIgcmF0ZSA9IDA7XG4gIGlmICh3aW5Qb3NpdGlvbnMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHdpblBvc2l0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgcmF0ZSA9IGVsZW1lbnRBcmVhIC8gd2luUG9zaXRpb25zW2ldLnNpemU7XG4gICAgICBpZiAocmF0ZSA+PSBBQ19SQVRFKSB7XG4gICAgICAgIHJldHVybiByYXRlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmF0ZTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9wbHVnaW5zX3dlYi9saWJfYWUvdXRpbC91dGlsRWxlbWVudEFjLmpzXG4vLyBtb2R1bGUgaWQgPSA0OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIHByb2plY3QgLSBmaWxlcGF0aFxuICogZGVzY3JpcHRpb25cbiAqXG4gKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG4gKlxuICogQXV0aG9yczpcbiAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vLyB2YXIgdXRpbEV2ZW50ID0gcmVxdWlyZSgnLi91dGlsL2V2ZW50Jyk7XG52YXIgdXRpbERhc2ggPSByZXF1aXJlKCdAdXRpbHMvdXRpbERhc2gnKTtcbnZhciB1dGlsR29sZGxvZyA9IHJlcXVpcmUoJ0B1dGlscy91dGlsR29sZGxvZycpO1xudmFyIGVhY2ggPSByZXF1aXJlKCdAdXRpbHMvZWFjaCcpO1xuXG52YXIgdXRpbEV4cG9zdXJlID0gcmVxdWlyZSgnLi91dGlsL3V0aWxFeHBvc3VyZScpO1xudmFyIHV0aWxFbGVtZW50QWMgPSByZXF1aXJlKCcuL3V0aWwvdXRpbEVsZW1lbnRBYycpO1xuXG52YXIgY29uZmlnID0gcmVxdWlyZSgnLi4vbGliX2NvbW1vbi9jb25maWcnKTtcbnZhciB1dGlsX2FjX2FlID0gcmVxdWlyZSgnLi4vbGliX2NvbW1vbi91dGlsX2FjX2FlJyk7XG4vLyDoh6rliqjmm53lhYnmiZPngrkgLSDliKTlrprlj6/op4bnmoTmr5TkvovnjodcbnZhciBBQ19SQVRFID0gY29uZmlnLkFVVE9fQVRfVklFV19SQVRFO1xudmFyIEFDX1JBVEVfSU5fV0lORE9XID0gY29uZmlnLkFVVE9fQVRfVklFV19SQVRFX0lOX1dJTkRPVztcbnZhciB3aW4gPSB3aW5kb3c7XG52YXIgSU9ic2VydmVyID0gd2luLkludGVyc2VjdGlvbk9ic2VydmVyO1xudmFyIGlvYnNlcnZlck1hcCA9IHt9O1xuXG4vLyB2YXIgYXBsdXMgPSAod2luZG93LmFwbHVzIHx8ICh3aW5kb3cuYXBsdXMgPSB7fSkpO1xuYXBsdXMuX2FwbHVzX2F1dG9fZXhwLmlvYnNlcnZlck1hcCA9IGlvYnNlcnZlck1hcDtcbi8qKlxuICog5qC55o2u5b6F5pud5YWJ55qE5YWD57Sg5YiX6KGo5qOA5p+l5pys5qyh5rua6L2u5oiW6ICF56qX5Y+j5aSn5bCP5Y+Y5YyW6Kem5Y+R55qE5YWD57Sg5piv5ZCm5Zyo5Y+v6KeG56qX5YaF77yI5pud5YWJ77yJXG4gKiDlsIbmn6Xor6LliLDnmoTlpITkuo7mm53lhYnnirbmgIHnmoTlhYPntKDnirbmgIHvvIhzdGF0dXPvvInlsZ7mgKflgLzmlLnkuLrigJwx4oCd77yM6K6+572u5Yid5aeL5pud5YWJ5pe26Ze0ZXhwb3N1cmVUaW1lXG4gKiDlubbov5Tlm57mnKzmrKHkuovku7bop6blj5HnmoTmm53lhYnlhYPntKDnmoTmnaHmlbBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyB7XG4gKiAgYm91bmRpbmdDbGllbnRSZWN0OiB7XG4gKiAgICAgYm90dG9tOiAxNDFcbiAqICAgICBoZWlnaHQ6IDQ1MlxuICogICAgIGxlZnQ6IDRcbiAqICAgICByaWdodDogMTg4XG4gKiAgICAgdG9wOiAtMzExXG4gKiAgICAgd2lkdGg6IDE4NFxuICogICAgIHg6IDRcbiAqICAgICB5OiAtMzExXG4gKiAgfSxcbiAqICBpbnRlcnNlY3Rpb25SYXRpbzogMC4zMTE5NDY4OTg2OTg4MDY3NixcbiAqICBpbnRlcnNlY3Rpb25SZWN0OiB7XG4gKiAgICAgYm90dG9tOiA1MjFcbiAqICAgICBoZWlnaHQ6IDQwMFxuICogICAgIGxlZnQ6IDBcbiAqICAgICByaWdodDogMzc1XG4gKiAgICAgdG9wOiAxMjFcbiAqICAgICB3aWR0aDogMzc1XG4gKiAgICAgeDogMFxuICogICAgIHk6IDEyMVxuICogIH0sXG4gKiAgaXNJbnRlcnNlY3Rpbmc6IHRydWUgfHwgZmFsc2UsXG4gKiAgcm9vdEJvdW5kczoge1xuICogICAgIGJvdHRvbTogODEyXG4gKiAgICAgaGVpZ2h0OiA4MTJcbiAqICAgICBsZWZ0OiAwXG4gKiAgICAgcmlnaHQ6IDM3NVxuICogICAgIHRvcDogMFxuICogICAgIHdpZHRoOiAzNzVcbiAqICAgICB4OiAwXG4gKiAgICAgeTogMFxuICogIH0sXG4gKiAgdGFyZ2V0OiBFbGVtZW50LFxuICogIHRpbWU6IDE4NzcuNDk5OTk5OTQ0MTIwNlxuICogfVxuICogQHJldHVybiB7TnVtYmVyfSBzaXplIC8vIOacrOasoeS6i+S7tuinpuWPkeeahOabneWFieWFg+e0oOeahOadoeaVsFxuICovXG5mdW5jdGlvbiBmaWx0ZXJTdGFydEV4cG9zdXJlU2l6ZShleHBvc3VyZVRpbWUsIG9wdHMsIG1vdmVPclNjcm9sbCkge1xuICB2YXIgd2luUG9zaXRpb25zID0gdXRpbEVsZW1lbnRBYy5nZXRXaW5Qb3NpdGlvbnMoKTtcbiAgdmFyIHNpemUgPSAwO1xuICB2YXIgX2FwbHVzX2F1dG9fZXhwID0gdXRpbEdvbGRsb2cuZ2V0R29sZGxvZ1ZhbCgnX2FwbHVzX2F1dG9fZXhwJykgfHwge307XG4gIHZhciBfYWNIYXNoTWFwID0gX2FwbHVzX2F1dG9fZXhwLl9hY0hhc2hNYXAgfHwge307XG4gIGZvciAodmFyIGxvZ2tleSBpbiBfYWNIYXNoTWFwKSB7XG4gICAgdmFyIGVsZV9zID0gX2FjSGFzaE1hcFtsb2drZXldIHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlX3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB2ID0gZWxlX3NbaV0gfHwge307XG4gICAgICB2LmV2ZW50VHlwZSA9ICdJT2JzZXJ2ZXInO1xuICAgICAgdmFyIGlzVGFyZ2V0ID0gIW1vdmVPclNjcm9sbCA/IHYuZWxlbWVudCA9PT0gb3B0cy50YXJnZXQgOiB0cnVlO1xuICAgICAgaWYgKHYuc3RhdHVzID09PSAwICYmIHYuZXhwQ29uZmlnICYmIGlzVGFyZ2V0KSB7XG4gICAgICAgIHZhciBfZWxlUG9zID0gb3B0cy5ib3VuZGluZ0NsaWVudFJlY3QgfHwge307XG4gICAgICAgIGlmICghX2VsZVBvcy53aWR0aCAmJiAhX2VsZVBvcy5oZWlnaHQpIHtcbiAgICAgICAgICBfZWxlUG9zID0gb3B0cy50YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgfHwge307XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF9lbGVQb3Mud2lkdGggJiYgX2VsZVBvcy5oZWlnaHQpIHtcbiAgICAgICAgICB2ID0gdXRpbERhc2guYXNzaWduKHYsIF9lbGVQb3MpO1xuICAgICAgICAgIHYueCA9IF9lbGVQb3MueCB8fCBfZWxlUG9zLmxlZnQ7XG4gICAgICAgICAgdi55ID0gX2VsZVBvcy55IHx8IF9lbGVQb3MudG9wO1xuICAgICAgICAgIHYud2lkdGggPSBfZWxlUG9zLndpZHRoO1xuICAgICAgICAgIHYuaGVpZ2h0ID0gX2VsZVBvcy5oZWlnaHQ7XG4gICAgICAgICAgdi5zaXplID0gX2VsZVBvcy53aWR0aCAqIF9lbGVQb3MuaGVpZ2h0O1xuICAgICAgICAgIHZhciBpc1JlY29yZCA9IHV0aWxFbGVtZW50QWMuY2hlY2tJc1JlY29yZCh2LmVsZW1lbnQsIHYuaGFzaF92YWx1ZSwgJ19hcGx1c19hdXRvX2V4cCcpO1xuICAgICAgICAgIC8vIOWcqOWPr+inhueql+WGhe+8jOS4lGRvbeiKgueCueS4iuayoeacieW3suabneWFieagh+ivhu+8jOS4lOS4jeWcqOWGheWtmOS4reaIluWcqOWGheWtmOS4reS9hueKtuaAgeaYrzDvvIgw5Li65Yid5aeL54q25oCB77yJXG4gICAgICAgICAgLy8g5Y+v6KeG5YyW6Z2i56ev55u45a+55q+U5LiO5bGP5bmV6Z2i56ev5q+U5L6LXG4gICAgICAgICAgdmFyIGVsZW1lbnRBcmVhID0gdi53aWR0aCAqIHYuaGVpZ2h0ICogb3B0cy5pbnRlcnNlY3Rpb25SYXRpbztcbiAgICAgICAgICB2YXIgdmlld2FiaWxpdHlSYXRlSW5XaW5kb3cgPSB1dGlsRWxlbWVudEFjLmdldFZpZXdhYmlsaXR5UmF0ZUluV2luZG93KHdpblBvc2l0aW9ucywgZWxlbWVudEFyZWEsIEFDX1JBVEVfSU5fV0lORE9XKTtcbiAgICAgICAgICBpZiAoIWlzUmVjb3JkKSB7XG4gICAgICAgICAgICB2YXIgaXNSZWxhdGVpdmVSYXRpbyA9IG9wdHMuaW50ZXJzZWN0aW9uUmF0aW8gPj0gQUNfUkFURTtcbiAgICAgICAgICAgIGlmIChpc1JlbGF0ZWl2ZVJhdGlvIHx8IHZpZXdhYmlsaXR5UmF0ZUluV2luZG93ID49IEFDX1JBVEVfSU5fV0lORE9XKSB7XG4gICAgICAgICAgICAgIHYuZXhwb3N1cmVUaW1lID0gZXhwb3N1cmVUaW1lO1xuICAgICAgICAgICAgICB2LnN0YXR1cyA9IDE7IC8vIOWIneingeWFieeKtuaAgVxuICAgICAgICAgICAgICB2YXIgYWVBdXRvVXNlckZuID0gY29uZmlnLmdldEF1dG9FeHBVc2VyRm4oKTtcbiAgICAgICAgICAgICAgaWYgKGFlQXV0b1VzZXJGbikge1xuICAgICAgICAgICAgICAgIHYudXNlclBhcmFtcyA9IHV0aWxfYWNfYWUuYXV0b1VzZXJGbkhhbmRsZXIoYWVBdXRvVXNlckZuLCB2LmVsZW1lbnQsIHYuZWxlbWVudFNlbGVjdG9yKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB2LnZpZXdhYmlsaXR5UmF0ZSA9IGlzUmVsYXRlaXZlUmF0aW8gPyBvcHRzLmludGVyc2VjdGlvblJhdGlvIDogdmlld2FiaWxpdHlSYXRlSW5XaW5kb3c7XG4gICAgICAgICAgICAgIHYudmlld2FiaWxpdHkgPSBpc1JlbGF0ZWl2ZVJhdGlvID8gJ2ludGVyc2VjdGlvbicgOiAnZmlsbHdpbmRvdyc7XG4gICAgICAgICAgICAgIC8vIOS4jeiuvue9ruabneWFieaXtumVv+aXtuWwseebtOaOpeWPkeWHuuaXpeW/l1xuICAgICAgICAgICAgICBpZiAoIWNvbmZpZy5FWFBfRFVSQVRJT04pIHtcbiAgICAgICAgICAgICAgICB2LnN0YXR1cyA9IDI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdXRpbF9hY19hZS51cGRhdGVFeHBIYXNoTWFwKGxvZ2tleSwgdiwgJ1VQREFURScpO1xuICAgICAgICAgICAgICArK3NpemU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZpZXdhYmlsaXR5UmF0ZUluV2luZG93KSB7XG4gICAgICAgICAgICAgIC8vIOiiq2luc2VjdGlvbk9ic2VydmXmipPlj5bliLDlubblnKjlsY/luZXkuK3lh7rnjrDov4fnmoTlhYPntKDmiZNsYXN0RXZlbnRUeXBl5qCH77yM5pa55L6/5ZCO57utbW92ZeOAgXNjcm9sbOS6i+S7tuWGjeasoeaKk+WPllxuICAgICAgICAgICAgICB1dGlsX2FjX2FlLnVwZGF0ZUV4cEhhc2hNYXAobG9na2V5LCBPYmplY3QuYXNzaWduKHt9LCBlbGVfc1tpXSwge1xuICAgICAgICAgICAgICAgIGxhc3RFdmVudFR5cGU6IHYuZXZlbnRUeXBlXG4gICAgICAgICAgICAgIH0pLCAnVVBEQVRFJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBzaXplO1xufVxuXG4vKipcbiAqIOivpeaWueazleiiq29uc2Nyb2xsLOaIluiiq29ucmVzaXpl5Zue6LCD5Ye95pWw6LCD55So77yM5qOA6aqM5YWD57Sg5piv5ZCm5pud5YWJXG4gKi9cbmZ1bmN0aW9uIGhhbmRsZXJfZG9tX2V4cG9zdXJlIChlbnRyeSwgaXNGaXJzdCkge1xuICB2YXIgUFVCX0tFWSA9ICdBUExVU19BRV9FWFBPU1VSRV9DSEFOR0UnO1xuICB2YXIgZXZlbnRUeXBlID0gZW50cnkgJiYgZW50cnkudHlwZSA/IGVudHJ5LnR5cGUgOiAnSU9ic2VydmVyJztcbiAgdmFyIGV4cG9zdXJlVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICB2YXIgc2l6ZSA9IDA7XG4gIGlmIChpc0ZpcnN0KSB7XG4gICAgLy8gd2luZG93LmNvbnNvbGUuY291bnQoJ2lzRmlyc3QnKTtcbiAgICBzaXplID0gdXRpbEV4cG9zdXJlLmZpbHRlclN0YXJ0RXhwb3N1cmVTaXplKGV4cG9zdXJlVGltZSwgZW50cnkpO1xuICB9IGVsc2Uge1xuICAgIC8vIHdpbmRvdy5jb25zb2xlLmNvdW50KCdpc1NlY29uZCcpO1xuICAgIHNpemUgPSBmaWx0ZXJTdGFydEV4cG9zdXJlU2l6ZShleHBvc3VyZVRpbWUsIGVudHJ5KTtcbiAgfVxuICAvLyDlrZjlnKjmm53lhYnlhYPntKDvvIznrYnlvoUgeCDmr6vnp5LlkI7kuozmrKHliKTmlq3mm53lhYnmnInmlYjmgKdcbiAgaWYgKHNpemUgPiAwKSB7XG4gICAgaWYgKGNvbmZpZy5FWFBfRFVSQVRJT04pIHtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgc2l6ZSA9IHV0aWxFeHBvc3VyZS5maWx0ZXJFbmRFeHBvc3VyZVNpemUoZXhwb3N1cmVUaW1lLCBldmVudFR5cGUpO1xuICAgICAgICBpZiAoc2l6ZSA+IDApIHtcbiAgICAgICAgICAvLyDlrZjlnKjmnInmlYjmm53lhYnlhYPntKDnmoTmg4XlhrXkuIvvvIzlj5HlsITmm53lhYnkuovku7bvvIznu5l3YXRjaFJlY29yZC5qc+i/meS4queOr+iKguWkhOeQhlxuICAgICAgICAgIGFwbHVzLmFwbHVzX3B1YnN1Yi5wdWJsaXNoKFBVQl9LRVksIHtcbiAgICAgICAgICAgIHNpemU6IHNpemUsXG4gICAgICAgICAgICBldmVudFR5cGU6IGV2ZW50VHlwZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LCBjb25maWcuRVhQX0RVUkFUSU9OKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBsdXMuYXBsdXNfcHVic3ViLnB1Ymxpc2goUFVCX0tFWSwge1xuICAgICAgICBzaXplOiBzaXplLFxuICAgICAgICBldmVudFR5cGU6IGV2ZW50VHlwZVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUlPYnNlcnZlciAob3B0aW9ucykge1xuICB2YXIgZGVmYXVsdE9wdHMgPSB7XG4gICAgcm9vdDogbnVsbCwgLy8gZGVmYXVsdCB2YWx1ZSBpcyB3aW5kb3csIHlvdSBjYW4gcmV3cml0ZSBpdCBieSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc2Nyb2xsQXJlYScpLFxuICAgIHJvb3RNYXJnaW46ICcwcHgnLFxuICAgIHRocmVzaG9sZDogQUNfUkFURVxuICB9O1xuICByZXR1cm4gbmV3IElPYnNlcnZlcihmdW5jdGlvbiAoZW50cmllcykge1xuICAgIGVhY2goZW50cmllcywgZnVuY3Rpb24oZW50cnkpe1xuICAgICAgaWYgKGVudHJ5LmludGVyc2VjdGlvblJhdGlvID4gMCkge1xuICAgICAgICBoYW5kbGVyX2RvbV9leHBvc3VyZShlbnRyeSk7XG4gICAgICB9ICBcbiAgICB9KTtcbiAgfSwgdXRpbERhc2guYXNzaWduKGRlZmF1bHRPcHRzLCBvcHRpb25zKSk7XG59XG5cbi8qKlxuICogd2F0Y2hJbnRlcnNlY3Rpb25PYnNlcnZlclxuICogQHBhcmFtcyBvYmoge09iamVjdH0ge1xuICogICBleHBDb25maWc6IFt7XG4gKiAgICAgY3NzU2VsZWN0b3I6IFwiRElWW2xvZ2tleT1cIi9kYWN1LjEuMS4xXCJdXCJcbiAqICAgICBlbGVtZW50U2VsZWN0b3I6IFwiRElWW2xvZ2tleT1cIi9kYWN1LjEuMS4xXCJdXCJcbiAqICAgICBsb2drZXk6IFwiL2RhY3UuMS4xLjFcIlxuICogICAgIHByb3BzOiBbXCJfbGthXCJdXG4gKiAgIH1dLFxuICogICBpc1Rocm90dGxlV2F0Y2g6IGZhbHNlXG4gKiB9XG4gKiBAcGFyYW1zIG9wdHMge09iamVjdH0ge1xuICogICBmcm9tOiAnYXBwZW5kTWV0YUluZm8nXG4gKiB9XG4gKi9cbmZ1bmN0aW9uIHdhdGNoSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgKGV4cENvbmZpZykge1xuICAvLyBjb25zb2xlLmNvdW50KCd3YXRjaEludGVyc2VjdGlvbk9ic2VydmVyJyk7XG4gIGlmIChJT2JzZXJ2ZXIpIHtcbiAgICBpZiAoIWlvYnNlcnZlck1hcC5pb19iYXNlKSB7XG4gICAgICBpb2JzZXJ2ZXJNYXAuaW9fYmFzZSA9IGNyZWF0ZUlPYnNlcnZlcigpO1xuICAgIH1cbiAgICB2YXIgX2FwbHVzX2F1dG9fZXhwID0gdXRpbEdvbGRsb2cuZ2V0R29sZGxvZ1ZhbCgnX2FwbHVzX2F1dG9fZXhwJykgfHwge307XG4gICAgdmFyIF9hY0hhc2hNYXAgPSBfYXBsdXNfYXV0b19leHAuX2FjSGFzaE1hcCB8fCB7fTtcbiAgICBmb3IgKHZhciBsb2drZXkgaW4gX2FjSGFzaE1hcCkge1xuICAgICAgdmFyIGVsZV9zID0gX2FjSGFzaE1hcFtsb2drZXldIHx8IFtdO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVfcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgdiA9IGVsZV9zW2ldIHx8IHt9O1xuICAgICAgICBpZiAoIXYuaW5PYnNlcnZlcikge1xuICAgICAgICAgIHZhciBrZXkgPSAnaW9fdl8nICsgZW5jb2RlVVJJQ29tcG9uZW50KHYucG9zaXRpb25TZWxlY3Rvcik7XG4gICAgICAgICAgdmFyIGlvX3Y7XG4gICAgICAgICAgaWYgKHYucG9zaXRpb25TZWxlY3RvciAmJiAhaW9ic2VydmVyTWFwW2tleV0pIHtcbiAgICAgICAgICAgIGlvX3YgPSBjcmVhdGVJT2JzZXJ2ZXIoe1xuICAgICAgICAgICAgICByb290OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHYucG9zaXRpb25TZWxlY3RvciksXG4gICAgICAgICAgICAgIGV4cENvbmZpZzogZXhwQ29uZmlnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlvYnNlcnZlck1hcFtrZXldID0gaW9fdjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlvX3YpIHtcbiAgICAgICAgICAgIGlvX3Yub2JzZXJ2ZSh2LmVsZW1lbnQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpb2JzZXJ2ZXJNYXAuaW9fYmFzZS5vYnNlcnZlKHYuZWxlbWVudCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHYuaW5PYnNlcnZlciA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICog55uR5ZCsZG9t5Y+Y5YyW77yM5pyJ5Y+Y5YyW5omn6KGM5Zue6LCDXG4gKiBAcGFyYW0ge2hhbmRsZXJfZG9tX2NoYW5nZX0gY2JcbiAqL1xuZXhwb3J0cy53YXRjaF9leHBvc3VyZV9jaGFuZ2UgPSBmdW5jdGlvbihleHBDb25maWcpIHtcbiAgLy8gc3RlcDEg55uR5ZCs56ys5LiA5qyhZG9tY2hhbmdl5Y+R5bCE55qE5raI5oGv77yM5YGa56ys5LiA5qyh6aqM6K+B5pud5YWJ55qE5aSE55CGXG4gIGFwbHVzLmFwbHVzX3B1YnN1Yi5zdWJzY3JpYmUoJ0FQTFVTX0FFX0RPTV9DSEFOR0UnLCBmdW5jdGlvbiAoKSB7XG4gICAgd2F0Y2hJbnRlcnNlY3Rpb25PYnNlcnZlcihleHBDb25maWcpO1xuICB9KTtcbiAgLy8gc3RlcDIg55uR5ZCs5YWD57Sg5pud5YWJXG4gIHdhdGNoSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoZXhwQ29uZmlnKTtcbn07XG5cbi8qKlxuICogd2F0Y2hJbnRlcnNlY3Rpb25PYnNlcnZlclxuICogQHBhcmFtcyBvYmoge09iamVjdH0ge1xuICogICBleHBDb25maWc6IFt7XG4gKiAgICAgY3NzU2VsZWN0b3I6IFwiRElWW2xvZ2tleT1cIi9kYWN1LjEuMS4xXCJdXCJcbiAqICAgICBlbGVtZW50U2VsZWN0b3I6IFwiRElWW2xvZ2tleT1cIi9kYWN1LjEuMS4xXCJdXCJcbiAqICAgICBsb2drZXk6IFwiL2RhY3UuMS4xLjFcIlxuICogICAgIHByb3BzOiBbXCJfbGthXCJdXG4gKiAgIH1dLFxuICogICBpc1Rocm90dGxlV2F0Y2g6IGZhbHNlXG4gKiB9XG4gKi9cbmV4cG9ydHMuY2xlYXIgPSBmdW5jdGlvbiAoX2NvbmZpZywgb3B0cykge1xuICBpZiAob3B0cyAmJiBvcHRzLmZyb20gIT09ICdhcHBlbmRNZXRhSW5mbycpIHtcbiAgICBmb3IgKHZhciBrIGluIGlvYnNlcnZlck1hcCkge1xuICAgICAgdmFyIGlvID0gaW9ic2VydmVyTWFwW2tdO1xuICAgICAgLy8gLy8g5YGc5q2i6KeC5a+fXG4gICAgICAvLyBpby51bm9ic2VydmUoZWxlbWVudCk7XG4gICAgICAvLyDlhbPpl63op4Llr5/lmahcbiAgICAgIGlvLmRpc2Nvbm5lY3QoKTtcbiAgICB9XG4gIH1cbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvcGx1Z2luc193ZWIvbGliX2FlL3dhdGNoRXhwb3N1cmVJT2JzZXJ2ZXIuanNcbi8vIG1vZHVsZSBpZCA9IDUwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogcHJvamVjdCAtIGZpbGVwYXRoXG4gKiBkZXNjcmlwdGlvblxuICpcbiAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cbiAqXG4gKiBBdXRob3JzOlxuICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlsR29sZGxvZyA9IHJlcXVpcmUoJ0B1dGlscy91dGlsR29sZGxvZycpO1xuXG52YXIgdXRpbEVsZW1lbnRBYyA9IHJlcXVpcmUoJy4vdXRpbEVsZW1lbnRBYycpO1xudmFyIGNvbmZpZyA9IHJlcXVpcmUoJy4uLy4uL2xpYl9jb21tb24vY29uZmlnJyk7XG52YXIgdXRpbF9hY19hZSA9IHJlcXVpcmUoJy4uLy4uL2xpYl9jb21tb24vdXRpbF9hY19hZScpO1xuLy8g6Ieq5Yqo5pud5YWJ5omT54K5IC0g5Yik5a6a5Y+v6KeG55qE5q+U5L6L546HXG52YXIgQUNfUkFURSA9IGNvbmZpZy5BVVRPX0FUX1ZJRVdfUkFURTtcbnZhciBBQ19SQVRFX0lOX1dJTkRPVyA9IGNvbmZpZy5BVVRPX0FUX1ZJRVdfUkFURV9JTl9XSU5ET1c7XG52YXIgd2luUG9zaXRpb25zO1xuXG52YXIgaXNEaXNwbGF5Tm9uZSA9IGZ1bmN0aW9uIChlbCkge1xuICB2YXIgaXNOb25lO1xuICB3aGlsZSAoZWwgJiYgZWwudGFnTmFtZSAhPT0gJ0hUTUwnKSB7XG4gICAgaXNOb25lID0gZWwuc3R5bGUuZGlzcGxheTtcbiAgICBpZiAoaXNOb25lICE9PSAnbm9uZScpIHtcbiAgICAgIGVsID0gZWwucGFyZW50Tm9kZTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBicmVhaztcbiAgfVxuICByZXR1cm4gaXNOb25lID09PSAnbm9uZSc7XG59O1xuXG5cbi8qKlxuICog5qC55o2u5b6F5pud5YWJ55qE5YWD57Sg5YiX6KGo5qOA5p+l5pys5qyh5rua6L2u5oiW6ICF56qX5Y+j5aSn5bCP5Y+Y5YyW6Kem5Y+R55qE5YWD57Sg5piv5ZCm5Zyo5Y+v6KeG56qX5YaF77yI5pud5YWJ77yJXG4gKiDlsIbmn6Xor6LliLDnmoTlpITkuo7mm53lhYnnirbmgIHnmoTlhYPntKDnirbmgIHvvIhzdGF0dXPvvInlsZ7mgKflgLzmlLnkuLrigJwx4oCd77yM6K6+572u5Yid5aeL5pud5YWJ5pe26Ze0ZXhwb3N1cmVUaW1lXG4gKiDlubbov5Tlm57mnKzmrKHkuovku7bop6blj5HnmoTmm53lhYnlhYPntKDnmoTmnaHmlbBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXhwb3N1cmVUaW1lIC8vIG9uc2Nyb2xsLG9ucmVzaXpl5Yid5aeL5pud5YWJ5pe26Ze0XG4gKiBAcmV0dXJuIHtOdW1iZXJ9IHNpemUgLy8g5pys5qyh5LqL5Lu26Kem5Y+R55qE5pud5YWJ5YWD57Sg55qE5p2h5pWwXG4gKi9cbmV4cG9ydHMuZmlsdGVyU3RhcnRFeHBvc3VyZVNpemUgPSBmdW5jdGlvbihleHBvc3VyZVRpbWUsIGV2ZW50VHlwZSkge1xuICB2YXIgc2l6ZSA9IDA7XG4gIC8vIHZhciB3aW5QYXJhbXMgPSB1dGlsRWxlbWVudEFjLmdldFdpblBhcmFtcygpOyAvLyBUT0RPIC0g6aqM6K+B5oCn6IO96Zeu6aKY77yM5YGa5oiQ5Y+v6YWN77yM6YOo5YiG5Lia5Yqh5aaC5q2k5aSE55CGXG4gIC8vIHZhciB3aW5Qb3NpdGlvbnMgPSB1dGlsRWxlbWVudEFjLmdldFdpblBvc2l0aW9ucyh3aW5QYXJhbXMpO1xuICB2YXIgd2luUG9zaXRpb25zID0gdXRpbEVsZW1lbnRBYy5nZXRXaW5Qb3NpdGlvbnMoKTtcblxuICB2YXIgX2FwbHVzX2F1dG9fZXhwID0gdXRpbEdvbGRsb2cuZ2V0R29sZGxvZ1ZhbCgnX2FwbHVzX2F1dG9fZXhwJykgfHwge307XG4gIHZhciBfYWNIYXNoTWFwID0gX2FwbHVzX2F1dG9fZXhwLl9hY0hhc2hNYXAgfHwge307XG4gIGZvciAodmFyIGxvZ2tleSBpbiBfYWNIYXNoTWFwKSB7XG4gICAgdmFyIGVsZV9zID0gX2FjSGFzaE1hcFtsb2drZXldIHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlX3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB2ID0gZWxlX3NbaV0gfHwge307XG4gICAgICBpZiAodi5zdGF0dXMgPT09IDAgJiYgdi5leHBDb25maWcpIHtcbiAgICAgICAgaWYgKCFpc0Rpc3BsYXlOb25lKHYuZWxlbWVudCkpIHtcbiAgICAgICAgICB2YXIgX2VsZVBvcyA9IHV0aWxFbGVtZW50QWMuZ2V0RWxlbWVudFBvc2l0aW9uKHYuZWxlbWVudCk7XG4gICAgICAgICAgaWYgKF9lbGVQb3Mud2lkdGggJiYgX2VsZVBvcy5oZWlnaHQpIHtcbiAgICAgICAgICAgIHYueCA9IF9lbGVQb3MueDtcbiAgICAgICAgICAgIHYueSA9IF9lbGVQb3MueTtcbiAgICAgICAgICAgIHYuZXZlbnRUeXBlID0gZXZlbnRUeXBlO1xuICAgICAgICAgICAgdi53aWR0aCA9IF9lbGVQb3Mud2lkdGg7XG4gICAgICAgICAgICB2LmhlaWdodCA9IF9lbGVQb3MuaGVpZ2h0O1xuICAgICAgICAgICAgdi5zaXplID0gX2VsZVBvcy53aWR0aCAqIF9lbGVQb3MuaGVpZ2h0O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyDliKTmlq3liLDmnIlwb3NpdGlvblNlbGVjdG9y77yM5bm25LiU5b2T5YmN5YWD57Sg5aSE5LqO55u45a+55a6a5L2N44CB57ud5a+55a6a5L2N562J5YWD57Sg5YaF5rua5Yqo5pe277yIY2xpZW50SGVpZ2h0ID4gc2Nyb2xsSGVpZ2h0KVxuICAgICAgICAgICAgdmFyIHJlbGF0aXZlU2VsZWN0b3JQb3NpdGlvbnM7XG4gICAgICAgICAgICBpZiAodi5leHBDb25maWcucG9zaXRpb25TZWxlY3Rvcikge1xuICAgICAgICAgICAgICByZWxhdGl2ZVNlbGVjdG9yUG9zaXRpb25zID0gdXRpbEVsZW1lbnRBYy5nZXRXaW5Qb3NpdGlvbnModi5leHBDb25maWcucG9zaXRpb25TZWxlY3Rvcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIOiOt+WPluWFg+e0oOeahOWPr+inhueOh++8iOWcqOWPr+inhueql+WGheeahOWPr+ingeavlOS+i++8iVxuICAgICAgICAgICAgdmFyIHZpZXdhYmlsaXR5UmF0ZSA9IHV0aWxFbGVtZW50QWMud3JhcFZpZXdhYmlsaXR5UmF0ZShyZWxhdGl2ZVNlbGVjdG9yUG9zaXRpb25zIHx8IHdpblBvc2l0aW9ucywgdiwgQUNfUkFURSk7XG4gICAgICAgICAgICB2YXIgaXNWaWV3YWJpbGl0eVJhdGUgPSB2aWV3YWJpbGl0eVJhdGUgPj0gQUNfUkFURTtcblxuICAgICAgICAgICAgdmFyIHZpZXdhYmlsaXR5SW5XaW5kb3dSYXRlID0gdmlld2FiaWxpdHlSYXRlO1xuICAgICAgICAgICAgaWYgKHJlbGF0aXZlU2VsZWN0b3JQb3NpdGlvbnMpIHtcbiAgICAgICAgICAgICAgdmlld2FiaWxpdHlJbldpbmRvd1JhdGUgPSB1dGlsRWxlbWVudEFjLndyYXBWaWV3YWJpbGl0eVJhdGUod2luUG9zaXRpb25zLCB2LCBBQ19SQVRFKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGVsZW1lbnRBcmVhID0gdi53aWR0aCAqIHYuaGVpZ2h0ICogdmlld2FiaWxpdHlJbldpbmRvd1JhdGU7XG4gICAgICAgICAgICB2YXIgdmlld2FiaWxpdHlSYXRlSW5XaW5kb3cgPSB1dGlsRWxlbWVudEFjLmdldFZpZXdhYmlsaXR5UmF0ZUluV2luZG93KHdpblBvc2l0aW9ucywgZWxlbWVudEFyZWEsIEFDX1JBVEVfSU5fV0lORE9XKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIGlzUmVjb3JkID0gdXRpbEVsZW1lbnRBYy5jaGVja0lzUmVjb3JkKHYuZWxlbWVudCwgdi5oYXNoX3ZhbHVlLCAnX2FwbHVzX2F1dG9fZXhwJyk7XG4gICAgICAgICAgICAvLyDlnKjlj6/op4bnqpflhoXvvIzkuJRkb23oioLngrnkuIrmsqHmnInlt7Lmm53lhYnmoIfor4bvvIzkuJTkuI3lnKjlhoXlrZjkuK3miJblnKjlhoXlrZjkuK3kvYbnirbmgIHmmK8w77yIMOS4uuWIneWni+eKtuaAge+8iVxuICAgICAgICAgICAgaWYgKChpc1ZpZXdhYmlsaXR5UmF0ZSB8fCB2aWV3YWJpbGl0eVJhdGVJbldpbmRvdyA+PSBBQ19SQVRFX0lOX1dJTkRPVykgJiYgIWlzUmVjb3JkKSB7XG4gICAgICAgICAgICAgIHYuZXhwb3N1cmVUaW1lID0gZXhwb3N1cmVUaW1lO1xuICAgICAgICAgICAgICB2LnN0YXR1cyA9IDE7IC8vIOWIneingeWFieeKtuaAgVxuICAgICAgICAgICAgICB2YXIgYWVBdXRvVXNlckZuID0gY29uZmlnLmdldEF1dG9FeHBVc2VyRm4oKTtcbiAgICAgICAgICAgICAgaWYgKGFlQXV0b1VzZXJGbikge1xuICAgICAgICAgICAgICAgIHYudXNlclBhcmFtcyA9IHV0aWxfYWNfYWUuYXV0b1VzZXJGbkhhbmRsZXIoYWVBdXRvVXNlckZuLCB2LmVsZW1lbnQsIHYuZWxlbWVudFNlbGVjdG9yKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLyDkuI3orr7nva7mm53lhYnml7bplb/ml7blsLHnm7TmjqXlj5Hlh7rml6Xlv5dcbiAgICAgICAgICAgICAgaWYgKCFjb25maWcuRVhQX0RVUkFUSU9OKSB7XG4gICAgICAgICAgICAgICAgdi52aWV3YWJpbGl0eVJhdGUgPSBpc1ZpZXdhYmlsaXR5UmF0ZSA/IHZpZXdhYmlsaXR5UmF0ZSA6IHZpZXdhYmlsaXR5UmF0ZUluV2luZG93O1xuICAgICAgICAgICAgICAgIHYudmlld2FiaWxpdHkgPSBpc1ZpZXdhYmlsaXR5UmF0ZSA/ICdpbnRlcnNlY3Rpb24nIDogJ2ZpbGx3aW5kb3cnO1xuICAgICAgICAgICAgICAgIHYuc3RhdHVzID0gMjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB1dGlsX2FjX2FlLnVwZGF0ZUV4cEhhc2hNYXAobG9na2V5LCB2LCAnVVBEQVRFJyk7XG4gICAgICAgICAgICAgICsrc2l6ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHNpemU7XG59O1xuXG4vKipcbiAqIOWcqGZpbHRlclN0YXJ0RXhwb3N1cmVTaXpl5ou/5Yiw5Yiw55qE5Yid5aeL5pud5YWJ5YWD57Sg5YiX6KGo5Z+656GA5LiK77yM5LqM5qyh5Yik5pat5pud5YWJ5YWD57Sg5piv5ZCm5piv5pyJ5pWI5pud5YWJ77yM5aaC5oyB57ut5pud5YWJMjAw5q+r56eSXG4gKiDmnInmlYjmm53lhYnnmoTlhYPntKDnirbmgIHvvIhzdGF0dXPvvInlsZ7mgKflgLzmlLnkuLrigJwy4oCd77yM5peg5pWI5pud5YWJ55qE5YWD57Sg54q25oCB5bGe5oCn5YC85pS55Li64oCcMOKAnVxuICog5bm26L+U5Zue5pys5qyh5LqL5Lu26Kem5Y+R55qE5pud5YWJ5YWD57Sg55qE5p2h5pWwXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGV4cG9zdXJlVGltZSAvLyBvbnNjcm9sbCxvbnJlc2l6ZeWIneWni+abneWFieaXtumXtFxuICogQHJldHVybiB7TnVtYmVyfSBzaXplIC8vIOacrOasoeS6i+S7tuinpuWPkeeahOabneWFieWFg+e0oOeahOadoeaVsFxuICovXG5leHBvcnRzLmZpbHRlckVuZEV4cG9zdXJlU2l6ZSA9IGZ1bmN0aW9uKGV4cG9zdXJlVGltZSwgZXZlbnRUeXBlKSB7XG4gIHZhciBzaXplID0gMDtcbiAgLy8gdmFyIHdpblBhcmFtcyA9IHV0aWxFbGVtZW50QWMuZ2V0V2luUGFyYW1zKCk7IC8vIFRPRE8gLSDpqozor4HmgKfog73pl67popjvvIzlgZrmiJDlj6/phY3vvIzpg6jliIbkuJrliqHlpoLmraTlpITnkIZcbiAgLy8gdmFyIHdpblBvc2l0aW9ucyA9IHV0aWxFbGVtZW50QWMuZ2V0V2luUG9zaXRpb25zKHdpblBhcmFtcyk7XG4gIGlmICghd2luUG9zaXRpb25zKSB7XG4gICAgd2luUG9zaXRpb25zID0gdXRpbEVsZW1lbnRBYy5nZXRXaW5Qb3NpdGlvbnMoKTtcbiAgfVxuXG4gIHZhciBfYXBsdXNfYXV0b19leHAgPSB1dGlsR29sZGxvZy5nZXRHb2xkbG9nVmFsKCdfYXBsdXNfYXV0b19leHAnKSB8fCB7fTtcbiAgdmFyIF9hY0hhc2hNYXAgPSBfYXBsdXNfYXV0b19leHAuX2FjSGFzaE1hcCB8fCB7fTtcbiAgZm9yICh2YXIgbG9na2V5IGluIF9hY0hhc2hNYXApIHtcbiAgICB2YXIgZWxlX3MgPSBfYWNIYXNoTWFwW2xvZ2tleV0gfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVfcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHYgPSBlbGVfc1tpXSB8fCB7fTtcbiAgICAgIGlmICh2LnN0YXR1cyA9PT0gMSAmJiB2LmV4cG9zdXJlVGltZSA9PT0gZXhwb3N1cmVUaW1lICYmIHYuZXhwQ29uZmlnKSB7XG4gICAgICAgIHYuZXZlbnRUeXBlID0gZXZlbnRUeXBlO1xuICAgICAgICAvLyDliKTmlq3liLDmnIlwb3NpdGlvblNlbGVjdG9y77yM5bm25LiU5b2T5YmN5YWD57Sg5aSE5LqO55u45a+55a6a5L2N44CB57ud5a+55a6a5L2N562J5YWD57Sg5YaF5rua5Yqo5pe277yIY2xpZW50SGVpZ2h0ID4gc2Nyb2xsSGVpZ2h0KVxuICAgICAgICBpZiAodi5leHBDb25maWcucG9zaXRpb25TZWxlY3Rvcikge1xuICAgICAgICAgIC8vIHdpblBhcmFtcyA9IHV0aWxFbGVtZW50QWMuZ2V0V2luUGFyYW1zKHYuZXhwQ29uZmlnLnBvc2l0aW9uU2VsZWN0b3IpOyAvLyBUT0RPIC0g6aqM6K+B5oCn6IO96Zeu6aKY77yM5YGa5oiQ5Y+v6YWN77yM6YOo5YiG5Lia5Yqh5aaC5q2k5aSE55CGXG4gICAgICAgICAgLy8gd2luUG9zaXRpb25zID0gdXRpbEVsZW1lbnRBYy5nZXRXaW5Qb3NpdGlvbnMod2luUGFyYW1zKTtcbiAgICAgICAgICB3aW5Qb3NpdGlvbnMgPSB1dGlsRWxlbWVudEFjLmdldFdpblBvc2l0aW9ucyh2LmV4cENvbmZpZy5wb3NpdGlvblNlbGVjdG9yKTtcbiAgICAgICAgfVxuICAgICAgICAvLyDojrflj5blhYPntKDnmoTlj6/op4bnjofvvIjlnKjlj6/op4bnqpflhoXnmoTlj6/op4Hmr5TkvovvvIlcbiAgICAgICAgdmFyIHZpZXdhYmlsaXR5UmF0ZSA9IHV0aWxFbGVtZW50QWMud3JhcFZpZXdhYmlsaXR5UmF0ZSh3aW5Qb3NpdGlvbnMsIHYsIEFDX1JBVEUpO1xuICAgICAgICB2YXIgaXNSZWNvcmQgPSB1dGlsRWxlbWVudEFjLmNoZWNrSXNSZWNvcmQodi5lbGVtZW50LCB2Lmhhc2hfdmFsdWUsICdfYXBsdXNfYXV0b19leHAnKTtcbiAgICAgICAgLy8g5Zyo5Y+v6KeG56qX5YaF77yM5LiUZG9t6IqC54K55LiK5rKh5pyJ5bey5pud5YWJ5qCH6K+G77yM5LiU5LiN5Zyo5YaF5a2Y5Lit5oiW5Zyo5YaF5a2Y5Lit5L2G54q25oCB5pivMO+8iDDkuLrliJ3lp4vnirbmgIHvvIlcbiAgICAgICAgaWYgKHZpZXdhYmlsaXR5UmF0ZSAmJiAhaXNSZWNvcmQpIHtcbiAgICAgICAgICB2LnZpZXdhYmlsaXR5UmF0ZSA9IHZpZXdhYmlsaXR5UmF0ZTtcbiAgICAgICAgICB2LnN0YXR1cyA9IDI7IC8vIOWIneingeWFiXh4eOavq+enkuWQjuS+neeEtuingeWFieeKtuaAgVxuICAgICAgICAgIHV0aWxfYWNfYWUudXBkYXRlRXhwSGFzaE1hcChsb2drZXksIHYsICdVUERBVEUnKTtcbiAgICAgICAgICArK3NpemU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdi5zdGF0dXMgPSAwOyAvLyDliJ3op4HlhYl4eHjmr6vnp5LlkI7kuI3lho3op4HlhYnvvIzmlLnkuLrliJ3lp4vnirbmgIFcbiAgICAgICAgICB2LmV4cG9zdXJlVGltZSA9ICcnO1xuICAgICAgICAgIHV0aWxfYWNfYWUudXBkYXRlRXhwSGFzaE1hcChsb2drZXksIHYsICdVUERBVEUnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gc2l6ZTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9wbHVnaW5zX3dlYi9saWJfYWUvdXRpbC91dGlsRXhwb3N1cmUuanNcbi8vIG1vZHVsZSBpZCA9IDUxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogcHJvamVjdCAtIGZpbGVwYXRoXG4gKiBkZXNjcmlwdGlvblxuICpcbiAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cbiAqXG4gKiBBdXRob3JzOlxuICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlsRXZlbnQgPSByZXF1aXJlKCcuL3V0aWwvZXZlbnQnKTtcbnZhciB1dGlsRXhwb3N1cmUgPSByZXF1aXJlKCcuL3V0aWwvdXRpbEV4cG9zdXJlJyk7XG52YXIgdXRpbF9hY19hZSA9IHJlcXVpcmUoJy4uL2xpYl9jb21tb24vdXRpbF9hY19hZScpO1xudmFyIGNvbmZpZyA9IHJlcXVpcmUoJy4uL2xpYl9jb21tb24vY29uZmlnJyk7XG5cbi8qKlxuICog6K+l5pa55rOV6KKrb25zY3JvbGws5oiW6KKrb25yZXNpemXlm57osIPlh73mlbDosIPnlKjvvIzmo4DpqozlhYPntKDmmK/lkKbmm53lhYlcbiAqL1xudmFyIGhhbmRsZXJfZG9tX2V4cG9zdXJlID0gZnVuY3Rpb24oZSkge1xuICB2YXIgUFVCX0tFWSA9ICdBUExVU19BRV9FWFBPU1VSRV9DSEFOR0UnO1xuICB2YXIgZXZlbnRUeXBlID0gZSAmJiBlLnR5cGUgPyBlLnR5cGUgOiAnaW5pdCc7XG4gIHZhciBleHBvc3VyZVRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgdmFyIHNpemUgPSB1dGlsRXhwb3N1cmUuZmlsdGVyU3RhcnRFeHBvc3VyZVNpemUoZXhwb3N1cmVUaW1lLCBldmVudFR5cGUpO1xuICAvLyDlrZjlnKjmm53lhYnlhYPntKDvvIznrYnlvoUgeCDmr6vnp5LlkI7kuozmrKHliKTmlq3mm53lhYnmnInmlYjmgKdcbiAgaWYgKHNpemUgPiAwICkge1xuICAgIGlmIChjb25maWcuRVhQX0RVUkFUSU9OKSB7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgIHNpemUgPSB1dGlsRXhwb3N1cmUuZmlsdGVyRW5kRXhwb3N1cmVTaXplKGV4cG9zdXJlVGltZSwgZXZlbnRUeXBlKTtcbiAgICAgICAgaWYgKHNpemUgPiAwKSB7XG4gICAgICAgICAgLy8g5a2Y5Zyo5pyJ5pWI5pud5YWJ5YWD57Sg55qE5oOF5Ya15LiL77yM5Y+R5bCE5pud5YWJ5LqL5Lu277yM57uZd2F0Y2hSZWNvcmQuanPov5nkuKrnjq/oioLlpITnkIZcbiAgICAgICAgICBhcGx1cy5hcGx1c19wdWJzdWIucHVibGlzaChQVUJfS0VZLCB7XG4gICAgICAgICAgICBzaXplOiBzaXplLFxuICAgICAgICAgICAgZXZlbnRUeXBlOiBldmVudFR5cGVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSwgY29uZmlnLkVYUF9EVVJBVElPTik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwbHVzLmFwbHVzX3B1YnN1Yi5wdWJsaXNoKFBVQl9LRVksIHtcbiAgICAgICAgc2l6ZTogc2l6ZSxcbiAgICAgICAgZXZlbnRUeXBlOiBldmVudFR5cGVcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufTtcblxudmFyIHRocm90dGxlX2hhbmRsZXJfZXhwb3N1cmUgPSB1dGlsX2FjX2FlLnRocm90dGxlKGZ1bmN0aW9uIChlKSB7XG4gIGhhbmRsZXJfZG9tX2V4cG9zdXJlKGUpO1xufSwgMTAwKTtcblxudmFyIHNlbGVjdG9ycyA9IHt9O1xuXG4vKipcbiAqIOebkeWQrGRvbeWPmOWMlu+8jOacieWPmOWMluaJp+ihjOWbnuiwg1xuICogQHBhcmFtIHtoYW5kbGVyX2RvbV9jaGFuZ2V9IGNiXG4gKi9cbnZhciB3YXRjaF9wb3NpdGlvbnNlbGVjdG9yX2NoYW5nZSA9IGZ1bmN0aW9uIChleHBDb25maWcsIHR5cGUpIHtcbiAgaWYgKGV4cENvbmZpZyAmJiBleHBDb25maWcuZm9yRWFjaCAmJiBPYmplY3Qua2V5cyAmJiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKSB7XG4gICAgZXhwQ29uZmlnLmZvckVhY2goZnVuY3Rpb24odil7XG4gICAgICBpZiAodi5wb3NpdGlvblNlbGVjdG9yICYmIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Iodi5wb3NpdGlvblNlbGVjdG9yKSkge1xuICAgICAgICBzZWxlY3RvcnNbdi5wb3NpdGlvblNlbGVjdG9yXSA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdmFyIHRtcF9zZWxlY3RvcnMgPSBPYmplY3Qua2V5cyhzZWxlY3RvcnMpO1xuICAgIHRtcF9zZWxlY3RvcnMuZm9yRWFjaChmdW5jdGlvbihzKXtcbiAgICAgIGlmICh1dGlsRXZlbnRbdHlwZV0pIHtcbiAgICAgICAgdXRpbEV2ZW50W3R5cGVdKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocyksICdzY3JvbGwnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIHRocm90dGxlX2hhbmRsZXJfZXhwb3N1cmUoZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuXG4vKipcbiAqIOebkeWQrGRvbeWPmOWMlu+8jOacieWPmOWMluaJp+ihjOWbnuiwg1xuICogQHBhcmFtIHtoYW5kbGVyX2RvbV9jaGFuZ2V9IGNiXG4gKi9cbmV4cG9ydHMud2F0Y2hfZXhwb3N1cmVfY2hhbmdlID0gZnVuY3Rpb24oZXhwQ29uZmlnKSB7XG4gIC8vIHN0ZXAxIOebkeWQrOesrOS4gOasoWRvbWNoYW5nZeWPkeWwhOeahOa2iOaBr++8jOWBmuesrOS4gOasoemqjOivgeabneWFieeahOWkhOeQhlxuICBhcGx1cy5hcGx1c19wdWJzdWIuc3Vic2NyaWJlKCdBUExVU19BRV9ET01fQ0hBTkdFJywgaGFuZGxlcl9kb21fZXhwb3N1cmUpO1xuXG4gIC8vIHN0ZXAyIOebkeWQrOWFg+e0oOabneWFiVxuICB1dGlsRXZlbnQub24od2luZG93LCAndG91Y2htb3ZlJywgdGhyb3R0bGVfaGFuZGxlcl9leHBvc3VyZSk7XG4gIHV0aWxFdmVudC5vbih3aW5kb3csICdzY3JvbGwnLCB0aHJvdHRsZV9oYW5kbGVyX2V4cG9zdXJlKTtcbiAgdXRpbEV2ZW50Lm9uKHdpbmRvdywgJ3Jlc2l6ZScsIGhhbmRsZXJfZG9tX2V4cG9zdXJlKTtcbiAgd2F0Y2hfcG9zaXRpb25zZWxlY3Rvcl9jaGFuZ2UoZXhwQ29uZmlnLCAnb24nKTtcbn07XG5cbmV4cG9ydHMuY2xlYXIgPSBmdW5jdGlvbihleHBDb25maWcpIHtcbiAgdXRpbEV2ZW50LnVuKHdpbmRvdywgJ3RvdWNobW92ZScsIHRocm90dGxlX2hhbmRsZXJfZXhwb3N1cmUpO1xuICB1dGlsRXZlbnQudW4od2luZG93LCAnc2Nyb2xsJywgdGhyb3R0bGVfaGFuZGxlcl9leHBvc3VyZSk7XG4gIHV0aWxFdmVudC51bih3aW5kb3csICdyZXNpemUnLCBoYW5kbGVyX2RvbV9leHBvc3VyZSk7XG4gIHdhdGNoX3Bvc2l0aW9uc2VsZWN0b3JfY2hhbmdlKGV4cENvbmZpZywgJ3VuJyk7XG59O1xuXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9wbHVnaW5zX3dlYi9saWJfYWUvd2F0Y2hFeHBvc3VyZS5qc1xuLy8gbW9kdWxlIGlkID0gNTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBwcm9qZWN0IC0gZmlsZXBhdGhcbiAqIGRlc2NyaXB0aW9uXG4gKlxuICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuICpcbiAqIEF1dGhvcnM6XG4gKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIHRyYWNrZXJVdGlsID0gcmVxdWlyZSgnQHV0aWxzL3RyYWNrZXJVdGlsJyk7XG52YXIgdXRpbERhc2ggPSByZXF1aXJlKCdAdXRpbHMvdXRpbERhc2gnKTtcbnZhciB1dGlsR29sZGxvZyA9IHJlcXVpcmUoJ0B1dGlscy91dGlsR29sZGxvZycpO1xudmFyIHV0aWxMb2dnZXIgPSByZXF1aXJlKCdAdXRpbHMvdXRpbExvZ2dlcicpO1xudmFyIGVhY2hNYXAgPSByZXF1aXJlKCdAdXRpbHMvZWFjaE1hcCcpO1xuXG4vLyB2YXIgdXRpbEVsZW1lbnRBYyA9IHJlcXVpcmUoJy4vdXRpbC91dGlsRWxlbWVudEFjJyk7XG52YXIgdXRpbF9hY19hZSA9IHJlcXVpcmUoJy4uL2xpYl9jb21tb24vdXRpbF9hY19hZScpO1xudmFyIGNvbmZpZyA9IHJlcXVpcmUoJy4uL2xpYl9jb21tb24vY29uZmlnJyk7XG5cbi8vIHNwbeWMuuWdl+iHquWKqOabneWFieiuvue9riBodHRwczovL2FvbmUuYWxpYmFiYS1pbmMuY29tL3JlcS8yMTgwMzM5OVxuZnVuY3Rpb24gcHJvY2Vzc1NQTUNEIChlbHR5cGUsIGVsZW1lbnQsIHNwbSkge1xuICB2YXIgc3BtQyA9ICcwJztcbiAgaWYgKHNwbSkge1xuICAgIGlmIChlbHR5cGUgPT09ICdzcG1jJykge1xuICAgICAgdmFyIHNwbUFyciA9IHNwbS5zcGxpdCgnLicpO1xuICAgICAgc3BtQyA9IHNwbUFyclsyXSA/IHNwbUFyclsyXSA6IHNwbUFyclszXTtcbiAgICAgIC8vIOWPr+inhuWMluWfi+eCueWcuuaZr+S4i+WkmuWIpOaWreS4gOatpeS4jeiDveaYr2nmiJbogIVk5byA5aS05ou85o6l5pWw5a2X55qE5oOF5Ya177yM5Zug5Li66L+Z5Liq5pivc3BtRFxuICAgICAgaWYgKC9eKFxcaXxcXGQpWzAtOV0rJC8udGVzdChzcG1DKSkge1xuICAgICAgICBzcG1DID0gJzAnO1xuICAgICAgfVxuICAgICAgc3BtID0gW3NwbUFyclswXSwgc3BtQXJyWzFdLCBzcG1DXS5qb2luKCcuJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHNwbSA9ICcnO1xuICAgIHZhciBnX1NQTSA9IHdpbmRvdy5nX1NQTSB8fCB7fTtcbiAgICBpZiAodHlwZW9mIGdfU1BNLmdldFBhcmFtID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YXIgc3BtT2JqID0gZ19TUE0uZ2V0UGFyYW0oZWxlbWVudCk7XG4gICAgICAvLyBodHRwczovL2FvbmUuYWxpYmFiYS1pbmMuY29tL3JlcS8yMTgwMzM5OSBA5LqR5p2wIDIwMTktMDgtMDnpnIDmsYJcbiAgICAgIGlmIChlbHR5cGUgPT09ICdzcG1jJykge1xuICAgICAgICBzcG1DID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3BtJykgfHwgJzAnO1xuICAgICAgICBzcG0gPSBbc3BtT2JqLmEsIHNwbU9iai5iLCBzcG1DXS5qb2luKCcuJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzcG0gPSBbc3BtT2JqLmEsIHNwbU9iai5iLCBzcG1PYmouYywgc3BtT2JqLmRdLmpvaW4oJy4nKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHNwbTtcbn1cblxuLyoqXG4gKiDnu4Too4XmiZPngrnlj4LmlbBcbiAqIGxvZ2tleUNvbnRhaW5lcuaVsOaNruagvOW8j1xuICogbG9na2V5MTogW3BhcmFtT2JqMTEsIHBhcmFtT2JqMTIsIC4uLl1cbiAqIGxvZ2tleTI6IFtwYXJhbU9iajIxLCBwYXJhbU9iajIyLCAuLi5dXG4gKiBAcmV0dXJuIHtPYmplY3R9IGxvZ2tleUNvbnRhaW5lclxuICovXG52YXIgZmlsdGVyUmVjb3JkcyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaXNBcGx1c0RlYnVnID0gYXBsdXMuYXBsdXNEZWJ1ZztcbiAgdmFyIGxvZ2tleUNvbnRhaW5lciA9IHt9O1xuICB2YXIgcmVxdWVzdF9jZmcgPSBjb25maWcuZ2V0RGVmYXVsdFJlcXVlc3RDZmcoKTtcblxuICB2YXIgX2FwbHVzX2F1dG9fZXhwID0gdXRpbEdvbGRsb2cuZ2V0R29sZGxvZ1ZhbCgnX2FwbHVzX2F1dG9fZXhwJykgfHwge307XG4gIHZhciBfYWNIYXNoTWFwID0gX2FwbHVzX2F1dG9fZXhwLl9hY0hhc2hNYXAgfHwge307XG4gIGVhY2hNYXAoX2FjSGFzaE1hcCwgZnVuY3Rpb24gKGxvZ2tleSwgYXJyKSB7XG4gICAgLy8g5p+l6K+i5pyJ5pWI5pud5YWJ5YWD57Sg77yI54q25oCB5Li64oCcMuKAne+8ie+8jOaUvuWFpeW+heaJk+eCuembhuWQiGxvZ2tleUNvbnRhaW5lclxuICAgIHZhciBlbGVfcyA9IGFyciB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gZWxlX3MubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHZhciB2ID0gZWxlX3NbaV0gfHwge307XG4gICAgICBpZiAodi5zdGF0dXMgPT09IDIpIHtcbiAgICAgICAgdi5zdGF0dXMgPSAzOyAvLyDlh4blpIfmiZPngrnnirbmgIFcbiAgICAgICAgdXRpbF9hY19hZS51cGRhdGVFeHBIYXNoTWFwKGxvZ2tleSwgdiwgJ1VQREFURScpO1xuICAgICAgICBfYXBsdXNfYXV0b19leHAuZXhwX3RpbWVzKys7XG5cbiAgICAgICAgLy8g6K+75Y+W6KKr5pud5YWJ5YWD57Sg5LiK55qE54m55a6a5bGe5oCn77yM6L+Z5Lqb54m55a6a5bGe5oCn5piv6YCa6L+H5pud5YWJ5Z+L54K55LqL5YWI5Z+L6L+b5Y6755qEXG4gICAgICAgIHZhciBleHBDb25maWcgPSB2LmV4cENvbmZpZyB8fCB7fTtcbiAgICAgICAgdmFyIHNwbV9hYiA9IGdvbGRsb2cuc3BtX2FiID8gZ29sZGxvZy5zcG1fYWIuam9pbignLicpIDogJzAuMC4wLjAnOyAvLyDkv53lupVzcG1BQlxuICAgICAgICB2YXIgc3BtID0gcHJvY2Vzc1NQTUNEKGV4cENvbmZpZy5lbHR5cGUsIHYuZWxlbWVudCkgfHwgc3BtX2FiO1xuICAgICAgICBcbiAgICAgICAgdmFyIHNjbSA9ICcnO1xuICAgICAgICB2YXIgX3JhdGU7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdmFyIF9yYXRlTnVtID0gbmV3IE51bWJlcih2LnZpZXdhYmlsaXR5UmF0ZSk7XG4gICAgICAgICAgX3JhdGUgPSBfcmF0ZU51bS50b0ZpeGVkKDIpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgX3JhdGUgPSB2LnZpZXdhYmlsaXR5UmF0ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZXhhcmdzX29yaWdpbiA9IHtcbiAgICAgICAgICAvLyAnX3hwYXRoJzogdXRpbF9hY19hZS5nZXRYUGF0aCh2LmVsZW1lbnQpLFxuICAgICAgICAgICdfdyc6IHYud2lkdGgsXG4gICAgICAgICAgJ19oJzogdi5oZWlnaHQsXG4gICAgICAgICAgJ194Jzogdi54LFxuICAgICAgICAgICdfeSc6IHYueSxcbiAgICAgICAgICAnX3JhdGUnOiBfcmF0ZSxcbiAgICAgICAgICAnX3ZpZXdhYmlsaXR5Jzogdi52aWV3YWJpbGl0eVxuICAgICAgICB9O1xuICAgICAgICBpZiAodHlwZW9mIHYudXNlclBhcmFtcyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHYudXNlclBhcmFtcy51c2VyZGF0YSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGV4YXJnc19vcmlnaW4gPSB1dGlsRGFzaC5hc3NpZ24oZXhhcmdzX29yaWdpbiwgdi51c2VyUGFyYW1zLnVzZXJkYXRhKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8g5Y+v6KeG5YyW5Z+L54K55Lya5Yqo5oCB5rOo5YWlc3Bt44CBc2Nt77yM6K+m6KeBIC9zL3NyYy9hcGx1c19wbHVnaW4vbGliX3dlYnZ0L0xvZ0cuanM6IGdldEF0dHJBcmdzXG4gICAgICAgICAgaWYgKHYudXNlclBhcmFtcy5zcG0pIHtcbiAgICAgICAgICAgIHNwbSA9IHByb2Nlc3NTUE1DRChleHBDb25maWcuZWx0eXBlLCAnJywgdi51c2VyUGFyYW1zLnNwbSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh2LnVzZXJQYXJhbXMuc2NtKSB7XG4gICAgICAgICAgICBzY20gPSB2LnVzZXJQYXJhbXMuc2NtO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKHV0aWxfYWNfYWUuaXNNZXRob2QoZXhwQ29uZmlnLm1ldGhvZCkgfHwgdXRpbF9hY19hZS5pc1BrZ1NpemUoZXhwQ29uZmlnLnBrZ1NpemUpKSB7XG4gICAgICAgICAgcmVxdWVzdF9jZmcgPSB1dGlsX2FjX2FlLmZpbHRlckV4cENvbmZpZ1JlcXVlc3RDZmcoZXhwQ29uZmlnKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgICAgIHNjbTogc2NtLFxuICAgICAgICAgIHNwbTogc3BtLFxuICAgICAgICAgIGFwbHVzQ29udGVudElkOiAnJ1xuICAgICAgICB9O1xuICAgICAgICB2YXIgZXhhcmdzID0gdXRpbF9hY19hZS5maWxsUHJvcHNEYXRhKGV4cENvbmZpZywgdi5lbGVtZW50LCBleGFyZ3Nfb3JpZ2luKTtcbiAgICAgICAgZXhhcmdzID0gdXRpbF9hY19hZS5maWxsRmlsdGVyRGF0YShleHBDb25maWcsIHYuZWxlbWVudCwgZXhhcmdzX29yaWdpbik7XG4gICAgICAgIGlmIChhcGx1cy5nbG9iYWxDb25maWcuaXNBbGkpIHtcbiAgICAgICAgICBwYXJhbXMuZXhhcmdzID0gZXhhcmdzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhcmFtcyA9IGV4YXJncztcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWxvZ2tleUNvbnRhaW5lcltsb2drZXldKSB7XG4gICAgICAgICAgbG9na2V5Q29udGFpbmVyW2xvZ2tleV0gPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBsb2drZXlDb250YWluZXJbbG9na2V5XS5wdXNoKHBhcmFtcyk7XG4gICAgICAgIGlzQXBsdXNEZWJ1ZyAmJiB1dGlsTG9nZ2VyLmxvZ2dlcih7XG4gICAgICAgICAgbXNnOiAnbG9na2V5ID0gJyArIGxvZ2tleSArICcsIHBhcmFtcyA9ICcgKyBkZWNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkocGFyYW1zKSlcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBsb2drZXlDb250YWluZXI6IGxvZ2tleUNvbnRhaW5lcixcbiAgICByZXF1ZXN0X2NmZzogcmVxdWVzdF9jZmdcbiAgfTtcbn07XG5cbnZhciBkb19jbG9uZV9hcnIgPSBmdW5jdGlvbiAoZWxlcykge1xuICB2YXIgcnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGVsZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICB2YXIgb2JqID0gZWxlc1tpXSB8fCB7fTtcbiAgICB2YXIgdG1wID0ge307XG4gICAgZWFjaE1hcChvYmosIGZ1bmN0aW9uIChrLCB2YWx1ZSkge1xuICAgICAgaWYgKGsgIT09ICdlbGVtZW50Jykge1xuICAgICAgICB0bXBba10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB2YXIgdG1wMiA9IHV0aWxEYXNoLmNsb25lRGVlcCh0bXApO1xuICAgIHRtcDIuZWxlbWVudCA9IG9iai5lbGVtZW50O1xuICAgIHJzLnB1c2godG1wMik7XG4gIH1cbiAgcmV0dXJuIHJzO1xufTtcblxuLyoqXG4gKiBAcGFyYW1zIG9wdGlvbnNcbiAqL1xudmFyIGhhbmRsZXJSZWNvcmQgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gIHZhciBfYXBsdXNfYXV0b19leHAgPSB1dGlsR29sZGxvZy5nZXRHb2xkbG9nVmFsKCdfYXBsdXNfYXV0b19leHAnKSB8fCB7fTtcbiAgdmFyIF9hY0hhc2hNYXAgPSBfYXBsdXNfYXV0b19leHAuX2FjSGFzaE1hcCB8fCB7fTtcbiAgdmFyIGNsZWFyX2xpc3QgPSBbXTtcbiAgZWFjaE1hcChfYWNIYXNoTWFwLCBmdW5jdGlvbiAobG9na2V5LCBvYmopIHtcbiAgICAvLyDmn6Xor6LmnInmlYjmm53lhYnlhYPntKDvvIjnirbmgIHkuLrigJwy4oCd77yJ77yM5pS+5YWl5b6F5omT54K56ZuG5ZCIbG9na2V5Q29udGFpbmVyXG4gICAgdmFyIGVsZV9zID0gZG9fY2xvbmVfYXJyKG9iaikgfHwgW107XG4gICAgZm9yICh2YXIgeCA9IDAsIGxlbiA9IGVsZV9zLmxlbmd0aDsgeCA8IGxlbjsgeCsrKSB7XG4gICAgICB2YXIgdiA9IGVsZV9zW3hdIHx8IHt9O1xuICAgICAgdmFyIHZfb3JpZ2luID0gb2JqW3hdIHx8IHt9O1xuICAgICAgLy8g5p+l6K+i5bey5oiQ5Yqf5omT54K555qE5YWD57Sg77yM5bCG5YW25LuOaGFzaG1hcOS4reenu+mZpO+8jOW5tuS/ruaUuWRvbeiKgueCuVxuICAgICAgaWYgKHYuc3RhdHVzID09PSAzKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8g5pu05paw5YWD57Sg5bGe5oCnXG4gICAgICAgICAgdXRpbF9hY19hZS5zZXRSZWNvcmRTdWNjZXNzKHZfb3JpZ2luLCBjb25maWcuREFUQV9BUExVU19BRV9LRVkpO1xuICAgICAgICAgIGFwbHVzLmFwbHVzX3B1YnN1Yi5wdWJsaXNoKCdBUExVU19FTEVNRU5UX0VYUE9TVVJFJywge1xuICAgICAgICAgICAgbG9na2V5OiBsb2drZXksXG4gICAgICAgICAgICB2X29yaWdpbjogdl9vcmlnaW4sXG4gICAgICAgICAgICBvcHRpb25zOiBvcHRpb25zXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgY2xlYXJfbGlzdC5wdXNoKHZfb3JpZ2luKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKXtcbiAgICAgICAgICB1dGlsTG9nZ2VyLmxvZ2dlcih7XG4gICAgICAgICAgICBtc2c6IGVyciAmJiBlcnIubWVzc2FnZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHdoaWxlIChjbGVhcl9saXN0Lmxlbmd0aCA+IDApIHtcbiAgICAgIHV0aWxfYWNfYWUudXBkYXRlRXhwSGFzaE1hcChsb2drZXksIGNsZWFyX2xpc3QucG9wKCksICdDTEVBUicpO1xuICAgIH1cbiAgfSk7XG59O1xuXG52YXIgaGFuZGxlcjtcbnZhciByZWNvcmRRdWV1ZSA9IFtdO1xudmFyIHByb2Nlc3NSZWNvcmRRdWV1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgaGFuZGxlciA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAocmVjb3JkUXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgYXBsdXNfcXVldWUucHVzaChyZWNvcmRRdWV1ZS5wb3AoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwoaGFuZGxlcik7XG4gICAgICBoYW5kbGVyID0gbnVsbDtcbiAgICB9XG4gIH0sIDIwMCk7XG59O1xuXG52YXIgZmxhZztcbmZ1bmN0aW9uIHdhdGNoVW5sb2FkUmVjb3JkICgpIHtcbiAgaWYgKCFmbGFnKSB7XG4gICAgZmxhZyA9IHRydWU7XG4gICAgYXBsdXMub24od2luZG93LCAnYmVmb3JldW5sb2FkJywgZnVuY3Rpb24gKCkge1xuICAgICAgY2xlYXJJbnRlcnZhbChoYW5kbGVyKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVjb3JkUXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYXBsdXNfcXVldWUucHVzaChyZWNvcmRRdWV1ZVtpXSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gKiDorrDlvZXmm53lhYnlhYPntKDvvIzmiZPljIXlj5HpgIHml6Xlv5co5q+PMTDkuKrkuIDnu4QpXG4gKiBtb2RpZnkgYnkgQFJpY2hhcmR86LCL5aOrIGluIDIwMTctMTEtMjgg5aKe5Yqg5LiA5Liq5YWl5Y+C77yaXG4gKiAgICAgIHJlcXVlc3RfY2Zn77yaIOaPkOS+m++8muKAnTHjgIHml6Xlv5fmiZPljIXmnaHmlbBwa2dTaXplLCAy44CB5pel5b+X5Y+R6YCB5pa55byPbWV0aG9k5Lik5Liq6YWN572u6aG54oCcXG4gKiBAcGFyYW1zIHBhcmFtcyB7XG4gKiAgICBsb2drZXlDb250YWluZXIge0FycmF5fVxuICogICAgcmVxdWVzdF9jZmcge09iamVjdH1cbiAqICB9XG4gKiBAcGFyYW1zIG9wdGlvbnMge1xuICogICBzaXplIHtOdW1iZXJ9IGV4cG91c2UgZWxlbWVudHMgbnVtYmVyXG4gKiAgIGV2ZW50VHlwZSB7TnVtYmVyfSBleHBvdXNlIGV2ZW50IHR5cGUgKGluaXQ6d2F0Y2hET00sIHNjcm9sbCwgdG91Y2htb3ZlIC4uLilcbiAqIH1cbiAqXG4gKi9cbnZhciByZWNvcmRBcGx1c0F0ID0gZnVuY3Rpb24ocGFyYW1zLCBvcHRpb25zLCBjYikge1xuICB2YXIgbG9na2V5Q29udGFpbmVyID0gcGFyYW1zLmxvZ2tleUNvbnRhaW5lciB8fCBbXTtcbiAgdmFyIHJlcXVlc3RfY2ZnID0gcGFyYW1zLnJlcXVlc3RfY2ZnIHx8IHt9O1xuICB0cmFja2VyVXRpbC53cmFwKGZ1bmN0aW9uKCl7XG4gICAgZWFjaE1hcChsb2drZXlDb250YWluZXIsIGZ1bmN0aW9uIChfbG9na2V5LCBsb2drZXlfdmFsdWVzKSB7XG4gICAgICBpZiAobG9na2V5X3ZhbHVlcyAmJiBsb2drZXlfdmFsdWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB3aGlsZSAoaSA8IGxvZ2tleV92YWx1ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIGdva2V5ID0gW107XG4gICAgICAgICAgLy8gdmFyIGV4cG91c3VyZVBhcmFtcyA9IEpTT04uc3RyaW5naWZ5KGxvZ2tleV92YWx1ZXMpOyAvLyhsb2drZXlfdmFsdWVzLnNsaWNlKGksIGkgKyBTSVpFKSk7XG4gICAgICAgICAgdmFyIGV4cG91c3VyZVBhcmFtcyA9IEpTT04uc3RyaW5naWZ5KGxvZ2tleV92YWx1ZXMuc2xpY2UoaSwgaSArIHJlcXVlc3RfY2ZnLnBrZ1NpemUpKTtcbiAgICAgICAgICBnb2tleS5wdXNoKCdleHBkYXRhPScgKyBleHBvdXN1cmVQYXJhbXMpO1xuICAgICAgICAgIGdva2V5LnB1c2goJ19pc19hdXRvX2V4cD0xJyk7XG4gICAgICAgICAgZ29rZXkucHVzaCgnX2V2ZW50VHlwZT0nICsgb3B0aW9ucy5ldmVudFR5cGUpO1xuICAgICAgICAgIGdva2V5LnB1c2goJ19tZXRob2Q9JyArIHJlcXVlc3RfY2ZnLm1ldGhvZCk7XG4gICAgICAgICAgZ29rZXkucHVzaCgnX3BrZ1NpemU9JyArIHJlcXVlc3RfY2ZnLnBrZ1NpemUpO1xuXG4gICAgICAgICAgdmFyIG1ldGhvZCA9IHJlcXVlc3RfY2ZnLm1ldGhvZCB8fCAnUE9TVCc7XG4gICAgICAgICAgaWYgKGFwbHVzLmdsb2JhbENvbmZpZy5pc0FsaSAmJiBtZXRob2QgPT09ICdQT1NUJyAmJiBuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLnNlbmRCZWFjb24gJiYgcmVjb3JkUXVldWUubGVuZ3RoIDwgMTApIHtcbiAgICAgICAgICAgIHJlY29yZFF1ZXVlLnB1c2goe1xuICAgICAgICAgICAgICBhY3Rpb246ICdhcGx1cy5yZWNvcmQnLFxuICAgICAgICAgICAgICBhcmd1bWVudHM6IFtfbG9na2V5LCAnRVhQJywgZ29rZXkuam9pbignJicpLCBtZXRob2RdXG4gICAgICAgICAgICB9KTsgIFxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhcGx1c19xdWV1ZS5wdXNoKHtcbiAgICAgICAgICAgICAgYWN0aW9uOiAnYXBsdXMucmVjb3JkJyxcbiAgICAgICAgICAgICAgYXJndW1lbnRzOiBbX2xvZ2tleSwgJ0VYUCcsIGdva2V5LmpvaW4oJyYnKSwgJ0dFVCddXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaSArPSByZXF1ZXN0X2NmZy5wa2dTaXplO1xuICAgICAgICB9XG4gICAgICAgIGNiKG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH0pO1xuICB9LCAncmVjb3JkQXBsdXNBdCcpO1xufTtcblxudmFyIHJlY29yZEFwbHVzQXRGb3JBbGl5dW4gPSBmdW5jdGlvbiAocGFyYW1zLCBvcHRpb25zLCBjYikge1xuICB2YXIgbG9na2V5Q29udGFpbmVyID0gcGFyYW1zLmxvZ2tleUNvbnRhaW5lciB8fCBbXTtcbiAgdmFyIHJlcXVlc3RfY2ZnID0gcGFyYW1zLnJlcXVlc3RfY2ZnIHx8IHt9O1xuICB0cmFja2VyVXRpbC53cmFwKGZ1bmN0aW9uKCl7XG4gICAgZWFjaE1hcChsb2drZXlDb250YWluZXIsIGZ1bmN0aW9uIChfbG9na2V5LCBsb2drZXlfdmFsdWVzKSB7XG4gICAgICBpZiAobG9na2V5X3ZhbHVlcyAmJiBsb2drZXlfdmFsdWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB3aGlsZSAoaSA8IGxvZ2tleV92YWx1ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIGdva2V5ID0gW107XG4gICAgICAgICAgdmFyIGV4cG91c3VyZVBhcmFtcyA9IGxvZ2tleV92YWx1ZXNbaV07XG4gICAgICAgICAgZm9yICh2YXIgayBpbiBleHBvdXN1cmVQYXJhbXMpIHtcbiAgICAgICAgICAgIGdva2V5LnB1c2goayArICc9JyArIGV4cG91c3VyZVBhcmFtc1trXSk7ICBcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICAgZ29rZXkucHVzaCgnX2lzX2F1dG9fZXhwPTEnKTtcbiAgICAgICAgICBnb2tleS5wdXNoKCdfZXZlbnRUeXBlPScgKyBvcHRpb25zLmV2ZW50VHlwZSk7XG4gICAgICAgICAgZ29rZXkucHVzaCgnX21ldGhvZD0nICsgcmVxdWVzdF9jZmcubWV0aG9kKTtcblxuICAgICAgICAgIHZhciBtZXRob2QgPSByZXF1ZXN0X2NmZy5tZXRob2QgfHwgJ1BPU1QnO1xuICAgICAgICAgIGlmIChhcGx1cy5nbG9iYWxDb25maWcuaXNBbGkgJiYgbWV0aG9kID09PSAnUE9TVCcgJiYgbmF2aWdhdG9yICYmIG5hdmlnYXRvci5zZW5kQmVhY29uICYmIHJlY29yZFF1ZXVlLmxlbmd0aCA8IDEwKSB7XG4gICAgICAgICAgICByZWNvcmRRdWV1ZS5wdXNoKHtcbiAgICAgICAgICAgICAgYWN0aW9uOiAnYXBsdXMucmVjb3JkJyxcbiAgICAgICAgICAgICAgYXJndW1lbnRzOiBbX2xvZ2tleSwgJ0VYUCcsIGdva2V5LmpvaW4oJyYnKSwgbWV0aG9kXVxuICAgICAgICAgICAgfSk7ICBcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXBsdXNfcXVldWUucHVzaCh7XG4gICAgICAgICAgICAgIGFjdGlvbjogJ2FwbHVzLnJlY29yZCcsXG4gICAgICAgICAgICAgIGFyZ3VtZW50czogW19sb2drZXksICdFWFAnLCBnb2tleS5qb2luKCcmJyksICdHRVQnXVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgfVxuICAgICAgICBjYihvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSwgJ3JlY29yZEFwbHVzQXQnKTtcbn07XG5cbi8qKlxuICogQHBhcmFtcyBvcHRpb25zIHtcbiAqICAgc2l6ZSB7TnVtYmVyfSBleHBvdXNlIGVsZW1lbnRzIG51bWJlclxuICogICBldmVudFR5cGUge051bWJlcn0gZXhwb3VzZSBldmVudFR5cGUgKGluaXQ6d2F0Y2hET00sIHNjcm9sbCwgdG91Y2htb3ZlIC4uLilcbiAqIH1cbiAqL1xudmFyIGhhbmRsZXJFeHBvc3VyZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMuc2l6ZSA+IDApIHtcbiAgICBpZiAoIWhhbmRsZXIpIHtcbiAgICAgIHByb2Nlc3NSZWNvcmRRdWV1ZSgpO1xuICAgIH1cbiAgICB2YXIgcmVzdWx0ID0gZmlsdGVyUmVjb3JkcygpIHx8IHt9O1xuICAgIGlmIChhcGx1cy5nbG9iYWxDb25maWcuaXNBbGkpIHtcbiAgICAgIHJlY29yZEFwbHVzQXQocmVzdWx0LCBvcHRpb25zLCBoYW5kbGVyUmVjb3JkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVjb3JkQXBsdXNBdEZvckFsaXl1bihyZXN1bHQsIG9wdGlvbnMsIGhhbmRsZXJSZWNvcmQpO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0cy53YXRjaF9kYXRhX2NoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICBhcGx1cy5hcGx1c19wdWJzdWIuc3Vic2NyaWJlKCdBUExVU19BRV9FWFBPU1VSRV9DSEFOR0UnLCBoYW5kbGVyRXhwb3N1cmUpO1xuICB3YXRjaFVubG9hZFJlY29yZCgpO1xufTtcblxuZXhwb3J0cy5jbGVhciA9IGZ1bmN0aW9uKCkge1xuICBhcGx1cy5hcGx1c19wdWJzdWIudW5zdWJzY3JpYmUoJ0FQTFVTX0FFX0VYUE9TVVJFX0NIQU5HRScsIGhhbmRsZXJFeHBvc3VyZSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvcGx1Z2luc193ZWIvbGliX2FlL3dhdGNoUmVjb3JkLmpzXG4vLyBtb2R1bGUgaWQgPSA1M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIGFsaWxvZy9hcGx1c19jcGx1Z2luL3NyYy9saWJfbW9uaXRvci90cmFja2VyX2xvc3Rwdi5qc1xuICog6K6w5b2V5Lii5aSxcHbnmoTlnLrmma9cbiAqXG4gKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG4gKlxuICogQXV0aG9yczpcbiAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbEV2ZW50ID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxFdmVudCcpO1xudmFyIGFwbHVzU3RhdGljID0gcmVxdWlyZSgnQHV0aWxzL2FwbHVzU3RhdGljJyk7XG52YXIgbmFtZVN0b3JhZ2UgPSByZXF1aXJlKCdAdXRpbHMvdXRpbE5hbWVTdG9yYWdlJykubmFtZVN0b3JhZ2U7XG52YXIgdXRpbFJlZmVycmVyID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxSZWZlcnJlcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbXMge09iamVjdH0gb3B0aW9ucyB7XG4gICAgICogICBsb2dDb25maWc6IHtsb2dDb25maWd9XG4gICAgICogfVxuICAgICAqL1xuICAgIC8vIGluaXQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAvLyAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgLy8gfSxcblxuICAgIC8qKlxuICAgICAqIOWGmSByZWZlcnJlclxuICAgICAqXG4gICAgICog5ZyoIHdpbmRvdy5uYW1lIOS4reiusOW9leW9k+WJjemhtemdoueahCB1cmzvvIzku6Xkvr/kuIvkuIDkuKrpobXpnaLor7vlj5ZcbiAgICAgKiB3aW5kb3cubmFtZSDnmoTor7vlhpkgQVBJIOWSjCBuYW1lIOWAvOeahOinhOiMg+WumuS5iemDvemHh+eUqCBuYW1lU3RvcmFnZVxuICAgICAqIGh0dHA6Ly9naXRsYWIuYWxpYmFiYS1pbmMuY29tL2NvZGV2L25hbWUtc3RvcmFnZS90cmVlL21hc3RlclxuICAgICAqL1xuICAgIHJlY29yZFZhbEluV2luZG93TmFtZTogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGlzX2h0dHBzID0gYXBsdXNTdGF0aWMuSFRUUFMgPT0gbG9jYXRpb24ucHJvdG9jb2w7XG4gICAgICB2YXIgTkFNRVNUT1JBR0VfS0VZUyA9IGFwbHVzLmdsb2JhbENvbmZpZy5OQU1FU1RPUkFHRV9LRVlTIHx8IHt9O1xuICAgICAgdmFyIHJlZmVycmVyO1xuICAgICAgdmFyIHJlZmVycmVyX3B2X2lkO1xuXG4gICAgICAvLyDku4XlnKggdG9wIOmhtemdouaJjeWBmui/meS4quaTjeS9nFxuICAgICAgLy8g5LuF5ZyoIGh0dHBzIOmhtemdouWcqCB3aW5kb3cubmFtZSDkuK3orrDlvZXkuIsgcmVmZXJyZXIg55qE5YC8XG4gICAgICB2YXIgaXNfaW5faWZyYW1lID0gcGFyZW50ICE9PSBzZWxmOyAgLy8g5b2T5YmN6aG16Z2i5piv5ZCm5ZyoIGlmcmFtZSDkuK1cbiAgICAgIGlmIChpc19pbl9pZnJhbWUgfHwgIWlzX2h0dHBzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHBhZ2VfdXJsID0gbG9jYXRpb24uaHJlZjtcbiAgICAgIC8vIOaYr+WQpuWcqOeZu+W9lemhtemdouS4ilxuICAgICAgdmFyIGlzX2xvZ2luX3BhZ2UgPSBpc19odHRwcyAmJiAocGFnZV91cmwuaW5kZXhPZignbG9naW4udGFvYmFvLmNvbScpID49IDAgfHwgcGFnZV91cmwuaW5kZXhPZignbG9naW4udG1hbGwuY29tJykgPj0gMCk7XG4gICAgICB2YXIgcGFnZV9yZWZlcnJlciA9IHV0aWxSZWZlcnJlci5nZXRSZWZlcihOQU1FU1RPUkFHRV9LRVlTKTtcblxuICAgICAgLyoqXG4gICAgICAgKiDlpoLmnpzmmK/lnKjnmbvlvZXpobXpnaLkuIrvvIzlubbkuJTlt7Lnu4/orrDlvZXkuobkuIDkuKogcmVmZXJyZXLvvIzliJnov5nlhL/ljrvmjokgcmVmZXJyZXIg5Y+C5pWwXG4gICAgICAgKiDlm6DkuLrvvIzlpoLmnpznlKjmiLfmmK/ku44gQSDpobXpnaLngrnlh7vliLAgQiDpobXpnaLvvIzkuK3pl7Tnu4/ov4fkuobnmbvlvZXpobXpnaLvvIxcbiAgICAgICAqIOWQjuWPsOWcqOi/mOWOn+i3r+W+hOaXtu+8jOWPqumcgOimgeefpemBkyBBIC0+IELvvIzogIzkuI3pnIDopoHnn6XpgZMgQSAtPiBsb2dpbiAtPiBCXG4gICAgICAgKi9cbiAgICAgIGlmIChpc19sb2dpbl9wYWdlICYmIHBhZ2VfcmVmZXJyZXIpIHtcbiAgICAgICAgcmVmZXJyZXIgPSBwYWdlX3JlZmVycmVyO1xuICAgICAgICByZWZlcnJlcl9wdl9pZCA9IG5hbWVTdG9yYWdlLmdldEl0ZW0oTkFNRVNUT1JBR0VfS0VZU1snUkVGRVJSRVJfUFZfSUQnXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZWZlcnJlciA9IHBhZ2VfdXJsO1xuICAgICAgICByZWZlcnJlcl9wdl9pZCA9IGFwbHVzLnB2aWQ7XG4gICAgICB9XG5cbiAgICAgIG5hbWVTdG9yYWdlLnNldEl0ZW0oTkFNRVNUT1JBR0VfS0VZU1snUkVGRVJSRVInXSwgcmVmZXJyZXIpO1xuICAgICAgbmFtZVN0b3JhZ2Uuc2V0SXRlbShOQU1FU1RPUkFHRV9LRVlTWydSRUZFUlJFUl9QVl9JRCddLCByZWZlcnJlcl9wdl9pZCk7XG4gICAgfSxcblxuICAgIHJ1bjogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF9zZWxmID0gdGhpcztcbiAgICAgIHV0aWxFdmVudC5vbih3aW5kb3csICdiZWZvcmV1bmxvYWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF9zZWxmLnJlY29yZFZhbEluV2luZG93TmFtZSgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL3BsdWdpbnMvbGliX21vbml0b3IvbmFtZV9zdG9yYWdlLmpzXG4vLyBtb2R1bGUgaWQgPSA1NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIHByb2plY3QgLSBmaWxlcGF0aFxuICog5LqL5Lu257G75bel5YW36ZuG5ZCIXG4gKlxuICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuICpcbiAqIEF1dGhvcnM6XG4gKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIHBhc3NpdmVTdXBwb3J0ZWQgPSByZXF1aXJlKCcuL3Bhc3NpdmVTdXBwb3J0ZWQnKTtcbnZhciBhcGx1c1RhcCA9IHJlcXVpcmUoJy4vYXBsdXNUYXAnKTtcblxuLyoqXG4gKiB0YXAgbWV0aG9kc1xuICogdGh4IHRvIEDngbXnjolcbiAqL1xuZnVuY3Rpb24gdGFwRXZlbnRCaW5kIChlbGVtZW50LCBmbiwgZXZlbnRfdHlwZSkge1xuICB2YXIgXyQgPSBhcGx1cy5fJCB8fCB7fTtcbiAgdmFyIG1ldGFfaW5mbyA9IF8kLm1ldGFfaW5mbyB8fCB7fTtcbiAgdmFyIGFwbHVzX2N0YXAgPSBtZXRhX2luZm8uYXBsdXNfY3RhcCB8fCB7fTtcbiAgdmFyIGFwbHVzVG91Y2ggPSBtZXRhX2luZm9bJ2FwbHVzLXRvdWNoJ107XG4gIC8vIOWmguaenOS4muWKoeaWueacieiHquWumuS5ieWunueOsOeahHRhcOS6i+S7tuaPkuS7tu+8jOS8mOWFiOaMieivpeS6i+S7tuaJp+ihjFxuICBpZiAoYXBsdXNfY3RhcCAmJiB0eXBlb2YgYXBsdXNfY3RhcC5vbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGFwbHVzX2N0YXAub24oZWxlbWVudCwgZm4pO1xuICB9IGVsc2Uge1xuICAgIHZhciBpc1RvdWNoID0gJ29udG91Y2hlbmQnIGluIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGlmIChpc1RvdWNoICYmIChhcGx1c1RvdWNoID09PSAndGFwJyB8fCBldmVudF90eXBlID09PSAndGFwU3BtJyB8fCBldmVudF90eXBlID09PSAndGFwJykpIHtcbiAgICAgIGFwbHVzVGFwLm9uKGVsZW1lbnQsIGZuKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb24oZWxlbWVudCwgaXNUb3VjaCA/ICd0b3VjaHN0YXJ0JyA6ICdtb3VzZWRvd24nLCBmbik7XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBkb1Njcm9sbENoZWNrIChjYikge1xuICB0cnkge1xuICAgIC8vIElmIElFIGlzIHVzZWQsIHVzZSB0aGUgdHJpY2sgYnkgRGllZ28gUGVyaW5pXG4gICAgLy8gaHR0cDovL2phdmFzY3JpcHQubndib3guY29tL0lFQ29udGVudExvYWRlZC9cbiAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwoJ2xlZnQnKTtcbiAgfSBjYXRjaChlKSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIGRvU2Nyb2xsQ2hlY2soY2IpO1xuICAgIH0sIDEpO1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBhbmQgZXhlY3V0ZSBhbnkgd2FpdGluZyBmdW5jdGlvbnNcbiAgY2IoKTtcbn07XG5cbi8vIHRoYW5rcyBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9ibG9iLzEuMTIuNC9zcmMvY29yZS9yZWFkeS5qc1xuZnVuY3Rpb24gRE9NUmVhZHkgKGNhbGxiYWNrKSB7XG4gIHZhciBpID0gMDtcbiAgdmFyIGNiID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKGkgPT09IDApIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfVxuICAgIGkrKztcbiAgfTtcbiAgLy8gQ2F0Y2ggY2FzZXMgd2hlcmUgJChkb2MpLnJlYWR5KCkgaXMgY2FsbGVkIGFmdGVyIHRoZVxuICAvLyBicm93c2VyIGV2ZW50IGhhcyBhbHJlYWR5IG9jY3VycmVkLlxuICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJykge1xuICAgIC8vIEhhbmRsZSBpdCBhc3luY2hyb25vdXNseSB0byBhbGxvdyBzY3JpcHRzIHRoZSBvcHBvcnR1bml0eSB0byBkZWxheSByZWFkeVxuICAgIGNiKCk7XG4gIH1cbiAgdmFyIGxvYWRlZDtcbiAgLy8gTW96aWxsYSwgT3BlcmEgYW5kIHdlYmtpdCBuaWdodGxpZXMgY3VycmVudGx5IHN1cHBvcnQgdGhpcyBldmVudFxuICBpZiAoZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgIC8vIFVzZSB0aGUgaGFuZHkgZXZlbnQgY2JcbiAgICBsb2FkZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBsb2FkZWQsIGZhbHNlKTtcbiAgICAgIGNiKCk7XG4gICAgfTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgbG9hZGVkLCBmYWxzZSk7XG5cbiAgICAvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgY2IsIGZhbHNlKTtcblxuICAgIC8vIElmIElFIGV2ZW50IG1vZGVsIGlzIHVzZWRcbiAgfSBlbHNlIGlmIChkb2N1bWVudC5hdHRhY2hFdmVudCkge1xuICAgIGxvYWRlZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gTWFrZSBzdXJlIGJvZHkgZXhpc3RzLCBhdCBsZWFzdCwgaW4gY2FzZSBJRSBnZXRzIGEgbGl0dGxlIG92ZXJ6ZWFsb3VzICh0aWNrZXQgIzU0NDMpLlxuICAgICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScpIHtcbiAgICAgICAgZG9jdW1lbnQuZGV0YWNoRXZlbnQoJ29ucmVhZHlzdGF0ZWNoYW5nZScsIGxvYWRlZCk7XG4gICAgICAgIGNiKCk7XG4gICAgICB9XG4gICAgfTtcbiAgICAvLyBlbnN1cmUgZmlyaW5nIGJlZm9yZSBvbmxvYWQsXG4gICAgLy8gbWF5YmUgbGF0ZSBidXQgc2FmZSBhbHNvIGZvciBpZnJhbWVzXG4gICAgZG9jdW1lbnQuYXR0YWNoRXZlbnQoJ29ucmVhZHlzdGF0ZWNoYW5nZScsIGxvYWRlZCk7XG5cbiAgICAvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xuICAgIHdpbmRvdy5hdHRhY2hFdmVudCgnb25sb2FkJywgY2IpO1xuXG4gICAgLy8gSWYgSUUgYW5kIG5vdCBhIGZyYW1lXG4gICAgLy8gY29udGludWFsbHkgY2hlY2sgdG8gc2VlIGlmIHRoZSBkb2MgaXMgcmVhZHlcbiAgICB2YXIgdG9wbGV2ZWwgPSBmYWxzZTtcblxuICAgIHRyeSB7XG4gICAgICB0b3BsZXZlbCA9IHdpbmRvdy5mcmFtZUVsZW1lbnQgPT09IG51bGw7XG4gICAgfSBjYXRjaChlKSB7fVxuXG4gICAgaWYgKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCAmJiB0b3BsZXZlbCkge1xuICAgICAgZG9TY3JvbGxDaGVjayhjYik7XG4gICAgfVxuICB9XG59O1xuLy8g55u05o6l55So5Y6f55Sf55qERE9NcmVhZHnvvIzkuI3ljrvkvp3otZblpJbpg6jnmoRqcXVlcnnvvIxraXNzeSBA6LCL5aOrIGluIDIwMTYtMTItMjdcbmV4cG9ydHMuRE9NUmVhZHkgPSBET01SZWFkeTtcblxuZnVuY3Rpb24gb25sb2FkIChjYWxsYmFjaykge1xuICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJykge1xuICAgIGNhbGxiYWNrKCk7XG4gIH0gZWxzZSB7XG4gICAgb24od2luZG93LCAnbG9hZCcsIGNhbGxiYWNrKTtcbiAgfVxufTtcbmV4cG9ydHMub25sb2FkID0gb25sb2FkO1xuXG4vKipcbiAqIOe7keWumuS6i+S7tlxuICogQHBhcmFtIG9iaiB7V2luZG93fEVsZW1lbnR9IERPTSDlhYPntKBcbiAqIEBwYXJhbSBldmVudF90eXBlXG4gKiBAcGFyYW0gZlxuICovXG5mdW5jdGlvbiBvbiAoKSB7XG4gIHZhciB3aW4gPSB3aW5kb3c7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICBpZiAoYXJncy5sZW5ndGggPT09IDIpIHtcbiAgICBpZiAoYXJnc1swXSA9PT0gJ0RPTVJlYWR5Jykge1xuICAgICAgRE9NUmVhZHkoYXJnc1sxXSk7XG4gICAgfVxuICAgIGlmIChhcmdzWzBdID09PSAnb25sb2FkJykge1xuICAgICAgb25sb2FkKGFyZ3NbMV0pO1xuICAgIH1cbiAgfSBlbHNlIGlmIChhcmdzLmxlbmd0aCA9PT0gMykge1xuICAgIHZhciBvYmogPSBhcmdzWzBdO1xuICAgIHZhciBldmVudF90eXBlID0gYXJnc1sxXTtcbiAgICB2YXIgZiA9IGFyZ3NbMl07XG4gICAgaWYgKGV2ZW50X3R5cGUgPT09ICd0YXAnIHx8IGV2ZW50X3R5cGUgPT09ICd0YXBTcG0nKSB7XG4gICAgICB0YXBFdmVudEJpbmQob2JqLCBmLCBldmVudF90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8g5b2T5YmN5rWP6KeI5Zmo5piv5ZCm5Li6IElF77yI5piv5ZCm5pSv5oyBIGRvY3VtZW50LmF0dGFjaEV2ZW5077yJXG4gICAgICB2YXIgb25ldmVudCA9ICEhZG9jdW1lbnQuYXR0YWNoRXZlbnQgPyAnYXR0YWNoRXZlbnQnIDogJ2FkZEV2ZW50TGlzdGVuZXInO1xuICAgICAgdmFyIGF0dGEgPSAhIWRvY3VtZW50LmF0dGFjaEV2ZW50O1xuICAgICAgb2JqW29uZXZlbnRdKFxuICAgICAgICAoYXR0YSA/ICdvbicgOiAnJykgKyBldmVudF90eXBlLFxuICAgICAgICBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGUgPSBlIHx8IHdpbi5ldmVudDtcbiAgICAgICAgICB2YXIgZWwgPSBlLnRhcmdldCB8fCBlLnNyY0VsZW1lbnQ7XG4gICAgICAgICAgaWYgKHR5cGVvZiBmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBmKGUsIGVsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHBhc3NpdmVTdXBwb3J0ZWQoZXZlbnRfdHlwZSkgPyB7IHBhc3NpdmU6IHRydWUgfSA6IGZhbHNlXG4gICAgICApO1xuICAgIH1cbiAgfVxufTtcbmV4cG9ydHMub24gPSBvbjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2xpYl91L3V0aWxzL3V0aWxFdmVudC5qc1xuLy8gbW9kdWxlIGlkID0gNTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiDpgJrov4fooqvliqjkuovku7bkvqblkKzlmajmj5DljYfmu5rliqjmgKfog71cbiAqIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL3dlYi91cGRhdGVzLzIwMTYvMDYvcGFzc2l2ZS1ldmVudC1saXN0ZW5lcnM/aGw9emgtY25cbiAqIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL3dlYi90b29scy9saWdodGhvdXNlL2F1ZGl0cy9wYXNzaXZlLWV2ZW50LWxpc3RlbmVycz9obD16aC1jblxuICovXG52YXIgc3VwcG9ydGVkO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXZlbnRfdHlwZSkge1xuICBpZiAodHlwZW9mIHN1cHBvcnRlZCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgcmV0dXJuIHN1cHBvcnRlZDtcbiAgfSBlbHNlIHtcbiAgICAvLyDku4V0b3VjaOOAgW1vdXNl44CBc2Nyb2xs44CBd2hlZWznm7jlhbPnmoTkuovku7bpnIDopoHlsJ3or5XlvIDlkK8ncGFzc2l2ZSdcbiAgICBpZiAoIS90b3VjaHxtb3VzZXxzY3JvbGx8d2hlZWwvaS50ZXN0KGV2ZW50X3R5cGUpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHN1cHBvcnRlZCA9IGZhbHNlO1xuICAgIHRyeSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ3Bhc3NpdmUnLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc3VwcG9ydGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdCcsIG51bGwsIG9wdGlvbnMpO1xuICAgIH0gY2F0Y2goZXJyKSB7fVxuICAgIHJldHVybiBzdXBwb3J0ZWQ7XG4gIH1cbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9saWJfdS91dGlscy9wYXNzaXZlU3VwcG9ydGVkLmpzXG4vLyBtb2R1bGUgaWQgPSA1NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIHVt6YCa6YGT77yMYXBsdXPlj5HpgIFodHRw6K+35rGC5pel5b+X5o+S5Lu2XG4gKlxuICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuICpcbiAqIEF1dGhvcnM6XG4gKiAgIOmSsOaYrSA8Y2hhbmdsaWFuZy5sY2xAdW1lbmcuY29tPlxuICovXG4ndXNlIHN0cmljdCc7XG5cbi8vIHZhciBtaW5pID0gcmVxdWlyZSgnLi4vbGliX3UvdXRpbHMvbWluaScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbXMge09iamVjdH0gb3B0aW9ucyB7XG4gICAgICogICBsb2dDb25maWc6IHtsb2dDb25maWd9XG4gICAgICogfVxuICAgICAqL1xuXG4gICAgcnVuOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgTWFpbiA9IHJlcXVpcmUoJy4vbGliX2Nvbm5lY3Rpb24vbWFpbl93ZWJfaHR0cF91bS5qcycpO1xuICAgICAgdmFyIG1haW4gPSBNYWluLmNyZWF0ZSh7XG4gICAgICAgIFdTOiBudWxsLFxuICAgICAgICBDVFg6IHdpbmRvdyxcbiAgICAgICAgQ1RYX1RZUEU6ICdXRUInXG4gICAgICB9KTtcbiAgICAgIG1haW4ucnVuKHRoaXMub3B0aW9ucyk7XG4gICAgfVxuICB9O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL3BsdWdpbnMvYXBsdXNfd2ViX2h0dHBfdW0uanNcbi8vIG1vZHVsZSBpZCA9IDU3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogdW3pgJrpgZPvvIzmi6bmiKrlubbmjIlodHRw5Y2P6K6u5Y+R6YCB5pel5b+XXG4gKlxuICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuICpcbiAqIEF1dGhvcnM6XG4gKiAgIEFhcm9ufOmSsOaYrSA8Y2hhbmdsaWFuZy5sY2xAdW1lbmcuY29tPlxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBsb2dfY2xvdWQgPSByZXF1aXJlKCcuL2xvZ19jbG91ZCcpO1xudmFyIHV0aWxHb2xkbG9nID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxHb2xkbG9nJyk7XG52YXIgYXBsdXMgPSB1dGlsR29sZGxvZy5nZXRHbG9iYWxWYWx1ZSgnYXBsdXMnKTtcbnZhciBtYWluX2Jhc2VfaHR0cCA9IHJlcXVpcmUoJy4vbWFpbl9iYXNlX2h0dHAuanMnKTtcbnZhciBib2R5QnVpbGQgPSByZXF1aXJlKCdAL3BsdWdpbnMvbGliX3VtL2JvZHlfYnVpbGRlcl93ZWJfdW0nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBtYWluX2Jhc2VfaHR0cC5leHRlbmQoe1xuICAvKipcbiAgICogQHBhcmFtcyB7T2JqZWN0fSBkYXRhXG4gICAqICovIFxuICBoYW5kbGVyTWlkZGxld2FyZTogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICB2YXIgcGFyYW1zID0gbG9nX2Nsb3VkLmNoYW5nZVRvT2JqKGRhdGEud2hhdF90b19zZW5kLmxvZ2RhdGEpO1xuXG4gICAgdmFyIG1ldGhvZCA9IGRhdGEud2hlcmVfdG9fc2VuZC5tZXRob2Q7XG4gICAgXG4gICAgdmFyIHBvc3REYXRhID0gYm9keUJ1aWxkKHBhcmFtcywgZGF0YS51c2VyZGF0YSk7XG5cbiAgICBpZiAobWV0aG9kICE9PSAnUE9TVCcgfHwgISEhKG5hdmlnYXRvciAmJiBuYXZpZ2F0b3Iuc2VuZEJlYWNvbikpIHtcbiAgICAgIHBvc3REYXRhID0gXCJkPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHBvc3REYXRhKTtcbiAgICB9IFxuXG4gICAgYXBsdXMuc2VuZChkYXRhLndoZXJlX3RvX3NlbmQudXJsLCBwb3N0RGF0YSwgbWV0aG9kLCBmdW5jdGlvbigpIHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdhcGx1cy5zZW5kIHN1Y2Nlc3MgJywgcmVzKTtcbiAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdhcGx1cy5zZW5kIGZhaWx1cmUgJywgZXJyUmVzKTtcbiAgICB9KTtcbiAgfVxufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvcGx1Z2lucy9saWJfY29ubmVjdGlvbi9tYWluX3dlYl9odHRwX3VtLmpzXG4vLyBtb2R1bGUgaWQgPSA1OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIHdlYnNvY2tldCB1dGlsc1xuICpcbiAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cbiAqXG4gKiBBdXRob3JzOlxuICogICBSaWNoYXJkfOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxHb2xkbG9nID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxHb2xkbG9nJyk7XG52YXIgYXBsdXMgPSB1dGlsR29sZGxvZy5nZXRHbG9iYWxWYWx1ZSgnYXBsdXMnKTtcblxuZXhwb3J0cy5nZXRLZXlJbmRleCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgdmFyIG1hcCA9IHtcbiAgICBwcm90b2NvbDogMSxcbiAgICBldmVudF9hcmdzOiAyNSxcbiAgfTtcbiAgcmV0dXJuIG1hcFtrZXldO1xufTtcbnZhciBITCA9ICctJztcbmV4cG9ydHMuY2hhbmdlVG9BcnJheSA9IGZ1bmN0aW9uIChmb3JtYXQsIGRhdGEpIHtcbiAgdmFyIHRpbWUgPSBkYXRhLmV2ZW50X3RpbWVzdGFtcC5nZXRUaW1lKCkudG9TdHJpbmcoKTtcbiAgdmFyIGNsaWVudCA9IGRhdGEuY2xpZW50IHx8IHt9O1xuICB2YXIgd2lkdGggPSBjbGllbnQuc2NyZWVuV2lkdGggfHwgJyc7XG4gIHZhciBoZWlnaHQgPSBjbGllbnQuc2NyZWVuSGVpZ2h0IHx8ICcnO1xuXG4gIHZhciBfcmVzb2x1dGlvbiA9IHdpZHRoICsgJyonICsgaGVpZ2h0O1xuICB2YXIgcmVzb2x1dGlvbiA9IHdpZHRoICYmIGhlaWdodCA/IF9yZXNvbHV0aW9uIDogSEw7XG5cbiAgdmFyIFVBID0gY2xpZW50LnVzZXJBZ2VudCB8fCBITDtcbiAgdmFyIExBTkcgPSBjbGllbnQubGFuZ3VhZ2UgfHwgSEw7XG4gIHZhciBnb2tleSA9IGRhdGEuZ29rZXkgfHwge307XG4gIHZhciBldmVudF9hcmdzID0gSlNPTi5zdHJpbmdpZnkoZ29rZXkpO1xuICB2YXIgc2RrX2luZm8gPSBKU09OLnN0cmluZ2lmeSh7XG4gICAgY3VzdG9tU2RrSWQ6IGRhdGEuc2RrX2luZm8uY3VzdG9tU2RrSWQgfHwgJycsXG4gICAgcGxhdGZvcm1fdHlwZTogZGF0YS5zZGtfaW5mby5wbGF0Zm9ybVR5cGUgfHwgJycsIC8vd2VjaGF0LCAnYWxpcGF5JywgJ2JhaWR1JywgJ3Rhb2JhbydcbiAgfSk7XG4gIHZhciBhcHBLZXkgPSBkYXRhLmFwcEtleSB8fCBkYXRhLmFwcElkIHx8IEhMO1xuICAvLyDkuJrliqHlupTnlKjnmoTmianlsZXkv6Hmga9cbiAgdmFyIGFwcF9leHRfaW5mbyA9IEpTT04uc3RyaW5naWZ5KHtcbiAgICAvLyBhcHBJZDogY2xpZW50LmFwcElkIHx8ICcnXG4gICAgYXBwSWQ6IGNsaWVudC5hcHBJZCB8fCBhcGx1cy5nZXRNZXRhSW5mbygnbWluaUFwcElkJykgfHwgJydcbiAgfSk7XG4gIHZhciBzZXNzaW9uX2FyZ3MgPSBKU09OLnN0cmluZ2lmeShkYXRhLnNlc3Npb25BcmdzIHx8IHt9KTtcbiAgdmFyIGdsb2JhbF9hcmdzID0gSlNPTi5zdHJpbmdpZnkoZGF0YS5nbG9iYWxBcmdzIHx8IHt9KTsgLy8gMjAyMS0wMS0xNEDkuZ3plKHpnIDmsYJcbiAgdmFyIGFyZzEgPSBkYXRhLmFyZzEgfHwgZGF0YS5sb2drZXkgfHwgSEw7XG4gIGlmIChhcmcxLmluZGV4T2YoJy8kJF8nKSA9PT0gMCkge1xuICAgIGFyZzEgPSBhcmcxLnN1YnN0cmluZygxLCBhcmcxLmxlbmd0aCk7XG4gIH1cbiAgaWYgKGRhdGEuZXZlbnRfY29kZSA9PT0gJzIwMDEnICYmIGRhdGEudHJhY2tlckV2ZW50Q29kZSkge1xuICAgIGFyZzEgPSBkYXRhLnRyYWNrZXJFdmVudENvZGU7XG4gIH1cbiAgdmFyIG1vZGVsID0gW1xuICAgIGRhdGEuY2FjaGUsICAgICAgICAgICAgICAgICAvLyBsb2dfaWQg5qCH6K+G6K+l5p2h5pel5b+X55qE5ZSv5LiASURcbiAgICBkYXRhLm1ldGhvZCB8fCAnR0VUJywgICAgICAgLy8gcHJvdG9jb2xfaW5mbyDljY/orq7kv6Hmga8g5LiJ6YCJ5LmL5LiA77yaV1MvUE9TVC9HRVRcbiAgICBVQSwgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdXNlcl9hZ2VudCAtIOWuouaIt+err1VB5L+h5oGvXG4gICAgcmVzb2x1dGlvbiwgICAgICAgICAgICAgICAgIC8vIHJlc29sdXRpb24g5bGP5bmV5a695bqmKuWxj+W5lemrmOW6piBcbiAgICBhcHBLZXksICAgICAgICAgICAgICAgICAgICAgLy8gYXBwX2tleVxuICAgIGFwcF9leHRfaW5mbywgICAgICAgICAgICAgICAvLyBhcHBfZXh0X2luZm8gQXBw5omp5bGV5L+h5oGvXG4gICAgZGF0YS5fZGV2X2lkIHx8IEhMLCAgICAgICAgIC8vIGJpel9kZXZpY2VfaWQg5Lia5Yqh5LiK5Lyg55qE6K6+5aSH6K+G5YirSURcbiAgICAne30nLCAgICAgICAgICAgICAgICAgICAgICAgLy8gZGV2aWNlX2V4dF9pbmZvIOiuvuWkh+aJqeWxleS/oeaBryjlj4Lop4HkuIvmlofor7TmmI4pIFRPRE8g5b6F5a6aIGstdiBqc29u5LiyXG4gICAgZGF0YS5fdXNlcl9uaWNrIHx8IEhMLCAgICAgIC8vIGJpel91c2VyX25pY2sg5Lia5Yqh56uv55So5LqO6K+G5Yir5bey55m75b2V55So5oi355qE5Lya5ZGY5qCH6K+GIFRPRE8g5Lia5Yqh5Lyg5YWlXG4gICAgZGF0YS5fdXNlcl9pZCB8fCBITCwgICAgICAgIC8vIGJpel91c2VyX2lkIOS4muWKoeerr+eUqOS6juivhuWIq+W3sueZu+W9leeUqOaIt+eahOS8muWRmElEXG4gICAgZGF0YS5fYW5vbnlfaWQgfHwgSEwsICAgICAgIC8vIGJpel9hbm9ueV9pZCDkuJrliqHnq6/nlKjkuo7or4bliKvpnZ7nmbvlvZXnlKjmiLfnmoTljL/lkI1JRFxuICAgICd7fScsICAgICAgICAgICAgICAgICAgICAgICAvLyBiaXpfdXNlcl9leHRfaW5mbyDkuJrliqHnq6/kuIrkvKDnmoTmianlsZXnlKjmiLfkv6Hmga8gVE9ET1xuICAgIExBTkcsICAgICAgICAgICAgICAgICAgICAgICAvLyBsb2NhbGUg5Zyw5Yy6LeivreiogOS/oeaBr1xuICAgIGRhdGEudGltZVpvbmUgfHwgSEwsICAgICAgICAvLyB0aW1lem9uZSDorr7lpIfkvb/nlKjnmoTml7bljLpcbiAgICBjbGllbnQub3MgfHwgSEwsICAgICAgICAgICAgLy8gb3Mg5pON5L2c57O757ufIOWmgu+8mlwiT1MgWFwiXG4gICAgY2xpZW50Lm9zX3ZlcnNpb24gfHwgSEwsICAgIC8vIG9zX3ZlcnNpb24g5pON5L2c57O757uf54mI5pys5Y+3L0J1aWxk56CB77yM5aaC77yaXCIxMF8xNF80XCJcbiAgICBzZGtfaW5mbywgICAgICAgICAgICAgICAgICAgLy8gc2RrX2luZm8gU0RL5L+h5oGvKOWPguingeivtOaYjikgay1257uT5p6E77yM6ZyA6Kej5p6QIFwianN2ZXI9YXBsdXNfdS5qcyZsdmVyPTguMTEuNVwiIFRPRE9cbiAgICBkYXRhLl9zZXNzaW9uX2lkIHx8IEhMLCAgICAgLy8gYml6X3Nlc3Npb25faWQg5Lia5Yqh56uv57u05oqk55qEc2Vzc2lvbiBpZFxuICAgIGRhdGEuY25hIHx8IEhMLCAgICAgICAgICAgICAvLyB1dGRpZFxuICAgIHRpbWUsICAgICAgICAgICAgICAgICAgICAgICAvLyBldmVudF90aW1lc3RhbXAg5LqL5Lu25pel5b+X55Sf5oiQ5pe26Ze0KOacrOWcsCksIHB25Li66aG16Z2i6L+b5YWl5pe26Ze0XG4gICAgZW5jb2RlVVJJQ29tcG9uZW50KGRhdGEudXJsKSB8fCBITCwgICAgICAgICAgICAvLyBwYWdlIOWujOaVtOeahFVSTOaIluiAhVNjcmVlbiBOYW1lXG4gICAgZGF0YS5ldmVudF9jb2RlIHx8IEhMLCAgICAgIC8vIGV2ZW50X2lkIOS6i+S7tuexu+Wei0lEIFRPRE8gQOS6keadsFxuICAgIGVuY29kZVVSSUNvbXBvbmVudChkYXRhLnByZSkgfHwgSEwsICAgICAgICAgICAgLy8gcmVmZXJfcGFnZSDmnaXmupBwYWdlXG4gICAgZ2xvYmFsX2FyZ3MsICAgICAgICAgICAgICAgIC8vIGdsb2JhbF9hcmdzIOeUqOaIt+iuvue9rueahOWFqOWxgOWPguaVsCwg55Sf5ZG95ZGo5pyf57qn5YirXG4gICAgc2Vzc2lvbl9hcmdzLCAgICAgICAgICAgICAgIC8vIHNlc3Npb25fYXJncyDnlKjmiLforr7nva7nmoRTZXNzaW9u57qn5Y+C5pWwLOi3qFNlc3Npb27muIXnqbpcbiAgICBldmVudF9hcmdzLCAgICAgICAgICAgICAgICAgLy8gZXZlbnRfYXJncyDnlKjmiLforr7nva7nmoRQVue6p+WPguaVsCzot6hQVua4heepuiBrLXbnu5PmnoQgQOS6keadsFxuICAgIGFyZzEsICAgICAgICAgICAgICAgICAgICAgICAvLyBhcmcxIOeUqOaIt+aJqeWxlemihOeVmVxuICAgIGRhdGEuc2RrX2luZm8uanN2ZXIsICAgICAgICAvLyBUT0RPIHNka190eXBlIChhcGx1c19taW5pLmpzKSByZXNlcnZlXzEg5LqL5Lu25bGe5oCn77yaUFbnuqfnmoTml6Xlv5flj4LmlbAs6LeoUFboh6rliqjmuIXnqbrvvIzov5nph4zmmK9qc+Wkp+eJiOacrOWPt++8jGFwbHVzLmpzIHx8IGFwbHVzX21pbmkuanNcbiAgICBkYXRhLnNka19pbmZvLmx2ZXIsICAgICAgICAgLy8gc2RrX3ZlcnNpb24gIFNES+eJiOacrO+8jOi/memHjOWvueW6lGFwbHVzSlPnmoTlhbfkvZPniYjmnKzlj7fvvIzlpoIxLjAuMFxuICAgIGNsaWVudC5hcHBWZXJzaW9uIHx8ICdkZXZ0b29scycgfHwgSEwsICAgICAgICAgLy8gYXBwX3ZlcnNpb25cbiAgICBjbGllbnQuYnJhbmQgfHwgSEwsICAgICAgICAgLy8gYnJhbmQg5omL5py65ZOB54mMXG4gICAgSEwsICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhcnJpZXIg6L+Q6JCl5ZWG77yI5YmN56uv5Lmf5Y+W5LiN5Yiw77yJXG4gICAgY2xpZW50Lm5ldHdvcmtUeXBlIHx8IEhMLCAgIC8vIGFjY2VzcyDnvZHnu5znsbvlnotcbiAgXTtcbiAgLy8gY29uc29sZS5sb2cobW9kZWwpO1xuICByZXR1cm4gbW9kZWw7XG59O1xuXG5leHBvcnRzLmNoYW5nZVRvT2JqID0gZnVuY3Rpb24oZGF0YSkge1xuICB2YXIgdGltZSA9IGRhdGEuZXZlbnRfdGltZXN0YW1wLmdldFRpbWUoKS50b1N0cmluZygpO1xuICB2YXIgY2xpZW50ID0gZGF0YS5jbGllbnQgfHwge307XG5cbiAgdmFyIFVBID0gY2xpZW50LnVzZXJBZ2VudCB8fCBITDtcbiAgdmFyIExBTkcgPSBjbGllbnQubGFuZ3VhZ2UgfHwgSEw7XG4gIHZhciBnb2tleSA9IGRhdGEuZ29rZXkgfHwge307XG4gIHZhciBldmVudF9hcmdzID0gSlNPTi5zdHJpbmdpZnkoZ29rZXkpO1xuICB2YXIgc2RrX2luZm8gPSBKU09OLnN0cmluZ2lmeSh7XG4gICAgY3VzdG9tU2RrSWQ6IGRhdGEuc2RrX2luZm8uY3VzdG9tU2RrSWQgfHwgJycsXG4gICAgcGxhdGZvcm1fdHlwZTogZGF0YS5zZGtfaW5mby5wbGF0Zm9ybVR5cGUgfHwgJycsIC8vd2VjaGF0LCAnYWxpcGF5JywgJ2JhaWR1JywgJ3Rhb2JhbydcbiAgfSk7XG4gIFxuICB2YXIgYXBwS2V5ID0gZGF0YS5hcHBLZXkgfHwgZGF0YS5hcHBJZCB8fCBITDtcbiAgLy8g5Lia5Yqh5bqU55So55qE5omp5bGV5L+h5oGvXG4gIHZhciBhcHBfZXh0X2luZm8gPSBKU09OLnN0cmluZ2lmeSh7XG4gICAgLy8gYXBwSWQ6IGNsaWVudC5hcHBJZCB8fCAnJ1xuICAgIGFwcElkOiBjbGllbnQuYXBwSWQgfHwgYXBsdXMuZ2V0TWV0YUluZm8oJ21pbmlBcHBJZCcpIHx8ICcnXG4gIH0pO1xuICB2YXIgc2Vzc2lvbl9hcmdzID0gSlNPTi5zdHJpbmdpZnkoZGF0YS5zZXNzaW9uQXJncyB8fCB7fSk7XG4gIHZhciBnbG9iYWxfYXJncyA9IEpTT04uc3RyaW5naWZ5KGRhdGEuZ2xvYmFsQXJncyB8fCB7fSk7IC8vIDIwMjEtMDEtMTRA5Lmd6ZSh6ZyA5rGCXG4gIHZhciBhcmcxID0gZGF0YS5hcmcxIHx8IGRhdGEubG9na2V5IHx8IEhMO1xuICBpZiAoYXJnMS5pbmRleE9mKCcvJCRfJykgPT09IDApIHtcbiAgICBhcmcxID0gYXJnMS5zdWJzdHJpbmcoMSwgYXJnMS5sZW5ndGgpO1xuICB9XG4gIGlmIChkYXRhLmV2ZW50X2NvZGUgPT09ICcyMDAxJyAmJiBkYXRhLnRyYWNrZXJFdmVudENvZGUpIHtcbiAgICBhcmcxID0gZGF0YS50cmFja2VyRXZlbnRDb2RlO1xuICB9XG5cbiAgdmFyIE9iaiA9IHt9O1xuICBPYmoucGxhdGZvcm0gPSAgZGF0YS5zZGtfaW5mby5wbGF0Zm9ybVR5cGUgfHwgJyc7XG4gIE9iai5zZGtfdHlwZSA9IE9iai5wbGF0Zm9ybSA/IE9iai5wbGF0Zm9ybSArICdtcCcgOiAnJztcbiAgT2JqLmFwcGtleSA9IGFwcEtleTtcbiAgT2JqLnNka192ZXJzaW9uID0gZGF0YS5zZGtfaW5mby5sdmVyOyAvLyBzZGtfdmVyc2lvbiAgU0RL54mI5pys77yM6L+Z6YeM5a+55bqUYXBsdXNKU+eahOWFt+S9k+eJiOacrOWPt++8jOWmgjEuMC4wXG4gIHZhciBtb2Rlcm5PUyA9IFVBLm1hdGNoKC9pcGhvbmV8aXBhZHxhbmRyb2lkfG1hY2ludG9zaC9pKTtcbiAgT2JqLmRldmljZV90eXBlID0gbW9kZXJuT1NbMF0gfHwgJyc7XG4gIE9iai5vcyA9IGNsaWVudC5vcyB8fCAnJztcbiAgT2JqLm9zX3ZlcnNpb24gPSBjbGllbnQub3NfdmVyc2lvbiB8fCAnJztcbiAgT2JqLmpzdmVyID0gZGF0YS5zZGtfaW5mby5qc3ZlcjsgLy8gc2RrX3R5cGUgKGFwbHVzX21pbmkuanMpIHJlc2VydmVfMSDkuovku7blsZ7mgKfvvJpQVue6p+eahOaXpeW/l+WPguaVsCzot6hQVuiHquWKqOa4heepuu+8jOi/memHjOaYr2pz5aSn54mI5pys5Y+377yMYXBsdXMuanMgfHwgYXBsdXNfbWluaS5qcyB8fCBhcGx1c19jbG91ZC5qcztcbiAgLy8gT2JqLmRldmljZV9tb2RlbCA9IFVBOyAvLyBzZXJ2ZXIg56uv6YCa6L+HIEhUVFAgcmVxdWVzdCBoZWFkZXIg6I635Y+WXG4gIE9iai5waXhlbF9yYXRpbyA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIHx8ICcnO1xuICB2YXIgdyA9IE1hdGgucm91bmQoY2xpZW50LnNjcmVlbldpZHRoICogKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIHx8IDEpKTtcbiAgdmFyIGggPSBNYXRoLnJvdW5kKGNsaWVudC5zY3JlZW5IZWlnaHQgKiAod2luZG93LmRldmljZVBpeGVsUmF0aW8gfHwgMSkpO1xuICBPYmoucmVzb2x1dGlvbiA9IHcgPiBoID8gdyArICcqJyArIGggOiBoICsgJyonICsgdztcbiAgT2JqLmxhbmd1YWdlID0gTEFORztcbiAgT2JqLmFwcF92ZXJzaW9uID0gYXBsdXMuZ2V0TWV0YUluZm8oJ2FwcFZlcnNpb24nKSB8fCAnZGV2dG9vbHMnO1xuICAvLyBla3Yg6ZyA6KaB5a2X5q61XG4gIE9iai5hcmcxID0gYXJnMTtcbiAgT2JqLmV2ZW50X2FyZ3MgPSBldmVudF9hcmdzOyAvL2V2ZW50X2FyZ3Mg55So5oi36K6+572u55qEUFbnuqflj4LmlbAs6LeoUFbmuIXnqbogay1257uT5p6EIEDkupHmnbBcbiAgT2JqLmV2ZW50X2NvZGUgPSBkYXRhLmV2ZW50X2NvZGUgfHwgJyc7XG4gIE9iai5zZXNzaW9uQXJncyA9IHNlc3Npb25fYXJnczsgLy8gc2Vzc2lvbl9hcmdzIOeUqOaIt+iuvue9rueahFNlc3Npb27nuqflj4LmlbAs6LeoU2Vzc2lvbua4heepulxuICBPYmouZ2xvYmFsX2FyZ3MgPSBnbG9iYWxfYXJnczsgLy8gZ2xvYmFsX2FyZ3Mg55So5oi36K6+572u55qE5YWo5bGA5Y+C5pWwLCDnlJ/lkb3lkajmnJ/nuqfliKtcbiAgT2JqLmFwcF9leHRfaW5mbyA9IGFwcF9leHRfaW5mbzsgLy8gYXBwX2V4dF9pbmZvIEFwcOaJqeWxleS/oeaBr1xuICBPYmoudGltZSA9IHRpbWU7IC8vZXZlbnRfdGltZXN0YW1wIOS6i+S7tuaXpeW/l+eUn+aIkOaXtumXtCjmnKzlnLApLCBwduS4uumhtemdoui/m+WFpeaXtumXtFxuICBPYmouY25hID0gZGF0YS5jbmEgfHwgJyc7XG4gIE9iai51cmwgPSBkYXRhLnVybCB8fCAnJztcbiAgT2JqLnByZSA9IGRhdGEucHJlIHx8ICcnO1xuICBPYmoubWV0aG9kID0gZGF0YS5tZXRob2QgfHwgJ0dFVCc7XG4gIE9iai5sb2dfaWQgPSBkYXRhLmNhY2hlIHx8ICcnOyAvLyBsb2dfaWQg5qCH6K+G6K+l5p2h5pel5b+X55qE5ZSv5LiASURcbiAgT2JqLnNka19pbmZvID0gc2RrX2luZm87XG5cbiAgdmFyIGV4ZGF0YSA9IGFwbHVzLmdldE1ldGFJbmZvKCdhcGx1cy1leGRhdGEnKTtcbiAgaWYgKGV4ZGF0YSAmJiBleGRhdGEuYXBsdXNfdHJhY2tfZGVidWdfaWQpIHtcbiAgICBPYmoudHJhY2tfZGVidWdfaWQgPSBleGRhdGEuYXBsdXNfdHJhY2tfZGVidWdfaWQ7XG4gIH1cbiAgcmV0dXJuIE9iajtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvcGx1Z2lucy9saWJfY29ubmVjdGlvbi9sb2dfY2xvdWQuanNcbi8vIG1vZHVsZSBpZCA9IDU5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICog5oum5oiq5bm25oyJaHR0cOWNj+iuruWPkemAgeaXpeW/l1xuICpcbiAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cbiAqXG4gKiBBdXRob3JzOlxuICogICBSaWNoYXJkfOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIEJhc2UgPSByZXF1aXJlKCdAY29yZS9CYXNlJyk7XG4vLyB2YXIgbG9nX2Nsb3VkID0gcmVxdWlyZSgnLi9sb2dfY2xvdWQnKTtcbnZhciB1dGlsR1EgPSByZXF1aXJlKCdAdXRpbHMvdXRpbEdRJyk7XG52YXIgYXBsdXNTdGF0aWMgPSByZXF1aXJlKCdAdXRpbHMvYXBsdXNTdGF0aWMnKTtcbi8vIHZhciB1dGlsR29sZGxvZyA9IHJlcXVpcmUoJ0B1dGlscy91dGlsR29sZGxvZycpO1xuLy8gdmFyIGFwbHVzID0gdXRpbEdvbGRsb2cuZ2V0R2xvYmFsVmFsdWUoJ2FwbHVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gQmFzZS5leHRlbmQoe1xuXG4gIHN1YnNjcmliZUxvZ3M6IGZ1bmN0aW9uIChhY3Rpb24sIGNhbGxiYWNrKSB7XG4gICAgdXRpbEdRLnB1c2hJbnRvR29sZGxvZ1F1ZXVlKGFwbHVzU3RhdGljLlNVQlNDUklCRSwgW2FjdGlvbiwgZnVuY3Rpb24gKG9yaURhdGFzKSB7XG4gICAgICBpZiAob3JpRGF0YXMuc3RhdHVzID09PSBhcGx1c1N0YXRpYy5DT01QTEVURSkge1xuICAgICAgICBjYWxsYmFjayhvcmlEYXRhcyk7XG4gICAgICB9XG4gICAgfV0pO1xuICB9LFxuXG4gIGdldExvZ2ljU3ltYm9sOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZm9ybWF0ID09PSAnQUxJJyA/ICcmJyA6ICd8fCc7XG4gIH0sXG5cbiAgLyoqXG4gICAqIOWcqOWtkOexu+S4reWunueOsFxuICAgKiBAcGFyYW1zIHtPYmplY3R9IGRhdGFcbiAgICovXG4gIGhhbmRsZXJNaWRkbGV3YXJlOiBmdW5jdGlvbiAoKSB7fSxcbiAgXG5cbiAgd2F0Y2hMT0c6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3NlbGYgPSB0aGlzO1xuICAgIFxuICAgIC8vIOiuoumYhXB25LqL5Lu2XG4gICAgX3NlbGYuc3Vic2NyaWJlTG9ncyhhcGx1c1N0YXRpYy5NV19DSEFOR0VfUFYsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICBfc2VsZi5oYW5kbGVyTWlkZGxld2FyZShkYXRhLCAncHYnKTtcbiAgICB9KTtcblxuICAgIC8vIOiuoumYhWhqbGovYXBsdXPkuovku7ZcbiAgICBfc2VsZi5zdWJzY3JpYmVMb2dzKGFwbHVzU3RhdGljLk1XX0NIQU5HRV9ISkxKLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgX3NlbGYuaGFuZGxlck1pZGRsZXdhcmUoZGF0YSwgYXBsdXNTdGF0aWMuQVBMVVMpO1xuICAgIH0pO1xuICB9LFxuXG4gIHJ1bjogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMud2F0Y2hMT0coKTtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9wbHVnaW5zL2xpYl9jb25uZWN0aW9uL21haW5fYmFzZV9odHRwLmpzXG4vLyBtb2R1bGUgaWQgPSA2MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIGFsaWxvZy9zL3NyYy9saWJfdS91dGlscy91dGlsR1EuanNcbiAqIOaTjeS9nGFwbHVzX3F1ZXVl55qE5bel5YW357G7XG4gKlxuICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuICpcbiAqIEF1dGhvcnM6XG4gKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxHb2xkbG9nID0gcmVxdWlyZSgnLi91dGlsR29sZGxvZycpO1xuXG5leHBvcnRzLnB1c2hJbnRvR29sZGxvZ1F1ZXVlID0gZnVuY3Rpb24gKGFjdGlvbiwgYXJncykge1xuICB2YXIgYXBsdXNfcXVldWUgPSB1dGlsR29sZGxvZy5nZXRHbG9iYWxWYWx1ZSgnYXBsdXNfcXVldWUnKTtcbiAgdmFyIGFwbHVzID0gdXRpbEdvbGRsb2cuZ2V0R2xvYmFsVmFsdWUoJ2FwbHVzJyk7XG4gIHZhciBuYW1lcyA9IGFjdGlvbi5zcGxpdCgnLicpO1xuICB2YXIgYXBsdXNfMSA9IGFwbHVzW25hbWVzWzFdXTtcbiAgdmFyIGFwbHVzXzIgPSBhcGx1c18xID8gYXBsdXNfMVtuYW1lc1syXV0gOiBudWxsO1xuXG4gIGlmIChhcGx1cyAmJiBuYW1lcy5sZW5ndGggPT09IDIgJiYgYXBsdXNfMSkge1xuICAgIGFwbHVzXzEuYXBwbHkoYXBsdXMsIGFyZ3MpO1xuICB9IGVsc2UgaWYgKG5hbWVzLmxlbmd0aCA9PT0gMyAmJiBhcGx1c18yKSB7XG4gICAgYXBsdXNfMi5hcHBseShhcGx1c18xLCBhcmdzKTsgIFxuICB9IGVsc2Uge1xuICAgIGFwbHVzX3F1ZXVlLnB1c2goe1xuICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICBhcmd1bWVudHM6IGFyZ3NcbiAgICB9KTtcbiAgfVxufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2xpYl91L3V0aWxzL3V0aWxHUS5qc1xuLy8gbW9kdWxlIGlkID0gNjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiB1bSDpgJrpgZPvvIzmlLbmlbDor7fmsYLkuIrmiqXmlbDmja5cbiAqXG4gKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG4gKlxuICogQXV0aG9yczpcbiAqICAgQWFyb2586ZKw5pitIDxjaGFuZ2xpYW5nLmxjbEB1bWVuZy5jb20+XG4gKi9cbnZhciBjbG9uZURlZXAgPSByZXF1aXJlKCdAdXRpbHMvY2xvbmVEZWVwJyk7XG52YXIgYnVpbGRIZWFkZXIgPSByZXF1aXJlKCcuL2hlYWRlcl9idWlsZGVyX3dlYl91bScpO1xudmFyIHV0aWxHb2xkbG9nID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxHb2xkbG9nJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgbWFuZ2xlID0gcmVxdWlyZSgnLi9tYW5nbGVfd2ViJyk7XG52YXIgYmFzZTY0ID0gcmVxdWlyZSgnLi9iYXNlNjQnKTtcbnZhciBhcGx1c1N0YXRpYyA9IHJlcXVpcmUoJ0B1dGlscy9hcGx1c1N0YXRpYycpO1xudmFyIGFwbHVzID0gdXRpbEdvbGRsb2cuZ2V0R2xvYmFsVmFsdWUoJ2FwbHVzJyk7XG52YXIganNvblV0aWwgPSByZXF1aXJlKCcuL2pzb25VdGlsJyk7XG52YXIgY3JlYXRlRXZlbnQgPSByZXF1aXJlKCcuL2V2ZW50Jyk7XG4vKipcbiAqIOWQjHVt6YCa6YGT54mI5pys55qE5bCP56iL5bqP5pS25pWw5LiK5oql5pWw5o2u5L2T55u45q+U77yM5LiN6ZyA6KaBIHNlc3Npb27vvIxzZXNzaW9uIOeUseacjeWKoeerr+ino+WGs1xuICog5bm25LiUIGVrdiDmsqHmnInnvJPlrZjmnLrliLZcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsb2dkYXRhLCB1c2VyZGF0YSkge1xuICBpZiAoIWxvZ2RhdGEgfHwgIXVzZXJkYXRhIHx8IHV0aWxzLmNoZWNrRW1wdHlPYmoobG9nZGF0YSkgfHwgdXRpbHMuY2hlY2tFbXB0eU9iaih1c2VyZGF0YSkpIHtcbiAgICByZXR1cm4ge307XG4gIH1cbiAgdmFyIGRhdGEgPSB7fTtcbiAgdmFyIGhlYWRlciA9IGNsb25lRGVlcChidWlsZEhlYWRlcihsb2dkYXRhKSk7XG4gIHZhciBhX2Fub255X2lkID0gYXBsdXMuZ2V0TWV0YUluZm8oYXBsdXNTdGF0aWMuX0FOT05ZX0lEKSB8fCBsb2dkYXRhLmNuYTtcbiAgaWYgKGFfYW5vbnlfaWQpIHtcbiAgICBoZWFkZXIuYW5vbnlfaWQgPSBhX2Fub255X2lkO1xuICAgIGhlYWRlci5pZF90cmFja2luZy5hbm9ueV9pZCA9IGFfYW5vbnlfaWQ7XG4gIH1cbiAgLy8gZml4IGlkdHJhY2luZyBidWcsIGlmIHVzZXIgZG9uJ3Qgc2V0IF9kZXZfaWRcbiAgdmFyIGFfZGV2X2lkID0gYXBsdXMuZ2V0TWV0YUluZm8oJ19kZXZfaWQnKSB8fCBsb2dkYXRhLmNuYTtcbiAgaWYgKGFfZGV2X2lkKSB7XG4gICAgaGVhZGVyLmRldl9pZCA9IGFfZGV2X2lkO1xuICAgIGhlYWRlci5pZF90cmFja2luZy5kZXZfaWQgPSBhX2Rldl9pZDtcbiAgfVxuICB2YXIgZWt2ID0gbnVsbDtcbiAgXG4gIGlmIChsb2dkYXRhLmV2ZW50X2NvZGUgPT09ICcyMDAxJykge1xuICAgIGVrdiA9IF9idWlsZFBWRXZlbnQobG9nZGF0YSwgdXNlcmRhdGEpO1xuICB9IGVsc2Uge1xuICAgIGVrdiA9IF9idWlsZEhKTEpFdmVudChsb2dkYXRhLCB1c2VyZGF0YSk7XG4gIH1cbiAgaWYgKGVrdikge1xuICAgIGRhdGEgPSB7XG4gICAgICBhbmFseXRpY3M6IHtcbiAgICAgICAgZWt2czoge1wic2Vzc2lvbmlkXCIgOiBbY2xvbmVEZWVwKGVrdildfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICB2YXIgdXNlcklkID0gYXBsdXMuZ2V0TWV0YUluZm8oYXBsdXNTdGF0aWMuX1VTRVJfSUQpO1xuICBpZiAodXNlcklkICYmIGRhdGEuYW5hbHl0aWNzKSB7XG4gICAgZGF0YS5hbmFseXRpY3MuYWN0aXZlX3VzZXIgPSB7XG4gICAgICBwdWlkOiB1c2VySWQsXG4gICAgICBwcm92aWRlcjogYXBsdXMuZ2V0TWV0YUluZm8oJ191c2VyX25pY2snKVxuICAgIH07XG4gIH1cblxuICBkYXRhLmhlYWRlciA9IHV0aWxzLmFzc2lnbihoZWFkZXIsIGRhdGEuaGVhZGVyLCB7XG4gICAgdHM6IERhdGUubm93KCksXG4gICAgdHJhY2VJZDogdXRpbHMuZ2V0UmFuZG9tU3RyKDEwKSArIERhdGUubm93KCkgKyB1dGlscy5nZXRSYW5kb21TdHIoOSlcbiAgfSk7XG4gIHZhciBtYW5nbGVEYXRhID0gbWFuZ2xlKGRhdGEpO1xuICB2YXIgcmVxdWVzdERhdGEgPSBqc29uVXRpbC5zdHJpbmdmeShtYW5nbGVEYXRhKTtcblxuICByZXR1cm4gYmFzZTY0LmVuY29kZShyZXF1ZXN0RGF0YSk7XG59O1xuXG5mdW5jdGlvbiBfYnVpbGRISkxKRXZlbnQobG9nZGF0YSwgdXNlcmRhdGEpIHtcbiAgdHJ5IHtcbiAgICB2YXIgZXZlbnRBcmdzID0ge307XG4gICAgdmFyIGdwID0gYXBsdXMuZ2V0TWV0YUluZm8oJ2dsb2JhbHByb3BlcnR5Jyk7XG4gICAgaWYgKGdwKSB7XG4gICAgICBldmVudEFyZ3MuZ3AgPSBncDtcbiAgICB9XG5cbiAgICBpZiAobG9nZGF0YS51cmwgJiYgbG9nZGF0YS51cmwubGVuZ3RoID4gMCkge1xuICAgICAgdmFyIHVybEFyciA9IGxvZ2RhdGEudXJsLnNwbGl0KCc/Jyk7XG4gICAgICBldmVudEFyZ3MucGFnZV9uYW1lID0gdXJsQXJyWzBdIHx8ICctJztcbiAgICAgIGV2ZW50QXJncy51cmxfcCA9IHVybEFyclsxXSB8fCAnLSc7XG4gICAgfVxuXG4gICAgaWYgKGxvZ2RhdGEucHJlICYmIGxvZ2RhdGEucHJlLmxlbmd0aCA+IDApIHtcbiAgICAgIHZhciBwcmVVcmxBcnIgPSBsb2dkYXRhLnByZS5zcGxpdCgnPycpO1xuICAgICAgZXZlbnRBcmdzLnJlZl9wYWdlX25hbWUgPSBwcmVVcmxBcnJbMF0gfHwgJy0nO1xuICAgICAgZXZlbnRBcmdzLnJlZmVyX3AgPSBwcmVVcmxBcnJbMV0gfHwgJy0nO1xuICAgIH1cblxuICAgIGV2ZW50QXJncy5pc19hdXRvID0gbG9nZGF0YS5pc19hdXRvID8gMSA6IDA7XG5cbiAgICB2YXIgZ29rZXkgPSB1c2VyZGF0YS5nb2tleTtcbiAgICAvLyBjb252ZXJ0IHVybCBwYXJhbWV0ZXIgdG8gYSBqYXZhc2NyaXB0IG9iamVjdFxuICAgIHZhciBwcm9wZXJ0aWVzO1xuICAgIGlmICh0eXBlb2YgZ29rZXkgPT09ICdzdHJpbmcnKSB7XG4gICAgICBwcm9wZXJ0aWVzID0gSlNPTi5wYXJzZSgne1wiJyArIGdva2V5LnJlcGxhY2UoL1xcJi9nLCAnXCIsXCInKS5yZXBsYWNlKC9cXD0vZywnXCI6XCInKSArICdcIn0nLCBmdW5jdGlvbihrZXksIHZhbHVlKSB7IFxuICAgICAgICByZXR1cm4ga2V5ID09PSBcIlwiID8gdmFsdWUgOiBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpOyBcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGdva2V5ID09PSAnb2JqZWN0Jykge1xuICAgICAgcHJvcGVydGllcyA9IGdva2V5O1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9wZXJ0aWVzID0ge307XG4gICAgfVxuICAgIHZhciBldmVudCA9IGNyZWF0ZUV2ZW50KHVzZXJkYXRhLmxvZ2tleSwgT2JqZWN0LmFzc2lnbih7fSwgZXZlbnRBcmdzLCB7IGN1c3A6IHByb3BlcnRpZXN9ICkpO1xuICAgIHJldHVybiBldmVudDtcbiAgfSBjYXRjaCAoZSkgeyBcbiAgICBjb25zb2xlLndhcm4oJ0pTT04gcGFyc2UgZmFpbGVkJywgZSk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59O1xuXG5mdW5jdGlvbiBfYnVpbGRQVkV2ZW50KGxvZ2RhdGEsIHVzZXJkYXRhKSB7XG4gIHZhciBncCA9IGFwbHVzLmdldE1ldGFJbmZvKCdnbG9iYWxwcm9wZXJ0eScpO1xuICB2YXIgcHZhcmdzID0ge307XG4gIHB2YXJncy5yID0gbG9nZGF0YS5hcmcxO1xuICBpZiAoZ3ApIHtcbiAgICBwdmFyZ3MuZ3AgPSBncDtcbiAgfVxuICBcbiAgaWYgKGxvZ2RhdGEudXJsICYmIGxvZ2RhdGEudXJsLmxlbmd0aCA+IDApIHtcbiAgICB2YXIgdXJsQXJyID0gbG9nZGF0YS51cmwuc3BsaXQoJz8nKTtcbiAgICBwdmFyZ3MucGFnZV9uYW1lID0gdXJsQXJyWzBdIHx8ICctJztcbiAgICBwdmFyZ3MudXJsX3AgPSB1cmxBcnJbMV0gfHwgJy0nO1xuICB9XG5cbiAgaWYgKGxvZ2RhdGEucHJlICYmIGxvZ2RhdGEucHJlLmxlbmd0aCA+IDApIHtcbiAgICB2YXIgcHJlVXJsQXJyID0gbG9nZGF0YS5wcmUuc3BsaXQoJz8nKTtcbiAgICBwdmFyZ3MucmVmX3BhZ2VfbmFtZSA9IHByZVVybEFyclswXSB8fCAnLSc7XG4gICAgcHZhcmdzLnJlZmVyX3AgPSBwcmVVcmxBcnJbMV0gfHwgJy0nO1xuICB9XG5cbiAgcHZhcmdzLmlzX2F1dG8gPSBsb2dkYXRhLmlzX2F1dG8gPyAxIDogMDtcblxuICB2YXIgYXJncyA9IHVzZXJkYXRhO1xuICB2YXIgcHJvcGVydGllcyA9IHV0aWxzLmRlbGV0ZUluZm8oYXJncywgWydfYW5vbnlfaWQnLCAnX2Rldl9pZCcsICdfc2Vzc2lvbl9pZCcsICdfdXNlcl9pZCcsICdfdXNlcl9uaWNrJywgJ19zcmNfcG9zX2lkJ10pO1xuXG4gIHJldHVybiBjcmVhdGVFdmVudChhcGx1c1N0YXRpYy5QQUdFX1NUQVJULCBPYmplY3QuYXNzaWduKHt9LCBwdmFyZ3MsIHsgY3VzcDogcHJvcGVydGllcyB9KSk7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9wbHVnaW5zL2xpYl91bS9ib2R5X2J1aWxkZXJfd2ViX3VtLmpzXG4vLyBtb2R1bGUgaWQgPSA2MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIOWFi+mahuS4gOS4qm9iamVjdFxuICovXG5mdW5jdGlvbiBjbG9uZURlZXAgKG9iaikge1xuICB2YXIgc3RyO1xuICB2YXIgbmV3b2JqID0gQXJyYXkuaXNBcnJheShvYmopID8gW10gOiB7fTsgLy9GaXggb2JqLmNvbnRydWN0b3IgdHlwZUVycm9yIGNvbnN0cnVjdG9yIHVuZGVmaW5lZFxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm47XG4gIH0gZWxzZSBpZiAoSlNPTiAmJiBKU09OLnBhcnNlKSB7XG4gICAgc3RyID0gSlNPTi5zdHJpbmdpZnkob2JqKTsgLy/ns7vliJfljJblr7nosaFcbiAgICBuZXdvYmogPSBKU09OLnBhcnNlKHN0cik7IC8v6L+Y5Y6fXG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIgaSBpbiBvYmopIHtcbiAgICAgIG5ld29ialtpXSA9IHR5cGVvZiBvYmpbaV0gPT09ICdvYmplY3QnID8gY2xvbmVEZWVwKG9ialtpXSkgOiBvYmpbaV07XG4gICAgfVxuICB9XG4gIHJldHVybiBuZXdvYmo7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGNsb25lRGVlcDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9saWJfdS91dGlscy9jbG9uZURlZXAuanNcbi8vIG1vZHVsZSBpZCA9IDYzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZGF0YSkge1xuICB2YXIgaGVhZGVyID0ge307XG4gIGhlYWRlci5zZGtfdHlwZSA9IGRhdGEuc2RrX3R5cGU7XG4gIGhlYWRlci5hcHBrZXkgPSBkYXRhLmFwcGtleTtcbiAgaGVhZGVyLnNka192ZXJzaW9uID0gZGF0YS5zZGtfdmVyc2lvbjtcbiAgaGVhZGVyLmRldmljZV90eXBlID0gZGF0YS5kZXZpY2VfdHlwZTtcbiAgaGVhZGVyLm9zID0gZGF0YS5vcztcbiAgaGVhZGVyLm9zX3ZlcnNpb24gPSBkYXRhLm9zX3ZlcnNpb247XG4gIGhlYWRlci5wbGF0Zm9ybSA9IGRhdGEucGxhdGZvcm07XG4gIGhlYWRlci5waXhlbF9yYXRpbyA9IGRhdGEucGl4ZWxfcmF0aW87XG4gIGhlYWRlci5yZXNvbHV0aW9uID0gZGF0YS5yZXNvbHV0aW9uO1xuICBoZWFkZXIubGFuZ3VhZ2UgPSBkYXRhLmxhbmd1YWdlO1xuICBoZWFkZXIuYXBwX3ZlcnNpb24gPSBkYXRhLmFwcF92ZXJzaW9uO1xuICBoZWFkZXIuanN2ZXIgPSBkYXRhLmpzdmVyO1xuICBoZWFkZXIucHJlID0gZGF0YS5wcmU7XG4gIGhlYWRlci51cmwgPSBkYXRhLnVybDtcbiAgaGVhZGVyLmRlYnVnSWQgPSBkYXRhLnRyYWNrX2RlYnVnX2lkO1xuICBoZWFkZXIuaWRfdHJhY2tpbmcgPSB7fTtcbiAgcmV0dXJuIGhlYWRlcjtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvcGx1Z2lucy9saWJfdW0vaGVhZGVyX2J1aWxkZXJfd2ViX3VtLmpzXG4vLyBtb2R1bGUgaWQgPSA2NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJleHBvcnRzLmdldFJhbmRvbVN0ciA9IGZ1bmN0aW9uKGxlbikge1xuICB2YXIgc3RyID0gJyc7XG4gIHZhciBhcnIgPSBbJzAnLCAnMScsICcyJywgJzMnLCAnNCcsICc1JywgJzYnLCAnNycsICc4JywgJzknLCAnYScsICdiJywgJ2MnLCAnZCcsICdlJywgJ2YnLCAnZycsICdoJywgJ2knLCAnaicsICdrJywgJ2wnLCAnbScsICduJywgJ28nLCAncCcsICdxJywgJ3InLCAncycsICd0JywgJ3UnLCAndicsICd3JywgJ3gnLCAneScsICd6JywgJ0EnLCAnQicsICdDJywgJ0QnLCAnRScsICdGJywgJ0cnLCAnSCcsICdJJywgJ0onLCAnSycsICdMJywgJ00nLCAnTicsICdPJywgJ1AnLCAnUScsICdSJywgJ1MnLCAnVCcsICdVJywgJ1YnLCAnVycsICdYJywgJ1knLCAnWiddO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IE51bWJlcihsZW4pOyBpKyspIHtcbiAgICB2YXIgcG9zID0gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogKGFyci5sZW5ndGggLSAxKSk7XG4gICAgc3RyICs9IGFycltwb3NdO1xuICB9XG4gIHJldHVybiBzdHI7XG59O1xuXG5leHBvcnRzLnN0YXJ0c1dpdGggPSBmdW5jdGlvbihzdHIsIHNlYXJjaFZhbCkge1xuICBpZiAoIXN0ciB8fCAhc2VhcmNoVmFsIHx8IHNlYXJjaFZhbC5sZW5ndGggPT09IDAgfHwgc2VhcmNoVmFsLmxlbmd0aCA+IHN0ci5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHN0ci5zdWJzdHIoMCwgc2VhcmNoVmFsLmxlbmd0aCkgPT09IHNlYXJjaFZhbDtcbn07XG5cbmV4cG9ydHMuYXNzaWduID0gZnVuY3Rpb24odGFyZ2V0KSB7XG4gIGlmICh0YXJnZXQgPT09IHVuZGVmaW5lZCB8fCB0YXJnZXQgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCB1bmRlZmluZWQgb3IgbnVsbCB0byBvYmplY3QnKTtcbiAgfVxuXG4gIHZhciBvdXRwdXQgPSBPYmplY3QodGFyZ2V0KTtcbiAgZm9yICh2YXIgaW5kZXggPSAxOyBpbmRleCA8IGFyZ3VtZW50cy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICBpZiAoc291cmNlKSB7XG4gICAgICBmb3IgKHZhciBuZXh0S2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwgbmV4dEtleSkpIHtcbiAgICAgICAgICBvdXRwdXRbbmV4dEtleV0gPSBzb3VyY2VbbmV4dEtleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG91dHB1dDtcbn07XG5cbmV4cG9ydHMuc2hvdWxkU2VuZEV2ZW50cyA9IGZ1bmN0aW9uKG5vdywgaW50ZXJ2YWwsIGxhc3RTZW5kVGltZSkge1xuICBpZiAodHlwZW9mIGxhc3RTZW5kVGltZSAhPT0gJ251bWJlcicgfHwgdHlwZW9mIGludGVydmFsICE9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChsYXN0U2VuZFRpbWUgPD0gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBub3cgLSBsYXN0U2VuZFRpbWUgPiBpbnRlcnZhbDtcbn07XG5cbi8vIDEuZWt25Lit5a2Y5Zyo6KeE5YiZ5LiN5ZCI5rOV5oOF5Ya177yM5Lii5byD5pW05p2h5LqL5Lu2XG4vLyAyLmV2ZW50aWTplb/luqbkuI3og73otoXov4cxMjjkuKrlrZfnrKZcbi8vIDMua2V56ZW/5bqm5LiN6IO96LaF6L+HMjU25Liq5a2X56ymXG4vLyA0Luavj+S4qmV2ZW505pC65bima2V55Liq5pWw5LiN6IO96LaF6L+HMTAw5LiqXG5leHBvcnRzLmNoZWNrRXZlbnQgPSBmdW5jdGlvbihldmVudElkLCBwcm9wZXJ0aWVzKSB7XG4gIHZhciBhcGx1c1N0YXRpYyA9IHJlcXVpcmUoJ0B1dGlscy9hcGx1c1N0YXRpYycpO1xuICB2YXIgdWxvZyA9IHJlcXVpcmUoJy4uL2xpYl91bS91bG9nJyk7XG4gIGlmICghKGV2ZW50SWQgJiYgdHlwZW9mIGV2ZW50SWQgPT09ICdzdHJpbmcnKSkge1xuICAgIHVsb2coKS5lKCdwbGVhc2UgY2hlY2sgdHJhY2tFdmVudCBpZC4gaWQgc2hvdWxkIGJlIFwic3RyaW5nXCIgYW5kIG5vdCBudWxsJyk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8g5L+d55WZ5YWz6ZSu5a2XXG4gIHZhciByZXNlcnZlV29yZHMgPSBbJ2lkJywgJ2R1J107XG4gIHZhciByZXNlcnZlV29yZE1hcCA9IHt9O1xuXG4gIHJlc2VydmVXb3Jkcy5mb3JFYWNoKGZ1bmN0aW9uICh3b3JkKSB7XG4gICAgcmVzZXJ2ZVdvcmRNYXBbd29yZF0gPSAxO1xuICB9KTtcblxuICAvLyDmo4Dmn6VldmVudElk5piv5ZCm5LiO5L+d55WZ5YWz6ZSu5a2X5Yay56qBXG4gIGlmIChyZXNlcnZlV29yZE1hcFtldmVudElkXSkge1xuICAgIHVsb2coKS5lKCdldmVudElk5LiN6IO95LiO5Lul5LiL5L+d55WZ5a2X5Yay56qBOiAnICsgcmVzZXJ2ZVdvcmRzLmpvaW4oJywnKSk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKGV2ZW50SWQubGVuZ3RoID4gYXBsdXNTdGF0aWMuTUFYX0VWRU5USURfTEVOR1RIKSB7XG4gICAgdWxvZygpLmUoJ1RoZSBtYXhpbXVtIGxlbmd0aCBvZiBldmVudCBpZCBzaGFsbCBub3QgZXhjZWVkICcgKyBhcGx1c1N0YXRpYy5NQVhfRVZFTlRJRF9MRU5HVEgpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIHByb3BlcnRpZXPnmoTlkIjms5XnsbvlnovkuLogc3RyaW5nIHwgb2JqZWN0KG5vdCBpbmNsdWRlIEFycmF5KVxuICBpZiAocHJvcGVydGllc1xuICAgICYmICh0eXBlb2YgcHJvcGVydGllcyAhPT0gJ29iamVjdCcgfHwgQXJyYXkuaXNBcnJheShwcm9wZXJ0aWVzKSlcbiAgICAmJiB0eXBlb2YgcHJvcGVydGllcyAhPT0gJ3N0cmluZycpIHtcbiAgICB1bG9nKCkuZSgncGxlYXNlIGNoZWNrIHRyYWNrRXZlbnQgcHJvcGVydGllcy4gcHJvcGVydGllcyBzaG91bGQgYmUgc3RyaW5nIG9yIG9iamVjdChub3QgaW5jbHVkZSBBcnJheSknKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAodHlwZW9mIHByb3BlcnRpZXMgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIGNvdW50ID0gMDtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcGVydGllcykge1xuICAgICAgaWYgKHt9Lmhhc093blByb3BlcnR5LmNhbGwocHJvcGVydGllcywga2V5KSkge1xuICAgICAgICBpZiAoa2V5Lmxlbmd0aCA+IGFwbHVzU3RhdGljLk1BWF9QUk9QRVJUWV9LRVlfTEVOR1RIKSB7XG4gICAgICAgICAgdWxvZygpLmUoJ1RoZSBtYXhpbXVtIGxlbmd0aCBvZiBwcm9wZXJ0eSBrZXkgc2hhbGwgbm90IGV4Y2VlZCAnICsgYXBsdXNTdGF0aWMuTUFYX1BST1BFUlRZX0tFWV9MRU5HVEgpO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb3VudCA+PSBhcGx1c1N0YXRpYy5NQVhfUFJPUEVSVFlfS0VZU19DT1VOVCkge1xuICAgICAgICAgIHVsb2coKS5lKCdUaGUgbWF4aW11bSBjb3VudCBvZiBwcm9wZXJ0aWVzIHNoYWxsIG5vdCBleGNlZWQgJyArIGFwbHVzU3RhdGljLk1BWF9QUk9QRVJUWV9LRVlTX0NPVU5UKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVzZXJ2ZVdvcmRNYXBba2V5XSkge1xuICAgICAgICAgIHVsb2coKS5lKCflsZ7mgKfkuK3nmoRrZXnkuI3og73kuI7ku6XkuIvkv53nlZnlrZflhrLnqoE6ICcgKyByZXNlcnZlV29yZHMuam9pbignLCcpKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBjb3VudCArPSAxO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuXG52YXIgZWFjaCA9IHJlcXVpcmUoJ0B1dGlscy9lYWNoJyk7XG5cbmV4cG9ydHMuZGVsZXRlSW5mbyA9IGZ1bmN0aW9uKGdva2V5LCBhcnIpIHtcbiAgZWFjaChhcnIsIGZ1bmN0aW9uKHYpIHtcbiAgICBkZWxldGUgZ29rZXlbdl07XG4gIH0pO1xuICByZXR1cm4gZ29rZXk7XG59O1xuXG5leHBvcnRzLmNoZWNrRW1wdHlPYmogPSBmdW5jdGlvbihkYXRhKSB7XG4gIGlmICh0eXBlb2YgZGF0YSAhPT0gJ29iamVjdCcgfHwgKE9iamVjdC5rZXlzKGRhdGEpLmxlbmd0aCA9PT0gMCkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG5cbmV4cG9ydHMuRGF0YVR5cGUgPSB7XG4gIEhBTEZfU0VTU0lPTjogJ2hhbGZfc2Vzc2lvbicsXG4gIENMT1NFX1NFU1NJT046ICdjbG9zZV9zZXNzaW9uJyxcbiAgRUtWOiAnZWt2JyxcbiAgRU5URVJfUEFHRTogJ2VudGVyX3BhZ2UnLFxuICBMRUFWRV9QQUdFOiAnbGVhdmVfcGFnZSdcbn07XG5cbmV4cG9ydHMuQWNjZXNzVHlwZSA9IHtcbiAgTU9CSUxFX05FVFdPUktfMkc6ICcyZycsXG4gIE1PQklMRV9ORVRXT1JLXzNHOiAnM2cnLFxuICBNT0JJTEVfTkVUV09SS180RzogJzRnJyxcbiAgTU9CSUxFX05FVFdPUktfTk9ORTogJ25vbmUnXG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL3BsdWdpbnMvbGliX3VtL3V0aWxzLmpzXG4vLyBtb2R1bGUgaWQgPSA2NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgTE9HX1BSRUZJWCA9ICdbQVBMVVNdIC0tICc7XG5cbm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIF9pbnN0YW5jZSA9IG51bGw7XG4gIHZhciBfZGVidWcgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBVTG9nKCkge1xuICAgIHRoaXMuc2V0RGVidWcgPSBmdW5jdGlvbiAoZGVidWcpIHtcbiAgICAgIF9kZWJ1ZyA9IGRlYnVnO1xuICAgIH07XG5cbiAgICB0aGlzLmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX2RlYnVnKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMF0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBhcmd1bWVudHNbMF0gPSBMT0dfUFJFRklYICsgYXJndW1lbnRzWzBdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zb2xlLmRlYnVnLmFwcGx5KGNvbnNvbGUsIGFyZ3VtZW50cyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5pID0gZnVuY3Rpb24gKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKF9kZWJ1Zykge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1swXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgYXJndW1lbnRzWzBdID0gTE9HX1BSRUZJWCArIGFyZ3VtZW50c1swXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnNvbGUuaW5mby5hcHBseShjb25zb2xlLCBhcmd1bWVudHMpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIGVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gZW1wdHlcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5lID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF9kZWJ1Zykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmICh0eXBlb2YgYXJndW1lbnRzWzBdID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgYXJndW1lbnRzWzBdID0gTE9HX1BSRUZJWCArIGFyZ3VtZW50c1swXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc29sZS5lcnJvci5hcHBseShjb25zb2xlLCBhcmd1bWVudHMpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMudyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfZGVidWcpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1swXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGFyZ3VtZW50c1swXSA9IExPR19QUkVGSVggKyBhcmd1bWVudHNbMF07XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnNvbGUud2Fybi5hcHBseShjb25zb2xlLCBhcmd1bWVudHMpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMudiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfZGVidWcpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1swXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGFyZ3VtZW50c1swXSA9IExPR19QUkVGSVggKyBhcmd1bWVudHNbMF07XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIGFyZ3VtZW50cyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF9kZWJ1Zykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnNvbGUudGFibGUuYXBwbHkoY29uc29sZSwgYXJndW1lbnRzKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIGVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLnRpcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgYXJndW1lbnRzWzBdID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGFyZ3VtZW50c1swXSA9IExPR19QUkVGSVggKyBhcmd1bWVudHNbMF07XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgYXJndW1lbnRzKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gZVxuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLnRpcF93ID0gZnVuY3Rpb24gKG1zZykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgJyVjICcgKyBMT0dfUFJFRklYICsgbXNnLFxuICAgICAgICAgICdiYWNrZ3JvdW5kOnJlZDsgcGFkZGluZzogNHB4OyBwYWRkaW5nLXJpZ2h0OiA4cHg7IGJvcmRlci1yYWRpdXM6IDRweDsgY29sb3I6ICNmZmY7J1xuICAgICAgICApO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBlXG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMuZXJyID0gZnVuY3Rpb24gKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMF0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgYXJndW1lbnRzWzBdID0gTE9HX1BSRUZJWCArIGFyZ3VtZW50c1swXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnNvbGUuZXJyb3IuYXBwbHkoY29uc29sZSwgYXJndW1lbnRzKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gZVxuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5yZXBlYXQgPSBmdW5jdGlvbihjaGFyKSB7XG4gICAgICB2YXIgcmVzID0gY2hhcjtcbiAgICAgIHdoaWxlIChyZXMubGVuZ3RoIDwgODYpIHtcbiAgICAgICAgcmVzID0gcmVzICsgY2hhcjtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXM7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKF9pbnN0YW5jZSA9PT0gbnVsbCkge1xuICAgICAgX2luc3RhbmNlID0gbmV3IFVMb2coKTtcbiAgICB9XG4gICAgcmV0dXJuIF9pbnN0YW5jZTtcbiAgfTtcbn0pKCk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvcGx1Z2lucy9saWJfdW0vdWxvZy5qc1xuLy8gbW9kdWxlIGlkID0gNjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGFuYWx5dGljc01hcCA9IHtcbiAgZWt2czogJ2UnLFxuICBhY3RpdmVfdXNlcjogJ2FjdGl2ZV91c2VyJ1xufTtcblxudmFyIGhlYWRlck1hcCA9IHtcbiAgc2RrX3R5cGU6ICdzZHQnLFxuICBkZXZpY2VfbW9kZWw6ICdkbScsXG4gIGxhbmd1YWdlOiAnbGFuZycsXG4gIGRldmljZV90eXBlOiAnZHQnLFxuICBvc192ZXJzaW9uOiAnb3YnLFxuICBhcHBrZXk6ICdhaycsXG4gIHNka192ZXJzaW9uOiAnc3YnLFxuICByZXNvbHV0aW9uOiAncmwnLFxuICB0ZXN0VG9rZW46ICd0dG4nLFxuICBwaXhlbF9yYXRpbzogJ3ByJyxcbiAgX2lkOiAnaWQnLFxuICBpZF90eXBlOiAnaXQnLFxuICBpZF90cmFja2luZzogJ2l0cicsXG4gIGltcHJpbnQ6ICdpbXAnLFxuICBkZWJ1Z0lkOiAnZGsnXG59O1xuXG52YXIgaWRNYXAgPSB7XG4gIHV1aWQ6ICd1ZCcsXG4gIHVuaW9uaWQ6ICd1bmQnLFxuICBvcGVuaWQ6ICdvZCcsXG4gIGFub255bW91c2lkOiAnbmQnLFxuICBhbGlwYXlfaWQ6ICdhZCcsXG4gIGRldmljZV9pZDogJ2RkJyxcbiAgdXNlcmlkOiAncHVpZCdcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZGF0YSkge1xuICByZXR1cm4ge1xuICAgIGg6IF9tYW5nbGVIZWFkZXIoZGF0YS5oZWFkZXIsIGhlYWRlck1hcCksXG4gICAgYTogX21hbmdsZUFuYWx5dGljcyhkYXRhLmFuYWx5dGljcywgYW5hbHl0aWNzTWFwKVxuICB9O1xufTtcblxuZnVuY3Rpb24gX21hbmdsZUhlYWRlcihoZWFkZXIsIG1hcCkge1xuICB2YXIgcmVzdWx0ID0gX21hbmdsZU9iaihoZWFkZXIsIG1hcCk7XG5cbiAgaWYgKGhlYWRlciAmJiBoZWFkZXIuaWRfdHJhY2tpbmcpIHtcbiAgICByZXN1bHRbbWFwLmlkX3RyYWNraW5nIHx8ICdpZF90cmFja2luZyddID0gX21hbmdsZU9iaihoZWFkZXIuaWRfdHJhY2tpbmcsIGlkTWFwKTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5mdW5jdGlvbiBfbWFuZ2xlT2JqKG9iaiwgbWFwKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcblxuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgaWYgKG1hcFtrZXldKSB7XG4gICAgICByZXN1bHRbbWFwW2tleV1dID0gb2JqW2tleV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gb2JqW2tleV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmZ1bmN0aW9uIF9tYW5nbGVBbmFseXRpY3MoYW5hbHl0aWNzLCBtYXApIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuXG4gIGlmIChhbmFseXRpY3MpIHtcbiAgICBmb3IgKHZhciBwcm9wIGluIGFuYWx5dGljcykge1xuICAgICAgaWYgKGFuYWx5dGljc1twcm9wXSkge1xuICAgICAgICByZXN1bHRbbWFwW3Byb3BdXSA9IGFuYWx5dGljc1twcm9wXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL3BsdWdpbnMvbGliX3VtL21hbmdsZV93ZWIuanNcbi8vIG1vZHVsZSBpZCA9IDY3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBiNjRjaGFycyA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJztcbnZhciBiNjR0YWIgPSAoZnVuY3Rpb24gKGJpbikge1xuICB2YXIgdCA9IHt9O1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGJpbi5sZW5ndGg7IGkgPCBsOyBpKyspIHRbYmluLmNoYXJBdChpKV0gPSBpO1xuICByZXR1cm4gdDtcbn0pKGI2NGNoYXJzKTtcbnZhciBmcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xudmFyIGNiX3V0b2IgPSBmdW5jdGlvbiAoYykge1xuICB2YXIgY2M7XG4gIGlmIChjLmxlbmd0aCA8IDIpIHtcbiAgICBjYyA9IGMuY2hhckNvZGVBdCgwKTtcbiAgICByZXR1cm4gY2MgPCAxMjggPyBjIDogY2MgPCAyMDQ4ID8gZnJvbUNoYXJDb2RlKDE5MiB8IGNjID4+PiA2KSArIGZyb21DaGFyQ29kZSgxMjggfCBjYyAmIDYzKSA6IGZyb21DaGFyQ29kZSgyMjQgfCBjYyA+Pj4gMTIgJiAxNSkgKyBmcm9tQ2hhckNvZGUoMTI4IHwgY2MgPj4+IDYgJiA2MykgKyBmcm9tQ2hhckNvZGUoMTI4IHwgY2MgJiA2Myk7XG4gIH0gZWxzZSB7XG4gICAgY2MgPSA2NTUzNiArIChjLmNoYXJDb2RlQXQoMCkgLSA1NTI5NikgKiAxMDI0ICsgKGMuY2hhckNvZGVBdCgxKSAtIDU2MzIwKTtcbiAgICByZXR1cm4gZnJvbUNoYXJDb2RlKDI0MCB8IGNjID4+PiAxOCAmIDcpICsgZnJvbUNoYXJDb2RlKDEyOCB8IGNjID4+PiAxMiAmIDYzKSArIGZyb21DaGFyQ29kZSgxMjggfCBjYyA+Pj4gNiAmIDYzKSArIGZyb21DaGFyQ29kZSgxMjggfCBjYyAmIDYzKTtcbiAgfVxufTtcbnZhciByZV91dG9iID0gL1tcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRkZdfFteXFx4MDAtXFx4N0ZdL2c7XG52YXIgdXRvYiA9IGZ1bmN0aW9uICh1KSB7XG4gIHJldHVybiB1LnJlcGxhY2UocmVfdXRvYiwgY2JfdXRvYik7XG59O1xudmFyIGNiX2VuY29kZSA9IGZ1bmN0aW9uIChjY2MpIHtcbiAgdmFyIHBhZGxlbiA9IFswLCAyLCAxXVtjY2MubGVuZ3RoICUgM10sXG4gICAgb3JkID0gY2NjLmNoYXJDb2RlQXQoMCkgPDwgMTYgfCAoY2NjLmxlbmd0aCA+IDEgPyBjY2MuY2hhckNvZGVBdCgxKSA6IDApIDw8IDggfCAoY2NjLmxlbmd0aCA+IDIgPyBjY2MuY2hhckNvZGVBdCgyKSA6IDApLFxuICAgIGNoYXJzID0gW2I2NGNoYXJzLmNoYXJBdChvcmQgPj4+IDE4KSwgYjY0Y2hhcnMuY2hhckF0KG9yZCA+Pj4gMTIgJiA2MyksIHBhZGxlbiA+PSAyID8gJz0nIDogYjY0Y2hhcnMuY2hhckF0KG9yZCA+Pj4gNiAmIDYzKSwgcGFkbGVuID49IDEgPyAnPScgOiBiNjRjaGFycy5jaGFyQXQob3JkICYgNjMpXTtcbiAgcmV0dXJuIGNoYXJzLmpvaW4oJycpO1xufTtcbnZhciBidG9hID0gZnVuY3Rpb24gKGIpIHtcbiAgcmV0dXJuIGIucmVwbGFjZSgvW1xcc1xcU117MSwzfS9nLCBjYl9lbmNvZGUpO1xufTtcbnZhciBfZW5jb2RlID0gZnVuY3Rpb24gKHUpIHtcbiAgcmV0dXJuIGJ0b2EodXRvYih1KSk7XG59O1xudmFyIGVuY29kZSA9IGZ1bmN0aW9uICh1LCB1cmlzYWZlKSB7XG4gIHJldHVybiAhdXJpc2FmZSA/IF9lbmNvZGUoU3RyaW5nKHUpKSA6IF9lbmNvZGUoU3RyaW5nKHUpKS5yZXBsYWNlKC9bK1xcL10vZywgZnVuY3Rpb24gKG0wKSB7XG4gICAgcmV0dXJuIG0wID09ICcrJyA/ICctJyA6ICdfJztcbiAgfSkucmVwbGFjZSgvXFw9L2csICcnKTtcbn07XG4vLyB2YXIgZW5jb2RlVVJJID0gZnVuY3Rpb24gKHUpIHtcbi8vICAgcmV0dXJuIGVuY29kZSh1LCB0cnVlKTtcbi8vIH07XG52YXIgcmVfYnRvdSA9IG5ldyBSZWdFeHAoWydbw4Atw59dW8KALcK/XScsICdbw6Atw69dW8KALcK/XXsyfScsICdbw7Atw7ddW8KALcK/XXszfSddLmpvaW4oJ3wnKSwgJ2cnKTtcbnZhciBjYl9idG91ID0gZnVuY3Rpb24gKGNjY2MpIHtcbiAgc3dpdGNoIChjY2NjLmxlbmd0aCkge1xuICBjYXNlIDQ6XG4gICAgdmFyIGNwID0gKDcgJiBjY2NjLmNoYXJDb2RlQXQoMCkpIDw8IDE4IHwgKDYzICYgY2NjYy5jaGFyQ29kZUF0KDEpKSA8PCAxMiB8ICg2MyAmIGNjY2MuY2hhckNvZGVBdCgyKSkgPDwgNiB8IDYzICYgY2NjYy5jaGFyQ29kZUF0KDMpLCBvZmZzZXQgPSBjcCAtIDY1NTM2O1xuICAgIHJldHVybiBmcm9tQ2hhckNvZGUoKG9mZnNldCA+Pj4gMTApICsgNTUyOTYpICsgZnJvbUNoYXJDb2RlKChvZmZzZXQgJiAxMDIzKSArIDU2MzIwKTtcbiAgY2FzZSAzOlxuICAgIHJldHVybiBmcm9tQ2hhckNvZGUoKDE1ICYgY2NjYy5jaGFyQ29kZUF0KDApKSA8PCAxMiB8ICg2MyAmIGNjY2MuY2hhckNvZGVBdCgxKSkgPDwgNiB8IDYzICYgY2NjYy5jaGFyQ29kZUF0KDIpKTtcbiAgZGVmYXVsdDpcbiAgICByZXR1cm4gZnJvbUNoYXJDb2RlKCgzMSAmIGNjY2MuY2hhckNvZGVBdCgwKSkgPDwgNiB8IDYzICYgY2NjYy5jaGFyQ29kZUF0KDEpKTtcbiAgfVxufTtcbnZhciBidG91ID0gZnVuY3Rpb24gKGIpIHtcbiAgcmV0dXJuIGIucmVwbGFjZShyZV9idG91LCBjYl9idG91KTtcbn07XG52YXIgY2JfZGVjb2RlID0gZnVuY3Rpb24gKGNjY2MpIHtcbiAgdmFyIGxlbiA9IGNjY2MubGVuZ3RoLFxuICAgIHBhZGxlbiA9IGxlbiAlIDQsXG4gICAgbiA9IChsZW4gPiAwID8gYjY0dGFiW2NjY2MuY2hhckF0KDApXSA8PCAxOCA6IDApIHwgKGxlbiA+IDEgPyBiNjR0YWJbY2NjYy5jaGFyQXQoMSldIDw8IDEyIDogMCkgfCAobGVuID4gMiA/IGI2NHRhYltjY2NjLmNoYXJBdCgyKV0gPDwgNiA6IDApIHwgKGxlbiA+IDMgPyBiNjR0YWJbY2NjYy5jaGFyQXQoMyldIDogMCksXG4gICAgY2hhcnMgPSBbZnJvbUNoYXJDb2RlKG4gPj4+IDE2KSwgZnJvbUNoYXJDb2RlKG4gPj4+IDggJiAyNTUpLCBmcm9tQ2hhckNvZGUobiAmIDI1NSldO1xuICBjaGFycy5sZW5ndGggLT0gWzAsIDAsIDIsIDFdW3BhZGxlbl07XG4gIHJldHVybiBjaGFycy5qb2luKCcnKTtcbn07XG52YXIgYXRvYiA9IGZ1bmN0aW9uIChhKSB7XG4gIHJldHVybiBhLnJlcGxhY2UoL1tcXHNcXFNdezEsNH0vZywgY2JfZGVjb2RlKTtcbn07XG52YXIgX2RlY29kZSA9IGZ1bmN0aW9uIChhKSB7XG4gIHJldHVybiBidG91KGF0b2IoYSkpO1xufTtcbnZhciBkZWNvZGUgPSBmdW5jdGlvbiAoYSkge1xuICByZXR1cm4gX2RlY29kZShTdHJpbmcoYSkucmVwbGFjZSgvWy1fXS9nLCBmdW5jdGlvbiAobTApIHtcbiAgICByZXR1cm4gbTAgPT0gJy0nID8gJysnIDogJy8nO1xuICB9KS5yZXBsYWNlKC9bXkEtWmEtejAtOVxcK1xcL10vZywgJycpKTtcbn07XG5cbmV4cG9ydHMuZW5jb2RlID0gZW5jb2RlO1xuZXhwb3J0cy5kZWNvZGUgPSBkZWNvZGU7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvcGx1Z2lucy9saWJfdW0vYmFzZTY0LmpzXG4vLyBtb2R1bGUgaWQgPSA2OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcbmV4cG9ydHMuc3RyaW5nZnkgPSBmdW5jdGlvbihkYXRhKSB7XG4gIGlmIChkYXRhKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBlbXB0eVxuICAgIH1cbiAgfVxuICByZXR1cm4gJyc7XG59O1xuXG5leHBvcnRzLnBhcnNlID0gZnVuY3Rpb24oanNvbikge1xuICBpZiAoanNvbikge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gSlNPTi5wYXJzZShqc29uKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBlbXB0eVxuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5cbmV4cG9ydHMucGFyc2VUb0FycmF5ID0gZnVuY3Rpb24oanNvbikge1xuICBpZiAoanNvbikge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gSlNPTi5wYXJzZShqc29uKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBlbXB0eVxuICAgIH1cbiAgfVxuICByZXR1cm4gW107XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL3BsdWdpbnMvbGliX3VtL2pzb25VdGlsLmpzXG4vLyBtb2R1bGUgaWQgPSA2OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKlxuICogRmlsZTogZXZlbnQuanNcbiAqIFByb2plY3Q6IEBhbGkvYXBsdXNcbiAqICAgICAgXG4gKiBBdXRob3I6IOmSsOaYrSAoY2hhbmdsaWFuZy5sY2xAdW1lbmcuY29tKVxuICogICAgICBcbiAqIENvcHlyaWdodCAtIDIwMjEgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG4gKi9cbnZhciB1dGlsR29sZGxvZyA9IHJlcXVpcmUoJ0B1dGlscy91dGlsR29sZGxvZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGlkLCBwcm9wZXJ0aWVzKSB7XG4gIGlmICh0eXBlb2YgaWQgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdmFyIGV2ZW50ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgZXZlbnQuaWQgPSBpZDtcbiAgaWYgKCFwcm9wZXJ0aWVzLnRzKSB7XG4gICAgZXZlbnQudHMgPSBEYXRlLm5vdygpO1xuICB9XG4gIHZhciBwcm9wc1R5cGUgPSB0eXBlb2YgcHJvcGVydGllcztcbiAgaWYgKHByb3BzVHlwZSA9PT0gJ3N0cmluZycgJiYgcHJvcGVydGllcykge1xuICAgIGV2ZW50W2lkXSA9IHByb3BlcnRpZXM7XG4gIH0gZWxzZSBpZiAocHJvcHNUeXBlID09PSAnb2JqZWN0Jykge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wZXJ0aWVzKSB7XG4gICAgICBpZiAoe30uaGFzT3duUHJvcGVydHkuY2FsbChwcm9wZXJ0aWVzLCBrZXkpKSB7XG4gICAgICAgIGV2ZW50W2tleV0gPSBwcm9wZXJ0aWVzW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHZhciBhcGx1cyA9IHV0aWxHb2xkbG9nLmdldEdsb2JhbFZhbHVlKCdhcGx1cycpO1xuICB2YXIgZ3AgPSBhcGx1cy5nZXRNZXRhSW5mbygnZ2xvYmFscHJvcGVydHknKTtcbiAgaWYgKGdwKSB7XG4gICAgZXZlbnRbJ2dwJ10gPSBncDsgXG4gIH1cbiAgcmV0dXJuIGV2ZW50O1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9wbHVnaW5zL2xpYl91bS9ldmVudC5qc1xuLy8gbW9kdWxlIGlkID0gNzBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBhcGx1c+WPkemAgXdlYnNvY2tldOivt+axguaXpeW/l+aPkuS7tlxuICpcbiAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cbiAqXG4gKiBBdXRob3JzOlxuICogICDojYblp5ogPGppbmdhby54eUBhbGliYWJhLWluYy5jb20+XG4gKiAgIFJpY2hhcmR86LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbXMge09iamVjdH0gb3B0aW9ucyB7XG4gICAgICogICBsb2dDb25maWc6IHtsb2dDb25maWd9XG4gICAgICogfVxuICAgICAqL1xuICAgIC8vIGluaXQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAvLyAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgLy8gfSxcblxuICAgIHJ1bjogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHdpbiA9IHdpbmRvdztcbiAgICAgIHZhciBpc1N1cHBvcnRXUztcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBGTiA9ICdmdW5jdGlvbic7XG4gICAgICAgIC8vIOWcqCBBbmRyb2lkIOS4re+8jOWNs+S9v+a1j+iniOWZqOS4jeaUr+aMgSBXZWJTb2NrZXQg77yM5L2G5piv5a6D6L+Y5piv5a2Y5Zyo6L+Z5Liq5bGe5oCn44CCXG4gICAgICAgIGlzU3VwcG9ydFdTID0gdHlwZW9mIHdpbi5XZWJTb2NrZXQgPT09IEZOICYmIHR5cGVvZiB3aW4uV2ViU29ja2V0LnByb3RvdHlwZS5zZW5kID09PSBGTjtcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB2YXIgdXRpbEdvbGRsb2cgPSByZXF1aXJlKCdAdXRpbHMvdXRpbEdvbGRsb2cnKTtcbiAgICAgIHZhciBhcGx1cyA9IHV0aWxHb2xkbG9nLmdldEdsb2JhbFZhbHVlKCdhcGx1cycpO1xuXG4gICAgICAvLyDkv53or4Hlj6rkvJrmnInkuIDkuKphcGx1c19wbHVnaW5fbW9uaXRvcui/kOihjFxuICAgICAgaWYgKGFwbHVzLl9hcGx1c19jcGx1Z2luX3dzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFwbHVzLl9hcGx1c19jcGx1Z2luX3dzID0gdHJ1ZTtcbiAgICAgIHZhciBNYWluID0gcmVxdWlyZSgnLi9saWJfY29ubmVjdGlvbi9tYWluX3dlYl93cy5qcycpO1xuICAgICAgdmFyIG1haW4gPSBNYWluLmNyZWF0ZSh7XG4gICAgICAgIFdTOiByZXF1aXJlKCcuL2xpYl9jb25uZWN0aW9uL3dzLmpzJyksXG4gICAgICAgIENUWDogd2luZG93LFxuICAgICAgICBDVFhfVFlQRTogJ1dFQidcbiAgICAgIH0pO1xuICAgICAgbWFpbi5ydW4odGhpcy5vcHRpb25zLCBpc1N1cHBvcnRXUyk7XG4gICAgfVxuICB9O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL3BsdWdpbnMvYXBsdXNfd2ViX3dzLmpzXG4vLyBtb2R1bGUgaWQgPSA3MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIOaLpuaIquW5tuaMiXdlYlNvY2tldOWNj+iuruWPkemAgeaXpeW/l1xuICog6L2s5Y+R5YiweHh45pyN5Yqh5ZmoXG4gKiDpgJrov4dBcGx1c0pT5pel5b+X6aqM6K+B5bmz5Y+w5p+l55yL5Y+R5Ye655qE6K+35rGC5L+h5oGvXG4gKiDlh6DkuKrml7bpl7Qv5pe25py654K577yaXG4gKiAx44CB5bu656uL6L+e5o6l5pe26Ze06LaF6L+HMeenku+8jOe9kee7nOato+W4uOeahOaDheWGteS4i++8jOS8muS7pWh0dHDljY/orq7lj5HpgIFcbiAqIDLjgIE2MOenkuWGheayoeaciemAmuS/oe+8jOi/nuaOpeWFs+mXre+8iDYwc+i/meS5iOS5he+8jOS4u+imgeaYr+iAg+iZkeWIsOWFs+mXrei/nuaOpeS5n+S8muiKsei0ueWHoOWNgeenkueahOaXtumXtO+8iVxuICogM+OAgeWFiOinpuWPkWVycm9y77yM5ZCO6Kem5Y+RY2xvc2XvvIzljbPkuIDlvIDlp4vov57mjqXlpLHotKXvvIwxcyjku6XliY3nmoTms6jph4rvvJpcIui/meS4quaXtumXtOS5n+aYr+iAg+iZkeWIsOWFiOaKiuaDheWGtTHnmoTml6Xlv5flj5HpgIHlh7rljrtcIu+8jOWPr+W/veeVpSnlkI7ph43mlrDlu7rnq4vov57mjqVcbiAqIDTjgIHlhYjop6blj5FjbG9zZe+8jOWQjuWHuuWPkWVycm9y77yM5Y2z6YCa5L+h5Lit5pyN5Yqh56uv5YWz6Zet77yM6Iul572R57uc5q2j5bi477yM5LulaHR0cOWPkemAge+8jOWQpuWImee8k+WtmFxuICogNeOAgeWFs+mXremhtemdouWJje+8jOS8muWwhuacquWPkemAgeWHuuWOu+eahOacgOi/keWNgeadoeWPkemAgeWHuuWOuyAyMDE4LTMtMjJcbiAqXG4gKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG4gKlxuICogQXV0aG9yczpcbiAqICAg6I2G5aeaIDxqaW5neWFvLnh5QGFsaWJhYmEtaW5jLmNvbT5cbiAqICAgUmljaGFyZHzosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciB3aW4gPSB3aW5kb3c7XG5cbnZhciBCYXNlID0gcmVxdWlyZSgnQGNvcmUvQmFzZScpO1xudmFyIGFwbHVzU3RhdGljID0gcmVxdWlyZSgnQHV0aWxzL2FwbHVzU3RhdGljJyk7XG52YXIgdXRpbEV2ZW50ID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxFdmVudCcpO1xudmFyIGVhY2hNYXAgPSByZXF1aXJlKCdAdXRpbHMvZWFjaE1hcCcpO1xudmFyIHV0aWxEYXRhID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxEYXRhJyk7XG52YXIgdXRpbFN0b3JlID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxTdG9yZScpO1xudmFyIGRhdGUgPSByZXF1aXJlKCdAdXRpbHMvZGF0ZScpO1xudmFyIGNvb2tpZSA9IHJlcXVpcmUoJ0B1dGlscy9jb29raWUnKTtcbnZhciB1dGlsR1EgPSByZXF1aXJlKCdAdXRpbHMvdXRpbEdRJyk7XG52YXIgbG9nX2Nsb3VkID0gcmVxdWlyZSgnLi9sb2dfY2xvdWQnKTtcblxuLy8gdmFyIEhUVFAgPSAnaHR0cCc7XG4vKipcbiAqIGBjb250ZW50PVwiV1NcImAg6KGo56S65L2/55Sod2Vic29ja2V06YCa6YGTK+efrei/nuaOpeWPjOmAmumBk1xuICogYGNvbnRlbnQ9XCJXUy1PTkxZXCJgIOihqOekuuS9v+eUqHdlYnNvY2tldOWNlemAmumBk1xuICovXG52YXIgUGVyc2lzdGVudExpbmtMaXN0ID0gWydXUycsICdXUy1PTkxZJ107XG5cbm1vZHVsZS5leHBvcnRzID0gQmFzZS5leHRlbmQoe1xuICB3c0hhbmRsZXI6ICcnLFxuXG4gIGxzQ25hS2V5OiAnQVBMVVNfQ05BJyxcblxuICB0aW1lb3V0VG9IdHRwOiAzMDAwLFxuXG4gIGRvbWFpbjogJ2xvZy5tbXN0YXQuY29tJyxcblxuICByZXRyeVRpbWVzS2V5OiAnYXBsdXN4X3JldHJ5X3RpbWVzJyxcblxuICBtYXhSZXRyeVRpbWVzUGVySG91cjogMCxcblxuICByZXRyeVRpbWVzOiAwLFxuXG4gIHBhZ2VMb2FkRGF0ZUhvdXI6ICcnLFxuXG4gIGdldERhdGVIb3VyOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRhdGUuZ2V0Rm9ybWF0RGF0ZSgpICsgbmV3IERhdGUoKS5nZXRIb3VycygpO1xuICB9LFxuXG4gIC8qKlxuICAgKiDnlJ/miJBtaW4tbWF455qE6ZqP5py65pW05pWw77yM5YyF5ousbWlu5ZKMbWF4XG4gICAqL1xuICBnZXRSYW5kb206IGZ1bmN0aW9uIChtaW4sIG1heCkge1xuICAgIHJldHVybiBtaW4gKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkpO1xuICB9LFxuXG4gIGdldFJldHJ5VGltZXM6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmV0cnlUaW1lcyA9IDA7XG4gICAgdmFyIHJzID0gdXRpbFN0b3JlLmdldCh0aGlzLnJldHJ5VGltZXNLZXkpO1xuICAgIGlmIChycykge1xuICAgICAgdmFyIHRtcHMgPSBycy5zcGxpdCgnLScpO1xuICAgICAgaWYgKHRtcHMubGVuZ3RoID09PSAyICYmIHRtcHNbMF0gPT09IHRoaXMuZ2V0RGF0ZUhvdXIoKSkge1xuICAgICAgICByZXRyeVRpbWVzID0gcGFyc2VJbnQodG1wc1sxXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXRyeVRpbWVzO1xuICB9LFxuXG4gIHNldFJldHJ5VGltZXM6IGZ1bmN0aW9uICh0aW1lcykge1xuICAgIHV0aWxTdG9yZS5zZXQodGhpcy5yZXRyeVRpbWVzS2V5LCB0aGlzLmdldERhdGVIb3VyKCkgKyAnLScgKyB0aW1lcyk7XG4gIH0sXG5cbiAgZG9TZXRSZXRyeVRpbWVzOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMucmV0cnlUaW1lcyA8IHRoaXMubWF4UmV0cnlUaW1lc1BlckhvdXIpIHtcbiAgICAgIHRoaXMuc2V0UmV0cnlUaW1lcygrK3RoaXMucmV0cnlUaW1lcyk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnJldHJ5VGltZXMgPj0gdGhpcy5tYXhSZXRyeVRpbWVzUGVySG91ciAmJiB0aGlzLnBhZ2VMb2FkRGF0ZUhvdXIgIT09IHRoaXMuZ2V0RGF0ZUhvdXIoKSkge1xuICAgICAgdGhpcy5yZXRyeVRpbWVzID0gMDtcbiAgICAgIHRoaXMuc2V0UmV0cnlUaW1lcygrK3RoaXMucmV0cnlUaW1lcyk7XG4gICAgfVxuICB9LFxuXG4gIGNoZWF0Q2FsbGJhY2s6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgdXRpbFN0b3JlLnNldChrZXkudG9VcHBlckNhc2UoKSwgdmFsdWUpO1xuICB9LFxuXG4gIC8qKlxuICAgKiDnm5HlkKzpu4Tph5Hku6Tnrq3lm57osINcbiAgICogQHBhcmFtcyB7T2JqZWN0fSBwb3N0RGF0YSDop4EgcHZfY2FsbGJhY2sgfHwgaGpsal9jYWxsYmFja1xuICAgKiBAcGFyYW1zIHtTdHJpbmd9IHR5cGUgcHYgfHwgaGpsalxuICAgKiBAcGFyYW1zIHtTdHJpbmd9IHVybCBodHRwczovL2xvZy5tbXN0YXQuY29tL3YuZ2lmIHwgaHR0cHM6Ly9sb2cubW1zdGF0LmNvbS90YmluZGV4LnByb21vLnByb21vXG4gICAqL1xuICBuZXdTZW5kOiBmdW5jdGlvbiAocG9zdERhdGEsIHR5cGUsIHVybCwgbWV0aG9kKSB7XG4gICAgdmFyIF9zZWxmID0gdGhpcztcbiAgICBlYWNoTWFwKHBvc3REYXRhLCBmdW5jdGlvbiAoaywgdikge1xuICAgICAgaWYgKHR5cGVvZiB2ID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgdiA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHBvc3REYXRhW2tdID0gdiArICcnO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHZhciBzbiA9IHV0aWxTdG9yZS5nZXQoJ0FQTFVTX1NOJyk7XG4gICAgdmFyIHN5ID0gdXRpbFN0b3JlLmdldCgnQVBMVVNfU1knKTtcbiAgICB0cnkge1xuICAgICAgc24gJiYgKHBvc3REYXRhWydhcGx1c19zbiddID0gc24pO1xuICAgICAgc3kgJiYgKHBvc3REYXRhWydhcGx1c19zeSddID0gc3kpO1xuICAgICAgcG9zdERhdGFbJ3VhJ10gPSBuYXZpZ2F0b3IudXNlckFnZW50O1xuICAgICAgcG9zdERhdGFbJ2xhbmcnXSA9IG5hdmlnYXRvci5sYW5ndWFnZTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHRoaXMud3NIYW5kbGVyLnNlbmQoe1xuICAgICAgaWQ6ICdpZCcgKyBfc2VsZi5nZXRSYW5kb20oMSwgMTAwMDAwMDAwKSxcbiAgICAgIHN0YXJ0VGltZTogbmV3IERhdGUoKS5nZXRUaW1lKCksXG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgbXNnOiB7XG4gICAgICAgIHBvc3REYXRhOiBwb3N0RGF0YSxcbiAgICAgICAgdXJsOiB1cmxcbiAgICAgIH0sXG4gICAgICBtZXRob2Q6IG1ldGhvZFxuICAgIH0pO1xuICB9LFxuXG4gIGdldFB2UG9zdERhdGE6IGZ1bmN0aW9uIChvcmlEYXRhcykge1xuICAgIHZhciBwdmRhdGEgPSBvcmlEYXRhcy53aGF0X3RvX3NlbmQubG9nZGF0YTtcbiAgICB2YXIgbW11cmwgPSBvcmlEYXRhcy53aGVyZV90b19zZW5kLnVybDtcbiAgICByZXR1cm4ge1xuICAgICAgcG9zdERhdGE6IHB2ZGF0YSxcbiAgICAgIG1tdXJsOiBtbXVybFxuICAgIH07XG4gIH0sXG5cbiAgZ2V0UG9zdERhdGE6IGZ1bmN0aW9uIChvcmlEYXRhcykge1xuICAgIC8vIHZhciBwb3N0RGF0YSA9IHt9O1xuICAgIHZhciBtbXVybCA9IG9yaURhdGFzLndoYXRfdG9fc2VuZC51cmw7XG4gICAgdmFyIGxvZ2RhdGEgPSBvcmlEYXRhcy53aGF0X3RvX3NlbmQubG9nZGF0YTtcbiAgICAvLyBwb3N0RGF0YS5sb2drZXkgPSBwb3N0RGF0YS5sb2drZXkgfHwgJyc7XG4gICAgLy8gcG9zdERhdGEudXJsID0gbG9jYXRpb24gJiYgbG9jYXRpb24uaHJlZjtcbiAgICBpZiAobG9nZGF0YS5nb2tleSkge1xuICAgICAgbG9nZGF0YS5nb2tleS5hd3MgPSAxO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgcG9zdERhdGE6IGxvZ2RhdGEsXG4gICAgICBtbXVybDogbW11cmxcbiAgICB9O1xuICB9LFxuXG4gIC8qKlxuICAgKiDnm5HlkKzml6Xlv5flm57osIPvvIzovaxXU+mAmumBk1xuICAgKiBAcGFyYW1zIG9yaURhdGFzXG4gICAqIEBwYXJhbXMgcmVjb3JkVHlwZSB7U3RyaW5nfSBwdiB8fCBhcGx1c1xuICAgKlxuICAgKiBAcmV0dXJuIHtPYmplY3R9IG9yaURhdGFzIHtcbiAgICogICBsb2d0eXBlOiAyLFxuICAgKiAgIGNhY2hlOiAnN+S9jemaj+acuuaVsCcsXG4gICAqICAgc2NyOiAn5bGP5bmV5YiG6L6o546HJyxcbiAgICogICBjbmE6ICfmnI3liqHnq6/pooHlj5HnmoTorr/lrqJJRDogXCJoenlGRS9NRktTd0NBU3A0U3ZSaXNodnRcIicsXG4gICAqICAgZ21rZXk6ICdDTEsnIHwgJ0VYUCcgfCAnT1RIRVInIHwgJycsXG4gICAqICAgbG9na2V5OiAnL3RiaW5kZXgucHJvbW8ucHJvbW8nXG4gICAqICAgZ29rZXk6ICdpbmRleD0yJl9zbG9nPTAmd3M9MSdcbiAgICogICBzcG0tY250ICdhMjFiby4yMDE3LjAuMC4xMzAxMTFkOTg0UmRmOSdcbiAgICogfVxuICAgKiBcbiAgICovXG4gIGxvZ19jYWxsYmFjazogZnVuY3Rpb24gKG9yaURhdGFzLCByZWNvcmRUeXBlKSB7XG4gICAgdmFyIHJzID0gdGhpcy5nZXRQb3N0RGF0YShvcmlEYXRhcyk7XG4gICAgaWYgKHJzKSB7XG4gICAgICB0aGlzLm5ld1NlbmQobG9nX2Nsb3VkLmNoYW5nZVRvQXJyYXkodGhpcy5mb3JtYXQsIHJzLnBvc3REYXRhKS5qb2luKHRoaXMuZ2V0TG9naWNTeW1ib2woKSksIHJlY29yZFR5cGUsIHJzLm1tdXJsLCBvcmlEYXRhcy5tZXRob2QpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogZ2V0IGNuYSBmcm9tIGxvY2FsU3RvcmFnZSBhbmQgY29va2llXG4gICAqIGlmIGdldCBpdCBmcm9tIGxvY2FsU3RvcmFnZSByZXR1cm4gbHN0YWcgdGhhdCB2YWx1ZSBpcyAxXG4gICAqIEByZXR1cm4ge09iamVjdH0gcnMge1xuICAgKiAgIGNuYTogJ3h4eHh4eHh4eHgnLFxuICAgKiAgIHBhcmFtczogWydsc3RhZz0xJ11cbiAgICogfVxuICAgKi9cbiAgZ2V0Q25hRGF0YTogZnVuY3Rpb24gKCkge1xuICAgIHZhciBsc0NuYSA9IHV0aWxEYXRhLmdldExzQ25hKHRoaXMubHNDbmFLZXkpO1xuICAgIHZhciBjb29raWVDbmEgPSBjb29raWUuZ2V0Q29va2llQ25hKCdjbmEnKTtcbiAgICB2YXIgcnMgPSB7XG4gICAgICBjbmE6IGxzQ25hIHx8IGNvb2tpZUNuYSxcbiAgICAgIHBhcmFtczogW11cbiAgICB9O1xuICAgIGlmIChsc0NuYSAmJiAhY29va2llQ25hKSB7XG4gICAgICBycy5wYXJhbXMucHVzaCgnbHN0YWc9MScpO1xuICAgIH1cbiAgICByZXR1cm4gcnM7XG4gIH0sXG5cbiAgY25hQ2FsbGJhY2s6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgdmFyIGxzQ25hID0gdXRpbERhdGEuZ2V0THNDbmEodGhpcy5sc0NuYUtleSk7XG4gICAgdmFyIGNvb2tpZUNuYSA9IGNvb2tpZS5nZXRDb29raWVDbmEoJ2NuYScpO1xuICAgIGlmIChsc0NuYSAhPT0gY29va2llQ25hIHx8IGxzQ25hICE9PSB2YWx1ZSB8fCBjb29raWVDbmEgIT09IHZhbHVlKSB7XG4gICAgICB1dGlsRGF0YS5zZXRMc0NuYSh0aGlzLmxzQ25hS2V5LCBkYXRlLmdldEZvcm1hdERhdGUoKSwgdmFsdWUpO1xuICAgICAgY29va2llLnNldENvb2tpZUNuYShrZXksIHZhbHVlLCB7XG4gICAgICAgICdTYW1lU2l0ZSc6ICdub25lJ1xuICAgICAgfSk7XG4gICAgfVxuICB9LFxuXG4gIHdhdGNoV1NTdGF0dXM6IGZ1bmN0aW9uIChyZXRyeVRpbWVzKSB7XG4gICAgdmFyIF9zZWxmID0gdGhpcztcbiAgICB0aGlzLndzSGFuZGxlci5zdWJzY3JpYmUoJ0FQTFVTX1dTX09QRU4nLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAocmV0cnlUaW1lcyA9PT0gX3NlbGYubWF4UmV0cnlUaW1lc1BlckhvdXIpIHtcbiAgICAgICAgX3NlbGYucmV0cnlUaW1lcyA9IDA7XG4gICAgICAgIF9zZWxmLnNldFJldHJ5VGltZXMoX3NlbGYucmV0cnlUaW1lcyk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy53c0hhbmRsZXIuc3Vic2NyaWJlKCdBUExVU19XU19FUlJPUicsIGZ1bmN0aW9uICgpIHtcbiAgICAgIF9zZWxmLmRvU2V0UmV0cnlUaW1lcygpO1xuICAgICAgX3NlbGYubXNnUXVldWVUb0h0dHBSZXF1ZXN0KCk7XG4gICAgfSk7XG4gICAgdGhpcy53c0hhbmRsZXIuc3Vic2NyaWJlKCdBUExVU19XU19FWENFUFRJT04nLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfc2VsZi5kb1NldFJldHJ5VGltZXMoKTtcbiAgICAgIF9zZWxmLm1zZ1F1ZXVlVG9IdHRwUmVxdWVzdCgpO1xuICAgIH0pO1xuICAgIHRoaXMud3NIYW5kbGVyLnN1YnNjcmliZSgnQVBMVVNfV1NfQ0xPU0UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfc2VsZi5tc2dRdWV1ZVRvSHR0cFJlcXVlc3QoKTtcbiAgICB9KTtcbiAgfSxcblxuICBzdGFydFdlYlNvY2tldDogZnVuY3Rpb24gKCkge1xuICAgIHZhciBfc2VsZiA9IHRoaXM7XG4gICAgLy8g5ZCv5Yqod3NcbiAgICB2YXIgZGF0YSA9IHRoaXMuZ2V0Q25hRGF0YSgpO1xuICAgIHRoaXMud3NIYW5kbGVyID0gdGhpcy5XUy5jcmVhdGUoe1xuICAgICAgY25hOiBkYXRhLmNuYSxcbiAgICAgIHBhcmFtczogZGF0YS5wYXJhbXMsXG4gICAgICBjcmVhdGVUaW1lOiBuZXcgRGF0ZSgpLmdldFRpbWUoKSxcbiAgICAgIGN0eDogdGhpcy5DVFhcbiAgICB9KTtcbiAgICB0aGlzLndzSGFuZGxlci5zdGFydFdTKCk7XG4gICAgdGhpcy53YXRjaFdTU3RhdHVzKHRoaXMuZ2V0UmV0cnlUaW1lcygpKTtcbiAgICAvLyBUT0RPIOacjeWKoeerr+mcgOimgee7meWHuuagvOW8j+WMlueahGRhdGHvvIzmjInnsbvlnovlpITnkIbpgLvovpEgQOW3m+W3nFxuICAgIHRoaXMud3NIYW5kbGVyLnN1YnNjcmliZSgnQVBMVVNfV1NfU0VSVkVSX01TRycsIGZ1bmN0aW9uIChkYXRhc3RyKSB7XG4gICAgICBpZiAoZGF0YXN0cikge1xuICAgICAgICB2YXIgaW5kZXggPSBkYXRhc3RyLmluZGV4T2YoJzonKTtcbiAgICAgICAgdmFyIGtleSA9IGRhdGFzdHIuc3Vic3RyKDAsIGluZGV4KTtcbiAgICAgICAgdmFyIHZhbHVlID0gZGF0YXN0ci5zdWJzdHIoaW5kZXggKyAxKTtcbiAgICAgICAgc3dpdGNoKGtleSkge1xuICAgICAgICBjYXNlICdjbmEnOlxuICAgICAgICAgIF9zZWxmLmNuYUNhbGxiYWNrKGtleSwgdmFsdWUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdhcGx1c19zbic6XG4gICAgICAgIGNhc2UgJ2FwbHVzX3N5JzpcbiAgICAgICAgICBfc2VsZi5jaGVhdENhbGxiYWNrKGtleSwgdmFsdWUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHZhciBkYXRhID0ge307XG4gICAgICAgICAgZGF0YVtrZXldID0gdmFsdWU7XG4gICAgICAgICAgYXBsdXMuc2VuZChfc2VsZi5kb21haW4gKyAnL3MnLCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pOyAgXG4gIH0sXG5cbiAgc3Vic2NyaWJlTG9nczogZnVuY3Rpb24gKGFjdGlvbiwgY2FsbGJhY2spIHtcbiAgICB1dGlsR1EucHVzaEludG9Hb2xkbG9nUXVldWUoYXBsdXNTdGF0aWMuU1VCU0NSSUJFLCBbYWN0aW9uLCBmdW5jdGlvbiAob3JpRGF0YXMpIHtcbiAgICAgIGlmIChvcmlEYXRhcy5zdGF0dXMgPT09IGFwbHVzU3RhdGljLkNPTVBMRVRFKSB7XG4gICAgICAgIGNhbGxiYWNrKG9yaURhdGFzKTtcbiAgICAgIH1cbiAgICB9XSk7XG4gIH0sXG5cbiAgZ2V0TG9naWNTeW1ib2w6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5mb3JtYXQgPT09ICdBTEknID8gJyYnIDogJ3x8JztcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtcyB7QXJyYXl9IHBhcmFtc1xuICAgKiBAcGFyYW1zIHtTdHJpbmd9IHVybFxuICAgKiBAcGFyYW1zIHtTdHJpbmd9IG1ldGhvZCAgR0VUIHx8IFBPU1QgfHwgV1MgfHwgV1MtT05MWVxuICAgKiBAcGFyYW1zIHtCb29sZWFufSBfalxuICAgKi9cbiAgaHR0cFJlcXVlc3RCZWFjb246IGZ1bmN0aW9uIChwYXJhbXMsIHVybCwgbWV0aG9kLCBfaikge1xuICAgIHZhciBQUk9UT0NPTF9JTkRFWCA9IGxvZ19jbG91ZC5nZXRLZXlJbmRleCgncHJvdG9jb2wnKTtcbiAgICB2YXIgRVZFTlRfQVJHU19JTkRFWCA9IGxvZ19jbG91ZC5nZXRLZXlJbmRleCgnZXZlbnRfYXJncycpO1xuICAgIHZhciBldmVudF9hcmdzID0gSlNPTi5wYXJzZShwYXJhbXNbRVZFTlRfQVJHU19JTkRFWF0pO1xuICAgIGlmIChfaikge1xuICAgICAgZXZlbnRfYXJncy5faiA9IDE7ICBcbiAgICB9XG5cbiAgICBkZWxldGUgZXZlbnRfYXJnc1snYXBsdXNfc24nXTtcbiAgICBkZWxldGUgZXZlbnRfYXJnc1snYXBsdXNfc3knXTtcbiAgICBkZWxldGUgZXZlbnRfYXJnc1sndWEnXTtcbiAgICBkZWxldGUgZXZlbnRfYXJnc1snbGFuZyddO1xuICAgIGRlbGV0ZSBldmVudF9hcmdzWydhd3MnXTtcblxuICAgIHBhcmFtc1tFVkVOVF9BUkdTX0lOREVYXSA9IEpTT04uc3RyaW5naWZ5KGV2ZW50X2FyZ3MpO1xuICAgIGlmICh0aGlzLmlzUGVyc2lzdGVudExpbmsobWV0aG9kKSkge1xuICAgICAgbWV0aG9kID0gbmF2aWdhdG9yICYmIG5hdmlnYXRvci5zZW5kQmVhY29uID8gJ1BPU1QnIDogJ0dFVCc7XG4gICAgfVxuICAgIHBhcmFtc1tQUk9UT0NPTF9JTkRFWF0gPSBtZXRob2Q7XG4gICAgYXBsdXMuc2VuZCh1cmwsIHBhcmFtcy5qb2luKHRoaXMuZ2V0TG9naWNTeW1ib2woKSksIG1ldGhvZCk7XG4gIH0sXG5cbiAgd2F0Y2hMT0c6IGZ1bmN0aW9uIChpc1N1cHBvcnRXUykge1xuICAgIFxuICAgIHZhciBfc2VsZiA9IHRoaXM7XG4gICAgdmFyIGhhbmRsZXJNaWRkbGV3YXJlID0gZnVuY3Rpb24gKGRhdGEsIGxvZ3R5cGUpIHtcbiAgICAgIHZhciBtZXRob2QgPSBkYXRhLndoZXJlX3RvX3NlbmQubWV0aG9kO1xuICAgICAgdmFyIHBhcmFtcyA9IGxvZ19jbG91ZC5jaGFuZ2VUb0FycmF5KF9zZWxmLmZvcm1hdCwgZGF0YS53aGF0X3RvX3NlbmQubG9nZGF0YSk7XG4gICAgICBpZiAoaXNTdXBwb3J0V1MgJiYgX3NlbGYuaXNQZXJzaXN0ZW50TGluayhtZXRob2QpKSB7XG4gICAgICAgIGlmIChfc2VsZi5yZXRyeVRpbWVzID49IF9zZWxmLm1heFJldHJ5VGltZXNQZXJIb3VyKSB7XG4gICAgICAgICAgX3NlbGYuaHR0cFJlcXVlc3RCZWFjb24ocGFyYW1zLCBkYXRhLndoZXJlX3RvX3NlbmQudXJsLCBtZXRob2QsIHRydWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF9zZWxmLmxvZ19jYWxsYmFjayhkYXRhLCBsb2d0eXBlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3NlbGYuaHR0cFJlcXVlc3RCZWFjb24ocGFyYW1zLCBkYXRhLndoZXJlX3RvX3NlbmQudXJsLCBtZXRob2QpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyDorqLpmIVwduS6i+S7tlxuICAgIF9zZWxmLnN1YnNjcmliZUxvZ3MoJ213X2NoYW5nZV9wdicsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICBoYW5kbGVyTWlkZGxld2FyZShkYXRhLCAncHYnKTtcbiAgICB9KTtcblxuICAgIC8vIOiuoumYhWhqbGovYXBsdXPkuovku7ZcbiAgICBfc2VsZi5zdWJzY3JpYmVMb2dzKCdtd19jaGFuZ2VfaGpsaicsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICBoYW5kbGVyTWlkZGxld2FyZShkYXRhLCAnYXBsdXMnKTtcbiAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgICog5LuOd2Vic29ja2V06ZmN57qn5Li6aHR0cFxuICAgKlxuICAgKiBAcGFyYW1zIHtBcnJheX0gbXNnUXVldWUgW3tcbiAgICogICBpZDogJ2lkMTQzNDY1MTEnLFxuICAgKiAgIG1zZzoge1xuICAgKiAgICAgcG9zdERhdGE6IFxuICAgKiAgICAgdXJsOiAnLy9sb2cubW1zdGF0LmNvbS92LmdpZidcbiAgICogICB9LFxuICAgKiAgIHN0YXJ0VGltZTogMTUzMDg4MDAxMzI0MCxcbiAgICogICB0eXBlOiAncHYnXG4gICAqIH1dXG4gICAqL1xuICBjaGFuZ2VUb0h0dHBSZXF1ZXN0OiBmdW5jdGlvbiAobXNnUXVldWUpIHtcbiAgICB2YXIgX3NlbGYgPSB0aGlzO1xuICAgIGlmIChtc2dRdWV1ZSAmJiBtc2dRdWV1ZS5sZW5ndGggPiAwKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZ1F1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBvYmogPSBtc2dRdWV1ZVtpXTtcbiAgICAgICAgdmFyIG1zZyA9IG9iai5tc2c7XG4gICAgICAgIHZhciBwb3N0RGF0YSA9IG1zZy5wb3N0RGF0YS5zcGxpdCgnfHwnKTsgLy8gdHlwZW9mIG1zZy5wb3N0RGF0YSA9PT0gJ29iamVjdCcgPyBtc2cucG9zdERhdGEgOiBKU09OLnBhcnNlKG1zZy5wb3N0RGF0YSk7XG4gICAgICAgIHZhciBtZXRob2QgPSBuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLnNlbmRCZWFjb24gPyAnUE9TVCcgOiAnR0VUJztcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ1RPRE8gdGVzdCBjaGFuZ2VUb0h0dHBSZXF1ZXN0Li4uJyk7XG4gICAgICAgIF9zZWxmLmh0dHBSZXF1ZXN0QmVhY29uKHBvc3REYXRhLCBtc2cudXJsLCBtZXRob2QsIHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBkYXRhSW5BcnJheTogZnVuY3Rpb24gKGFycmF5LCBkYXRhKSB7XG4gICAgdmFyIGZsYWc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGFycmF5W2ldLmlkID09PSBkYXRhLmlkKSB7XG4gICAgICAgIGZsYWcgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmxhZztcbiAgfSxcblxuICByZWR1Y2VEYXRhSW5BcnJheTogZnVuY3Rpb24gKGFycmF5LCBkYXRhKSB7XG4gICAgdmFyIGFyciA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChhcnJheVtpXS5pZCAhPT0gZGF0YS5pZCkge1xuICAgICAgICBhcnIucHVzaChhcnJheVtpXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnI7XG4gIH0sXG5cbiAgbXNnUXVldWVUb0h0dHBSZXF1ZXN0OiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG1zZ1F1ZXVlID0gdGhpcy53c0hhbmRsZXIuZ2V0TXNnUXVldWUoKTtcbiAgICB0aGlzLmNoYW5nZVRvSHR0cFJlcXVlc3QobXNnUXVldWUpO1xuICAgIHRoaXMud3NIYW5kbGVyLmNsZWFyTXNnUXVldWUoKTtcbiAgfSxcblxuICB3YXRjaFF1ZXVlOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9zZWxmID0gdGhpcztcblxuICAgIC8vIGJlZm9yZXVubG9hZCDkvb/nlKjpmY3nuqfmiJBodHRw6K+35rGC55qE5pa55byP5riF56m6bXNnUXVldWVcbiAgICB1dGlsRXZlbnQub24od2luLCAnYmVmb3JldW5sb2FkJywgZnVuY3Rpb24oKSB7XG4gICAgICBfc2VsZi5tc2dRdWV1ZVRvSHR0cFJlcXVlc3QoKTtcbiAgICAgIC8vIHZhciBtc2dRdWV1ZSA9IF9zZWxmLndzSGFuZGxlci5nZXRNc2dRdWV1ZSgpO1xuICAgICAgLy8gX3NlbGYuY2hhbmdlVG9IdHRwUmVxdWVzdChtc2dRdWV1ZSk7XG4gICAgICAvLyBfc2VsZi53c0hhbmRsZXIuY2xlYXJNc2dRdWV1ZSgpO1xuICAgIH0pO1xuXG4gICAgLy8g55uR5ZCs5YiwbXNnUXVldWXmlrDlop7lhoXlrrnvvIznrYnlvoXmlbDnp5LlkI7lsJ3or5XpmY3nuqfkuLpodHRw6K+35rGCXG4gICAgdGhpcy53c0hhbmRsZXIuc3Vic2NyaWJlKCdBUExVU19XU19NU0dfUVVFVUVfQ0hBTkdFJywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIC8vIGlmICghYXBsdXMuYXBsdXNEZWJ1Zykge1xuICAgICAgd2luLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbXNnUXVldWUgPSBfc2VsZi53c0hhbmRsZXIuZ2V0TXNnUXVldWUoKTtcbiAgICAgICAgaWYgKF9zZWxmLmRhdGFJbkFycmF5KG1zZ1F1ZXVlLCBkYXRhKSkge1xuICAgICAgICAgIF9zZWxmLmRvU2V0UmV0cnlUaW1lcygpO1xuICAgICAgICAgIF9zZWxmLmNoYW5nZVRvSHR0cFJlcXVlc3QoW2RhdGFdKTtcbiAgICAgICAgICB2YXIgYXJyID0gX3NlbGYucmVkdWNlRGF0YUluQXJyYXkobXNnUXVldWUsIGRhdGEpO1xuICAgICAgICAgIF9zZWxmLndzSGFuZGxlci5zZXRNc2dRdWV1ZShhcnIpO1xuICAgICAgICB9XG4gICAgICB9LCBfc2VsZi50aW1lb3V0VG9IdHRwKTtcbiAgICB9KTtcbiAgfSxcblxuICB3YXRjaERvbWFpbjogZnVuY3Rpb24gKCkge1xuICAgIHZhciBfc2VsZiA9IHRoaXM7XG4gICAgdXRpbEdRLnB1c2hJbnRvR29sZGxvZ1F1ZXVlKGFwbHVzU3RhdGljLlNVQlNDUklCRSwgWydhcGx1c0luaXRDb250ZXh0JywgZnVuY3Rpb24gKGN0eCkge1xuICAgICAgdmFyIHdoZXJlX3RvX3NlbmQgPSBjdHggPyBjdHgud2hlcmVfdG9fc2VuZCA6IHt9O1xuICAgICAgdmFyIHJzID0gd2hlcmVfdG9fc2VuZC51cmwubWF0Y2goLyhcXHd8LSkrXFwuKFxcd3wtKStcXC4oXFx3fC0pKy8pO1xuICAgICAgaWYgKHJzICYmIHJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgX3NlbGYuZG9tYWluID0gcnNbMF07XG4gICAgICB9XG4gICAgfV0pO1xuICB9LFxuXG4gIGlzUGVyc2lzdGVudExpbms6IGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgICByZXR1cm4gUGVyc2lzdGVudExpbmtMaXN0LmluZGV4T2YobWV0aG9kKSA+IC0xO1xuICB9LFxuXG4gIHJ1bjogZnVuY3Rpb24gKG9wdGlvbnMsIGlzU3VwcG9ydFdTKSB7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGF3czogMVxuICAgIH07XG4gICAgaWYgKCFpc1N1cHBvcnRXUykge1xuICAgICAgb2JqLl9qID0gMTtcbiAgICB9XG4gICAgdXRpbEdRLnB1c2hJbnRvR29sZGxvZ1F1ZXVlKCdhcGx1cy5hcHBlbmRNZXRhSW5mbycsIFsnYXBsdXMtZXhkYXRhJywgb2JqXSk7XG4gICAgdXRpbEdRLnB1c2hJbnRvR29sZGxvZ1F1ZXVlKCdhcGx1cy5hcHBlbmRNZXRhSW5mbycsIFsnYXBsdXMtY3B2ZGF0YScsIG9ial0pO1xuXG4gICAgdGhpcy5yZXRyeVRpbWVzID0gdGhpcy5nZXRSZXRyeVRpbWVzKCk7XG4gICAgdGhpcy5wYWdlTG9hZERhdGVIb3VyID0gdGhpcy5nZXREYXRlSG91cigpO1xuICAgIC8vIOS4jeaUr+aMgemVv+i/nuaOpeeahOa1j+iniOWZqOWPqumcgOimgXdhdGNoTE9H77yMd2F0Y2hMT0flhoXkvb/nlKjnn63ov57mjqXlj5Hml6Xlv5dcbiAgICBpZiAoaXNTdXBwb3J0V1MgJiYgdGhpcy5pc1BlcnNpc3RlbnRMaW5rKG9wdGlvbnMuY29udGV4dC53aGVyZV90b19zZW5kLm1ldGhvZCkpIHtcbiAgICAgIHRoaXMuc3RhcnRXZWJTb2NrZXQoKTtcbiAgICAgIHRoaXMud2F0Y2hMT0coaXNTdXBwb3J0V1MpO1xuICAgICAgdGhpcy53YXRjaFF1ZXVlKCk7XG4gICAgICB0aGlzLndhdGNoRG9tYWluKCk7ICBcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53YXRjaExPRyhpc1N1cHBvcnRXUyk7XG4gICAgfVxuICB9XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9wbHVnaW5zL2xpYl9jb25uZWN0aW9uL21haW5fd2ViX3dzLmpzXG4vLyBtb2R1bGUgaWQgPSA3MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIGFsaWxvZy9zIC0gc3JjL2xpYl91L3V0aWwvZGF0ZVV0aWwuanNcbiAqIOaXpeacn+W4ruWKqeexu1xuICpcbiAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cbiAqXG4gKiBBdXRob3JzOlxuICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuICovXG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIHplcm9GaWxsKG51bWJlciwgdGFyZ2V0TGVuZ3RoLCBmb3JjZVNpZ24pIHtcbiAgdmFyIGFic051bWJlciA9ICcnICsgTWF0aC5hYnMobnVtYmVyKSxcbiAgICB6ZXJvc1RvRmlsbCA9IHRhcmdldExlbmd0aCAtIGFic051bWJlci5sZW5ndGgsXG4gICAgc2lnbiA9IG51bWJlciA+PSAwO1xuICByZXR1cm4gKHNpZ24gPyAoZm9yY2VTaWduID8gJysnOiAnJykgOiAnLScpICsgTWF0aC5wb3coMTAsIE1hdGgubWF4KDAsIHplcm9zVG9GaWxsKSkudG9TdHJpbmcoKS5zdWJzdHIoMSkgKyBhYnNOdW1iZXI7XG59O1xuLyoqXG4gKiDmoLnmja7moLzlvI/ov5Tlm57ml6XmnJ9cbiAqIEBwYXJhbXMgW2Zvcm1hdF0gXCItXCIgKDIwMTgtMDEtMDEpIHwgXCIvXCIgKDIwMTgvMDEvMDEpXG4gKi9cbmV4cG9ydHMuZ2V0Rm9ybWF0RGF0ZSA9IGZ1bmN0aW9uKGZvcm1hdCkge1xuICB2YXIgZCA9IG5ldyBEYXRlKCk7XG4gIHRyeSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIGQuZ2V0RnVsbFllYXIoKSxcbiAgICAgIHplcm9GaWxsKGQuZ2V0TW9udGgoKSArIDEsIDIsIDApLFxuICAgICAgemVyb0ZpbGwoZC5nZXREYXRlKCksIDIsIDApXG4gICAgXS5qb2luKGZvcm1hdCB8fCAnJyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9saWJfdS91dGlscy9kYXRlLmpzXG4vLyBtb2R1bGUgaWQgPSA3M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIHByb2plY3QgLSBmaWxlcGF0aFxuICogY29va2llXG4gKlxuICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuICpcbiAqIEF1dGhvcnM6XG4gKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIGVhY2ggPSByZXF1aXJlKCcuL2VhY2gnKTtcbnZhciB0bGQgPSByZXF1aXJlKCcuL3RsZCcpO1xuXG4vKipcbiAqIOWPluW+lyBjb29raWUg5Lit5a+55bqUIGtleSDnmoTlgLxcbiAqIEBwYXJhbSBrZXkge1N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZ2V0Q29va2llKGtleSkge1xuICBpZiAoIWRvY3VtZW50KSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIHZhciBjb29raWVfdmFsID0gZG9jdW1lbnQuY29va2llLm1hdGNoKFxuICAgIG5ldyBSZWdFeHAoJyg/Ol58OylcXFxccyonICsga2V5ICsgJz0oW147XSspJylcbiAgKTtcbiAgcmV0dXJuIGNvb2tpZV92YWwgPyBjb29raWVfdmFsWzFdIDogJyc7XG59O1xuZXhwb3J0cy5nZXRDb29raWUgPSBnZXRDb29raWU7XG5cbmZ1bmN0aW9uIGdldEV4cGlyZXNUaW1lIChvcHRpb25zKSB7XG4gIHZhciBkYXRlID0gbmV3IERhdGUoKTtcbiAgdmFyIGRhdGVTdHIgPSAnJztcbiAgaWYgKCdzZXNzaW9uJyA9PT0gb3B0aW9ucy5leHBpcmVzKSB7XG4gIH0gZWxzZSBpZiAob3B0aW9ucy5leHBpcmVzICYmICgnbnVtYmVyJyA9PT0gdHlwZW9mIG9wdGlvbnMuZXhwaXJlcyB8fCBvcHRpb25zLmV4cGlyZXMudG9VVENTdHJpbmcpKSB7XG4gICAgLy8gb3B0aW9ucy5leHBpcmVz5aSp5pWwXG4gICAgaWYgKCdudW1iZXInID09PSB0eXBlb2Ygb3B0aW9ucy5leHBpcmVzKSB7XG4gICAgICBkYXRlLnNldFRpbWUoZGF0ZS5nZXRUaW1lKCkgKyAyNCAqIG9wdGlvbnMuZXhwaXJlcyAqIDYwICogNjAgKiAxMDAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF0ZSA9IG9wdGlvbnMuZXhwaXJlcztcbiAgICB9XG4gICAgZGF0ZVN0ciA9ICdleHBpcmVzPScgKyBkYXRlLnRvVVRDU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gMjDlubTov4fmnJ/ml7bpl7RcbiAgICBkYXRlLnNldFRpbWUoZGF0ZS5nZXRUaW1lKCkgKyAyMCAqIDM2NSAqIDI0ICogNjAgKiA2MCAqIDEwMDApO1xuICAgIGRhdGVTdHIgPSAnZXhwaXJlcz0nICsgZGF0ZS50b1VUQ1N0cmluZygpO1xuICB9XG4gIHJldHVybiBkYXRlU3RyO1xufVxuXG5mdW5jdGlvbiB0cnlTZXRDb29raWUobmFtZSwgdmFsLCBvcHRpb25zKSB7XG4gIGlmICghZG9jdW1lbnQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIHZhbCArPSAnOycgKyAob3B0aW9ucy5leHBpcmVzIHx8IGdldEV4cGlyZXNUaW1lKG9wdGlvbnMpKTtcbiAgLy8gd3d3LnRhb2Jhby5jb20gLT4gdGFvYmFvLmNvbVxuICB2YWwgKz0gJzsgcGF0aD0nICsgKG9wdGlvbnMucGF0aCA/IG9wdGlvbnMucGF0aCA6ICcvJyk7XG4gIHZhbCArPSAnOyBkb21haW49JyArIG9wdGlvbnMuZG9tYWluO1xuXG4gIGRvY3VtZW50LmNvb2tpZSA9IG5hbWUgKyAnPScgKyB2YWw7XG5cbiAgaWYgKG9wdGlvbnMuU2FtZVNpdGUgJiYgL0Nocm9tZVxcLzhcXGQrLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKSB7XG4gICAgdmFsICs9ICc7IFNhbWVTaXRlPScgKyBvcHRpb25zLlNhbWVTaXRlO1xuICAgIHZhbCArPSAnOyBTZWN1cmUnO1xuICAgIGRvY3VtZW50LmNvb2tpZSA9IG5hbWUgKyAnPScgKyB2YWw7XG4gIH1cbiAgcmV0dXJuIGdldENvb2tpZShuYW1lKTtcbn07XG5leHBvcnRzLnRyeVNldENvb2tpZSA9IHRyeVNldENvb2tpZTtcblxuLyoqXG4gKiBAcGFyYW1zIHtTdHJpbmd9IG5hbWUgY29va2llS2V5XG4gKiBAcGFyYW1zIHtTdHJpbmd8TnVtYmVyfSB2YWwgY29va2llVmFsdWVcbiAqIEBwYXJhbXMge09iamVjdH0gb3B0aW9ucyB7XG4gKiAgIGV4cGlyZXNcbiAqICAgZG9tYWluXG4gKiAgIHBhdGhcbiAqIH1cbiAqL1xuZnVuY3Rpb24gc2V0Q29va2llKG5hbWUsIHZhbCwgb3B0aW9ucykge1xuICB0cnkge1xuICAgIGlmICghZG9jdW1lbnQpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmRvbWFpbikge1xuICAgICAgdHJ5U2V0Q29va2llKG5hbWUsIHZhbCwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBkb21haW5zID0gdGxkLmdldERvbWFpbnMoKTtcbiAgICAgIHZhciBpID0gMDtcbiAgICAgIHdoaWxlIChpIDwgZG9tYWlucy5sZW5ndGgpIHtcbiAgICAgICAgb3B0aW9ucy5kb21haW4gPSBkb21haW5zW2ldO1xuICAgICAgICBpZiAoIXRyeVNldENvb2tpZShuYW1lLCB2YWwsIG9wdGlvbnMpKSB7XG4gICAgICAgICAgaSsrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGkgPSBkb21haW5zLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSBjYXRjaCAoZSkge31cbn07XG5cbmV4cG9ydHMuc2V0Q29va2llID0gc2V0Q29va2llO1xuXG52YXIga2V5cyA9IFsndHJhY2tuaWNrJywgJ3RodycsICdjbmEnXTtcblxuZXhwb3J0cy5nZXREYXRhID0gZnVuY3Rpb24gKCkge1xuICB2YXIgZGF0YSA9IHt9O1xuICBlYWNoKGtleXMsIGZ1bmN0aW9uIChrKSB7XG4gICAgZGF0YVtrXSA9IGdldENvb2tpZShrKTtcbiAgfSk7XG5cbiAgaWYgKGxvY2F0aW9uKSB7XG4gICAgdmFyIGhvc3RuYW1lID0gbG9jYXRpb24uaG9zdG5hbWU7XG4gICAgLy8gVE9ETyDlvoXlrZDnl5XmnI3liqHnq6/lrp7njrDoh6rliqjku45odHRw5aS06YeM5Y+WY25hdWnpgLvovpHlkI7miorov5nmrrXpgLvovpHlubLmjonvvIFcbiAgICAvLyAyMDEzLTA1LTA2IOS4gOWVuOmcgOaxgu+8jOS7heWcqCB0YW54LmNvbSDmiJYgKi50YW54LmNvbSDpobXpnaLlj5YgY25hdWkg6L+Z5LiqIGNvb2tpZVxuICAgIGRhdGEuY25hdWkgPSAvXFxidGFueFxcLmNvbSQvLnRlc3QoaG9zdG5hbWUpID8gZ2V0Q29va2llKCdjbmF1aScpIDogJyc7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn07XG5cbi8vIOiHquWumuS5iWNvb2tpZemHh+mbhlxuLy8gaHR0cHM6Ly9sYXJrLmFsaXBheS5jb20vYXBsdXNqcy9kb2NzL2t2aG1iZ1xuLy8gMjAxOC8zLzEyXG4vLyDkuI3lho3ph4fpm4ZfYV9kX2HvvIzph4fpm4ZobmfvvIzlubbkv67mlLnkuLpfaG5nXG4vL+ivpuinge+8mmh0dHA6Ly9naXRsYWIuYWxpYmFiYS1pbmMuY29tL2FsaWxvZy9rYi9pc3N1ZXMvMjIxXG5leHBvcnRzLmdldEhuZyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChnZXRDb29raWUoJ2huZycpIHx8ICcnKTtcbn07XG5cbmV4cG9ydHMuZ2V0Q29va2llQ25hID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIGdldENvb2tpZShuYW1lKSB8fCBnZXRDb29raWUoJ18nICsgbmFtZSk7XG59O1xuZXhwb3J0cy5zZXRDb29raWVDbmEgPSBmdW5jdGlvbiAobmFtZSwgdmFsLCBvcHRpb25zKSB7XG4gIHZhciBkb21haW5zID0gdGxkLmdldERvbWFpbnMoKTtcbiAgdmFyIGkgPSAwO1xuICB3aGlsZSAoaSA8IGRvbWFpbnMubGVuZ3RoKSB7XG4gICAgb3B0aW9ucy5kb21haW4gPSBkb21haW5zW2ldO1xuICAgIGlmICghdHJ5U2V0Q29va2llKG5hbWUsIHZhbCwgb3B0aW9ucykpIHtcbiAgICAgIGlmIChpID09PSBkb21haW5zLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gdmFsICsgJzsnICsgZ2V0RXhwaXJlc1RpbWUob3B0aW9ucyk7XG4gICAgICAgIHZhbHVlICs9ICc7IHBhdGg9Lyc7XG4gICAgICAgIGRvY3VtZW50LmNvb2tpZSA9ICdfJyArIG5hbWUgKyAnPScgKyB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGkrKztcbiAgICB9IGVsc2Uge1xuICAgICAgaSA9IGRvbWFpbnMubGVuZ3RoO1xuICAgIH1cbiAgfVxufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2xpYl91L3V0aWxzL2Nvb2tpZS5qc1xuLy8gbW9kdWxlIGlkID0gNzRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBAYXV0aG9yIGppemhhLnd5alxuICogQGJsb2cgaHR0cDovL29sZGoubmV0XG4gKlxuICogVExEID0gVG9wIExldmVsIERvbWFpblxuICpcbiAqIGFwbHVzIOWGmSBjb29raWUg5pe277yM6YCa5bi46KaB5rGC5YaZ5Yiw5qC55Z+f77yM5q+U5aaCIHBhaW1haS50YW9iYW8uY29tIOeahCBjb29raWUg6KaB5YaZ5YiwIHRhb2Jhby5jb20g5Z+f5LiL77yMXG4gKiDkvYbmmK/mnInkupvllYblrrbnq5nngrnnu5Hlrprkuoboh6rlrprkuYnln5/lkI3vvIzmr5TlpoIgaHR0cDovL2h1YXNoZW5nc2hpamkuY29tLmNuLyDvvIzlpoLmnpzlj6rmmK/nroDljZXlnLDlj5bln5/lkI3nmoTmnIDlkI7kuKTkvY3vvIxcbiAqIOWwseS8muWPluWIsCBjb20uY27vvIzml6Dms5XmraPluLjorr7nva4gY29va2ll77yM5omA5Lul6ZyA6KaB6L+Z5Liq5bqTXG4gKiBtb2RpZnkgYnkgQOiwi+WjqyBpbiAyMDE3LTEwLTI45pel77yM5Y+W5raI6ZW/5Z+f5ZCN5ZCO57yA55m95ZCN5Y2V77yM5Lul6Kej5YazbGF6YWRh562J5paw5o6l5YWl5Lia5Yqh6Zeu6aKYXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLmdldERvbWFpbnMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHRvcHMgPSBbXTtcbiAgdHJ5IHtcbiAgICB2YXIgZnVsbF9kb21haW4gPSBsb2NhdGlvbi5ob3N0bmFtZTtcbiAgICB2YXIgYSA9IGZ1bGxfZG9tYWluLnNwbGl0KCcuJyk7XG4gICAgdmFyIGkgPSAyO1xuICAgIHdoaWxlKGkgPD0gYS5sZW5ndGgpIHtcbiAgICAgIHRvcHMucHVzaChhLnNsaWNlKGEubGVuZ3RoIC0gaSkuam9pbignLicpKTtcbiAgICAgIGkrKztcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHt9XG4gIHJldHVybiB0b3BzO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2xpYl91L3V0aWxzL3RsZC5qc1xuLy8gbW9kdWxlIGlkID0gNzVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBUT0RPOiBTaGFyZWRXb3JrZXIgcGxheSB3aXRoIFdlYlNvY2tldFxuICpcbiAqIHdlYnNvY2tldOmAmumBk1xuICogd2Vic29ja2V0IHJlYWR5U3RhdGXlj5blgLzojIPlm7RcbiAqIENPTk5FQ1RJTkcgMCDov57mjqXov5jmsqHlvIDlkK/jgIJcbiAqIE9QRU4gIDEg6L+e5o6l5bey5byA5ZCv5bm25YeG5aSH5aW96L+b6KGM6YCa5L+h44CCXG4gKiBDTE9TSU5HIDIg6L+e5o6l5q2j5Zyo5YWz6Zet55qE6L+H56iL5Lit44CCXG4gKiBDTE9TRUQgIDMg6L+e5o6l5bey57uP5YWz6Zet77yM5oiW6ICF6L+e5o6l5peg5rOV5bu656uL44CCXG4gKlxuICogIHRoZSBldmVudCBvZiAnYXBsdXNJbml0Q29udGV4dCcgY29tZSBmcm9tIGFwbHVzLmpzXG4gKlxuICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuICpcbiAqIEF1dGhvcnM6XG4gKiAgIFJpY2hhcmR86LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgREVGQVVMVF9ET01BSU4gPSAnd3MubW1zdGF0LmNvbSc7XG5cbnZhciBhcGx1c1N0YXRpYyA9IHJlcXVpcmUoJ0B1dGlscy9hcGx1c1N0YXRpYycpO1xudmFyIFB1YlN1YldlYiA9IHJlcXVpcmUoJ0Bjb3JlL1B1YlN1YldlYicpO1xudmFyIHV0aWxHUSA9IHJlcXVpcmUoJ0B1dGlscy91dGlsR1EnKTtcbnZhciB1dGlsQ2F0Y2ggPSByZXF1aXJlKCdAdXRpbHMvdXRpbENhdGNoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gUHViU3ViV2ViLmV4dGVuZCh7XG4gIHN0YXR1czogJ2luYWN0aXZlJywgLy8gYXR0aXZlIHx8IGluYWN0aXZlXG5cbiAgd2Vic29ja2V0OiB7fSxcblxuICB3c2luZGV4UHJlOiAnd3NzJyxcblxuICB3c2luZGV4OiAwLFxuXG4gIG1zZ19xdWV1ZTogW10sXG5cbiAgc2V0V3NIYW5kbGVyOiBmdW5jdGlvbiAod3NVcmwpIHtcbiAgICByZXR1cm4gdGhpcy53ZWJzb2NrZXRbdGhpcy53c2luZGV4UHJlICsgKyt0aGlzLndzaW5kZXhdID0gbmV3IHRoaXMuY3R4LldlYlNvY2tldCh3c1VybCk7XG4gIH0sXG5cbiAgZ2V0V3NIYW5kbGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMud2Vic29ja2V0W3RoaXMud3NpbmRleFByZSArIHRoaXMud3NpbmRleF07XG4gIH0sXG5cbiAgZ2V0TXNnUXVldWU6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5tc2dfcXVldWU7XG4gIH0sXG5cbiAgY2xlYXJNc2dRdWV1ZTogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMubXNnX3F1ZXVlID0gW107XG4gIH0sXG5cbiAgc2V0TXNnUXVldWU6IGZ1bmN0aW9uIChtc2dRdWV1ZSkge1xuICAgIHRoaXMubXNnX3F1ZXVlID0gbXNnUXVldWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIOi9ruivouWkhOeQhumYn+WIl+WGheWbuuWumuadoeaVsOeahOaXpeW/l++8jOS7peWFjeWHuueOsOatu+W+queOr1xuICAgKi9cbiAgcHJvZXNzTXNnUXVldWU6IGZ1bmN0aW9uIChtc2dRdWV1ZSkge1xuICAgIHZhciBfc2VsZiA9IHRoaXM7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBzaXplO1xuICAgIGlmIChtc2dRdWV1ZSAmJiBtc2dRdWV1ZS5sZW5ndGggPiAwKSB7XG4gICAgICBzaXplID0gbXNnUXVldWUubGVuZ3RoO1xuICAgICAgd2hpbGUgKGkgPCBzaXplKSB7XG4gICAgICAgIF9zZWxmLnNlbmQobXNnUXVldWUuc2hpZnQoKSk7XG4gICAgICAgIGkrKztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc2l6ZSA9IF9zZWxmLm1zZ19xdWV1ZS5sZW5ndGg7XG4gICAgICB3aGlsZSAoaSA8IHNpemUpIHtcbiAgICAgICAgX3NlbGYuc2VuZChfc2VsZi5tc2dfcXVldWUuc2hpZnQoKSk7XG4gICAgICAgIGkrKztcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbXMge3N0cmluZ30gZG9tYWluXG4gICAqIFRPRE86IHJlYWQgaXQgZnJvbSBwdmxvZyBsb2cubW1zdGF0LmNvbSB8fCBzZy5tbXN0YXQuY29tIHx8IGdqLm1tc3RhdC5jb21cbiAgICovXG4gIGluaXRXZWJTb2NrZXQ6IGZ1bmN0aW9uIChkb21haW4pIHtcbiAgICB2YXIgX3NlbGYgPSB0aGlzO1xuICAgIHZhciB3c1Byb3RvY29sID0gbG9jYXRpb24ucHJvdG9jb2wgPT09IGFwbHVzU3RhdGljLkhUVFBTID8gJ3dzczovLycgOiAnd3M6Ly8nO1xuICAgIHZhciB3c1VybCA9IHdzUHJvdG9jb2wgKyBkb21haW4gKyAnL3dzJztcbiAgICB2YXIgZmlsZW5hbWUgPSAnaW5pdFdlYlNvY2tldCc7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChfc2VsZi5jbmEpIHtcbiAgICAgICAgd3NVcmwgKz0gJy8nICsgX3NlbGYuY25hO1xuICAgICAgfVxuICAgICAgaWYgKF9zZWxmLnBhcmFtcyAmJiBfc2VsZi5wYXJhbXMubGVuZ3RoID4gMCkge1xuICAgICAgICB3c1VybCArPSAnPycgKyBfc2VsZi5wYXJhbXMuam9pbignJicpO1xuICAgICAgfVxuICAgICAgdmFyIFdTID0gX3NlbGYuc2V0V3NIYW5kbGVyKHdzVXJsKTtcbiAgICAgIHZhciBjcmVhdGVUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICBXUy5vbm9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF9zZWxmLnN0YXR1cyA9ICdhY3RpdmUnO1xuICAgICAgICB2YXIgTVNHUyA9IF9zZWxmLmdldE1zZ1F1ZXVlKCk7XG4gICAgICAgIGlmIChNU0dTLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBfc2VsZi5wcm9lc3NNc2dRdWV1ZShNU0dTKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY29ublRpbWVNc2cgPSAnY29ublRpbWU9JyArIChuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIGNyZWF0ZVRpbWUpO1xuICAgICAgICB1dGlsQ2F0Y2guY2F0Y2hFeGNlcHRpb24oZmlsZW5hbWUgKyAnX29ub3BlbicsIHtcbiAgICAgICAgICBtZXNzYWdlOiBjb25uVGltZU1zZ1xuICAgICAgICB9KTtcbiAgICAgICAgX3NlbGYucHVibGlzaCgnQVBMVVNfV1NfT1BFTicpO1xuICAgICAgfTtcbiAgICAgIFdTLm9uZXJyb3IgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICBfc2VsZi5zdGF0dXMgPSAnaW5hY3RpdmUnO1xuICAgICAgICB2YXIgdGFyZ2V0ID0gZSA/IGUudGFyZ2V0IDoge307XG4gICAgICAgIHZhciB0aW1lU3RhbXAgPSBlID8gZS50aW1lU3RhbXAgOiAnJztcbiAgICAgICAgdXRpbENhdGNoLmNhdGNoRXhjZXB0aW9uKGZpbGVuYW1lICsgJ19vbmVycm9yJywge1xuICAgICAgICAgIG1lc3NhZ2U6ICd0YXJnZXRVcmw9JyArIHRhcmdldC51cmwgKyAnJnJlYWR5U3RhdGU9JyArIHRhcmdldC5yZWFkeVN0YXRlICsgJyZ0aW1lU3RhbXA9JyArIHRpbWVTdGFtcFxuICAgICAgICB9KTtcbiAgICAgICAgX3NlbGYucHVibGlzaCgnQVBMVVNfV1NfRVJST1InKTtcbiAgICAgIH07XG4gICAgICBXUy5vbmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfc2VsZi5zdGF0dXMgPSAnaW5hY3RpdmUnO1xuICAgICAgICBfc2VsZi5wdWJsaXNoKCdBUExVU19XU19DTE9TRScpO1xuICAgICAgICAvLyBfc2VsZi53ZWJzb2NrZXQgPSBudWxsO1xuICAgICAgfTtcbiAgICAgIFdTLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChvKSB7XG4gICAgICAgIF9zZWxmLnB1Ymxpc2goJ0FQTFVTX1dTX1NFUlZFUl9NU0cnLCBvLmRhdGEpO1xuICAgICAgfTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICAgIHV0aWxDYXRjaC5jYXRjaEV4Y2VwdGlvbihmaWxlbmFtZSArICdfZXhjZXB0aW9uJywgZSk7XG4gICAgICBfc2VsZi5wdWJsaXNoKCdBUExVU19XU19FWENFUFRJT04nKTtcbiAgICB9XG4gIH0sXG5cbiAgcmVhZHlJbml0V2ViU29ja2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9zZWxmID0gdGhpcztcbiAgICB1dGlsR1EucHVzaEludG9Hb2xkbG9nUXVldWUoYXBsdXNTdGF0aWMuU1VCU0NSSUJFLCBbJ2FwbHVzSW5pdENvbnRleHQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgd2Vic29ja2V0ID0gX3NlbGYuZ2V0V3NIYW5kbGVyKCk7XG4gICAgICBpZiAoIXdlYnNvY2tldCB8fCAod2Vic29ja2V0ICYmIHdlYnNvY2tldC5yZWFkeVN0YXRlID4gMSkpIHtcbiAgICAgICAgLy8gc3RlcDJcbiAgICAgICAgX3NlbGYuaW5pdFdlYlNvY2tldChERUZBVUxUX0RPTUFJTik7XG4gICAgICB9XG4gICAgICAvLyAvLyBzdGVwMVxuICAgICAgLy8gX3NlbGYuc3RvcCgpO1xuICAgIH1dKTtcbiAgfSxcblxuICBzdGFydDogZnVuY3Rpb24gKCkge1xuICAgIHZhciB3ZWJzb2NrZXQgPSB0aGlzLmdldFdzSGFuZGxlcigpO1xuICAgIGlmICghd2Vic29ja2V0IHx8ICh3ZWJzb2NrZXQgJiYgd2Vic29ja2V0LnJlYWR5U3RhdGUgPiAxKSkge1xuICAgICAgdGhpcy5zdGF0dXMgPSAnYWN0aXZlJztcbiAgICAgIHRoaXMucmVhZHlJbml0V2ViU29ja2V0KCk7XG4gICAgfVxuICB9LFxuXG4gIHN0b3A6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgd2Vic29ja2V0ID0gdGhpcy5nZXRXc0hhbmRsZXIoKTtcbiAgICBpZiAod2Vic29ja2V0ICYmIHdlYnNvY2tldC5yZWFkeVN0YXRlIDw9IDEpIHtcbiAgICAgIHRoaXMuc3RhdHVzID0gJ2luYWN0aXZlJztcbiAgICAgIHdlYnNvY2tldC5jbG9zZSgpO1xuICAgIH1cbiAgfSxcblxuICBzZW5kTXNnOiBmdW5jdGlvbiAobXNnKSB7XG4gICAgdmFyIHdlYnNvY2tldCA9IHRoaXMuZ2V0V3NIYW5kbGVyKCk7XG4gICAgaWYgKHdlYnNvY2tldCAmJiB3ZWJzb2NrZXQucmVhZHlTdGF0ZSA9PT0gMSkge1xuICAgICAgd2Vic29ja2V0LnNlbmQobXNnKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW1zIHtPYmplY3R9IGRhdGEge3R5cGU6ICdzeXMnLCBtc2c6ICdvZmZsaW5lJ31cbiAgICovXG4gIHByb2Nlc3NTeXNFdmVudDogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBpZiAoZGF0YS5tc2cgPT09ICdhY3RpdmUnKSB7XG4gICAgICB0aGlzLnN0YXJ0KCk7XG4gICAgfSBlbHNlIGlmIChkYXRhLm1zZyA9PT0gJ2luYWN0aXZlJykge1xuICAgICAgdGhpcy5zdG9wKCk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW1zIHtPYmplY3R9IGRhdGEge1xuICAgKiAgIGlkOiAnaWQnICsgZ2V0UmFuZG9tKDEsIDEwMDAwMDAwMCksXG4gICAqICAgdHlwZTogcHYgfHwgYXBsdXNcbiAgICogICBtc2c6IHB2bG9nRGV0YWlsIHx8IGFwbHVzRGV0YWlsXG4gICAqIH1cbiAgICovXG4gIHByb2Nlc3NMb2dFdmVudDogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBpZiAodGhpcy5zdGF0dXMgPT09ICdhY3RpdmUnKSB7XG4gICAgICB2YXIgaXNTdWNjZXNzID0gdGhpcy5zZW5kTXNnKGRhdGEubXNnLnBvc3REYXRhKTtcbiAgICAgIGlmICghaXNTdWNjZXNzKSB7XG4gICAgICAgIHRoaXMubXNnX3F1ZXVlLnB1c2goZGF0YSk7XG4gICAgICAgIC8vIOWIhuWPkW1zZ1F1ZXVl5Y+Y5YyW55qE5raI5oGv77yMbWFpbi5qc+WGheiuoumYhVxuICAgICAgICB0aGlzLnB1Ymxpc2goJ0FQTFVTX1dTX01TR19RVUVVRV9DSEFOR0UnLCBkYXRhKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5tc2dfcXVldWUucHVzaChkYXRhKTtcbiAgICAgIC8vIOWIhuWPkW1zZ1F1ZXVl5Y+Y5YyW55qE5raI5oGv77yMbWFpbi5qc+WGheiuoumYhVxuICAgICAgdGhpcy5wdWJsaXNoKCdBUExVU19XU19NU0dfUVVFVUVfQ0hBTkdFJywgZGF0YSk7XG4gICAgfVxuICB9LFxuXG4gIHNlbmQ6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgdmFyIHdlYnNvY2tldCA9IHRoaXMuZ2V0V3NIYW5kbGVyKCk7XG4gICAgaWYgKCF3ZWJzb2NrZXQgfHwgd2Vic29ja2V0LnJlYWR5U3RhdGUgPiAxKSB7XG4gICAgICB0aGlzLnN0YXJ0KCk7XG4gICAgfVxuICAgIHN3aXRjaCAoZGF0YS50eXBlKSB7XG4gICAgY2FzZSAnc3lzJzpcbiAgICAgIHRoaXMucHJvY2Vzc1N5c0V2ZW50KGRhdGEpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAncHYnOlxuICAgIGNhc2UgJ2FwbHVzJzpcbiAgICAgIHRoaXMucHJvY2Vzc0xvZ0V2ZW50KGRhdGEpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfSxcblxuICBzdGFydFdTOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9zZWxmID0gdGhpcztcbiAgICBfc2VsZi5zdGFydCgpO1xuICAgIC8vIHdpbi5hZGRFdmVudExpc3RlbmVyKCdvbmxpbmUnLCBmdW5jdGlvbiAoKSB7XG4gICAgLy8gICAvLyBfc2VsZi5zdGFydCgpO1xuICAgIC8vIH0pO1xuICAgIC8vIHdpbi5hZGRFdmVudExpc3RlbmVyKCdvZmZsaW5lJywgZnVuY3Rpb24gKCkge1xuICAgIC8vICAgLy8gX3NlbGYuc3RvcCgpO1xuICAgIC8vIH0pO1xuICAgIC8vIGlmICgnaGlkZGVuJyBpbiBkb2MpIHtcbiAgICAvLyAgIC8vIFBDXG4gICAgLy8gICB3aW4uYWRkRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICAvLyAgICAgaWYgKGRvYy52aXNpYmlsaXR5U3RhdGUgPT09ICd2aXNpYmxlJykge1xuICAgIC8vICAgICAgIF9zZWxmLnN0YXJ0KCk7XG4gICAgLy8gICAgIH0gZWxzZSBpZiAoZG9jLnZpc2liaWxpdHlTdGF0ZSA9PT0gJ2hpZGRlbicpIHtcbiAgICAvLyAgICAgICBfc2VsZi5zdG9wKCk7XG4gICAgLy8gICAgIH1cbiAgICAvLyAgIH0pO1xuICAgIC8vIH0gZWxzZSB7XG4gICAgLy8gICAvLyDml6Dnur9cbiAgICAvLyAgIHdpbi5hZGRFdmVudExpc3RlbmVyKCdwYWdlc2hvdycsIGZ1bmN0aW9uICgpIHtcbiAgICAvLyAgICAgX3NlbGYuc3RhcnQoKTtcbiAgICAvLyAgIH0pO1xuICAgIC8vICAgd2luLmFkZEV2ZW50TGlzdGVuZXIoJ3BhZ2VoaWRlJywgZnVuY3Rpb24gKCkge1xuICAgIC8vICAgICBfc2VsZi5zdG9wKCk7XG4gICAgLy8gICB9KTtcbiAgICAvLyB9XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvcGx1Z2lucy9saWJfY29ubmVjdGlvbi93cy5qc1xuLy8gbW9kdWxlIGlkID0gNzZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBhbGlsb2cvcy9zcmMvbGliX3UvdXRpbHMvdXRpbEF0dHJpYnV0ZS5qc1xuICpcbiAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cbiAqXG4gKiBBdXRob3JzOlxuICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlsR1EgPSByZXF1aXJlKCcuL3V0aWxHUScpO1xuXG5leHBvcnRzLmNhdGNoRXhjZXB0aW9uID0gZnVuY3Rpb24gKGZpbGVuYW1lLCBlcnJvcikge1xuICB2YXIgbWVzc2FnZSA9IGZpbGVuYW1lO1xuICBpZiAodHlwZW9mIGVycm9yID09PSAnb2JqZWN0JyAmJiBlcnJvci5tZXNzYWdlKSB7XG4gICAgbWVzc2FnZSA9IG1lc3NhZ2UgKyAnXycgKyBlcnJvci5tZXNzYWdlO1xuICB9XG4gIHV0aWxHUS5wdXNoSW50b0dvbGRsb2dRdWV1ZSgnYXBsdXMuX2FwbHVzX2NwbHVnaW5fbS5kb190cmFja2VyX2pzZXJyb3InLCBbe1xuICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgZXJyb3I6IEpTT04uc3RyaW5naWZ5KGVycm9yKSxcbiAgICBmaWxlbmFtZTogZmlsZW5hbWVcbiAgfV0pO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9saWJfdS91dGlscy91dGlsQ2F0Y2guanNcbi8vIG1vZHVsZSBpZCA9IDc3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogcHJvamVjdCAtIGZpbGVwYXRoXG4gKiDms6jlhaVsb2dDb25maWcs5L6b5ZCO57ut5o+S5Lu25L2/55SoXG4gKlxuICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuICpcbiAqIEF1dGhvcnM6XG4gKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIGVhY2ggPSByZXF1aXJlKCcuLi9saWJfdS91dGlscy9lYWNoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4ge1xuICAgIGdldExvZ0NvbmZpZzogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGxvZ0NvbmZpZyA9IHt9O1xuICAgICAgdmFyIHBsdWdpbnMgPSB0aGlzLm9wdGlvbnMuY29uZmlnLnBsdWdpbnM7XG5cbiAgICAgIGZvciAodmFyIGsgaW4gcGx1Z2lucykge1xuICAgICAgICBsb2dDb25maWdba10gPSB7XG4gICAgICAgICAgcGx1Z2luczogcGx1Z2luc1trXSxcbiAgICAgICAgICBjb250ZXh0OiB7fVxuICAgICAgICB9O1xuICAgICAgICBlYWNoKHBsdWdpbnNba10sIGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgbG9nQ29uZmlnW2tdLmNvbnRleHRbdi5uYW1lXSA9IHYuY29uZmlnIHx8IHt9O1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsb2dDb25maWc7XG4gICAgfSxcblxuICAgIHJ1bjogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5vcHRpb25zLmNvbnRleHQubG9nQ29uZmlnID0gdGhpcy5nZXRMb2dDb25maWcoKTtcbiAgICAgIHRoaXMub3B0aW9ucy5jb250ZXh0LmxvZ0NvbmZpZy5wYWdlTG9hZFRpbWUgPSB0aGlzLm9wdGlvbnMuY29udGV4dC5QQUdFX0xPQURfVElNRTtcbiAgICB9XG4gIH07XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvcGx1Z2lucy9hcGx1c19sb2dfaW5qZWN0LmpzXG4vLyBtb2R1bGUgaWQgPSA3OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIGFsaWxvZy9zIC0gc3JjL2xpYl91L2NvbmZpZy9wbHVnaW5zL2V0YWcuanNcbiAqXG4gKiDkvZznlKjvvJrljrsgaHR0cHM6Ly9sb2cubW1zdGF0LmNvbS9lZy5qcyB8IGh0dHBzOi8vZ2oubW1zdGF0LmNvbS9lZy5qc+WQjOatpWNuYe+8jOW5tuWGmeWFpeWIsOacrOWcsGNvb2tpZVxuICogZGVwczog5pegXG4gKlxuICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuICpcbiAqIEF1dGhvcnM6XG4gKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIGNvb2tpZSA9IHJlcXVpcmUoJ0B1dGlscy9jb29raWUnKTtcbnZhciB1dGlsRG9tID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxEb20nKTtcbnZhciB1dGlsRGF0YSA9IHJlcXVpcmUoJ0B1dGlscy91dGlsRGF0YScpO1xudmFyIGRhdGUgPSByZXF1aXJlKCdAdXRpbHMvZGF0ZScpO1xudmFyIHV0aWxFdGFnID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxFdGFnJyk7XG52YXIgdXRpbEdvbGRsb2cgPSByZXF1aXJlKCdAdXRpbHMvdXRpbEdvbGRsb2cnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICAvLyDliJ3lp4vljJbmqKHlnZdcbiAgICBpbml0OiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgdmFyIHBsdWdpbl9ldGFnID0gdGhpcy5vcHRpb25zLmNvbnRleHQuZXRhZyB8fCB7fTtcbiAgICAgIHRoaXMuY25hID0gcGx1Z2luX2V0YWcuY25hIHx8IGNvb2tpZS5nZXRDb29raWVDbmEoJ2NuYScpO1xuICAgICAgLy8gdGhpcy50YWcgPSAwO1xuICAgICAgLy8gdGhpcy5zdGFnID0gLTE7XG4gICAgICAvLyB0aGlzLmV0YWcgPSAnJztcbiAgICAgIHRoaXMuc2V0VGFnKDApO1xuICAgICAgdGhpcy5zZXRTdGFnKC0xKTtcbiAgICAgIHRoaXMuc2V0THNUYWcoJy0xJyk7IC8vIOaJk+agh+etvihsb2NhbFN0b3JhZ2VUYWcpbHN0YWcgPSAtMSDliJ3lp4vlgLxcbiAgICAgIHRoaXMuc2V0RXRhZyh0aGlzLmNuYSB8fCAnJyk7XG4gICAgICB0aGlzLnJlcXVlc3RpbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMudG9kYXkgPSBkYXRlLmdldEZvcm1hdERhdGUoKTtcbiAgICB9LFxuXG4gICAgc2V0THNUYWc6IGZ1bmN0aW9uKGxzdGFnKSB7XG4gICAgICB0aGlzLmxzdGFnID0gbHN0YWc7XG4gICAgICB0aGlzLm9wdGlvbnMuY29udGV4dC5ldGFnLmxzdGFnID0gbHN0YWc7XG4gICAgfSxcblxuICAgIHNldFRhZzogZnVuY3Rpb24odGFnKSB7XG4gICAgICB0aGlzLnRhZyA9IHRhZztcbiAgICAgIHRoaXMub3B0aW9ucy5jb250ZXh0LmV0YWcudGFnID0gdGFnO1xuICAgIH0sXG5cbiAgICBzZXRTdGFnOiBmdW5jdGlvbihzdGFnKSB7XG4gICAgICB0aGlzLnN0YWcgPSBzdGFnO1xuICAgICAgdGhpcy5vcHRpb25zLmNvbnRleHQuZXRhZy5zdGFnID0gc3RhZztcbiAgICB9LFxuXG4gICAgc2V0RXRhZzogZnVuY3Rpb24oZXRhZykge1xuICAgICAgdGhpcy5ldGFnID0gZXRhZztcbiAgICAgIC8vIOi1i+WAvHB25Y+C5pWw77yI6YeN6KaB77yJXG4gICAgICB0aGlzLm9wdGlvbnMuY29udGV4dC5ldGFnLmNuYSA9IGV0YWc7XG4gICAgICAvLyDlrZjlhaVjb29raWVcbiAgICAgIGlmIChjb29raWUuZ2V0Q29va2llQ25hKCdjbmEnKSAhPT0gZXRhZykge1xuICAgICAgICBjb29raWUuc2V0Q29va2llQ25hKCdjbmEnLCBldGFnLCB7XG4gICAgICAgICAgJ1NhbWVTaXRlJzogJ25vbmUnXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBzZXRMc2NuYVN0YXR1czogZnVuY3Rpb24oc3RhdHVzKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuY29udGV4dC5ldGFnLmxzY25hc3RhdHVzID0gc3RhdHVzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBwduWPkemAgeWIsOWTqumHjOWOu1xuICAgICAqIOi/lOWbnlwiZG9uZVwi57uI5q2i5Lit6Ze05Lu25omn6KGM77yM6L+U5Zue4oCccGF1c2XigJ3mmoLlgZzkuK3pl7Tku7bmiafooYzvvIzov5Tlm57kuIDkuKrmlbTmlbDigJxu4oCd5ZGK6K+J5Lit6Ze05Lu24oCcbuKAneavq+enkuWQjue7p+e7reaJp+ihjOS4remXtOS7tlxuICAgICAqIOKAnOaaguWBnOKAneacgOWkmjEwc++8jOiLpei2heaXtuS4remXtOS7tuS8muW8uuWItue7p+e7reaJp+ihjFxuICAgICAqIEBwYXJhbSBbU3RyaW5nXSBzdGF0ZSDnirbmgIFcbiAgICAgKiBAcGFyYW0gW0Z1bmN0aW9uXSBjYiAg5Zue6LCDXG4gICAgICogQHJldHVybiBcImRvbmVcIiB8IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIHJ1bjogZnVuY3Rpb24oc3RhdGUsIGNiKSB7XG4gICAgICB2YXIgX3NlbGYgPSB0aGlzO1xuICAgICAgLy8gdmFyIGFwbHVzX2NvbmZpZyA9IHRoaXMub3B0aW9ucy5jb250ZXh0LmFwbHVzX2NvbmZpZztcbiAgICAgIGlmIChfc2VsZi5jbmEpIHtcbiAgICAgICAgLy8gX3NlbGYudGFnID0gMTtcbiAgICAgICAgX3NlbGYuc2V0VGFnKDEpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgdGltZXIgPSBudWxsO1xuICAgICAgdmFyIGFwbHVzX3Job3N0X3YgPSBhcGx1cy5fJC5tZXRhX2luZm9bJ2FwbHVzLXJob3N0LXYnXTtcbiAgICAgIGlmIChhcGx1c19yaG9zdF92KSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5jb250ZXh0LmV0YWcuZWdVcmwgPSBhcGx1c19yaG9zdF92ICsgJy9lZy5qcyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgZWdVcmwgPSB1dGlsRXRhZy5nZXRVcmwodGhpcy5vcHRpb25zLmNvbnRleHQuZXRhZyB8fCB7fSk7XG4gICAgICBfc2VsZi5yZXF1ZXN0aW5nID0gdHJ1ZTtcblxuICAgICAgdmFyIGRvX2JhY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICBjYigpO1xuICAgICAgICB9LCAyMCk7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICB9O1xuXG4gICAgICB1dGlsRG9tLmxvYWRTY3JpcHQoZWdVcmwsIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgIHZhciBFdGFnO1xuICAgICAgICB2YXIgc3RhZztcbiAgICAgICAgLy8gb25lcnJvciDop6blj5FcbiAgICAgICAgaWYgKGVycm9yICYmIGVycm9yLnR5cGUgPT09ICdlcnJvcicpIHtcbiAgICAgICAgICBfc2VsZi5zZXRTdGFnKC0zKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBFdGFnID0gdXRpbEdvbGRsb2cuZ2V0R29sZGxvZ1ZhbCgnRXRhZycpO1xuICAgICAgICAgIGlmIChFdGFnKSB7XG4gICAgICAgICAgICBfc2VsZi5zZXRFdGFnKEV0YWcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzdGFnID0gdXRpbEdvbGRsb2cuZ2V0R29sZGxvZ1ZhbCgnc3RhZycpO1xuICAgICAgICAgIGlmICh0eXBlb2Ygc3RhZyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgLy8gX3NlbGYuc3RhZyA9IHN0YWc7XG4gICAgICAgICAgICBfc2VsZi5zZXRTdGFnKHN0YWcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIOW3sue7j+i2heaXtu+8jOW9k0V0YWfmsqHor7fmsYLov4fvvIzotbDljp/mnInmtYHnqItcbiAgICAgICAgaWYgKCFfc2VsZi5yZXF1ZXN0aW5nKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgdGFn5qCH562+5YC85ZCr5LmJ77yaXG4gICAgICAgICAgMSAg5Lia5Yqh5Z+f5pyJY25h77yM5pyJ5Y6f5pyJ5rWB56iLXG4gICAgICAgICAgMCAg5Lia5Yqh5Z+f5rKh5pyJY25h77yM5Y+R6LW3dGFn6K+35rGCXG5cbiAgICAgICAgICBzdGFn5qCH562+5YC85ZCr5LmJ77yaXG4gICAgICAgICAgLTEgICDliJ3lp4vljJblgLxcbiAgICAgICAgICAxICAgIG1tc3RhdOaciWNuYe+8jOS4lGNuYeWvueeahFxuICAgICAgICAgIDAgICAgbW1zdGF05rKh5pyJY25h77yMaWZfbm9uZV9tYXRjaCDmnInlgLzvvIzkuJTlgLzmraPnoa5cbiAgICAgICAgICA0ICAgbW1zdGF05rKh5pyJY25h77yMaWZfbm9uZV9tYXRjaCDmnInlgLzvvIzkuJTlgLzkuI3mraPnoa7vvIzmlrDnlJ/miJDnmoRcbiAgICAgICAgICAtMyAgIOWJjeerr2pz6Kem5Y+R77yMZXRhZyBvbmVycm9y5LqL5Lu26Kem5Y+R77yM5YiZ5qCH6K6wLTNcbiAgICAgICAgICAyICAgIOWVpemDveayoeacie+8jOaIluiAhW1tc3RhdOacieS9huaYr+aYr+mUmeeahO+8jOmHjeaWsOeUn+aIkFxuICAgICAgICAgIC0yICBldGFnanPotoXml7bvvIzliY3nq69qc+inpuWPkeiuvue9rlxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIGdsb2JhbENvbmZpZyA9IGFwbHVzLmdsb2JhbENvbmZpZyB8fCB7fTtcbiAgICAgICAgaWYgKHN0YWcgPT09IDIgfHwgc3RhZyA9PT0gNCkge1xuICAgICAgICAgIHZhciBfbHNjbmEgPSB1dGlsRGF0YS5nZXRMc0NuYShnbG9iYWxDb25maWcuRVRBR19TVE9SQUdFX0tFWSk7XG4gICAgICAgICAgLy8gTFPmnInlgLzml7bvvIxzZXTkuJrliqHln59jb29raWXjgIFsc3RhZz0xXG4gICAgICAgICAgaWYgKF9sc2NuYSkge1xuICAgICAgICAgICAgX3NlbGYuc2V0THNUYWcoMSk7XG4gICAgICAgICAgICBfc2VsZi5zZXRFdGFnKF9sc2NuYSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIExT5peg5YC85pe277yMc2V055So5pawQ05B5Y+R5pel5b+X44CBbHPloavlgLzjgIFsc3RhZz0wXG4gICAgICAgICAgICBfc2VsZi5zZXRMc1RhZygwKTtcbiAgICAgICAgICAgIHV0aWxEYXRhLnNldExzQ25hKGdsb2JhbENvbmZpZy5FVEFHX1NUT1JBR0VfS0VZLCBfc2VsZi50b2RheSwgRXRhZyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGRvX2JhY2soKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyDotoXml7blpITnkIZcbiAgICAgIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgX3NlbGYucmVxdWVzdGluZyA9IGZhbHNlO1xuICAgICAgICBfc2VsZi5zZXRTdGFnKC0yKTtcbiAgICAgICAgY2IoKTtcbiAgICAgIH0sIDE1MDApO1xuXG4gICAgICAvLyDlkYror4ljb21wb3Nl5pqC5YGc5omn6KGM5Lit6Ze05Lu277yM55u05YiwY2Llm57liLDlkI7lho3nu6fnu61cbiAgICAgIHJldHVybiAyMDA7XG4gICAgfSxcbiAgfTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9wbHVnaW5zL2xpYl9sb2cvbWlkZGxld2FyZS9jb21tb24vZXRhZ193ZWIuanNcbi8vIG1vZHVsZSBpZCA9IDc5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogcHJvamVjdCAtIGZpbGVwYXRoXG4gKiBkb23mk43kvZzlt6XlhbfnsbvvvIzov5nkuKrln7rnoYDlt6XlhbfnsbvkvJrooqvlhbbku5blt6XlhbfnsbvlvJXnlKjvvIzmlYXkuKXnpoHlnKjov5nph4zlho3lvJXnlKjlhbbku5bmqKHlnZfku6XlhY3lh7rnjrDpl67pophcbiAqXG4gKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG4gKlxuICogQXV0aG9yczpcbiAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbERhdGEgPSByZXF1aXJlKCcuL3V0aWxEYXRhJyk7XG5cbmV4cG9ydHMuZ2V0VXJsID0gZnVuY3Rpb24gKGV0YWcpIHtcbiAgdmFyIHVybCA9IHV0aWxEYXRhLmdldFVybChldGFnICYmIGV0YWcuZWdVcmwpO1xuICAvLyDlpoLmnpxlZ1VybOayoeacieW4puWNj+iuru+8jOi/memHjOihpeWFheWujOaVtFxuICBpZiAodXJsLmluZGV4T2YoJ2h0dHAnKSAhPT0gMCkge1xuICAgIHZhciBwcm90b2NhbCA9ICdodHRwczonO1xuICAgIGlmICgvKFxcZCtcXC4pezMsfVxcZCsvLnRlc3QodXJsKSkge1xuICAgICAgcHJvdG9jYWwgPSAnaHR0cDonO1xuICAgIH1cbiAgICB1cmwgPSBwcm90b2NhbCArIHVybDtcbiAgfVxuICByZXR1cm4gdXJsO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9saWJfdS91dGlscy91dGlsRXRhZy5qc1xuLy8gbW9kdWxlIGlkID0gODBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBhbGlsb2cvcyAtIHNyYy9saWJfdS9jb25maWcvcGx1Z2lucy93aGVuX3RvX3NlbmQuanNcbiAqXG4gKiAgIOS9nOeUqO+8miDkvZXml7bmiafooYxzZW5kcHbmj5Lku7ZcbiAqICAgZm46IGdldE1ldGFJbmZvIOe7p+aJv+iHs0Jhc2VcbiAqICAgZm46IHJ1biAo5o+S5Lu25qCH5YeG55qE5omn6KGM5YWl5Y+jKVxuICogICBhcGx1cy13YWl0aW5nPVwiMVwiOiDnrYnlvoU256eS5ZCO5bCd6K+V5Y+R6YCBUFbml6Xlv5c7XG4gKiAgIGFwbHVzLXdhaXRpbmc9XCJNQU5cIjog5LiN6Ieq5Yqo5Y+R6YCBUFbml6Xlv5c7XG4gKiAgIGFwbHVzLXdhaXRpbmc9XCJuXCI6IOWFtuS4rW7kuLrlpKfkuo4x55qE5q2j5pW05pWwLCBhcGx1c+WcqOetieW+hW7mr6vnp5LkuYvlkI7lsJ3or5Xlj5HpgIFQVuaXpeW/lztcbiAqXG4gKiAgIGRlcHPvvJog5pegXG4gKlxuICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuICpcbiAqIEF1dGhvcnM6XG4gKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxHb2xkbG9nID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxHb2xkbG9nJyk7XG52YXIgYXBsdXNTdGF0aWMgPSByZXF1aXJlKCdAdXRpbHMvYXBsdXNTdGF0aWMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcblxuICAgIC8qKlxuICAgICAqIOiOt+WPlm1ldGFfaW5mb1xuICAgICAqIFRPRE8g6Iul5LuK5ZCO5pyJ5Yqo5oCB5L+u5pS5bWV0YV9pbmZv55qE6ZyA5rGC77yMXG4gICAgICog5q2k5aSE6ZyA6KaB5Yqo5oCB5LuOIG1ldGFJbmZv5qih5Z2X5Lit5Y676LCD55SoZ2V0SW5mb+aWueazleadpeiOt+WPluebuOWFs+S/oeaBr++8jOi/meagt+WBmueahOWdj+WkhOaYr+a2iOiAl+aAp+iDvVxuICAgICAqL1xuICAgIGdldE1ldGFJbmZvOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBfJCA9IHV0aWxHb2xkbG9nLmdldEdvbGRsb2dWYWwoJ18kJykgfHwge307XG4gICAgICB2YXIgbWV0YV9pbmZvID0gXyQubWV0YV9pbmZvOyAvLyB8fCBtZXRhSW5mby5nZXRJbmZvKCk7XG4gICAgICByZXR1cm4gbWV0YV9pbmZvO1xuICAgIH0sXG5cbiAgICBnZXRBcGx1c1dhaXRpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG1ldGFfaW5mbyA9IHRoaXMuZ2V0TWV0YUluZm8oKSB8fCB7fTtcbiAgICAgIHJldHVybiBtZXRhX2luZm9bJ2FwbHVzLXdhaXRpbmcnXTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICog5L2V5pe25omn6KGMc2VuZHB25omn6KGM5YWl5Y+j77yM6YWN572u5LqGYXBsdXNXYWl0aW5nIOW5tuS4lCDmmK9hcGx1c+iHquWKqOaJk+eCueaJjei1sOi/meautemAu+i+kVxuICAgICAqIDxtZXRhIG5hbWU9XCJhcGx1cy13YWl0aW5nXCIgY29udGVudD1cInh4eFwiIC8+XG4gICAgICogICB4eHg6ICdNQU4nIC0g5LiN5Y+R6YCBcHbnmoTmoIfor4ZcbiAgICAgKiAgIHh4eDogJzEnIC0g5bCd6K+V562J5b6FNuenkuWQjuWPkXB2XG4gICAgICpcbiAgICAgKiBAcGFyYW0gW1N0cmluZ10gc3RhdGUg54q25oCBXG4gICAgICogQHBhcmFtIFtGdW5jdGlvbl0gY2IgIOWbnuiwg1xuICAgICAqXG4gICAgICogQHJldHVybiBcImRvbmVcIijnu4jmraLkuK3pl7Tku7bmiafooYwpIHwgdW5kZWZpbmVkXG4gICAgICovXG4gICAgcnVuOiBmdW5jdGlvbihzdGF0ZSwgY2IpIHtcbiAgICAgIHZhciBjb25maWcgPSB0aGlzLm9wdGlvbnMuY29uZmlnIHx8IHt9O1xuICAgICAgdmFyIGFwbHVzV2FpdGluZyA9IHRoaXMuZ2V0QXBsdXNXYWl0aW5nKCk7XG4gICAgICBpZiAoYXBsdXNXYWl0aW5nICYmIGNvbmZpZy5pc19hdXRvKSB7XG4gICAgICAgIGFwbHVzV2FpdGluZyA9IHRoaXMuZ2V0QXBsdXNXYWl0aW5nKCkgKyAnJztcbiAgICAgICAgdGhpcy5vcHRpb25zLmNvbnRleHQud2hlbl90b19zZW5kcHYgPSB7XG4gICAgICAgICAgYXBsdXNXYWl0aW5nOiBhcGx1c1dhaXRpbmdcbiAgICAgICAgfTtcbiAgICAgICAgc3dpdGNoKGFwbHVzV2FpdGluZykge1xuICAgICAgICBjYXNlIGFwbHVzU3RhdGljLl9VU0VSX0lEOlxuICAgICAgICBjYXNlIGFwbHVzU3RhdGljLl9BTk9OWV9JRDpcbiAgICAgICAgY2FzZSAnTUFOJzpcbiAgICAgICAgICByZXR1cm4gJ2RvbmUnO1xuICAgICAgICBjYXNlICcxJzpcbiAgICAgICAgICB0aGlzLm9wdGlvbnMuY29udGV4dC53aGVuX3RvX3NlbmRwdi5pc1dhaXQgPSB0cnVlO1xuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGNiKCk7XG4gICAgICAgICAgfSwgNjAwMCk7XG4gICAgICAgICAgcmV0dXJuIDYwMDA7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdmFyIG4gPSBhcGx1c1dhaXRpbmcgKiAxO1xuICAgICAgICAgIGlmICgobiArICcnKSAhPT0gJ05hTicpIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5jb250ZXh0LndoZW5fdG9fc2VuZHB2LmlzV2FpdCA9IHRydWU7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgIGNiKCk7XG4gICAgICAgICAgICB9LCBuKTtcbiAgICAgICAgICAgIHJldHVybiBuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH0sXG4gIH07XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvcGx1Z2lucy9saWJfbG9nL21pZGRsZXdhcmUvcHYvd2hlbl90b19zZW5kcHYuanNcbi8vIG1vZHVsZSBpZCA9IDgxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogYWxpbG9nL3MgLSBzcmMvbGliX3UvY29uZmlnL3BsdWdpbnMvd2hlcmVfdG9fc2VuZC5qc1xuICpcbiAqICAg5L2c55So77yadW3pgJrpgZPkuIvvvIzmlLbpm4ZwduWPkemAgeWOu+WQkeS/oeaBr++8iOWfn+WQjeWPluWGs+S6jumFjee9ru+8iVxuICogICBmbjogcnVuICjmj5Lku7bmoIflh4bnmoTmiafooYzlhaXlj6MpXG4gKiAgIOaciemFjee9rui/meS4quWFpeWPo1xuICogICA8bWV0YSBuYW1lPVwiYXBsdXMtcmhvc3QtdlwiIGNvbnRlbnQ9XCJ4eHgueHh4LmNvbVwiPlxuICogICDml7bvvIxQVuaXpeW/l2hvc3TmlLnkuLrkvb/nlKhhcGx1cy1yaG9zdC12IOagh+etvuWGhWNvbnRlbnTlhoXlo7DmmI7nmoTlgLxcbiAqXG4gKiAgIGRlcHPvvJrml6BcbiAqXG4gKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG4gKlxuICogQXV0aG9yczpcbiAqICAg6ZKw5pitIDxjaGFuZ2xpYW5nLmxjbEB1bWVuZy5jb20+XG4gKi9cbid1c2Ugc3RyaWN0JztcblxuLy8gdmFyIHV0aWxEYXNoID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxEYXNoJyk7XG52YXIgdXRpbFVBID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxVQScpO1xudmFyIHV0aWxHb2xkbG9nID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxHb2xkbG9nJyk7XG52YXIgdXRpbExvZ2dlciA9IHJlcXVpcmUoJ0B1dGlscy91dGlsTG9nZ2VyJyk7XG5cbnZhciBQT1NUID0gJ1BPU1QnO1xudmFyIEdFVCA9ICdHRVQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIC8qKlxuICAgICAqIOiOt+WPlm1ldGFfaW5mb1xuICAgICAqIFRPRE8g6Iul5LuK5ZCO5pyJ5Yqo5oCB5L+u5pS5bWV0YV9pbmZv55qE6ZyA5rGC77yMXG4gICAgICog5q2k5aSE6ZyA6KaB5Yqo5oCB5LuOIG1ldGFJbmZv5qih5Z2X5Lit5Y676LCD55SoZ2V0SW5mb+aWueazleadpeiOt+WPluebuOWFs+S/oeaBr++8jOi/meagt+WBmueahOWdj+WkhOaYr+a2iOiAl+aAp+iDvVxuICAgICAqL1xuICAgIGdldE1ldGFJbmZvOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBfJCA9IHV0aWxHb2xkbG9nLmdldEdvbGRsb2dWYWwoJ18kJykgfHwge307XG4gICAgICB2YXIgbWV0YV9pbmZvID0gXyQubWV0YV9pbmZvOyAvLyB8fCBtZXRhSW5mby5nZXRJbmZvKCk7XG4gICAgICByZXR1cm4gbWV0YV9pbmZvO1xuICAgIH0sXG5cbiAgICBnZXRBcGx1c01ldGFCeUtleTogZnVuY3Rpb24oa2V5KSB7XG4gICAgICB2YXIgbWV0YV9pbmZvID0gdGhpcy5nZXRNZXRhSW5mbygpIHx8IHt9O1xuICAgICAgcmV0dXJuIG1ldGFfaW5mb1trZXldO1xuICAgIH0sXG5cbiAgICBnZXRSaG9zdDogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIG1ldGFWYWx1ZSA9IHRoaXMuZ2V0QXBsdXNNZXRhQnlLZXkoJ2FwbHVzLXJob3N0LXYnKTtcbiAgICAgIHJldHVybiBtZXRhVmFsdWU7XG4gICAgfSxcblxuICAgIGdldEhqbGpIb3N0VXJsOiBmdW5jdGlvbiAocmhvc3QpIHtcbiAgICAgIHZhciBwcmVmaXggPSAvXlxcL1xcLy8udGVzdChyaG9zdCkgPyAnJyA6ICcvLyc7XG4gICAgICB2YXIgZW5kZml4ID0gJy93ZWJfbG9ncyc7XG4gICAgICB2YXIgdXJsID0gcHJlZml4ICsgcmhvc3QgKyBlbmRmaXg7XG4gICAgICByZXR1cm4gdXJsO1xuICAgIH0sXG5cbiAgICBnZXRQdkhvc3RVcmw6IGZ1bmN0aW9uIChyaG9zdCkge1xuICAgICAgdmFyIHByZWZpeCA9IC9eXFwvXFwvLy50ZXN0KHJob3N0KSA/ICcnIDogJy8vJztcbiAgICAgIHZhciBlbmRmaXggPSAvXFwvJC8udGVzdChyaG9zdCkgPyAnJyA6ICcvJztcblxuICAgICAgdmFyIGdpZiA9ICd2LmdpZic7XG4gICAgICBpZiAodXRpbFVBLmlzTW9iaWxlKCkpIHtcbiAgICAgICAgZ2lmID0gJ20uZ2lmJztcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcmVmaXggKyByaG9zdCArIGVuZGZpeCArIGdpZjtcbiAgICB9LFxuXG4gICAgZ2V0SG9zdFVybDogZnVuY3Rpb24gKHJob3N0KSB7XG4gICAgICB2YXIgcHJlZml4ID0gL15cXC9cXC8vLnRlc3Qocmhvc3QpID8gJycgOiAnLy8nO1xuICAgICAgdmFyIGVuZGZpeCA9ICcvd2ViX2xvZ3MnO1xuICAgICAgdmFyIHVybCA9IHByZWZpeCArIHJob3N0ICsgZW5kZml4O1xuICAgICAgcmV0dXJuIHVybDtcbiAgICB9LFxuXG4gICAgZ2V0Q2hhbm5lbDogZnVuY3Rpb24gKGNoYW5uZWwpIHtcbiAgICAgIHZhciBhcGx1c0NoYW5uZWwgPSB0aGlzLmdldEFwbHVzTWV0YUJ5S2V5KCdhcGx1cy1jaGFubmVsJyk7XG4gICAgICB2YXIgY2hhbm5lbHMgPSBbJ1dTJywgJ1dTLU9OTFknLCBHRVQsIFBPU1RdO1xuXG4gICAgICB2YXIgcnM7XG4gICAgICBpZiAoY2hhbm5lbHMuaW5kZXhPZihjaGFubmVsKSA+IC0xKSB7XG4gICAgICAgIHJzID0gY2hhbm5lbDtcbiAgICAgIH1cbiAgICAgIGlmICghcnMgJiYgY2hhbm5lbHMuaW5kZXhPZihhcGx1c0NoYW5uZWwpID4gLTEpIHtcbiAgICAgICAgcnMgPSBhcGx1c0NoYW5uZWw7XG4gICAgICB9XG4gICAgICByZXR1cm4gcnM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGhqbGrlj5HpgIHliLDlk6rph4zljrtcbiAgICAgKiAxLiDlpoLmnpzmmK/ljZXlj5HvvIxoNeeahOWPkemAgeWOu+WQkemAu+i+keebtOaOpei3s+i/h1xuICAgICAqIDIuIHZhbGlkaXR5OlxuICAgICAqICAgPG1ldGEgbmFtZT1cImFwbHVzLXJob3N0LWdcIiBjb250ZW50PVwiZ20ubW1zdGF0LmNvbVwiIC8+XG4gICAgICogICDmnInlgLzkuJTlkIjms5XmiY3kvb/nlKjvvIzlkKbliJnnlKjpu5jorqTnmoRnbS5tbXN0YXQuY29tL3dnby5tbXN0YXQuY29tXG4gICAgICpcbiAgICAgKiDov5Tlm55cImRvbmVcIue7iOatouS4remXtOS7tuaJp+ihjFxuICAgICAqIEBwYXJhbSBbU3RyaW5nXSBzdGF0ZSDnirbmgIFcbiAgICAgKiBAcGFyYW0gW0Z1bmN0aW9uXSBjYiAg5Zue6LCDXG4gICAgICogQHJldHVybiBcImRvbmVcIiB8IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIHJ1bjogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaXNfc2luZ2xlID0gISF0aGlzLm9wdGlvbnMuY29udGV4dC5pc19zaW5nbGU7XG4gICAgICBpZiAoaXNfc2luZ2xlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciByZWNvcmRUeXBlID0gdGhpcy5vcHRpb25zLmNvbmZpZy5yZWNvcmRUeXBlO1xuICAgICAgdmFyIHJob3N0ID0gdGhpcy5nZXRSaG9zdChyZWNvcmRUeXBlKTtcbiAgICAgIGlmICghcmhvc3QpIHtcbiAgICAgICAgdXRpbExvZ2dlci5sb2dnZXIoe1xuICAgICAgICAgIG1zZzogJ2N1cnJlbnQgcmVxdWVzdCBkb21haW4gaW52YWxpZCwgcGxlYXNlIGNoZWNrIHlvdXIgYXBsdXMtcmhvc3QtdiB2YWx1ZSBpbnNpZGUgbWV0YWluZm8hJ1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuICdkb25lJztcbiAgICAgIH1cblxuICAgICAgdmFyIHVybDtcbiAgICAgIGlmIChyZWNvcmRUeXBlID09PSAnUFYnKSB7XG4gICAgICAgIHVybCA9IHRoaXMuZ2V0UHZIb3N0VXJsKHJob3N0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVybCA9IHRoaXMuZ2V0SGpsakhvc3RVcmwocmhvc3QpO1xuICAgICAgfVxuICAgICAgXG4gICAgICB2YXIgY29uZmlnID0gdGhpcy5vcHRpb25zLmNvbmZpZyB8fCB7fTtcbiAgICAgIHZhciBtZXRob2QgPSB0aGlzLmdldENoYW5uZWwoY29uZmlnLm1ldGhvZCkgfHwgUE9TVDtcbiAgICAgIGlmIChtZXRob2QgPT09IFBPU1QgJiYgKCFuYXZpZ2F0b3IgfHwgIW5hdmlnYXRvci5zZW5kQmVhY29uKSkge1xuICAgICAgICBtZXRob2QgPSBHRVQ7XG4gICAgICB9XG5cbiAgICAgIHRoaXMub3B0aW9ucy5jb250ZXh0LndoZXJlX3RvX3NlbmQubWV0aG9kID0gY29uZmlnLm1ldGhvZDtcbiAgICAgIHRoaXMub3B0aW9ucy5jb250ZXh0LndoZXJlX3RvX3NlbmQudXJsID0gdXJsO1xuICAgICAgcmV0dXJuO1xuICAgIH0sXG4gIH07XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvcGx1Z2lucy9saWJfbG9nL21pZGRsZXdhcmUvY29tbW9uL3doZXJlX3RvX3NlbmRfd2ViX2Nsb3VkX3VtLmpzXG4vLyBtb2R1bGUgaWQgPSA4MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIHByb2plY3QgLSBmaWxlcGF0aFxuICogVUHliKTmlq3nm7jlhbPlt6XlhbdcbiAqXG4gKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG4gKlxuICogQXV0aG9yczpcbiAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLmlzTW9iaWxlID0gZnVuY3Rpb24oKSB7XG4gIHZhciBVQSA9IG5hdmlnYXRvciA/IG5hdmlnYXRvci51c2VyQWdlbnQgOiAnJztcbiAgdmFyIGlzQWxpQXBwID0gL0FsaUFwcHxZdW5vc3xjeWNsb25lL2kudGVzdChVQSk7IC8vIOS6kU9T5rWP6KeI5Zmo5YaF5qC45Li6Y3ljbG9uZVxuICB2YXIgaXNJT1MgPSAoL2lQaG9uZXxpUGFkfGlQb2QvaSkudGVzdChVQSk7XG4gIHZhciBpc0FuZHJvaWQgPSAoL0FuZHJvaWQvaSkudGVzdChVQSk7XG4gIHZhciBpc1dpbmRvd3NQaG9uZSA9ICgvV2luZG93cyBQaG9uZS9pKS50ZXN0KFVBKSB8fCAoL0lFTW9iaWxlL2kpLnRlc3QoVUEpIHx8ICgvV1BEZXNrdG9wL2kpLnRlc3QoVUEpO1xuICB2YXIgaXNCbGFja0JlcnJ5ID0gKC9CbGFja0JlcnJ5L2kpLnRlc3QoVUEpO1xuICB2YXIgaXNPcGVyYU1vYmlsZSA9ICgvT3BlcmEgTWluaS9pKS50ZXN0KFVBKTtcbiAgcmV0dXJuIGlzQWxpQXBwIHx8IGlzSU9TIHx8IGlzQW5kcm9pZCB8fCBpc1dpbmRvd3NQaG9uZSB8fCBpc0JsYWNrQmVycnkgfHwgaXNPcGVyYU1vYmlsZTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvbGliX3UvdXRpbHMvdXRpbFVBLmpzXG4vLyBtb2R1bGUgaWQgPSA4M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIGFsaWxvZy9zIC0gc3JjL2xpYl91L2NvbmZpZy9wbHVnaW5zL3doYXRfdG9fc2VuZC5qc1xuICpcbiAqIOS9nOeUqO+8muaXpeW/l+WPkemAgeWfuuehgOWPguaVsOaUtumbhu+8mlxuICogICAgICDmjInpobrluo/lsIZhcGx1cy5wdl9kYXRhLmJhc2lj44CBZXhwYXJhbXPjgIFvbGRQYXJhbXPjgIFhcGx1cy5wdl9kYXRhLmV4dHJh5Zub5Lit57G75Z6L55qE5Y+C5pWwbWVyZ2XlnKjkuIDkuKrmlbDnu4TkuK1cbiAqIGRlcHM6IOaXoFxuICpcbiAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cbiAqXG4gKiBBdXRob3JzOlxuICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBjb29raWUgPSByZXF1aXJlKCdAdXRpbHMvY29va2llJyk7XG4vLyB2YXIgdXRpbFVybCA9IHJlcXVpcmUoJ0B1dGlscy91dGlsVXJsJyk7XG52YXIgbG9nSWQgPSByZXF1aXJlKCdAdXRpbHMvbG9nSWQnKTtcbnZhciB1dGlsRGFzaCA9IHJlcXVpcmUoJ0B1dGlscy91dGlsRGFzaCcpO1xudmFyIHV0aWxVQSA9IHJlcXVpcmUoJ0B1dGlscy91dGlsVUEnKTtcbnZhciB1dGlsR29sZGxvZyA9IHJlcXVpcmUoJ0B1dGlscy91dGlsR29sZGxvZycpO1xudmFyIGFwbHVzU3RhdGljID0gcmVxdWlyZSgnQHV0aWxzL2FwbHVzU3RhdGljJyk7XG52YXIgYXBsdXMgPSB1dGlsR29sZGxvZy5nZXRHbG9iYWxWYWx1ZSgnYXBsdXMnKTtcbnZhciB1dGlsUGFyYW1zID0gcmVxdWlyZSgnLi91dGlsUGFyYW1zJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4ge1xuICAgIGdldENvbW1vblBhcmFtczogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLm9wdGlvbnMuY29udGV4dCB8fCB7fTtcbiAgICAgIHZhciBldGFnID0gY29udGV4dC5ldGFnIHx8IHt9O1xuICAgICAgdmFyIHVzZXJkYXRhID0gY29udGV4dC51c2VyZGF0YSB8fCB7fTtcbiAgICAgIHZhciBfJCA9IHV0aWxHb2xkbG9nLmdldEdvbGRsb2dWYWwoJ18kJykgfHwge307XG4gICAgICAvLyB2YXIgc3BtID0gXyQuc3BtIHx8IHt9O1xuICAgICAgdmFyIGNvbmZpZyA9IHRoaXMub3B0aW9ucy5jb25maWcgfHwge307XG4gICAgICB2YXIgcGxhdGZvcm1UeXBlID0gdXRpbFVBLmlzTW9iaWxlKCkgPyAnV0FQJyA6ICdQQyc7XG4gICAgICB2YXIgdXNlckluZm8gPSB7XG4gICAgICAgIF9kZXZfaWQ6IGFwbHVzLmdldE1ldGFJbmZvKCdfZGV2X2lkJyksXG4gICAgICAgIF9hbm9ueV9pZDogYXBsdXMuZ2V0TWV0YUluZm8oYXBsdXNTdGF0aWMuX0FOT05ZX0lEKSxcbiAgICAgICAgX3VzZXJfaWQ6IGFwbHVzLmdldE1ldGFJbmZvKGFwbHVzU3RhdGljLl9VU0VSX0lEKSxcbiAgICAgICAgX3VzZXJfbmljazogYXBsdXMuZ2V0TWV0YUluZm8oJ191c2VyX25pY2snKSB8fCBjb29raWUuZ2V0Q29va2llKCd0cmFja25pY2snKSxcbiAgICAgICAgX3Nlc3Npb25faWQ6IGFwbHVzLmdldE1ldGFJbmZvKCdfc2Vzc2lvbl9pZCcpLFxuICAgICAgfTtcblxuICAgICAgdmFyIHVybCA9IGNvbmZpZy5wYWdlVXJsIHx8IChsb2NhdGlvbiA/IGxvY2F0aW9uLmhyZWYgOiAnLScpO1xuICAgICAgdmFyIHRpdGxlID0gY29uZmlnLnRpdGxlIHx8IChkb2N1bWVudCAmJiBkb2N1bWVudC50aXRsZSk7XG5cbiAgICAgIHZhciBjb21tb25QYXJhbXMgPSB1dGlsRGFzaC5hc3NpZ24oe1xuICAgICAgICBhcHBJZDogYXBsdXMuZ2V0TWV0YUluZm8oJ2FwcEtleScpIHx8IGFwbHVzLmdldE1ldGFJbmZvKCdhcHBJZCcpLFxuICAgICAgICBjYWNoZTogbG9nSWQuZ2V0TG9nSWQodXJsLCB0aXRsZSksXG4gICAgICAgIGNuYTogZXRhZy5jbmEsXG4gICAgICAgIGV0YWc6IGV0YWcsXG4gICAgICAgIHByZTogXyQucGFnZV9yZWZlcnJlciB8fCAnLScsIC8vIFRPRE9cbiAgICAgICAgc2RrX2luZm86IHtcbiAgICAgICAgICBqc3ZlcjogYXBsdXMuZ2xvYmFsQ29uZmlnLnNjcmlwdF9uYW1lLFxuICAgICAgICAgIGx2ZXI6IGFwbHVzLmdsb2JhbENvbmZpZy5sdmVyLFxuICAgICAgICAgIGN1c3RvbVNka0lkOiBhcGx1cy5nZXRNZXRhSW5mbygnY3VzdG9tU2RrSWQnKSB8fCAnJyxcbiAgICAgICAgICBwbGF0Zm9ybVR5cGU6IHBsYXRmb3JtVHlwZS50b0xvd2VyQ2FzZSgpLFxuICAgICAgICB9LFxuICAgICAgICB0cmFja2VyRXZlbnRDb2RlOiBjb25maWcudHJhY2tlckV2ZW50Q29kZSxcbiAgICAgICAgdGl0bGU6IHRpdGxlLFxuICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgY2xpZW50OiBhcGx1cy5fYXBsdXNfY2xpZW50IHx8IHt9LFxuICAgICAgICB0aW1lWm9uZTogdXRpbFBhcmFtcy5nZXRUaW1lWm9uZSgpLFxuICAgICAgICBnb2tleTogdXNlckluZm8sIC8vIHV0aWxEYXNoLmFzc2lnbihzcG1JbmZvLCB1c2VySW5mbyksXG4gICAgICAgIGdta2V5OiB1c2VyZGF0YS5nbWtleSB8fCAnJyxcbiAgICAgICAgbWV0aG9kOiB0aGlzLm9wdGlvbnMuY29udGV4dC53aGVyZV90b19zZW5kLm1ldGhvZFxuICAgICAgfSwgdXNlckluZm8pO1xuICAgICAgXG4gICAgICByZXR1cm4gY29tbW9uUGFyYW1zO1xuICAgIH0sXG5cblxuICAgIGdldFB2UGFyYW1zOiBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyB2YXIgdGFyZ2V0VXJsID0gdGhpcy5vcHRpb25zLmNvbnRleHQud2hlcmVfdG9fc2VuZC51cmw7XG4gICAgICB2YXIgY29tbW9uUGFyYW1zID0gdGhpcy5nZXRDb21tb25QYXJhbXMoKTtcbiAgICAgIGlmICghdGhpcy5vcHRpb25zLmNvbmZpZy5pc19hdXRvKSB7XG4gICAgICAgIGNvbW1vblBhcmFtcy5zZGtfaW5mby5tYW5zbmRsb2cgPSAxO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdXRpbERhc2guYXNzaWduKGNvbW1vblBhcmFtcywge1xuICAgICAgICBldmVudF9jb2RlOiAnMjAwMScsXG4gICAgICAgIGxvZ3R5cGU6ICcxJyxcbiAgICAgICAgbG9na2V5OiB1dGlsVUEuaXNNb2JpbGUoKSA/ICcvbS5naWYnIDogJy92LmdpZicsXG4gICAgICAgIGV2ZW50X3RpbWVzdGFtcDogYXBsdXMuXyQuc2VuZF9wdl9jb3VudCA+IDAgPyBuZXcgRGF0ZSgpIDogYXBsdXMubG9nQ29uZmlnLnBhZ2VMb2FkVGltZSxcbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBnZXRIamxqUGFyYW1zOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgYyA9IHRoaXMub3B0aW9ucy5jb250ZXh0IHx8IHt9O1xuICAgICAgdmFyIHVzZXJkYXRhID0gYy51c2VyZGF0YSB8fCB7fTtcbiAgICAgIHZhciBoamxqUGFyYW1zID0ge1xuICAgICAgICBldmVudF9jb2RlOiBhcGx1c1N0YXRpYy5FVkVOVF9JRF9NQVBbdXNlcmRhdGEuZ21rZXldIHx8IGFwbHVzU3RhdGljLk9USEVSLFxuICAgICAgICBsb2d0eXBlOiAnMicsXG4gICAgICAgIGxvZ2tleTogdXNlcmRhdGEubG9na2V5LFxuICAgICAgICBldmVudF90aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICAgIC8vIG1hbnNuZGxvZzogJzEnLFxuICAgICAgfTtcbiAgICAgIHJldHVybiB1dGlsRGFzaC5hc3NpZ24odGhpcy5nZXRDb21tb25QYXJhbXMoKSwgaGpsalBhcmFtcyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIOS9leaXtuaJp+ihjHNlbmRwduaJp+ihjOWFpeWPo1xuICAgICAqIOi/lOWbnlwiZG9uZVwi57uI5q2i5Lit6Ze05Lu25omn6KGMXG4gICAgICogMS4gYXBsdXPpu5jorqTpnIDopoHph4fpm4bnmoTlj4LmlbA6IGJhc2ljTGlzdFxuICAgICAqIDIuIGJlYWNvbuaJqeWxleWPguaVsDogZXhwYXJhbXNcbiAgICAgKiAzLiBhcGx1c+m7mOiupOmcgOimgemHh+mbhueahOWuouaIt+err+WPguaVsDogZXh0cmFMaXN0XG4gICAgICog5Lit6YCU5aSE55CGXyTlhajlsYDlj5jph486IHByb2Nlc3NMb2Rhc2hEb2xsYXJcbiAgICAgKiA0LiBsb2NhbFN0b3JhZ2XkuK3lrZjlgqjnmoTkuIrkuIDpobVzcG3kv6Hmga86IHNwbWFidGVzdFxuICAgICAqIOS7peS4ijTpg6jliIbmi7zoo4XmiJBwdmRhdGFcbiAgICAgKlxuICAgICAqIEByZXR1cm4gXCJkb25lXCIgfHwgdW5kZWZpbmVkXG4gICAgICovXG4gICAgcnVuOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcGFyYW1zID0ge307XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmNvbmZpZy5yZWNvcmRUeXBlID09PSAnUFYnKSB7XG4gICAgICAgIHBhcmFtcyA9IHRoaXMuZ2V0UHZQYXJhbXMoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmFtcyA9IHRoaXMuZ2V0SGpsalBhcmFtcygpO1xuICAgICAgfVxuICAgICAgdGhpcy5vcHRpb25zLmNvbnRleHQud2hhdF90b19zZW5kLmxvZ2RhdGEgPSBwYXJhbXM7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL3BsdWdpbnMvbGliX2xvZy9taWRkbGV3YXJlL2NvbW1vbi93aGF0X3RvX3NlbmRfd2ViX2Nsb3VkLmpzXG4vLyBtb2R1bGUgaWQgPSA4NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIHByb2plY3QgLSBmaWxlcGF0aFxuICogcHZpZFxuICpcbiAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cbiAqXG4gKiBBdXRob3JzOlxuICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlsSGFzaCA9IHJlcXVpcmUoJy4vdXRpbEhhc2gnKTtcblxudmFyIGdldFJhbmRvbUlkID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgLyoqXG4gICAqIOeUn+aIkOacrOmhteeahCBwdiBpZFxuICAgKiBwdiBpZCDlj6rpnIDopoHlvZPliY3nlKjmiLfkvJror53llK/kuIDljbPlj6/vvIzov5nlhL/kvb/nlKjkuIDkuKogNiDkvY3nmoQgMTYg6L+b5Yi25pWw5a2XXG4gICAqL1xuICB2YXIgcm5kX3N0cnMgPSAnJztcbiAgdmFyIGNoYXJzID0gJzAxMjM0NTY3ODlhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ekFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaJztcbiAgdmFyIGhhbmRsZWQgPSBmYWxzZTtcbiAgdmFyIGNoYXI7XG5cbiAgLyoqXG4gICAqIOino+WGs+mDqOWIhiBzcG0g6KKrIEdGVyDlopnkuobnmoTmg4XlhrXvvIzlpoIgMjIuZ2xcbiAgICog5o6S6ZmkIHB2aWQg5LulIGdsIOW8gOWktOeahOaDheWGtVxuICAgKi9cbiAgZnVuY3Rpb24gaGFuZGxlUFZJZCAoY2hhclBvcykge1xuICAgIHZhciBjaGFyc1dpdGhvdXRHID0gJzAxMjM0NTY3ODlhYmNkZWZoaWprbG1ub3BxcnN0dXZ3eHl6QUJDREVGSElKS0xNTk9QUVJTVFVWV1hZWic7XG4gICAgdmFyIGNoYXJzV2l0aG91dEwgPSAnMDEyMzQ1Njc4OWFiY2RlZmdoaWprbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS01OT1BRUlNUVVZXWFlaJztcblxuICAgIGlmIChjaGFyUG9zID09IDEpIHtcbiAgICAgIHJldHVybiBjaGFyc1dpdGhvdXRHLnN1YnN0cihNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA2MCksIDEpO1xuICAgIH0gZWxzZSBpZiAoY2hhclBvcyA9PSAyKSB7XG4gICAgICByZXR1cm4gY2hhcnNXaXRob3V0TC5zdWJzdHIoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNjApLCAxKTtcbiAgICB9XG4gICAgcmV0dXJuICcwJztcbiAgfTtcblxuICB3aGlsZSAocm5kX3N0cnMubGVuZ3RoIDwgc2l6ZSkge1xuICAgIGNoYXIgPSBjaGFycy5zdWJzdHIoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNjIpLCAxKTtcbiAgICAvLyDlpITnkIbooqvlopnnmoTmg4XlhrXvvIznm67liY3lj6rpkojlr7lnbOW8gOWktOeahFxuICAgIGlmICghaGFuZGxlZCAmJiBybmRfc3Rycy5sZW5ndGggPD0gMiAmJiAoY2hhci50b0xvd2VyQ2FzZSgpID09ICdnJyB8fCBjaGFyLnRvTG93ZXJDYXNlKCkgPT0gJ2wnKSkge1xuICAgICAgaWYgKHJuZF9zdHJzLmxlbmd0aCA9PT0gMCAmJiBjaGFyLnRvTG93ZXJDYXNlKCkgPT0gJ2cnKSB7XG4gICAgICAgIGlmIChNYXRoLnJhbmRvbSgpIDwgMC41KSB7XG4gICAgICAgICAgY2hhciA9IGhhbmRsZVBWSWQoMSk7XG4gICAgICAgICAgaGFuZGxlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocm5kX3N0cnMubGVuZ3RoID09IDEgJiYgY2hhci50b0xvd2VyQ2FzZSgpID09ICdsJyAmJiBybmRfc3Rycy5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSA9PSAnZycpIHtcbiAgICAgICAgY2hhciA9IGhhbmRsZVBWSWQoMik7XG4gICAgICAgIGhhbmRsZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBybmRfc3RycyArPSBjaGFyO1xuICB9XG4gIHJldHVybiBybmRfc3Rycztcbn07XG5cbmZ1bmN0aW9uIGdldENoYXJzIChhcmdzLCBzaXplLCBkZWZhdWx0VmFsKSB7XG4gIGlmIChhcmdzKSB7XG4gICAgcmV0dXJuIHV0aWxIYXNoLmhhc2goZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3MpKS5zdWJzdHIoMCwgc2l6ZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGRlZmF1bHRWYWw7XG4gIH1cbn1cblxuZXhwb3J0cy5nZXRMb2dJZCA9IGZ1bmN0aW9uIChwYWdlVXJsLCBsb2dOYW1lKSB7XG4gIHZhciByYW5kb204Q2hhcnMgPSBnZXRSYW5kb21JZCg4KTtcbiAgdmFyIHJhbmRvbTRDaGFycyA9IHJhbmRvbThDaGFycy5zdWJzdHIoMCwgNCk7XG4gIHZhciByYW5kb202Q2hhcnMgPSByYW5kb204Q2hhcnMuc3Vic3RyKDAsIDYpO1xuICByZXR1cm4gW1xuICAgIGdldENoYXJzKHBhZ2VVcmwsIDQsIHJhbmRvbTRDaGFycyksXG4gICAgZ2V0Q2hhcnMobG9nTmFtZSwgNCwgcmFuZG9tNENoYXJzKSxcbiAgICByYW5kb202Q2hhcnNcbiAgXS5qb2luKCcnKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9saWJfdS91dGlscy9sb2dJZC5qc1xuLy8gbW9kdWxlIGlkID0gODVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiDov5Tlm55HTVTmoLzlvI/nmoTml7bljLrvvIzlpoLvvJpHTVQrMDU6NDUsIEdNVC0wNzowMCwgR01UKzA4OjAwXG4gKi9cbmV4cG9ydHMuZ2V0VGltZVpvbmUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBfdGltZVpvbmUgPSAtbmV3IERhdGUoKS5nZXRUaW1lem9uZU9mZnNldCgpIC8gNjA7XG4gIHZhciBfYW5kID0gJysnO1xuICBpZiAoX3RpbWVab25lIDwgMCkge1xuICAgIF9hbmQgPSAnLSc7XG4gIH1cbiAgdmFyIHpvbmUgPSBNYXRoLmFicyhwYXJzZUludChfdGltZVpvbmUpKTtcbiAgdmFyIHJlbWFpbmRlciA9IE1hdGguYWJzKHBhcnNlSW50KF90aW1lWm9uZSkgLSBfdGltZVpvbmUpO1xuICB2YXIgcmVtYWluZGVyWm9uZSA9ICcwMCc7XG4gIGlmIChyZW1haW5kZXIgPiAwKSB7XG4gICAgcmVtYWluZGVyWm9uZSA9IDYwICogcmVtYWluZGVyO1xuICB9XG4gIHJldHVybiAnR01UJyArIF9hbmQgKyAoem9uZSA+IDkgPyB6b25lIDogKCcwJyArIHpvbmUpKSArICc6JyArIHJlbWFpbmRlclpvbmU7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvcGx1Z2lucy9saWJfbG9nL21pZGRsZXdhcmUvY29tbW9uL3V0aWxQYXJhbXMuanNcbi8vIG1vZHVsZSBpZCA9IDg2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogYWxpbG9nL3MgLSBzcmMvcGx1Z2lucy9saWJfbG9nL21pZGRsZXdhcmUvY29tbW9uL2Nvb2tpZV9kYXRhLmpzXG4gKlxuICogY29va2llRGF0YVxuICpcbiAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cbiAqXG4gKiBBdXRob3JzOlxuICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlsRGFzaCA9IHJlcXVpcmUoJ0B1dGlscy91dGlsRGFzaCcpO1xudmFyIGNvb2tpZSA9IHJlcXVpcmUoJ0B1dGlscy9jb29raWUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7XG4gICAgLy8gLyoqXG4gICAgLy8gICog5Yid5aeL5YyW5qih5Z2XLCDkuKrmgKfljJbpg6jliIblrZDnsbvkuK3lrp7njrBcbiAgICAvLyAgKi9cbiAgICAvLyBpbml0OiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgLy8gICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIC8vIH0sXG5cbiAgICAvKipcbiAgICAgKiB3b3Jrbm9cbiAgICAgKiAgIDEuIGNvb2tpZS5nZXRDb29raWUoJ3dvcmtubycpXG4gICAgICogICAyLiBjb29raWUuZ2V0Q29va2llKCdlbXBsSWQnKVxuICAgICAqIEByZXR1cm4gXCJkb25lXCIgfHwgdW5kZWZpbmVkXG4gICAgICovXG4gICAgcnVuOiBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyDml6Xlv5fmlLbpm4blt6Xlj7dcbiAgICAgIHZhciBjb29raWVEYXRhID0ge307XG4gICAgICB2YXIgd24gPSBjb29raWUuZ2V0Q29va2llKCd3b3Jrbm8nKSB8fCBjb29raWUuZ2V0Q29va2llKCdlbXBsSWQnKTtcbiAgICAgIGlmICh3bikge1xuICAgICAgICBjb29raWVEYXRhLndvcmtubyA9IHduO1xuICAgICAgfVxuICAgICAgdmFyIGhuZyA9IGNvb2tpZS5nZXRIbmcoKTtcbiAgICAgIGlmIChobmcpIHtcbiAgICAgICAgY29va2llRGF0YS5faG5nID0gY29va2llLmdldEhuZygpO1xuICAgICAgfVxuICAgICAgdmFyIGQ7XG4gICAgICAvLyBjb25zb2xlLmxvZygnVE9ETyDliKTmlq1wdiBvciBoamxqJyk7XG4gICAgICBkID0gdGhpcy5vcHRpb25zLmNvbnRleHQud2hhdF90b19zZW5kLmxvZ2RhdGE7XG4gICAgICBkLmdva2V5ID0gdXRpbERhc2guYXNzaWduKGQuZ29rZXksIGNvb2tpZURhdGEpOyAgICAgIFxuXG4gICAgICByZXR1cm47XG4gICAgfVxuICB9O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL3BsdWdpbnMvbGliX2xvZy9taWRkbGV3YXJlL2NvbW1vbi9jb29raWVfZGF0YS5qc1xuLy8gbW9kdWxlIGlkID0gODdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBhbGlsb2cvcyAtIHNyYy9saWJfdS9wbHVnaW5zL3B2L3doYXRfdG9fc2VuZHB2X3VzZXJkYXRhLmpzXG4gKlxuICogIOaPkuS7tuS9nOeUqO+8muaUtumbhuW6lOeUqOaWueiHquWumuS5iXB25Y+C5pWwXG4gKiAgICAgICAgICAg5bm25bCG5pS26ZuG5Yiw55qE6Ieq5a6a5LmJ5Y+C5pWw5Lul5pWw57uE5qC85byP6L+95Yqg5YiwcHZkYXRh5ZCO6Z2i77yacHZkYXRhLmNvbmNhdCh1c2VyZGF0YSlcbiAqICBkZXBzOiB3aGF0X3RvX3NlbmRwdlxuICpcbiAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cbiAqXG4gKiBBdXRob3JzOlxuICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBmb3JtYXQgPSByZXF1aXJlKCdAdXRpbHMvZm9ybWF0Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ0B1dGlscy9pc0FycmF5Jyk7XG52YXIgdXRpbERhc2ggPSByZXF1aXJlKCdAdXRpbHMvdXRpbERhc2gnKTtcbnZhciB1dGlsR29sZGxvZyA9IHJlcXVpcmUoJ0B1dGlscy91dGlsR29sZGxvZycpO1xudmFyIGFwbHVzID0gdXRpbEdvbGRsb2cuZ2V0R2xvYmFsVmFsdWUoJ2FwbHVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG5cbiAgICAvKipcbiAgICAgKiDph4fpm4bkuKrmgKfljJblj4LmlbBcbiAgICAgKlxuICAgICAqIGdva2V5OlxuICAgICAqICAg6L+Z5Z2X5Li65a+55Y6G5Y+ydXNlcmRhdGHkvKDpgJLnmoTlhbzlrrnlgZrms5XvvIxUT0RP77ya5o6o5Yqo5bqU55So5pa55Y+Y5pu0XG4gICAgICogICDlupTnlKjmlrnkvKDpgJLnmoRnb2tleeagvOW8j+W6lOeUqOaWueiHquihjOWGs+Wumu+8jFxuICAgICAqICAgICDlpoIgZ29rZXk9XCJhPTEmYj0yXCIg5oiWIHtcImFcIjpbe1wia2V5XCI6MjAxNjEyMjYxNTUwLFwidmFsdWVcIjowLjF9LHtcImtleVwiOjIwMTYxMjI2MTYwMCxcInZhbHVlXCI6MC41fSx7XCJrZXlcIjoyMDE2MTIyNjE2MTAsXCJ2YWx1ZVwiOjF9XX1cbiAgICAgKiAgIOi/meWdl+mAu+i+keaYr+mAoOaIkGV4dGVuZGFyZ3PlhoXpg6jlh7rnjrDlpJrkuKrmlpzmnaDnmoTlhYPlh7bvvIHvvIHvvIFcbiAgICAgKiBwYWdlX2lkOlxuICAgICAqICAg5pyJcGFnZV9pZOWwseWcqHNwbWLkuK3mt7vliqDlrZDlj4LmlbBcbiAgICAgKiAgIOaXoHBhZ2VfaWTlsLHmuIXpmaRzcG1i5Lit55qE5a2Q5Y+C5pWwXG4gICAgICogc3BtX2NudFxuICAgICAqICAg5pu05pS55a6Mc3BtYuS9jei/mOmcgOimgeabtOaWsHNwbV9jbnQgQOiwi+WjqyBpbiAyMDE4LTAzLTIwICDku6XlhY10b1VU55qEc3BtLWNudOS4ouWkseWIhuahtuWPt1xuICAgICAqIOS4quaAp+WMluWPguaVsO+8mlxuICAgICAqICAgMS4gKGFwbHVz5qSN5YWlKTogPG1ldGEgbmFtZT1cImFwbHVzLWNwdmRhdGFcIiBjb250ZW50PVwiSlNPTnN0cmluZ1wiPlxuICAgICAqICAgMi4g5pa55rOV5Lyg5YWlOiBhcGx1cy5zZW5kUFYoe0NPTkZJR30sIHtVU0VSREFURX0pO1xuICAgICAqIOWPjeS9nOW8iueahOaWh+aho+WuvemrmDogX3B3LF9waFxuICAgICAqXG4gICAgICogQHJldHVybiB7T2JqZWN0fSB7Li4ufVxuICAgICAqL1xuICAgIGdldFVzZXJkYXRhOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBjb25maWcgPSB0aGlzLm9wdGlvbnMuY29uZmlnIHx8IHt9O1xuICAgICAgdmFyIGQgPSB7fTtcblxuICAgICAgaWYgKGNvbmZpZyAmJiAhY29uZmlnLmlzX2F1dG8pIHtcbiAgICAgICAgaWYgKGNvbmZpZy5nb2tleSkge1xuICAgICAgICAgIGlmICh0eXBlb2YgY29uZmlnLmdva2V5ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgZCA9IGZvcm1hdC5wYXJhbTJvYmooY29uZmlnLmdva2V5KTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcuZ29rZXkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBkID0gY29uZmlnLmdva2V5O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgY29tYm9Vc2VyZGF0YSA9IGZ1bmN0aW9uKF9kYXRhKSB7XG4gICAgICAgIGlmKGlzQXJyYXkoX2RhdGEpKXtcbiAgICAgICAgICBfZGF0YS5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pe1xuICAgICAgICAgICAgZCA9IHV0aWxEYXNoLmFzc2lnbihkLCBpdGVtKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgZCA9IHV0aWxEYXNoLmFzc2lnbihkLCBfZGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBjb21ib1VzZXJkYXRhKGFwbHVzLmdldE1ldGFJbmZvKCdhcGx1cy1jcHZkYXRhJykpO1xuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLm9wdGlvbnMuY29udGV4dCB8fCB7fTtcbiAgICAgIHZhciB1c2VyZGF0YSA9IGNvbnRleHQudXNlcmRhdGEgfHwge307XG4gICAgICBjb21ib1VzZXJkYXRhKHVzZXJkYXRhKTtcblxuICAgICAgcmV0dXJuIGQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIOWkhOeQhl8k5YWo5bGA5Y+Y6YePIC0tLS0tLSAyXG4gICAgICovXG4gICAgcHJvY2Vzc0xvZGFzaERvbGxhcjogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgY29uZmlnID0gdGhpcy5vcHRpb25zLmNvbmZpZyB8fCB7fTtcbiAgICAgIHZhciBfJCA9IHV0aWxHb2xkbG9nLmdldEdvbGRsb2dWYWwoJ18kJykgfHwge307XG4gICAgICBpZiAoY29uZmlnICYmIGNvbmZpZy5yZWZlcnJlcikge1xuICAgICAgICBfJC5wYWdlX3JlZmVycmVyID0gY29uZmlnLnJlZmVycmVyO1xuICAgICAgfVxuICAgICAgdXRpbEdvbGRsb2cuc2V0R29sZGxvZ1ZhbCgnXyQnLCBfJCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIOabtOaWsHByZe+8iOWcqOi/memHjOWBmueahOWOn+WboOaYr++8jHByZeWPguaVsOWxnuS6jmJhc2lj5Y+C5pWw77yM5L2G5pivdXNlcmRhdGHkuK3lpoLkvKDpgJLkuoZyZWZlcnJlcu+8jOWPr+S7peimhueblnByZe+8iVxuICAgICAqL1xuICAgIHVwZGF0ZVByZTogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgdmFyIF8kID0gdXRpbEdvbGRsb2cuZ2V0R29sZGxvZ1ZhbCgnXyQnKSB8fCB7fTtcbiAgICAgIGlmIChfJC5wYWdlX3JlZmVycmVyKSB7XG4gICAgICAgIGRhdGEucHJlID0gIF8kLnBhZ2VfcmVmZXJyZXI7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICog5L2V5pe25omn6KGMc2VuZHB25omn6KGM5YWl5Y+jXG4gICAgICog6L+U5ZueXCJkb25lXCLnu4jmraLkuK3pl7Tku7bmiafooYxcbiAgICAgKiBAcGFyYW0gW1N0cmluZ10gc3RhdGUg54q25oCBXG4gICAgICogQHBhcmFtIFtGdW5jdGlvbl0gY2IgIOWbnuiwg1xuICAgICAqIEByZXR1cm4gXCJkb25lXCIgfCB1bmRlZmluZWRcbiAgICAgKi9cbiAgICBydW46IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGQgPSB0aGlzLm9wdGlvbnMuY29udGV4dC53aGF0X3RvX3NlbmQubG9nZGF0YTtcbiAgICAgIHZhciB1c2VyZGF0YSA9IHV0aWxEYXNoLmFzc2lnbih0aGlzLmdldFVzZXJkYXRhKCksIGQudXNlcmRhdGEgfHwge30pO1xuICAgICAgdGhpcy5wcm9jZXNzTG9kYXNoRG9sbGFyKCk7XG5cbiAgICAgIGQuZ29rZXkgPSB1dGlsRGFzaC5hc3NpZ24oZC5nb2tleSwgdXNlcmRhdGEpO1xuICAgICAgZCA9IHRoaXMudXBkYXRlUHJlKGQpO1xuXG4gICAgICB0aGlzLm9wdGlvbnMuY29udGV4dC53aGF0X3RvX3NlbmQubG9nZGF0YSA9IGQ7XG4gICAgICB0aGlzLm9wdGlvbnMuY29udGV4dC51c2VyZGF0YSA9IGQuZ29rZXk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL3BsdWdpbnMvbGliX2xvZy9taWRkbGV3YXJlL3B2L3doYXRfdG9fc2VuZHB2X3VzZXJkYXRhLmpzXG4vLyBtb2R1bGUgaWQgPSA4OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIHByb2plY3QgLSBmaWxlcGF0aFxuICogZG9t5pON5L2c5bel5YW357G777yM6L+Z5Liq5Z+656GA5bel5YW357G75Lya6KKr5YW25LuW5bel5YW357G75byV55So77yM5pWF5Lil56aB5Zyo6L+Z6YeM5YaN5byV55So5YW25LuW5qih5Z2X5Lul5YWN5Ye6546w6Zeu6aKYXG4gKlxuICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuICpcbiAqIEF1dGhvcnM6XG4gKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG4gKi9cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobykge1xuICBpZiAoQXJyYXkuaXNBcnJheSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KG8pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAvQXJyYXkvLnRlc3QoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pKTtcbiAgfVxufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9saWJfdS91dGlscy9pc0FycmF5LmpzXG4vLyBtb2R1bGUgaWQgPSA4OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIGFsaWxvZy9zIC0gc3JjL2xpYl91L3BsdWdpbnMvcHYvd2hhdF90b19zZW5kcHZfdXNlcmRhdGFfd2ViLmpzXG4gKlxuICogIOaPkuS7tuS9nOeUqO+8muaUtumbhuW6lOeUqOaWueiHquWumuS5iXB25Y+C5pWwXG4gKiAgICAgICAgICAg5bm25bCG5pS26ZuG5Yiw55qE6Ieq5a6a5LmJ5Y+C5pWw5Lul5pWw57uE5qC85byP6L+95Yqg5YiwcHZkYXRh5ZCO6Z2i77yacHZkYXRhLmNvbmNhdCh1c2VyZGF0YSlcbiAqICBkZXBzOiB3aGF0X3RvX3NlbmRwdlxuICpcbiAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cbiAqXG4gKiBBdXRob3JzOlxuICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlsRXhpbmZvID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxFeGluZm8nKTtcbnZhciBnZXRFeFBhcmFtc09iaiA9IHJlcXVpcmUoJy4uL2dldEV4cGFyYW1zT2JqJyk7XG52YXIgZ2V0Q29va2llVXNlckluZm8gPSByZXF1aXJlKCcuLi9nZXRDb29raWVVc2VySW5mbycpO1xudmFyIHV0aWxHb2xkbG9nID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxHb2xkbG9nJyk7XG52YXIgYXNzaWduID0gcmVxdWlyZSgnQHV0aWxzL2Fzc2lnbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIC8qKlxuICAgICAqIOWFvOWuueWOhuWPsueahHBhZ2VfaWRcbiAgICAgKi9cbiAgICBnZXRQYWdlSWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjb25maWcgPSB0aGlzLm9wdGlvbnMuY29uZmlnIHx8IHt9O1xuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLm9wdGlvbnMuY29udGV4dCB8fCB7fTtcbiAgICAgIHZhciB1c2VyZGF0YSA9IGNvbnRleHQudXNlcmRhdGEgfHwge307XG4gICAgICByZXR1cm4gY29uZmlnLnBhZ2VfaWQgfHwgY29uZmlnLnBhZ2VpZCB8fCBjb25maWcucGFnZUlkIHx8IHVzZXJkYXRhLnBhZ2VfaWQ7XG4gICAgfSxcblxuICAgIHJlc2V0U3BtQjogZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFhcGx1cy5zcG1BUEkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIF8kID0gdXRpbEdvbGRsb2cuZ2V0R29sZGxvZ1ZhbCgnXyQnKSB8fCB7fTtcbiAgICAgIHZhciBfc3BtID0gXyQuc3BtIHx8IHt9O1xuICAgICAgdmFyIHNwbWIgPSBfc3BtLmRhdGEuYjtcbiAgICAgIGlmIChzcG1iKSB7XG4gICAgICAgIHZhciBwYWdlX2lkID0gdGhpcy5nZXRQYWdlSWQoKTtcbiAgICAgICAgaWYgKHBhZ2VfaWQpIHtcbiAgICAgICAgICBzcG1iID0gc3BtYi5zcGxpdCgnLycpWzBdICsgJy8nICsgcGFnZV9pZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzcG1iID0gc3BtYi5zcGxpdCgnLycpWzBdO1xuICAgICAgICB9XG4gICAgICAgIGFwbHVzLnNwbUFQSSAmJiBhcGx1cy5zcG1BUEkuc2V0QihzcG1iKTtcblxuICAgICAgICB2YXIgY250cyA9IF9zcG0uc3BtX2NudC5zcGxpdCgnLicpO1xuICAgICAgICBpZiAoY250cyAmJiBjbnRzLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgICBjbnRzWzFdID0gc3BtYjtcbiAgICAgICAgICBfc3BtLnNwbV9jbnQgPSBjbnRzLmpvaW4oJy4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgZ2V0RXhQYXJhbXNJbmZvOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZSA9IHV0aWxFeGluZm8uZ2V0RXhQYXJhbXMoKTtcbiAgICAgIHRoaXMub3B0aW9ucy5jb250ZXh0LndoYXRfdG9fc2VuZC5sb2dkYXRhLmV4cGFyYW1zID0gZTtcbiAgICAgIHJldHVybiBnZXRFeFBhcmFtc09iaihlKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICog5L2V5pe25omn6KGMc2VuZHB25omn6KGM5YWl5Y+jXG4gICAgICog6L+U5ZueXCJkb25lXCLnu4jmraLkuK3pl7Tku7bmiafooYxcbiAgICAgKiBAcGFyYW0gW1N0cmluZ10gc3RhdGUg54q25oCBXG4gICAgICogQHBhcmFtIFtGdW5jdGlvbl0gY2IgIOWbnuiwg1xuICAgICAqIEByZXR1cm4gXCJkb25lXCIgfCB1bmRlZmluZWRcbiAgICAgKi9cbiAgICBydW46IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5yZXNldFNwbUIoKTtcbiAgICAgIHZhciBnb2tleSA9IHRoaXMub3B0aW9ucy5jb250ZXh0LndoYXRfdG9fc2VuZC5sb2dkYXRhLmdva2V5O1xuICAgICAgZ29rZXkgPSBhc3NpZ24oZ29rZXksIGdldENvb2tpZVVzZXJJbmZvKCkpO1xuICAgICAgZ29rZXkgPSBhc3NpZ24odGhpcy5nZXRFeFBhcmFtc0luZm8oKSwgZ29rZXkpO1xuICAgICAgdGhpcy5vcHRpb25zLmNvbnRleHQud2hhdF90b19zZW5kLmxvZ2RhdGEuZ29rZXkgPSBnb2tleTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH07XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvcGx1Z2lucy9saWJfbG9nL21pZGRsZXdhcmUvcHYvd2hhdF90b19zZW5kcHZfdXNlcmRhdGFfd2ViLmpzXG4vLyBtb2R1bGUgaWQgPSA5MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIHByb2plY3QgLSBmaWxlcGF0aFxuICpcbiAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cbiAqXG4gKiBBdXRob3JzOlxuICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBlYWNoID0gcmVxdWlyZSgnLi9lYWNoJyk7XG52YXIgZm9ybWF0ID0gcmVxdWlyZSgnLi9mb3JtYXQnKTtcbnZhciB1dGlsRGFzaCA9IHJlcXVpcmUoJy4vdXRpbERhc2gnKTtcbnZhciB1dGlsRG9tID0gcmVxdWlyZSgnLi91dGlsRG9tJyk7XG52YXIgdXRpbEF0dHJpYnV0ZSA9IHJlcXVpcmUoJy4vdXRpbEF0dHJpYnV0ZScpO1xudmFyIHV0aWxBcnJheSA9IHJlcXVpcmUoJy4vdXRpbEFycmF5Jyk7XG52YXIgdXRpbExvZ2dlciA9IHJlcXVpcmUoJy4vdXRpbExvZ2dlcicpO1xudmFyIGFwbHVzU3RhdGljID0gcmVxdWlyZSgnLi9hcGx1c1N0YXRpYycpO1xuXG4vKipcbiAqIHBhcmFtIHRvIGFycmF5XG4gKiAyMDE2LTA4LTI0IOaUvuW8gO+8jOeUqOadpeWkhOeQhmV4cGFyYW1zIEDosIvlo6tcbiAqIOWwhuS4gOS4queugOWNleeahOW9ouWmgiBhPTEmYj0yJmM9MyDov5nmoLfnmoTlj4LmlbDovazljJbkuLrnroDljZXnmoQgYXJyYXkg5qC85byP77yM5aaC77yaXG4gKiBbW1wiYVwiLCBcIjFcIl0sIFtcImJcIiwgXCIyXCJdLCBbXCJjXCIsIFwiM1wiXV1cbiAqXG4gKiBAcGFyYW0gcGFyYW1zIHtTdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIHBhcmFtMmFyciAocGFyYW1zKSB7XG4gIHZhciBhID0gcGFyYW1zLnNwbGl0KFwiJlwiKSxcbiAgICBpID0gMCwgbCA9IGEubGVuZ3RoLFxuICAgIGl0ZW0sXG4gICAgYXJyID0gW107XG4gIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgaXRlbSA9IGFbaV0uc3BsaXQoXCI9XCIpO1xuICAgIGFyci5wdXNoKFtpdGVtLnNoaWZ0KCksIGl0ZW0uam9pbihcIj1cIildKTtcbiAgfVxuXG4gIHJldHVybiBhcnI7XG59O1xuXG4vKipcbiAqIOWwhm1ldGHphY3nva7nmoRleHBhcmFtc+WQiOW5tuWIsGJlYWNvbui+k+WHuueahGV4cGFyYW1z5LiKXG4gKiBAcGFyYW1zIHtTdHJpbmd9IGJlYWNvbkV4cGFyYW1zXG4gKiBAcGFyYW1zIHtTdHJpbmd9IG1ldGFFeHBhcmFtc1xuICpcbiAqIEByZXR1cm4ge1N0cmluZ30gZXhwYXJhbXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2VFeHBhcmFtcyAoYmVhY29uRXhwYXJhbXMsIG1ldGFFeHBhcmFtcykge1xuICB2YXIgYmV4cGFyYW1zID0gJ2FwbHVzJnNpZHg9YXBsdXNTaWRleCZja3g9YXBsdXNDa3gnO1xuICB2YXIgZGVmYXVsdEV4cGFyYW1zID0gYmVhY29uRXhwYXJhbXMgfHwgYmV4cGFyYW1zO1xuICB0cnkge1xuICAgIGlmIChtZXRhRXhwYXJhbXMpIHtcbiAgICAgIHZhciBtZXRhT2JqID0gZm9ybWF0LnBhcmFtMm9iaihtZXRhRXhwYXJhbXMpO1xuICAgICAgdmFyIGJsYWNrcyA9IFthcGx1c1N0YXRpYy5BUExVUywgJ2NuYScsIGFwbHVzU3RhdGljLlNQTV9DTlQsIGFwbHVzU3RhdGljLlNQTV9VUkwsIGFwbHVzU3RhdGljLlNQTV9QUkUsICdsb2d0eXBlJywgJ3ByZScsICd1aWRhcGx1cycsICdhc2lkJywgJ3NpZHgnLCAndHJpZCcsICdnb2tleSddO1xuICAgICAgZWFjaChibGFja3MsIGZ1bmN0aW9uKGspIHtcbiAgICAgICAgaWYgKG1ldGFPYmouaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgICB1dGlsTG9nZ2VyLmxvZ2dlcih7bXNnOiAnQ2FuIG5vdCBpbmplY3Qga2V5d29yZHM6ICcgKyBrfSk7XG4gICAgICAgICAgZGVsZXRlIG1ldGFPYmpba107XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgZGVsZXRlIG1ldGFPYmpbJyddOyAvLyDnqbrnmb1rZXnkuZ/np7vpmaTmjolcblxuICAgICAgdmFyIHRtcFBhcmFtID0gJyc7XG4gICAgICAvLyDmnIliZWFjb27phY3nva7nmoTmg4XlhrVcbiAgICAgIGlmIChiZWFjb25FeHBhcmFtcykge1xuICAgICAgICB2YXIgaW5kZXggPSBiZWFjb25FeHBhcmFtcy5tYXRjaCgvYXBsdXMmLykuaW5kZXg7XG4gICAgICAgIHZhciBiZWFjb25PYmogPSBpbmRleCA+IDAgPyBmb3JtYXQucGFyYW0yb2JqKGJlYWNvbkV4cGFyYW1zLnN1YnN0cmluZygwLCBpbmRleCkpIDoge307XG4gICAgICAgIGRlbGV0ZSBiZWFjb25PYmpbJyddO1xuICAgICAgICB0bXBQYXJhbSA9IGZvcm1hdC5vYmoycGFyYW0odXRpbERhc2guYXNzaWduKGJlYWNvbk9iaiwgbWV0YU9iaikpICsgJyYnICsgYmVhY29uRXhwYXJhbXMuc3Vic3RyaW5nKGluZGV4LCBiZWFjb25FeHBhcmFtcy5sZW5ndGgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8g5pegYmVhY29u6YWN572u55qE5oOF5Ya1XG4gICAgICAgIHRtcFBhcmFtID0gZm9ybWF0Lm9iajJwYXJhbShtZXRhT2JqKSArICcmJyArIGJleHBhcmFtcztcbiAgICAgIH1cbiAgICAgIHJldHVybiB0bXBQYXJhbTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGRlZmF1bHRFeHBhcmFtcztcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZGVmYXVsdEV4cGFyYW1zO1xuICB9XG59O1xuZXhwb3J0cy5tZXJnZUV4cGFyYW1zID0gbWVyZ2VFeHBhcmFtcztcblxuXG5mdW5jdGlvbiBnZXRFeFBhcmFtc0Zyb21NZXRhICgpIHtcbiAgdmFyIF8kID0gYXBsdXMgJiYgYXBsdXMuXyQgPyBhcGx1cy5fJCA6IHt9O1xuICB2YXIgbWV0YV9pbmZvID0gXyQubWV0YV9pbmZvIHx8IHt9O1xuICByZXR1cm4gbWV0YV9pbmZvWydhcGx1cy1leHBhcmFtcyddIHx8ICcnO1xufTtcblxuLy8gZXhwYXJhbXPlj4LmlbAtLS0tLS0gMlxuZnVuY3Rpb24gZ2V0RXhQYXJhbXMgKCkge1xuICB2YXIgY3VycmVudF9ub2RlID0gdXRpbERvbS5nZXRDdXJyZW50Tm9kZSgpO1xuICB2YXIgYl9leHBhcmFtcyA9IHV0aWxBdHRyaWJ1dGUudHJ5VG9HZXRBdHRyaWJ1dGUoY3VycmVudF9ub2RlLCAnZXhwYXJhbXMnKTtcbiAgdmFyIGV4cGFyYW1zID0gbWVyZ2VFeHBhcmFtcyhiX2V4cGFyYW1zLCBnZXRFeFBhcmFtc0Zyb21NZXRhKCkpIHx8ICcnO1xuICByZXR1cm4gZXhwYXJhbXMgJiYgZXhwYXJhbXMucmVwbGFjZSgvJmFtcDsvZywgXCImXCIpLnJlcGxhY2UoL1xcYnVzZXIoaXxJKWQ9LywgXCJ1aWRhcGx1cz1cIik7XG59O1xuZXhwb3J0cy5nZXRFeFBhcmFtcyA9IGdldEV4UGFyYW1zO1xuXG4vKipcbiAqIOWHuuS6jua1gemHj+eahOiAg+iZke+8jGJlYWNvbui+k+WHuueahGV4cGFyYW1z5Y+q5Y+WIGV4cGFyYW1zX2tleV9uYW1lc++8iOingemFjee9ru+8iSDlhoXnmoTlh6DkuKrlrZfmrrVcbiAqIOiLpWV4cGFyYW1z5YaF5pyJdXNlcmlkIOaIluiAhSDlnKjlj5HpgIHnmoRQVumSn3VpZGFwbHVz5pyJ5YC8LCDliJnlnKjku6Tnrq3or7fmsYLnmoRnb2tleeWGheS5n+i/veWKoHVpZHBhbHVz5Y+C5pWwXG4gKiDoi6VleHBhcmFtc+WGheacieS8oOWFpXBjX2kvcHVfaSwg5YiZ5Zyo5Luk566t6K+35rGC55qEZ29rZXnlhoXkuZ/pu5jorqTov73liqBwY19pL3B1X2nlj4LmlbBcbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9IHJzXG4gKi9cbmV4cG9ydHMuZ2V0RXhwYXJhbXNJbmZvcyA9IGZ1bmN0aW9uKGV4cGFyYW1zX2tleV9uYW1lcywgbWV0YV9leGluZm8pIHtcbiAgdmFyIHJzID0ge307XG4gIHZhciBrZXlzID0gZXhwYXJhbXNfa2V5X25hbWVzIHx8IFsndWlkYXBsdXMnLCAncGNfaScsICdwdV9pJ107XG4gIHZhciB0bXBfaW5mbyA9IGdldEV4UGFyYW1zKCkgfHwgJyc7XG4gIHRtcF9pbmZvID0gdG1wX2luZm8ucmVwbGFjZSgvJmFwbHVzJi8sICcmJyk7XG4gIHZhciB0bXBfYXJyID0gcGFyYW0yYXJyKHRtcF9pbmZvKSB8fCBbXTtcblxuICB2YXIgY29uZiA9IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gdXRpbEFycmF5LmluZGV4b2Yoa2V5cywgaykgPiAtMTtcbiAgfTtcbiAgLy8g5Ye65LqO5rWB6YeP55qE6ICD6JmR77yMYmVhY29u6L6T5Ye655qEZXhwYXJhbXPlj6rlj5YgIGV4cGFyYW1zX2tleV9uYW1lc++8iOingemFjee9ru+8ieWGheeahOWHoOS4quWtl+autVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRtcF9hcnIubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdG1wX29iaiA9IHRtcF9hcnJbaV07XG4gICAgdmFyIGsgPSB0bXBfb2JqWzBdIHx8ICcnO1xuICAgIHZhciB2ID0gdG1wX29ialsxXSB8fCAnJztcbiAgICBpZiAoayAmJiB2ICYmIChtZXRhX2V4aW5mbyA9PT0gJ0VYUEFSQU1TJyB8fCBjb25mKGspKSkge1xuICAgICAgcnNba10gPSB2O1xuICAgIH1cbiAgfVxuICByZXR1cm4gcnM7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2xpYl91L3V0aWxzL3V0aWxFeGluZm8uanNcbi8vIG1vZHVsZSBpZCA9IDkxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBmb3JtYXQgPSByZXF1aXJlKCdAdXRpbHMvZm9ybWF0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleHBhcmFtcykge1xuICB2YXIgcnMgPSB7fTtcbiAgdHJ5IHtcbiAgICAvLyB2YXIgZXhwYXJhbXMgPSB1dGlsRXhpbmZvLmdldEV4UGFyYW1zKCk7XG4gICAgLy8gdGhpcy5vcHRpb25zLmNvbnRleHQud2hhdF90b19zZW5kLmxvZ2RhdGEuZXhwYXJhbXMgPSBleHBhcmFtcztcbiAgICB2YXIgdG1wT2JqID0gZm9ybWF0LnBhcmFtMm9iaihleHBhcmFtcy5yZXBsYWNlKC8mYW1wOy9nLCAnJicpLnJlcGxhY2UoL1xcYnVzZXIoaXxJKWQ9LywgJ3VpZGFwbHVzPScpLnJlcGxhY2UoLyZhcGx1cyYvLCAnJicpKTtcbiAgICAvLyDku4Xlj5YgWyd1aWRhcGx1cycsICdwY19pJywgJ3B1X2knXSDkuInkuKrlgLxcbiAgICBpZiAodG1wT2JqLnVpZGFwbHVzKSB7XG4gICAgICBycy51aWRhcGx1cyA9IHRtcE9iai51aWRhcGx1cztcbiAgICB9XG4gICAgcnMucGNfaSA9IHRtcE9iai5wY19pO1xuICAgIHJzLnB1X2kgPSB0bXBPYmoucHVfaTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUgJiYgY29uc29sZS5sb2coZSk7XG4gIH1cbiAgcmV0dXJuIHJzO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9wbHVnaW5zL2xpYl9sb2cvbWlkZGxld2FyZS9nZXRFeHBhcmFtc09iai5qc1xuLy8gbW9kdWxlIGlkID0gOTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGNvb2tpZSA9IHJlcXVpcmUoJ0B1dGlscy9jb29raWUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgZCA9IHt9O1xuICAvLyDml6Xlv5fmlLbpm4blt6Xlj7dcbiAgdmFyIHduID0gY29va2llLmdldENvb2tpZSgnd29ya25vJykgfHwgY29va2llLmdldENvb2tpZSgnZW1wbElkJyk7XG4gIGlmICh3bikge1xuICAgIGQud29ya25vID0gd247XG4gIH1cbiAgdmFyIGhuZyA9IGNvb2tpZS5nZXRIbmcoKTtcbiAgaWYgKGhuZykge1xuICAgIGQuX2huZyA9IGNvb2tpZS5nZXRIbmcoKTtcbiAgfVxuICByZXR1cm4gZDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9wbHVnaW5zL2xpYl9sb2cvbWlkZGxld2FyZS9nZXRDb29raWVVc2VySW5mby5qc1xuLy8gbW9kdWxlIGlkID0gOTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBhbGlsb2cvcyAtIHNyYy9saWJfYi9jb25maWcvcGx1Z2lucy93aGF0X3NlbmRwdl90b191dDIuanNcbiAqXG4gKiAg5L2c55So77ya5aaC5p6c5b2T5YmN546v5aKD5ruh6LazdG9VVOadoeS7tu+8jOWImeWwhuaUtumbhuWPkemAgeiHs1VU55qE5Y+C5pWw77yMXG4gKiAgICAgICDlubblsIbmlLbpm4bliLDnmoTlj4LmlbDlrZjmlL7liLDkuIrkuIvmlofnjq/looPkuK06IGNvbnRleHQud2hlcmVfdG9fc2VuZHB2LnB2ZGF0YVRvVVRcbiAqICBkZXBzOiAgd2hlcmVfdG9fc2VuZHB2XG4gKlxuICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuICpcbiAqIEF1dGhvcnM6XG4gKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWwgPSByZXF1aXJlKCdAdXRpbHMvdXRpbCcpO1xudmFyIHV0aWxBcnJheSA9IHJlcXVpcmUoJ0B1dGlscy91dGlsQXJyYXknKTsgXG52YXIgdXRpbERhc2ggPSByZXF1aXJlKCdAdXRpbHMvdXRpbERhc2gnKTtcbnZhciB1dGlsR29sZGxvZyA9IHJlcXVpcmUoJ0B1dGlscy91dGlsR29sZGxvZycpO1xudmFyIGNvb2tpZSA9IHJlcXVpcmUoJ0B1dGlscy9jb29raWUnKTtcbnZhciB1dGlsVXJsID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxVcmwnKTtcbnZhciBhcGx1c1N0YXRpYyA9IHJlcXVpcmUoJ0B1dGlscy9hcGx1c1N0YXRpYycpO1xuXG4vKipcbiAqIOa4heeQhuaJk+eCueWPguaVsFxuICog5bCG5omA5pyJ5YC85Li656m655qE5Y+C5pWw5Y675o6J77yIYXBsdXPpmaTlpJbvvInvvJtcbiAqIOWmguaenOaciemHjeWkjeeahOWPguaVsO+8jOWPquS/neeVmeacgOWQjuS4gOS4qlxuICogQHBhcmFtIGRhdGEge0FycmF5fVxuICovXG5mdW5jdGlvbiBjbGVhblBhcmFtcyhkYXRhKSB7XG4gIHZhciBuZXdfcGFyYW1zID0gW107XG4gIHZhciBpO1xuICB2YXIgaXRlbTtcbiAgdmFyIGtleXMgPSB7fTtcbiAgdmFyIGs7XG4gIHZhciB2O1xuXG4gIGZvciAoaSA9IGRhdGEubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBpdGVtID0gZGF0YVtpXTtcbiAgICBrID0gaXRlbVswXTtcbiAgICBpZiAoayAmJiBrLmluZGV4T2YodXRpbC5zX3BsYWluX29iaikgPT0gLTEgJiYga2V5cy5oYXNPd25Qcm9wZXJ0eShrKSkgY29udGludWU7XG4gICAgdiA9IGl0ZW1bMV07XG4gICAgaWYgKGsgPT0gJ2FwbHVzJyB8fCB2KSB7XG4gICAgICBuZXdfcGFyYW1zLnVuc2hpZnQoW2ssIHZdKTtcbiAgICAgIGtleXNba10gPSAxO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdfcGFyYW1zO1xufTtcblxuLyoqXG4gKiDmuIXnkIZ0b1VU5omT54K55Y+C5pWw77yM5Y676Zmk77yaXG4gKiBsb2d0eXBlXG4gKiBjYWNoZVxuICogc2NyXG4gKiA6Oi1wbGFpbi14eHhcbiAqIHNwbS1jbnRcbiAqIEBwYXJhbSBkYXRhXG4gKi9cbmZ1bmN0aW9uIGNsZWFuUGFyYW1zRm9yVG9VVChkYXRhKSB7XG4gIHZhciBuZXdfcGFyYW1zID0gW10sXG4gICAgaSxcbiAgICBpdGVtLFxuICAgIGssIHYsXG4gICAgZXhjbHVkZVBhcm1zID0ge1xuICAgICAgXCJsb2d0eXBlXCI6IHRydWUsXG4gICAgICBcImNhY2hlXCI6IHRydWUsXG4gICAgICBcInNjclwiOiB0cnVlLFxuICAgICAgXCJzcG0tY250XCI6IHRydWVcbiAgICB9O1xuXG4gIGZvciAoaSA9IGRhdGEubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBpdGVtID0gZGF0YVtpXTtcbiAgICBrID0gaXRlbVswXTtcbiAgICB2ID0gaXRlbVsxXTtcbiAgICBpZiAoKHV0aWxEYXNoLmlzU3RhcnRXaXRoKGssIHV0aWwuc19wbGFpbl9vYmopICYmICF1dGlsRGFzaC5pc1N0YXJ0V2l0aChrLCB1dGlsLm1rUGxhaW5LZXlGb3JFeHBhcmFtcygpKSkgfHwgZXhjbHVkZVBhcm1zW2tdKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgLy8gMjAxNi0wOC0yNCDnkKzlrZDpnIDmsYLvvIxleHBhcmFtc+WNleeLrOWkhOeQhu+8jHdpbmR2YW5l6YeM6ZyA6KaBIEDosIvlo6tcbiAgICBpZiAodXRpbERhc2guaXNTdGFydFdpdGgoaywgdXRpbC5ta1BsYWluS2V5Rm9yRXhwYXJhbXMoKSkpIHtcbiAgICAgIHZhciBleHBhcmFtc0FyciA9IHV0aWwucGFyYW0yYXJyKHYpO1xuICAgICAgaWYgKHR5cGVvZiBleHBhcmFtc0FyciA9PT0gJ29iamVjdCcgJiYgZXhwYXJhbXNBcnIubGVuZ3RoID4gMCkge1xuICAgICAgICBmb3IgKHZhciBqID0gZXhwYXJhbXNBcnIubGVuZ3RoIC0gMTsgaiA+PSAwOyBqLS0pIHtcbiAgICAgICAgICB2YXIgZUl0ZW0gPSBleHBhcmFtc0FycltqXTtcbiAgICAgICAgICAvLyDnqbrlgLzkuI3pnIDopoFcbiAgICAgICAgICBpZiAoZUl0ZW0gJiYgZUl0ZW1bMV0pIHtcbiAgICAgICAgICAgIG5ld19wYXJhbXMudW5zaGlmdChbZUl0ZW1bMF0sIGVJdGVtWzFdXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgbmV3X3BhcmFtcy51bnNoaWZ0KFtrLCB2XSk7XG4gIH1cbiAgcmV0dXJuIG5ld19wYXJhbXM7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIC8vIC8vIOWIneWni+WMluaooeWdl1xuICAgIC8vIGluaXQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAvLyAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgLy8gfSxcblxuICAgIC8vIOWFs+mUruivjeS4jeWFgeiuuOW6lOeUqOaWueimhuebllxuICAgIGtleUlzQXZhaWxhYmxlOiBmdW5jdGlvbihrKSB7XG4gICAgICB2YXIgYmxhY2tzID0gWydmdW5jdHlwZScsICdmdW5jSWQnLCAnc3BtLWNudCcsICdzcG0tdXJsJywgJ3NwbS1wcmUnLCAnX2lzaDUnLCAnX2lzX2cydScsICdfaDV1cmwnLCAnY25hJywgJ2lzb25lcGFnZScsICdsdmVyJywgJ2pzdmVyJ107XG4gICAgICBpZih1dGlsQXJyYXkuaW5kZXhvZihibGFja3MsIGspID09PSAtMSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgLy8g5bey57uP5ZKMVVTnuqblrprlpb3vvIzkvKDpgJLnu5lVVOeahOS6jOe6p+WPguaVsOWPquaUr+aMgeWfuuacrOaVsOaNruexu+Wei++8jOS4jeaUr+aMgeWvueixoVxuICAgIHZhbElzQXZhaWxhYmxlOiBmdW5jdGlvbih2KSB7XG4gICAgICBpZiAodHlwZW9mIHYgPT09ICdvYmplY3QnIHx8IHR5cGVvZiB2ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG5cbiAgICB1cFV0RGF0YTogZnVuY3Rpb24oZCwgb2JqKSB7XG4gICAgICB2YXIgX3NlbGYgPSB0aGlzO1xuICAgICAgZCA9IGQgPyBkIDoge307XG4gICAgICBpZiAob2JqICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGZvciAodmFyIGsgaW4gb2JqKSB7XG4gICAgICAgICAgdmFyIHYgPSBvYmpba107XG4gICAgICAgICAgaWYoayAmJiBfc2VsZi52YWxJc0F2YWlsYWJsZSh2KSAmJiBfc2VsZi5rZXlJc0F2YWlsYWJsZShrKSkge1xuICAgICAgICAgICAgZFtrXSA9IHY7IC8vIOiHquWumuS5ieWPguaVsOe7n+e7n+mcgOimgeWKoFwiX1wi5YmN57yAXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZDtcbiAgICB9LFxuXG4gICAgZ2V0VG9VdERhdGE6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfJCA9IHV0aWxHb2xkbG9nLmdldEdvbGRsb2dWYWwoJ18kJykgfHwge307XG4gICAgICB2YXIgc3BtID0gXyQuc3BtIHx8IHt9O1xuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLm9wdGlvbnMuY29udGV4dCB8fCB7fTtcbiAgICAgIHZhciB3aGF0X3RvX3NlbmQgPSBjb250ZXh0LndoYXRfdG9fc2VuZCB8fCB7fTtcbiAgICAgIHZhciBsb2dkYXRhID0gd2hhdF90b19zZW5kLmxvZ2RhdGEgfHwge307XG4gICAgICB2YXIgc2RrX2luZm8gPSBsb2dkYXRhLnNka19pbmZvIHx8IHt9O1xuICAgICAgdmFyIGV0YWcgPSB0aGlzLm9wdGlvbnMuY29udGV4dC5ldGFnIHx8IHt9O1xuXG4gICAgICB2YXIgZXhwYXJhbXMgPSBjbGVhblBhcmFtc0ZvclRvVVQoY2xlYW5QYXJhbXMobG9nZGF0YS5leHBhcmFtcyB8fCBbXSkpO1xuICAgICAgZXhwYXJhbXMgPSB1dGlsLmFycjJvYmooZXhwYXJhbXMpO1xuICAgICAgLy8gdmFyIHVzZXJkYXRhID0gY2xlYW5QYXJhbXNGb3JUb1VUKGNsZWFuUGFyYW1zKGNvbnRleHQudXNlcmRhdGEgfHwgW10pKTtcbiAgICAgIC8vIHVzZXJkYXRhID0gdXRpbC5hcnIyb2JqKHVzZXJkYXRhKTtcbiAgICAgIHZhciB1c2VyZGF0YSA9IGNvbnRleHQudXNlcmRhdGE7XG4gICAgICB2YXIgcGFnZXVybCA9IGxvY2F0aW9uLmhyZWY7XG5cbiAgICAgIHZhciBkID0ge1xuICAgICAgfTtcbiAgICAgIC8vIC0tLS0yMDE3MDMyNyBhcGx1c+aWsOWinumcgOaxgiBA5Lmd6ZShKDAyNzcxNylcbiAgICAgIC8vIDEuwqBhcGx1c+WinuWKoCBzY23jgIEgaXNzYj0xKOWmguaenHVybOWQjumdouaciXBvaW505Y+C5pWw77yJ44CBIHBnMXN0ZXBrIOS4ieS4quWPguaVsO+8jOi/meS4ieS4quWPguaVsOmDvea2ieWPilVSTOWPguaVsOino+aekFxuICAgICAgdmFyIHNjbSA9IHV0aWxVcmwuZ2V0UGFyYW1Gcm9tVXJsKCdzY20nLCBwYWdldXJsKSB8fCAnJztcbiAgICAgIGlmIChzY20pIHtcbiAgICAgICAgZFsnc2NtJ10gPSBzY207XG4gICAgICB9XG4gICAgICB2YXIgcGcxc3RlcGsgPSB1dGlsVXJsLmdldFBhcmFtRnJvbVVybCgncGcxc3RlcGsnLCBwYWdldXJsKSB8fCAnJztcbiAgICAgIGlmIChwZzFzdGVwaykge1xuICAgICAgICBkWydwZzFzdGVwayddID0gcGcxc3RlcGs7XG4gICAgICB9XG4gICAgICB2YXIgcG9pbnQgPSB1dGlsVXJsLmdldFBhcmFtRnJvbVVybCgncG9pbnQnLCBwYWdldXJsKSB8fCAnJztcbiAgICAgIGlmIChwb2ludCkge1xuICAgICAgICBkWydpc3NiJ10gPSAxO1xuICAgICAgfVxuICAgICAgaWYgKHNka19pbmZvICYmIHNka19pbmZvLm1hbnNuZGxvZykge1xuICAgICAgICBkLm1hbnNuZGxvZyA9IHNka19pbmZvLm1hbnNuZGxvZztcbiAgICAgIH1cblxuICAgICAgZCA9IHRoaXMudXBVdERhdGEoZCwgZXhwYXJhbXMpOyAgLy8gYmVhY29u5Z+L54K555qE5bqU55So5Y+C5pWwXG4gICAgICBkID0gdGhpcy51cFV0RGF0YShkLCBsb2dkYXRhLmdva2V5KTtcbiAgICAgIGQgPSB0aGlzLnVwVXREYXRhKGQsIHVzZXJkYXRhKTsgIC8vIOW6lOeUqOaWuemAmui/h3NlbmRQVuaOpeWPo+S8oOmAkueahHB25Y+C5pWwXG5cbiAgICAgIC8vIOWPguaVsOexu+Wei+S4gO+8mumcgOimgVVU54m55q6K5aSE55CG55qE77yIZnVuY3R5cGXvvIxmdW5jSWTvvIx1cmzvvIxsb2drZXnvvIlcbiAgICAgIGQuZnVuY3R5cGUgPSAncGFnZSc7XG4gICAgICBkLmZ1bmNJZCA9ICcyMDAxJztcbiAgICAgIGQudXJsID0gKGxvY2F0aW9uLnByb3RvY29sIHx8ICdodHRwczonKSArICcvLycgKyBsb2NhdGlvbi5ob3N0ICsgbG9jYXRpb24ucGF0aG5hbWU7IC8vIGxvY2F0aW9uLm9yaWdpbiArIGxvY2F0aW9uLnBhdGhuYW1lO1xuXG4gICAgICAvLyDlj4LmlbDnsbvlnovkuozvvJrkuI3pnIDopoFVVOeJueauiuWkhOeQhueahO+8iOWFtuS7lmFwbHVz6Ieq5a6a5LmJa2V5XFx2YWx1Ze+8iWtleemcgOimgeS4i+WIkue6v+W8gOWktFxuICAgICAgZC5faXNoNSA9ICcxJzsgICAgLy8gVVTlv4XpobvnmoTlsZ7mgKfvvIzlhpnmrbvljbPlj69cbiAgICAgIGQuX2g1dXJsID0gcGFnZXVybDtcbiAgICAgIGQuX3RvVVQgPSAyO1xuICAgICAgZC5fYnJpZGdlTmFtZSA9ICdXaW5kVmFuZSc7XG4gICAgICBkLl9icmlkZ2VWZXJzaW9uID0gJzMuMC40JztcblxuICAgICAgLy8g5Y+C5pWw57G75Z6L5LiJ77ya5LiN6ZyA6KaBVVTnibnmrorlpITnkIbvvIzkuJRrZXnml6DkuIvliJLnur/liY3nvIBcbiAgICAgIGlmIChzcG0uc3BtX2NudCkgZFthcGx1c1N0YXRpYy5TUE1fQ05UXSA9IHNwbS5zcG1fY250IHx8ICcnO1xuICAgICAgaWYgKHNwbS5zcG1fdXJsKSBkW2FwbHVzU3RhdGljLlNQTV9VUkxdID0gc3BtLnNwbV91cmwgfHwgJyc7XG4gICAgICBpZiAoc3BtLnNwbV9wcmUpIGRbYXBsdXNTdGF0aWMuU1BNX1BSRV0gPSBzcG0uc3BtX3ByZSB8fCAnJztcblxuICAgICAgZC5jbmEgPSBldGFnLmNuYSB8fCBjb29raWUuZ2V0Q29va2llQ25hKCdjbmEnKTtcbiAgICAgIGQubHZlciA9IHNka19pbmZvLmx2ZXI7XG4gICAgICBkLmpzdmVyID0gc2RrX2luZm8uanN2ZXI7XG4gICAgICBkLnB2ZXIgPSAnMS4wLjAnO1xuICAgICAgZC5pc29uZXBhZ2UgPSAtMTtcbiAgICAgIHZhciB1dHBhcmFtQ250ID0gYXBsdXMuZ2V0TWV0YUluZm8oJ2FwbHVzLXV0cGFyYW0nKTtcbiAgICAgIGlmICh1dHBhcmFtQ250KSB7XG4gICAgICAgIGRbJ3V0cGFyYW0tY250J10gPSBKU09OLnN0cmluZ2lmeSh1dHBhcmFtQ250KTtcbiAgICAgIH1cbiAgICAgIGQuX2lzX2cydV8gPSAxO1xuICAgICAgZC5fc2xvZyA9IDE7XG4gICAgICByZXR1cm4gZDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogcHblj5HpgIHliLDlk6rph4zljrtcbiAgICAgKiDov5Tlm55cImRvbmVcIue7iOatouS4remXtOS7tuaJp+ihjFxuICAgICAqIEBwYXJhbSBbU3RyaW5nXSBzdGF0ZSDnirbmgIFcbiAgICAgKiBAcGFyYW0gW0Z1bmN0aW9uXSBjYiAg5Zue6LCDXG4gICAgICogQHJldHVybiBcImRvbmVcIiB8IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIHJ1bjogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYyA9IHRoaXMub3B0aW9ucy5jb250ZXh0IHx8IHt9O1xuICAgICAgdmFyIHdoYXRfdG9fc2VuZCA9IGMud2hhdF90b19zZW5kIHx8IHt9O1xuICAgICAgd2hhdF90b19zZW5kLnB2ZGF0YVRvVXQgPSB0aGlzLmdldFRvVXREYXRhKCk7XG4gICAgICB0aGlzLm9wdGlvbnMuY29udGV4dC53aGF0X3RvX3NlbmQgPSB3aGF0X3RvX3NlbmQ7XG4gICAgICByZXR1cm47XG4gICAgfSxcbiAgfTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9wbHVnaW5zL2xpYl9sb2cvbWlkZGxld2FyZS9wdi93aGF0X3RvX3NlbmRwdl91dDIuanNcbi8vIG1vZHVsZSBpZCA9IDk0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogcHJvamVjdCAtIGZpbGVwYXRoXG4gKiDmoIflh4blt6XlhbfnsbtcbiAqXG4gKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG4gKlxuICogQXV0aG9yczpcbiAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbEFycmF5ID0gcmVxdWlyZSgnLi91dGlsQXJyYXknKTtcbnZhciBmb3JtYXQgPSByZXF1aXJlKCcuL2Zvcm1hdCcpO1xuXG52YXIgc19wbGFpbl9vYmogPSAnOjotcGxhaW4tOjonO1xuZXhwb3J0cy5ta1BsYWluS2V5ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gc19wbGFpbl9vYmogKyBNYXRoLnJhbmRvbSgpO1xufTtcbmV4cG9ydHMuc19wbGFpbl9vYmogPSBzX3BsYWluX29iajtcblxuLy8gMjAxNi0wOC0yNCDnkKzlrZDpnIDmsYLvvIxleHBhcmFtc+WNleeLrOWkhOeQhu+8jHdpbmR2YW5l6YeM6ZyA6KaBIEDosIvlo6tcbmV4cG9ydHMubWtQbGFpbktleUZvckV4cGFyYW1zID0gZnVuY3Rpb24oa2V5X3ByZWZpeCkge1xuICB2YXIgX2tleSA9IGtleV9wcmVmaXggfHwgc19wbGFpbl9vYmo7XG4gIHJldHVybiBfa2V5ICsgJ2V4cGFyYW1zJztcbn07XG5cbi8qKlxuICogYXJyYXkgdG8gcGFyYW1cbiAqIOWwhuS4gOS4queugOWNleeahOaVsOe7hOi9rOWMluS4uiB1cmwg5Y+C5pWw55qE5b2i5byP77yMXG4gKiDlhbbkuK3mlbDnu4TkuLpcbiAqICAgICAgW1trMSwgdjFdLCBbazIsIHYyXSwgW2szLCB2M10sIC4uLl1cbiAqIOeahOW9ouW8j+OAglxuICog5LiOIG9iajJwYXJhbSDnm7jmr5TvvIzov5nkuKrmlrnms5XnmoTlpb3lpITmmK/lj6/ku6Xkv53or4HmnIDlkI7lj4LmlbDnmoTpobrluo9cbiAqIEBwYXJhbSBhcnIge0FycmF5fVxuICogQHJldHVybiB7U3RyaW5nfVxuICovXG5mdW5jdGlvbiBhcnIycGFyYW0oYXJyKSB7XG4gIHZhciBhID0gW10sXG4gICAgayxcbiAgICB2LFxuICAgIGksXG4gICAgbGVuID0gYXJyLmxlbmd0aDtcblxuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBrID0gYXJyW2ldWzBdO1xuICAgIHYgPSBhcnJbaV1bMV07XG4gICAgYS5wdXNoKGsuaW5kZXhPZihzX3BsYWluX29iaikgPT09IDAgPyB2IDogKGsgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodikpKTtcbiAgfVxuICByZXR1cm4gYS5qb2luKCcmJyk7XG59O1xuZXhwb3J0cy5hcnIycGFyYW0gPSBhcnIycGFyYW07XG5cblxuLyoqXG4gKiBwYXJhbSB0byBhcnJheVxuICogMjAxNi0wOC0yNCDmlL7lvIDvvIznlKjmnaXlpITnkIZleHBhcmFtcyBA6LCL5aOrXG4gKiDlsIbkuIDkuKrnroDljZXnmoTlvaLlpoIgYT0xJmI9MiZjPTMg6L+Z5qC355qE5Y+C5pWw6L2s5YyW5Li6566A5Y2V55qEIGFycmF5IOagvOW8j++8jOWmgu+8mlxuICogW1tcImFcIiwgXCIxXCJdLCBbXCJiXCIsIFwiMlwiXSwgW1wiY1wiLCBcIjNcIl1dXG4gKlxuICogQHBhcmFtIHBhcmFtcyB7U3RyaW5nfVxuICovXG5leHBvcnRzLnBhcmFtMmFyciA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgdmFyIGEgPSBwYXJhbXMuc3BsaXQoXCImXCIpLFxuICAgIGkgPSAwLCBsID0gYS5sZW5ndGgsXG4gICAgaXRlbSxcbiAgICBhcnIgPSBbXTtcbiAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICBpdGVtID0gYVtpXS5zcGxpdChcIj1cIik7XG4gICAgYXJyLnB1c2goW2l0ZW0uc2hpZnQoKSwgaXRlbS5qb2luKFwiPVwiKV0pO1xuICB9XG5cbiAgcmV0dXJuIGFycjtcbn07XG5cbmV4cG9ydHMuYXJyMm9iaiA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgdmFyIHJldCA9IHt9O1xuICB2YXIgaztcbiAgdmFyIHY7XG4gIHZhciBpO1xuICB2YXIgbGVuID0gYXJyLmxlbmd0aDtcblxuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBrID0gYXJyW2ldWzBdO1xuICAgIHYgPSBhcnJbaV1bMV07XG4gICAgcmV0W2tdID0gdjtcbiAgfVxuICByZXR1cm4gcmV0O1xufTtcblxuLyoqXG4gKiDmoLnmja51cmzku6Xlj4rlj4LmlbDvvIzmi7zoo4XkuIDkuKrmm7Tplb/nmoR1cmxcbiAqIEBwYXJhbSB1cmwge1N0cmluZ31cbiAqIEBwYXJhbSBbZGF0YV0ge09iamVjdHxBcnJheX1cbiAqL1xuZXhwb3J0cy5tYWtlVXJsID0gZnVuY3Rpb24gKHVybCwgZGF0YSkge1xuICB2YXIgbGlua19jaGFyID0gdXJsLmluZGV4T2YoJz8nKSA9PSAtMSA/ICc/JyA6ICcmJztcbiAgdmFyIHBhcmFtX2RhdGEgPSBkYXRhID8gKFxuICAgIHV0aWxBcnJheS5pc0FycmF5KGRhdGEpID8gYXJyMnBhcmFtKGRhdGEpIDogZm9ybWF0Lm9iajJwYXJhbShkYXRhKVxuICApIDogJyc7XG5cbiAgcmV0dXJuIHBhcmFtX2RhdGEgPyAodXJsICsgbGlua19jaGFyICsgcGFyYW1fZGF0YSkgOiB1cmw7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvbGliX3UvdXRpbHMvdXRpbC5qc1xuLy8gbW9kdWxlIGlkID0gOTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLypcbiAqIEZpbGU6IHdoYXRfdG9fc2VuZHB2X3VtMm5hdGl2ZS5qc1xuICogUHJvamVjdDogQGFsaS9hcGx1c1xuICogICAgICBcbiAqIEF1dGhvcjog6ZKw5pitIChjaGFuZ2xpYW5nLmxjbEB1bWVuZy5jb20pXG4gKiAgICAgIFxuICog5L2c55So77yaIOahpeaOpeWGheW1jOaDheWGteS4i++8jHVt5pel5b+X5Y2P6K6u5Y+R6YCBUFbml6Xlv5fnu5luYXRpdmVcbiAqIFxuICogZGVwczog5pegXG4gKiBcbiAqIENvcHlyaWdodCAtIDIwMjEgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG4gKiBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbERhc2ggPSByZXF1aXJlKCdAdXRpbHMvdXRpbERhc2gnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJ0AvcGx1Z2lucy9saWJfdW0vdXRpbHMnKTtcbnZhciBhcGx1c1N0YXRpYyA9IHJlcXVpcmUoJ0B1dGlscy9hcGx1c1N0YXRpYycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIGdldFRvTmF0aXZlRGF0YTogZnVuY3Rpb24oKSB7XG4gICAgICAvLyB2YXIgXyQgPSB1dGlsR29sZGxvZy5nZXRHb2xkbG9nVmFsKCdfJCcpIHx8IHt9O1xuICAgICAgLy8gdmFyIHNwbSA9IF8kLnNwbSB8fCB7fTtcbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcy5vcHRpb25zLmNvbnRleHQgfHwge307XG4gICAgICB2YXIgdXNlcmRhdGEgPSB1dGlsRGFzaC5jbG9uZURlZXAoY29udGV4dC51c2VyZGF0YSkgfHwge307XG4gICAgICB2YXIgd2hhdF90b19zZW5kID0gY29udGV4dC53aGF0X3RvX3NlbmQgfHwge307XG4gICAgICB2YXIgbG9nZGF0YSA9IHdoYXRfdG9fc2VuZC5sb2dkYXRhIHx8IHt9O1xuICAgICAgdmFyIHNka19pbmZvID0gbG9nZGF0YS5zZGtfaW5mbyB8fCB7fTtcbiAgICAgIHZhciBldGFnID0gdGhpcy5vcHRpb25zLmNvbnRleHQuZXRhZyB8fCB7fTtcblxuICAgICAgdmFyIHJlc3VsdCA9IHt9ICxzZGtBcmdzID0ge307XG4gICAgICBzZGtBcmdzLmNuYSA9IGV0YWcuY25hO1xuICAgICAgc2RrQXJncy5sdmVyID0gc2RrX2luZm8ubHZlcjtcbiAgICAgIHNka0FyZ3MuanN2ZXIgPSBzZGtfaW5mby5qc3ZlcjtcbiAgICAgIHNka0FyZ3MuaWQgPSBhcGx1c1N0YXRpYy5QQUdFX1NUQVJUO1xuICAgICAgc2RrQXJncy50cyA9IERhdGUubm93KCk7IC8v5ZKM6KO4d2Vi5L6n5Lya5pyJ5beu5byCXG4gICAgICBzZGtBcmdzLnIgPSBsb2dkYXRhLmFyZzEgfHwgbG9nZGF0YS5sb2drZXkgfHwgJy0nO1xuICAgICAgc2RrQXJncy5pc19oNSA9ICcxJztcblxuICAgICAgaWYgKGxvZ2RhdGEudXJsICYmIGxvZ2RhdGEudXJsLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdmFyIHVybEFyciA9IGxvZ2RhdGEudXJsLnNwbGl0KCc/Jyk7XG4gICAgICAgIHNka0FyZ3MucGFnZV9uYW1lID0gdXJsQXJyWzBdIHx8ICctJztcbiAgICAgICAgc2RrQXJncy51cmxfcCA9IHVybEFyclsxXSB8fCAnLSc7XG4gICAgICB9XG5cbiAgICAgIGlmIChsb2dkYXRhLnByZSAmJiBsb2dkYXRhLnByZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHZhciBwcmVVcmxBcnIgPSBsb2dkYXRhLnByZS5zcGxpdCgnPycpO1xuICAgICAgICBzZGtBcmdzLnJlZl9wYWdlX25hbWUgPSBwcmVVcmxBcnJbMF0gfHwgJy0nO1xuICAgICAgICBzZGtBcmdzLnJlZmVyX3AgPSBwcmVVcmxBcnJbMV0gfHwgJy0nO1xuICAgICAgfVxuXG4gICAgICBpZiAodXNlcmRhdGEuaGFzT3duUHJvcGVydHkoJ2F1dG9zZW5kJykpIHtcbiAgICAgICAgc2RrQXJncy5pc19hdXRvID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNka0FyZ3MuaXNfYXV0byA9IDA7XG4gICAgICB9XG4gICAgICByZXN1bHQuc2RrQXJncyA9IHV0aWxEYXNoLmNsb25lRGVlcChzZGtBcmdzKTtcbiAgICAgIHJlc3VsdC5jdXNwID0gdXRpbHMuZGVsZXRlSW5mbyh1c2VyZGF0YSwgW1xuICAgICAgICAnX2Fub255X2lkJywgJ19kZXZfaWQnLCAnX3Nlc3Npb25faWQnLCAnX3NyY19wb3NfaWQnLFxuICAgICAgICAnX3VzZXJfaWQnLCAnX3VzZXJfbmljaydcbiAgICAgIF0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgcnVuOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBjID0gdGhpcy5vcHRpb25zLmNvbnRleHQgfHwge307XG4gICAgICB2YXIgd2hhdF90b19zZW5kID0gYy53aGF0X3RvX3NlbmQgfHwge307XG4gICAgICB3aGF0X3RvX3NlbmQucHZkYXRhVG9VbU5hdGl2ZSA9IHRoaXMuZ2V0VG9OYXRpdmVEYXRhKCk7XG4gICAgICB0aGlzLm9wdGlvbnMuY29udGV4dC53aGF0X3RvX3NlbmQgPSB3aGF0X3RvX3NlbmQ7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9O1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9wbHVnaW5zL2xpYl9sb2cvbWlkZGxld2FyZS9wdi93aGF0X3RvX3NlbmRwdl91bTJuYXRpdmUuanNcbi8vIG1vZHVsZSBpZCA9IDk2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogYWxpbG9nL3MgLSBzcmMvbGliX3UvY29uZmlnL3BsdWdpbnMvY2FuX3RvX3NlbmRwdi5qc1xuICpcbiAqIOS9nOeUqO+8muWIpOaWrXB26IO95ZCm5Y+R6YCB77yM5LiN5Y+v5Lul5Y+R6YCB5YiZ5Lya5Lit5pat5ZCO57ut5omA5pyJ5Lit6Ze05Lu25omn6KGMXG4gKiBkZXBzOiDml6BcbiAqXG4gKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG4gKlxuICogQXV0aG9yczpcbiAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbEdvbGRsb2cgPSByZXF1aXJlKCdAdXRpbHMvdXRpbEdvbGRsb2cnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICAvLyBpbml0OiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgLy8gICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIC8vIH0sXG5cbiAgICAvKipcbiAgICAgKiDmmK/lkKbopoHmiafooYxzZW5kcHbnmoTlhaXlj6NcbiAgICAgKiDov5Tlm55cImRvbmVcIue7iOatouS4remXtOS7tuaJp+ihjFxuICAgICAqIEBwYXJhbSBbU3RyaW5nXSBzdGF0ZSDnirbmgIFcbiAgICAgKiBAcGFyYW0gW0Z1bmN0aW9uXSBjYiAg5Zue6LCDXG4gICAgICogQHJldHVybiBcImRvbmVcIiB8IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIHJ1bjogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgXyQgPSB1dGlsR29sZGxvZy5nZXRHb2xkbG9nVmFsKCdfJCcpIHx8IHt9O1xuICAgICAgdmFyIGNhbl90b19zZW5kcHYgPSB0aGlzLm9wdGlvbnMuY29udGV4dC5jYW5fdG9fc2VuZHB2IHx8IHt9O1xuICAgICAgdmFyIGNvdW50ID0gXyQuc2VuZF9wdl9jb3VudCB8fCAwO1xuICAgICAgdmFyIGNvbmZpZyA9IHRoaXMub3B0aW9ucy5jb25maWcgfHwge307XG5cbiAgICAgIGlmIChjb25maWcuaXNfYXV0byAmJiBjb3VudCA+IDApIHtcbiAgICAgICAgcmV0dXJuICdkb25lJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhbl90b19zZW5kcHYuZmxhZyA9ICdZRVMnO1xuICAgICAgICB0aGlzLm9wdGlvbnMuY29udGV4dC5jYW5fdG9fc2VuZHB2ID0gY2FuX3RvX3NlbmRwdjtcbiAgICAgICAgXyQuc2VuZF9wdl9jb3VudCA9ICsrY291bnQ7XG4gICAgICAgIHV0aWxHb2xkbG9nLnNldEdvbGRsb2dWYWwoJ18kJywgXyQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSxcbiAgfTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9wbHVnaW5zL2xpYl9sb2cvbWlkZGxld2FyZS9wdi9jYW5fdG9fc2VuZHB2LmpzXG4vLyBtb2R1bGUgaWQgPSA5N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIGFsaWxvZy9zIC0gc3JjL2xpYl91L3BsdWdpbnMvcHYvYWZ0ZXJfcHYuanNcbiAqXG4gKiDkvZznlKjvvJpwduWPkemAgeWujOavle+8jOWIhuWPkeS4gOS4quWujOaIkOS6i+S7tlxuICogZGVwczog5pegXG4gKlxuICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuICpcbiAqIEF1dGhvcnM6XG4gKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxQdWJzdWIgPSByZXF1aXJlKCdAdXRpbHMvdXRpbFB1YnN1YicpO1xudmFyIHV0aWxHb2xkbG9nID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxHb2xkbG9nJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgLy8gLy8g5Yid5aeL5YyW5qih5Z2XXG4gICAgLy8gaW5pdDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIC8vICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAvLyB9LFxuXG4gICAgLyoqXG4gICAgICog5piv5ZCm6KaB5omn6KGMc2VuZHB255qE5YWl5Y+jXG4gICAgICog6L+U5ZueXCJkb25lXCLnu4jmraLkuK3pl7Tku7bmiafooYxcbiAgICAgKiBAcGFyYW0gW1N0cmluZ10gc3RhdGUg54q25oCBXG4gICAgICogQHBhcmFtIFtGdW5jdGlvbl0gY2IgIOWbnuiwg1xuICAgICAqIEByZXR1cm4gXCJkb25lXCIgfCB1bmRlZmluZWRcbiAgICAgKi9cbiAgICBydW46IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIF8kID0gYXBsdXMuXyQgfHwge307XG4gICAgICB2YXIgYyA9IHRoaXMub3B0aW9ucy5jb250ZXh0IHx8IHt9O1xuICAgICAgdXRpbEdvbGRsb2cuc2V0R29sZGxvZ1ZhbCgncHZfY29udGV4dCcsIGMpO1xuICAgICAgLy8gcHblj5HpgIHlrozmr5XvvIzliIblj5HkuIDkuKrlrozmiJDkuovku7ZcbiAgICAgIHZhciBzcG1fYWIgPSBhcGx1cy5zcG1fYWIgfHwgW107XG4gICAgICB2YXIgX3NwbWFiID0gc3BtX2FiLmpvaW4oJy4nKTtcbiAgICAgIHZhciBfY291bnQgPSBfJC5zZW5kX3B2X2NvdW50O1xuXG4gICAgICB2YXIgcHViT2JqID0ge1xuICAgICAgICBjbmE6IGMuZXRhZy5jbmEsXG4gICAgICAgIGNvdW50OiBfY291bnQsXG4gICAgICAgIHNwbWFiX3ByZTogYXBsdXMuc3BtYWJfcHJlXG4gICAgICB9O1xuICAgICAgdXRpbFB1YnN1Yi5kb1B1Yk1zZyhbJ3NlbmRQVicsICdjb21wbGV0ZScsIF9zcG1hYiwgcHViT2JqXSk7XG4gICAgICB1dGlsUHVic3ViLmRvQ2FjaGVQdWJzKFsnc2VuZFBWJywgJ2NvbXBsZXRlJywgX3NwbWFiLCBwdWJPYmpdKTtcbiAgICAgIHJldHVybjtcbiAgICB9LFxuICB9O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL3BsdWdpbnMvbGliX2xvZy9taWRkbGV3YXJlL3B2L2FmdGVyX3B2LmpzXG4vLyBtb2R1bGUgaWQgPSA5OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIHByb2plY3QgLSBmaWxlcGF0aFxuICogZGVzY3JpcHRpb25cbiAqXG4gKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG4gKlxuICogQXV0aG9yczpcbiAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbEdvbGRsb2cgPSByZXF1aXJlKCcuL3V0aWxHb2xkbG9nJyk7XG5cbnZhciBGTiA9ICdmdW5jdGlvbic7XG5cbnZhciBnZXRQdWJzdWIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGFwbHVzID0gdXRpbEdvbGRsb2cuZ2V0R2xvYmFsVmFsdWUoJ2FwbHVzJyk7XG4gIHZhciBwdWJzdWIgPSBhcGx1cy5hcGx1c19wdWJzdWIgfHwge307XG4gIHZhciBmbGFnID0gdHlwZW9mIHB1YnN1Yi5wdWJsaXNoID09PSBGTjtcbiAgcmV0dXJuIGZsYWcgPyBwdWJzdWIgOiAnJztcbn07XG5cbi8qKlxuICog5YiG5Y+R5raI5oGv5bel5YW35Ye95pWwXG4gKiBAcGFyYW1zIHtBcnJheX0gYXJncyBba2V5LCBtc2dWYWx1ZTEsIG1zZ1ZhbHVlMiwgbXNnVmFsdWUzLCBtc2dWYWx1ZU4sIC4uLl1cbiAqL1xuZXhwb3J0cy5kb1B1Yk1zZyA9IGZ1bmN0aW9uKGFyZ3MpIHtcbiAgdmFyIHB1YnN1YiA9IGdldFB1YnN1YigpO1xuICBpZiAocHVic3ViICYmIHR5cGVvZiBwdWJzdWIucHVibGlzaCA9PT0gRk4pIHtcbiAgICBwdWJzdWIucHVibGlzaC5hcHBseShwdWJzdWIsIGFyZ3MpO1xuICB9XG59O1xuXG4vKipcbiAqIGNhY2hl5b2T5YmN55qE5YiG5Y+R5Ye95pWw55qE5bel5YW35Ye95pWwXG4gKiBAcGFyYW1zIHtBcnJheX0gYXJncyBba2V5LCBtc2dWYWx1ZTEsIG1zZ1ZhbHVlMiwgbXNnVmFsdWUzLCBtc2dWYWx1ZU4sIC4uLl1cbiAqL1xuZXhwb3J0cy5kb0NhY2hlUHVicyA9IGZ1bmN0aW9uKGFyZ3MpIHtcbiAgdmFyIHB1YnN1YiA9IGdldFB1YnN1YigpO1xuICBpZiAocHVic3ViICYmIHR5cGVvZiBwdWJzdWIuY2FjaGVQdWJzID09PSBGTikge1xuICAgIHB1YnN1Yi5jYWNoZVB1YnMuYXBwbHkocHVic3ViLCBhcmdzKTtcbiAgfVxufTtcblxuLyoqXG4gKiDorqLpmIXmtojmga/lt6Xlhbflh73mlbBcbiAqIEBwYXJhbXMge1N0cmluZ30ga2V5XG4gKiBAcGFyYW1zIHtGdW5jdGlvbn0gY2IoWyBtc2dWYWx1ZTEsIG1zZ1ZhbHVlMiwgbXNnVmFsdWUzLCBtc2dWYWx1ZU4sIC4uLl0pXG4gKi9cbmV4cG9ydHMuZG9TdWJNc2cgPSBmdW5jdGlvbihrZXksIGNiKSB7XG4gIHZhciBwdWJzdWIgPSBnZXRQdWJzdWIoKTtcbiAgaWYgKHB1YnN1YiAmJiB0eXBlb2YgcHVic3ViLnN1YnNjcmliZSA9PT0gRk4pIHtcbiAgICBwdWJzdWIuc3Vic2NyaWJlKGtleSwgY2IpO1xuICB9XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvbGliX3UvdXRpbHMvdXRpbFB1YnN1Yi5qc1xuLy8gbW9kdWxlIGlkID0gOTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBhbGlsb2cvcyAtIHNyYy9saWJfdS9wbHVnaW5zL3B2L3doYXRfdG9faGpsal91c2VyZGF0YS5qc1xuICpcbiAqICDmj5Lku7bkvZznlKjvvJrmlLbpm4blupTnlKjmlrnoh6rlrprkuYlwduWPguaVsFxuICogICAgICAgICAgIOW5tuWwhuaUtumbhuWIsOeahOiHquWumuS5ieWPguaVsOS7peaVsOe7hOagvOW8j+i/veWKoOWIsGxvZ2RhdGHlkI7pnaLvvJpsb2dkYXRhLmNvbmNhdCh1c2VyZGF0YSlcbiAqICBkZXBzOiB3aGF0X3RvX2hqbGpcbiAqXG4gKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG4gKlxuICogQXV0aG9yczpcbiAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZm9ybWF0ID0gcmVxdWlyZSgnQHV0aWxzL2Zvcm1hdCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdAdXRpbHMvaXNBcnJheScpO1xudmFyIHV0aWxEYXNoID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxEYXNoJyk7XG52YXIgdXRpbEdvbGRsb2cgPSByZXF1aXJlKCdAdXRpbHMvdXRpbEdvbGRsb2cnKTtcblxudmFyIGFwbHVzID0gdXRpbEdvbGRsb2cuZ2V0R2xvYmFsVmFsdWUoJ2FwbHVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgLy8gLyoqXG4gICAgLy8gICog5Yid5aeL5YyW5qih5Z2XXG4gICAgLy8gICovXG4gICAgLy8gaW5pdDogZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAvLyAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgLy8gfSxcblxuICAgIC8qKlxuICAgICAqIOmHh+mbhuS4quaAp+WMluWPguaVsFxuICAgICAqXG4gICAgICogcmVjb3JkKGxvZ2tleSwgZ21rZXksIGdva2V5KSBBUEnkuK3nmoRnb2tleVxuICAgICAqIG1ldGE6YXBsdXMtZXhpbmZv5L+h5oGvLCBtZXRhOmFwbHVzLWV4ZGF0YeS/oeaBr1xuICAgICAqXG4gICAgICogQHJldHVybiB7T2JqZWN0fSB7Li4ufVxuICAgICAqL1xuICAgIGdldFVzZXJEYXRhOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgYyA9IHRoaXMub3B0aW9ucy5jb250ZXh0IHx8IHt9O1xuICAgICAgdmFyIHVzZXJkYXRhID0gYy51c2VyZGF0YSB8fCB7fTtcbiAgICAgIHZhciBnb2tleSA9IGMud2hhdF90b19zZW5kLmxvZ2RhdGEuZ29rZXk7XG5cbiAgICAgIGdva2V5ID0gdXRpbERhc2guYXNzaWduKGdva2V5LCBmb3JtYXQucGFyYW0yb2JqKHVzZXJkYXRhLmdva2V5KSk7XG4gICAgICB2YXIgYXBsdXNFeGluZm8gPSBhcGx1cy5nZXRNZXRhSW5mbygnYXBsdXMtZXhpbmZvJyk7XG4gICAgICBpZiAoYXBsdXNFeGluZm8pIHtcbiAgICAgICAgZ29rZXkgPSB1dGlsRGFzaC5hc3NpZ24oZ29rZXksIGZvcm1hdC5wYXJhbTJvYmooYXBsdXNFeGluZm8pKTtcbiAgICAgIH1cbiAgICAgIHZhciBleGRhdGEgPSBhcGx1cy5nZXRNZXRhSW5mbygnYXBsdXMtZXhkYXRhJyk7XG4gICAgICBpZiAoaXNBcnJheShleGRhdGEpKSB7XG4gICAgICAgIGV4ZGF0YS5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pe1xuICAgICAgICAgIGdva2V5ID0gdXRpbERhc2guYXNzaWduKGdva2V5LCBpdGVtKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBnb2tleSA9IHV0aWxEYXNoLmFzc2lnbihnb2tleSwgYXBsdXMuZ2V0TWV0YUluZm8oJ2FwbHVzLWV4ZGF0YScpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBnb2tleTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICog5L2V5pe25omn6KGMc2VuZHB25omn6KGM5YWl5Y+jXG4gICAgICog6L+U5ZueJ2RvbmUn57uI5q2i5Lit6Ze05Lu25omn6KGMXG4gICAgICogQHBhcmFtIFtTdHJpbmddIHN0YXRlIOeKtuaAgVxuICAgICAqIEBwYXJhbSBbRnVuY3Rpb25dIGNiICDlm57osINcbiAgICAgKiBAcmV0dXJuICdkb25lJyB8IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIHJ1bjogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuY29udGV4dC53aGF0X3RvX3NlbmQubG9nZGF0YS5nb2tleSA9IHRoaXMuZ2V0VXNlckRhdGEoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH07XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvcGx1Z2lucy9saWJfbG9nL21pZGRsZXdhcmUvaGpsai93aGF0X3RvX2hqbGpfdXNlcmRhdGEuanNcbi8vIG1vZHVsZSBpZCA9IDEwMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIGFsaWxvZy9zIC0gc3JjL2xpYl91L3BsdWdpbnMvcHYvd2hhdF90b19oamxqX3VzZXJkYXRhLmpzXG4gKlxuICogIOaPkuS7tuS9nOeUqO+8muaUtumbhuW6lOeUqOaWueiHquWumuS5iXB25Y+C5pWwXG4gKiAgICAgICAgICAg5bm25bCG5pS26ZuG5Yiw55qE6Ieq5a6a5LmJ5Y+C5pWw5Lul5pWw57uE5qC85byP6L+95Yqg5YiwbG9nZGF0YeWQjumdou+8mmxvZ2RhdGEuY29uY2F0KHVzZXJkYXRhKVxuICogIGRlcHM6IHdoYXRfdG9faGpsalxuICpcbiAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cbiAqXG4gKiBBdXRob3JzOlxuICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlsRXhpbmZvID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxFeGluZm8nKTtcbnZhciBnZXRFeFBhcmFtc09iaiA9IHJlcXVpcmUoJy4uL2dldEV4cGFyYW1zT2JqJyk7XG52YXIgZ2V0Q29va2llVXNlckluZm8gPSByZXF1aXJlKCcuLi9nZXRDb29raWVVc2VySW5mbycpO1xudmFyIHV0aWxEYXNoID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxEYXNoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgLy8gZ2V0Q29va2llVXNlckluZm86IGZ1bmN0aW9uICgpIHtcbiAgICAvLyAgIHZhciBkID0ge307XG4gICAgLy8gICAvLyDml6Xlv5fmlLbpm4blt6Xlj7dcbiAgICAvLyAgIHZhciB3biA9IGNvb2tpZS5nZXRDb29raWUoJ3dvcmtubycpIHx8IGNvb2tpZS5nZXRDb29raWUoJ2VtcGxJZCcpO1xuICAgIC8vICAgaWYgKHduKSB7XG4gICAgLy8gICAgIGQud29ya25vID0gd247XG4gICAgLy8gICB9XG4gICAgLy8gICB2YXIgaG5nID0gY29va2llLmdldEhuZygpO1xuICAgIC8vICAgaWYgKGhuZykge1xuICAgIC8vICAgICBkLl9obmcgPSBjb29raWUuZ2V0SG5nKCk7XG4gICAgLy8gICB9XG4gICAgLy8gICByZXR1cm4gZDtcbiAgICAvLyB9LFxuXG4gICAgZ2V0RXhQYXJhbXNJbmZvOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZSA9IHV0aWxFeGluZm8uZ2V0RXhQYXJhbXMoKTtcbiAgICAgIHRoaXMub3B0aW9ucy5jb250ZXh0LndoYXRfdG9fc2VuZC5sb2dkYXRhLmV4cGFyYW1zID0gZTtcbiAgICAgIHJldHVybiBnZXRFeFBhcmFtc09iaihlKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICog5L2V5pe25omn6KGMc2VuZHB25omn6KGM5YWl5Y+jXG4gICAgICog6L+U5ZueJ2RvbmUn57uI5q2i5Lit6Ze05Lu25omn6KGMXG4gICAgICogQHBhcmFtIFtTdHJpbmddIHN0YXRlIOeKtuaAgVxuICAgICAqIEBwYXJhbSBbRnVuY3Rpb25dIGNiICDlm57osINcbiAgICAgKiBAcmV0dXJuICdkb25lJyB8IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIHJ1bjogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZ29rZXkgPSB0aGlzLm9wdGlvbnMuY29udGV4dC53aGF0X3RvX3NlbmQubG9nZGF0YS5nb2tleTtcbiAgICAgIGdva2V5ID0gdXRpbERhc2guYXNzaWduKGdva2V5LCBnZXRDb29raWVVc2VySW5mbygpKTtcbiAgICAgIGdva2V5ID0gdXRpbERhc2guYXNzaWduKHRoaXMuZ2V0RXhQYXJhbXNJbmZvKCksIGdva2V5KTtcbiAgICAgIHRoaXMub3B0aW9ucy5jb250ZXh0LndoYXRfdG9fc2VuZC5sb2dkYXRhLmdva2V5ID0gZ29rZXk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL3BsdWdpbnMvbGliX2xvZy9taWRkbGV3YXJlL2hqbGovd2hhdF90b19oamxqX3VzZXJkYXRhX3dlYi5qc1xuLy8gbW9kdWxlIGlkID0gMTAxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogYWxpbG9nL3MgLSBzcmMvbGliX2IvY29uZmlnL3BsdWdpbnMvd2hhdF90b19oamxqX3V0Mi5qc1xuICpcbiAqIOS9nOeUqO+8muaXpeW/l+WPkemAgeiHs1VU5Y+C5pWw5pS26ZuG77yaXG4gKlxuICogZGVwczog5pegXG4gKlxuICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuICpcbiAqIEF1dGhvcnM6XG4gKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxHb2xkbG9nID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxHb2xkbG9nJyk7XG52YXIgYXBsdXNTdGF0aWMgPSByZXF1aXJlKCdAdXRpbHMvYXBsdXNTdGF0aWMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICAvKipcbiAgICAgKiDojrflj5ZVVOaXpeW/l+mcgOimgeeahOWPguaVsFxuICAgICAqIOWPguaVsOexu+Wei+S4gO+8mumcgOimgVVU54m55q6K5aSE55CG55qE77yIZnVuY3R5cGXvvIxmdW5jSWTvvIx1cmzvvIxsb2drZXnvvIlcbiAgICAgKiDlj4LmlbDnsbvlnovkuozvvJrkuI3pnIDopoFVVOeJueauiuWkhOeQhueahO+8iOWFtuS7lmFwbHVz6Ieq5a6a5LmJa2V5XFx2YWx1Ze+8iWtleemcgOimgeS4i+WIkue6v+W8gOWktFxuICAgICAqXG4gICAgICogQHJldHVybiB7T2JqZWN0fSB7XG4gICAgICogICBmdW5jdHlwZTogXCJjdHJsXCIsXG4gICAgICogICBmdW5jSWQ6IFwiMjEwMVwiLFxuICAgICAqICAgdXJsOiBcImh0dHBzOi8vaDUubS50YW9iYW8uY29tL2J1eS9xaW5nZGFuL2xpc3QuaHRtbFwiLFxuICAgICAqICAgbG9na2V5OiBcIi9xaW5nZGFuLjIuM1wiLFxuICAgICAqXG4gICAgICogICBfc3BtY250OiBcImEzMTQ1LjgxODM3MzcuMC4wXCIsXG4gICAgICogICBfc3BtdXJsOiBcImEwLmIwLmMwLmQwXCIsXG4gICAgICogICBfaDV1cmw6IFwiLy9oNS5tLnRhb2Jhby5jb20vYnV5L3FpbmdkYW4vbGlzdC5odG1sP3NjbT0yMDE5LjEuNC4zMTEmaXRlbUlkPTUyNzM1MTQ2MTQ1Niw1MjcwMzg1NTU3NTYmc3BtPWEyMTQxLjEud2lkZ2V0LjQmbG9jYXRlPXdpZGdldC00XCIsXG4gICAgICogICBfY25hOiBcIjEyMzQ0NDY1NDdcIixcbiAgICAgKiAgIF9vdGhlcnM6IFwic29tZXZhbHVlXCIgLFxuICAgICAqICAgX2lzaDU6IFwiMVwiICAvLyBVVOW/hemhu+eahOWxnuaAp++8jOWGmeatu+WNs+WPr1xuICAgICAqICAgX2lzX2cydV86IFwiMVwiIC8vIOWNleWPkeaXtumcgOimgVxuICAgICAqIH1cbiAgICAgKi9cbiAgICBnZXRUb1V0RGF0YTogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF8kID0gdXRpbEdvbGRsb2cuZ2V0R29sZGxvZ1ZhbCgnXyQnKSB8fCB7fTtcbiAgICAgIHZhciBzcG0gPSBfJC5zcG0gfHwge307XG4gICAgICB2YXIgY29udGV4dCA9IHRoaXMub3B0aW9ucy5jb250ZXh0IHx8IHt9O1xuICAgICAgdmFyIHVzZXJkYXRhID0gY29udGV4dC51c2VyZGF0YSB8fCB7fTtcbiAgICAgIHZhciBldGFnID0gY29udGV4dC5ldGFnIHx8IHt9O1xuICAgICAgdmFyIHdoYXRfdG9fc2VuZCA9IGNvbnRleHQud2hhdF90b19zZW5kIHx8IHt9O1xuICAgICAgdmFyIGxvZ2RhdGEgPSB3aGF0X3RvX3NlbmQubG9nZGF0YSB8fCB7fTtcbiAgICAgIHZhciBzZGtfaW5mbyA9IGxvZ2RhdGEuc2RrX2luZm8gfHwge307XG4gICAgICB2YXIgZ29rZXkgPSBsb2dkYXRhLmdva2V5IHx8IHt9O1xuXG4gICAgICB2YXIgZ29rZXlBcnIgPSBbXTtcbiAgICAgIHZhciBnb2tleVN0ciA9ICcnO1xuICAgICAgZm9yICh2YXIgayBpbiBnb2tleSkge1xuICAgICAgICBpZiAoW2FwbHVzU3RhdGljLlNQTV9DTlQsIGFwbHVzU3RhdGljLlNQTV9VUkwsIGFwbHVzU3RhdGljLlNQTV9QUkVdLmluZGV4T2YoaykgPT09IC0xKSB7XG4gICAgICAgICAgdmFyIF90bXBWYWx1ZSA9IGdva2V5W2tdO1xuICAgICAgICAgIGlmIChnb2tleVtrXSA9PT0gJ3VuZGVmaW5lZCcgfHwgZ29rZXlba10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgX3RtcFZhbHVlID0gJyc7XG4gICAgICAgICAgfVxuICAgICAgICAgIGdva2V5QXJyLnB1c2goayArICc9JyArIF90bXBWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChnb2tleUFyci5sZW5ndGggPiAwKSB7XG4gICAgICAgIGdva2V5U3RyID0gZ29rZXlBcnIuam9pbignJicpO1xuICAgICAgfVxuICAgICAgdmFyIHBhZ2V1cmwgPSBsb2NhdGlvbi5ocmVmO1xuICAgICAgdmFyIGQgPSB7fTtcbiAgICAgIC8vIOWPguaVsOexu+Wei+S4gO+8mumcgOimgVVU54m55q6K5aSE55CG55qE77yIZnVuY3R5cGXvvIxmdW5jSWTvvIx1cmzvvIxsb2drZXnvvIlcbiAgICAgIGQuZnVuY3R5cGUgPSAnY3RybCc7XG4gICAgICBkLmZ1bmNJZCA9IGxvZ2RhdGEuZXZlbnRfY29kZTtcbiAgICAgIGQudXJsID0gKGxvY2F0aW9uLnByb3RvY29sIHx8ICdodHRwczonKSArICcvLycgKyBsb2NhdGlvbi5ob3N0ICsgbG9jYXRpb24ucGF0aG5hbWU7XG4gICAgICBkLmxvZ2tleSA9IGxvZ2RhdGEubG9na2V5O1xuICAgICAgZC5nb2tleSA9IGVuY29kZVVSSUNvbXBvbmVudChnb2tleVN0cik7XG4gICAgICBkLmdta2V5ID0gbG9nZGF0YS5nbWtleTtcblxuICAgICAgLy8g5Y+C5pWw57G75Z6L5LqM77ya5LiN6ZyA6KaBVVTnibnmrorlpITnkIbnmoTvvIjlhbbku5ZhcGx1c+iHquWumuS5iWtleVxcdmFsdWXvvIlrZXnpnIDopoHkuIvliJLnur/lvIDlpLRcbiAgICAgIGQuX2lzaDUgPSAnMSc7XG4gICAgICBkLl9oNXVybCA9IHBhZ2V1cmw7XG4gICAgICBkLl9pc19nMnVfID0gMTtcbiAgICAgIGQuX3Nsb2cgPSAxO1xuICAgICAgZC5fdG9VVCA9IDI7XG4gICAgICBkLl9icmlkZ2VOYW1lID0gJ1dpbmRWYW5lJztcbiAgICAgIGQuX2JyaWRnZVZlcnNpb24gPSAnMy4wLjQnO1xuXG4gICAgICAvLyDlj4LmlbDnsbvlnovkuInvvJrkuI3pnIDopoFVVOeJueauiuWkhOeQhu+8jOS4lGtleeaXoOS4i+WIkue6v+WJjee8gFxuICAgICAgaWYgKHNwbS5zcG1fY250KSBkW2FwbHVzU3RhdGljLlNQTV9DTlRdID0gc3BtLnNwbV9jbnQgfHwgJyc7XG4gICAgICBpZiAoc3BtLnNwbV91cmwpIGRbYXBsdXNTdGF0aWMuU1BNX1VSTF0gPSBzcG0uc3BtX3VybCB8fCAnJztcbiAgICAgIGlmIChzcG0uc3BtX3ByZSkgZFthcGx1c1N0YXRpYy5TUE1fUFJFXSA9IHNwbS5zcG1fcHJlIHx8ICcnO1xuXG4gICAgICBkLmNuYSA9IGV0YWcuY25hO1xuICAgICAgZC5sdmVyID0gc2RrX2luZm8ubHZlcjtcbiAgICAgIGQuanN2ZXIgPSBzZGtfaW5mby5qc3ZlcjtcbiAgICAgIC8vIOWPr+inhuWMluS7pOeureagh+ivhmF1dG9zZW5kXG4gICAgICBpZiAodXNlcmRhdGEuaGFzT3duUHJvcGVydHkoJ2F1dG9zZW5kJykpIHtcbiAgICAgICAgZC5hdXRvc2VuZCA9IHVzZXJkYXRhLmF1dG9zZW5kO1xuICAgICAgfVxuICAgICAgdmFyIHV0cGFyYW1DbnQgPSBhcGx1cy5nZXRNZXRhSW5mbygnYXBsdXMtdXRwYXJhbScpO1xuICAgICAgaWYgKHV0cGFyYW1DbnQpIHtcbiAgICAgICAgZFsndXRwYXJhbS1jbnQnXSA9IEpTT04uc3RyaW5naWZ5KHV0cGFyYW1DbnQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIOS9leaXtuaJp+ihjHNlbmRwduaJp+ihjOWFpeWPo1xuICAgICAqIOi/lOWbnlwiZG9uZVwi57uI5q2i5Lit6Ze05Lu25omn6KGMXG4gICAgICogQHBhcmFtIFtTdHJpbmddIHN0YXRlIOeKtuaAgVxuICAgICAqIEBwYXJhbSBbRnVuY3Rpb25dIGNiICDlm57osINcbiAgICAgKiBAcmV0dXJuIFwiZG9uZVwiIHwgdW5kZWZpbmVkXG4gICAgICovXG4gICAgcnVuOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBjID0gdGhpcy5vcHRpb25zLmNvbnRleHQgfHwge307XG4gICAgICB2YXIgd2hhdF90b19zZW5kID0gYy53aGF0X3RvX3NlbmQgfHwge307XG4gICAgICB3aGF0X3RvX3NlbmQucHZkYXRhVG9VdCA9IHRoaXMuZ2V0VG9VdERhdGEoKTtcbiAgICAgIHRoaXMub3B0aW9ucy5jb250ZXh0LndoYXRfdG9fc2VuZCA9IHdoYXRfdG9fc2VuZDtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH07XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvcGx1Z2lucy9saWJfbG9nL21pZGRsZXdhcmUvaGpsai93aGF0X3RvX2hqbGpfdXQyLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLypcbiAqIEZpbGU6IHdoYXRfdG9faGpsal8ybmF0aXZlLmpzXG4gKiBQcm9qZWN0OiBAYWxpL2FwbHVzXG4gKiAgICAgIFxuICogQXV0aG9yOiDpkrDmmK0gKGNoYW5nbGlhbmcubGNsQHVtZW5nLmNvbSlcbiAqIFxuICog5L2c55So77yaIOahpeaOpeWGheW1jOaDheWGteS4i++8jHVt5pel5b+X5Y2P6K6u5Y+R6YCB6buE6YeR5Luk566t5pel5b+X57uZbmF0aXZlXG4gKiBcbiAqIGRlcHM6IOaXoFxuICogICAgICBcbiAqIENvcHlyaWdodCAtIDIwMjEgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbERhc2ggPSByZXF1aXJlKCdAdXRpbHMvdXRpbERhc2gnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJ0AvcGx1Z2lucy9saWJfdW0vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpe1xuICByZXR1cm4ge1xuICAgIGdldFRvTmF0aXZlRGF0YTogZnVuY3Rpb24oKSB7XG4gICAgICAvLyB2YXIgXyQgPSB1dGlsR29sZGxvZy5nZXRHb2xkbG9nVmFsKCdfJCcpIHx8IHt9O1xuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLm9wdGlvbnMuY29udGV4dCB8fCB7fTtcbiAgICAgIHZhciB1c2VyZGF0YSA9IGNvbnRleHQudXNlcmRhdGEgfHwge307XG4gICAgICB2YXIgZXRhZyA9IGNvbnRleHQuZXRhZyB8fCB7fTtcbiAgICAgIHZhciB3aGF0X3RvX3NlbmQgPSBjb250ZXh0LndoYXRfdG9fc2VuZCB8fCB7fTtcbiAgICAgIHZhciBsb2dkYXRhID0gd2hhdF90b19zZW5kLmxvZ2RhdGEgfHwge307XG4gICAgICB2YXIgc2RrX2luZm8gPSBsb2dkYXRhLnNka19pbmZvIHx8IHt9O1xuXG4gICAgICB2YXIgcmVzdWx0ID0ge30gLHNka0FyZ3MgPSB7fTtcbiAgICAgIHNka0FyZ3MuY25hID0gZXRhZy5jbmE7XG4gICAgICBzZGtBcmdzLmx2ZXIgPSBzZGtfaW5mby5sdmVyO1xuICAgICAgc2RrQXJncy5qc3ZlciA9IHNka19pbmZvLmpzdmVyO1xuICAgICAgc2RrQXJncy5pZCA9IHVzZXJkYXRhLmxvZ2tleSB8fCAnLSc7XG4gICAgICBzZGtBcmdzLnRzID0gRGF0ZS5ub3coKTsgLy/lkozoo7h3ZWLkvqfkvJrmnInlt67lvIJcbiAgICAgIHNka0FyZ3MuaXNfaDUgPSAnMSc7XG5cbiAgICAgIGlmIChsb2dkYXRhLnVybCAmJiBsb2dkYXRhLnVybC5sZW5ndGggPiAwKSB7XG4gICAgICAgIHZhciB1cmxBcnIgPSBsb2dkYXRhLnVybC5zcGxpdCgnPycpO1xuICAgICAgICBzZGtBcmdzLnBhZ2VfbmFtZSA9IHVybEFyclswXSB8fCAnLSc7XG4gICAgICAgIHNka0FyZ3MudXJsX3AgPSB1cmxBcnJbMV0gfHwgJy0nO1xuICAgICAgfVxuXG4gICAgICBpZiAobG9nZGF0YS5wcmUgJiYgbG9nZGF0YS5wcmUubGVuZ3RoID4gMCkge1xuICAgICAgICB2YXIgcHJlVXJsQXJyID0gbG9nZGF0YS5wcmUuc3BsaXQoJz8nKTtcbiAgICAgICAgc2RrQXJncy5yZWZfcGFnZV9uYW1lID0gcHJlVXJsQXJyWzBdIHx8ICctJztcbiAgICAgICAgc2RrQXJncy5yZWZlcl9wID0gcHJlVXJsQXJyWzFdIHx8ICctJztcbiAgICAgIH1cbiBcbiAgICAgIHNka0FyZ3MuZnVuY0lkID0gbG9nZGF0YS5ldmVudF9jb2RlO1xuXG4gICAgICBpZiAodXNlcmRhdGEuaGFzT3duUHJvcGVydHkoJ2F1dG9zZW5kJykpIHtcbiAgICAgICAgc2RrQXJncy5pc19hdXRvID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNka0FyZ3MuaXNfYXV0byA9IDA7XG4gICAgICB9XG5cbiAgICAgIHJlc3VsdC5zZGtBcmdzID0gdXRpbERhc2guY2xvbmVEZWVwKHNka0FyZ3MpO1xuICAgICAgcmVzdWx0LmN1c3AgPSB1dGlscy5kZWxldGVJbmZvKHVzZXJkYXRhLmdva2V5LCBbXG4gICAgICAgICdfYW5vbnlfaWQnLCAnX2Rldl9pZCcsICdfc2Vzc2lvbl9pZCcsICdfc3JjX3Bvc19pZCcsXG4gICAgICAgICdfdXNlcl9pZCcsICdfdXNlcl9uaWNrJ1xuICAgICAgXSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBydW46IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGMgPSB0aGlzLm9wdGlvbnMuY29udGV4dCB8fCB7fTtcbiAgICAgIHZhciB3aGF0X3RvX3NlbmQgPSBjLndoYXRfdG9fc2VuZCB8fCB7fTtcbiAgICAgIHdoYXRfdG9fc2VuZC5oamxqZGF0YVRvVW1OYXRpdmUgPSB0aGlzLmdldFRvTmF0aXZlRGF0YSgpO1xuICAgICAgdGhpcy5vcHRpb25zLmNvbnRleHQud2hhdF90b19zZW5kID0gd2hhdF90b19zZW5kO1xuICAgICAgcmV0dXJuOyBcbiAgICB9XG4gIH07XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL3BsdWdpbnMvbGliX2xvZy9taWRkbGV3YXJlL2hqbGovd2hhdF90b19oamxqX3VtMm5hdGl2ZS5qc1xuLy8gbW9kdWxlIGlkID0gMTAzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogYWxpbG9nL3MgLSBzcmMvcGx1Z2lucy9hcGx1c19zcG0uanNcbiAqIFNQTSDln4vngrnohJrmnKzlhaXlj6PvvIzkvp3otZZhcGx1c0pT77yM5pys6ISa5pys5pyA5aSa562J5b6FMTBz77yM5aaC5p6cMTBz5ZCO6L+Y5rKh5pyJ5qOA5rWL5YiwYXBsdXNKU++8jOWImeaJk+WHuuitpuWRiu+8gVxuICogQHNlZSBodHRwOi8vd2lraS51ZWQudGFvYmFvLm5ldC9kb2t1LnBocD9pZD10bXM6c3BtJUU1JTlGJThCJUU3JTgyJUI5JUU2JTk2JUI5JUU2JUExJTg4XG4gKlxuICpcbiAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cbiAqXG4gKiBBdXRob3JzOlxuICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuICovXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4ge1xuICAgIHJ1bjogZnVuY3Rpb24gKCkge1xuICAgICAgcmVxdWlyZSgnLi9saWJfc3BtX2Nsb3VkL21haW4nKSgpO1xuICAgIH1cbiAgfTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvcGx1Z2luc193ZWJfY2xvdWQvYXBsdXNfc3BtX2Nsb3VkLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBhbGlsb2cvcyAtIHNyYy9wbHVnaW5zL2xpYl9zcG0vbWFpbi5qc1xuICogU1BNIOWfi+eCueiEmuacrFxuICogQHNlZSBodHRwOi8vd2lraS51ZWQudGFvYmFvLm5ldC9kb2t1LnBocD9pZD10bXM6c3BtJUU1JTlGJThCJUU3JTgyJUI5JUU2JTk2JUI5JUU2JUExJTg4XG4gKlxuICpcbiAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cbiAqXG4gKiBBdXRob3JzOlxuICogICBAYXV0aG9yIOWto+acrSA8aml6aGEud3lqQHRhb2Jhby5jb20+XG4gKiAgIFJpY2hhcmR86LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbERvbSA9IHJlcXVpcmUoJ0B1dGlscy91dGlsRG9tJyk7XG4vLyB2YXIgdXRpbEdvbGRsb2cgPSByZXF1aXJlKCdAdXRpbHMvdXRpbEdvbGRsb2cnKTtcblxuLy8gdmFyIG9wZW5BUEkgPSByZXF1aXJlKCcuL29wZW5BUEknKTtcbi8vIHZhciB3YXRjaENsaWNrID0gcmVxdWlyZSgnLi93YXRjaENsaWNrJyk7XG4vLyB2YXIgd2F0Y2hJZnJhbWUgPSByZXF1aXJlKCcuL3dhdGNoSWZyYW1lJyk7XG52YXIgd2F0Y2hTUE0gPSByZXF1aXJlKCcuL3dhdGNoU1BNJyk7XG4vLyB2YXIgd2F0Y2hXSFNwbSA9IHJlcXVpcmUoJy4vd2F0Y2hXSFNwbScpO1xuLy8gdmFyIHNwbSA9IHJlcXVpcmUoJy4vc3BtJyk7XG5cbi8qKlxuICog5YWo5bGAIFNQTSDmlrnms5VcbiAqIEBzZWUgaHR0cDovL3dpa2kudWVkLnRhb2Jhby5uZXQvZG9rdS5waHA/aWQ9dGVhbTp1ZGM6ZjJlOnVuaWZpZWQtYmVhY29uOnNwbS1vcGVuYXBpXG4gKlxuICogZ19zcG0uc3BtX2RfZm9yX2FkIEFQSSDnlKjkuo7lub/lkYrnmoRzcG1fZOS9jVxuICogZ19zcG0uc3BtIEFQSSDkuLoyMDE0LTA2LTA0IOaiteaYk+mcgOaxglxuICpcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgb2JqICA9IHtcbiAgICBpc1RvdWNoRW5hYmxlZDogdXRpbERvbS5pc1RvdWNoKCksXG4gIH07XG4gIHdhdGNoU1BNLnJ1bihvYmopO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL3BsdWdpbnNfd2ViX2Nsb3VkL2xpYl9zcG1fY2xvdWQvbWFpbi5qc1xuLy8gbW9kdWxlIGlkID0gMTA1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogYWxpbG9nL3MgLSBzcmMvcGx1Z2lucy9saWJfc3BtL21haW4uanNcbiAqIFNQTSDln4vngrnohJrmnKxcbiAqIEBzZWUgaHR0cDovL3dpa2kudWVkLnRhb2Jhby5uZXQvZG9rdS5waHA/aWQ9dG1zOnNwbSVFNSU5RiU4QiVFNyU4MiVCOSVFNiU5NiVCOSVFNiVBMSU4OFxuICpcbiAqXG4gKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG4gKlxuICogQXV0aG9yczpcbiAqICAgQGF1dGhvciDlraPmnK0gPGppemhhLnd5akB0YW9iYW8uY29tPlxuICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBlYWNoID0gcmVxdWlyZSgnQHV0aWxzL2VhY2gnKTtcbnZhciB1dGlsRXZlbnQgPSByZXF1aXJlKCdAdXRpbHMvdXRpbEV2ZW50Jyk7XG52YXIgdXRpbERhc2ggPSByZXF1aXJlKCdAdXRpbHMvdXRpbERhc2gnKTtcbnZhciB1dGlsVXJsID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxVcmwnKTtcbnZhciB1dGlsR1EgPSByZXF1aXJlKCdAdXRpbHMvdXRpbEdRJyk7XG52YXIgYXBsdXNTdGF0aWMgPSByZXF1aXJlKCdAdXRpbHMvYXBsdXNTdGF0aWMnKTtcbnZhciBpc0Z1bmN0aW9uID0gcmVxdWlyZSgnQHV0aWxzL2lzRnVuY3Rpb24nKTtcblxudmFyIGN1cnJlbnRQYWdlQ29uZmlnID0ge307XG5cbmZ1bmN0aW9uIGZpbmRBbmNob3JFbGVtZW50IChlbCwgY2FsbGJhY2spIHtcbiAgdmFyIHRhZ19uYW1lO1xuICB2YXIgZmxhZztcbiAgLy8gdmFyIHRpbWVzdGFtcCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICB3aGlsZSAoZWwgJiYgKHRhZ19uYW1lID0gZWwudGFnTmFtZSkpIHtcbiAgICBpZiAodGFnX25hbWUgPT09ICdBJykge1xuICAgICAgZmxhZyA9IHRydWU7XG4gICAgICBicmVhaztcbiAgICB9IGVsc2UgaWYgKHRhZ19uYW1lID09ICdCT0RZJyB8fCB0YWdfbmFtZSA9PSAnSFRNTCcpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBlbCA9IGVsLnBhcmVudE5vZGU7XG4gIH1cbiAgY2FsbGJhY2soZmxhZyA/IGVsIDogJycpO1xufVxuXG5mdW5jdGlvbiBmaW5kQXBsdXNBbmNob3JCeUFsaW5rRWwgKGFsaW5rRWwsIHN1Y2Nlc3NDYWxsYmFjaywgZmFpbHVyZUNhbGxiYWNrKSB7XG4gIHRyeSB7XG4gICAgdmFyIHRhZ19uYW1lO1xuICAgIHdoaWxlIChhbGlua0VsICYmICh0YWdfbmFtZSA9IGFsaW5rRWwudGFnTmFtZSkpIHtcbiAgICAgIHZhciBfcG9zX2lkID0gYWxpbmtFbCAmJiBhbGlua0VsLmdldEF0dHJpYnV0ZSA/IGFsaW5rRWwuZ2V0QXR0cmlidXRlKCdkYXRhLWFwbHVzLXBvcy1pZCcpIDogJyc7XG4gICAgICBpZiAoX3Bvc19pZCkge1xuICAgICAgICBpc0Z1bmN0aW9uKHN1Y2Nlc3NDYWxsYmFjaykgJiYgc3VjY2Vzc0NhbGxiYWNrKGFsaW5rRWwsIF9wb3NfaWQpO1xuICAgICAgICBicmVhaztcbiAgICAgIH0gZWxzZSBpZiAodGFnX25hbWUgPT0gJ0JPRFknIHx8IHRhZ19uYW1lID09ICdIVE1MJykge1xuICAgICAgICBpc0Z1bmN0aW9uKHN1Y2Nlc3NDYWxsYmFjaykgJiYgc3VjY2Vzc0NhbGxiYWNrKGFsaW5rRWwsICdQQUdFJyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgYWxpbmtFbCA9IGFsaW5rRWwucGFyZW50Tm9kZTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpc0Z1bmN0aW9uKGZhaWx1cmVDYWxsYmFjaykgJiYgZmFpbHVyZUNhbGxiYWNrKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0QXBsdXNDbGtDb25maWcgKF9wb3NfaWQpIHtcbiAgdmFyIGFwbHVzQXV0b0Nsa0NvbmZpZyA9IGFwbHVzLmdldE1ldGFJbmZvKCdhcGx1cy1hdXRvLWNsaycpIHx8IFtdO1xuICB2YXIgY2xrQ29uZmlnID0ge307XG4gIGlmIChfcG9zX2lkID09PSAnUEFHRScpIHtcbiAgICByZXR1cm4gYXBsdXNBdXRvQ2xrQ29uZmlnWzBdIHx8IHt9O1xuICB9IGVsc2Uge1xuICAgIGVhY2goYXBsdXNBdXRvQ2xrQ29uZmlnLCBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICBpZiAoY29uZmlnLl9wb3NfaWQgPT09IF9wb3NfaWQpIHtcbiAgICAgICAgY2xrQ29uZmlnID0gY29uZmlnO1xuICAgICAgICByZXR1cm4gJ2JyZWFrJztcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gY2xrQ29uZmlnO1xuICB9XG59XG5cbi8qKlxuICog5Zyo57uZ5a6a55qEIGhyZWYg5Lit6Ze05o+S5YWlIHNwbSDlj4LmlbDvvIzlpoLmnpzljp/mnaUgaHJlZiDkuK3lt7LmnIkgc3Bt77yM5YiZ5bCG5YW25pu05pawXG4gKiBAcGFyYW0gaHJlZiB7U3RyaW5nfVxuICogQHBhcmFtIHNwbV9pZCB7U3RyaW5nfVxuICovXG5mdW5jdGlvbiBzcG1fdXBkYXRlSHJlZldpdGhTUE1JZChocmVmLCBzcG1faWQpIHtcbiAgLy8g5Y675o6J546w5pyJ55qEIGhyZWYg5Lit55qEIHNwbSDlj4LmlbBcbiAgaWYgKGhyZWYgJiYgLyY/XFxiX3NyY19wb3NfaWQ9W14mI10qLy50ZXN0KGhyZWYpKSB7XG4gICAgaHJlZiA9IGhyZWYucmVwbGFjZSgvJj9cXGJfc3JjX3Bvc19pZD1bXiYjXSovZywgJycpXG4gICAgICAucmVwbGFjZSgvJnsyLH0vZywgJyYnKVxuICAgICAgLnJlcGxhY2UoL1xcPyYvLCAnPycpXG4gICAgICAucmVwbGFjZSgvXFw/JC8sICcnKVxuICAgIDtcbiAgfVxuXG4gIGlmICghc3BtX2lkKSByZXR1cm4gaHJlZjtcblxuICAvLyDlnKggaHJlZiDkuK3mj5LlhaXmlrDnmoQgc3BtIOWPguaVsFxuICB2YXIgc2VhcmNoO1xuICB2YXIgaGFzaDtcbiAgdmFyIGE7XG4gIHZhciBhbmRfY2hhciA9ICcmJztcbiAgdmFyIHF1ZXJ5X3NwbGl0O1xuICB2YXIgcXVlcnlfY291bnQ7XG4gIHZhciBmaWxlbmFtZTtcbiAgdmFyIGZpbGVfZXh0O1xuXG4gIGlmIChocmVmLmluZGV4T2YoJyMnKSAhPT0gLTEpIHtcbiAgICBhID0gaHJlZi5zcGxpdCgnIycpO1xuICAgIGhyZWYgPSBhLnNoaWZ0KCk7XG4gICAgaGFzaCA9IGEuam9pbignIycpOyAvLyDlj5bnrKzkuIDkuKogIyDlkI7nmoTpg6jliIZcbiAgfVxuICBxdWVyeV9zcGxpdCA9IGhyZWYuc3BsaXQoJz8nKTtcbiAgcXVlcnlfY291bnQgPSBxdWVyeV9zcGxpdC5sZW5ndGggLSAxO1xuXG4gIC8vIOS4i+mdouWkhOeQhuW9ouWmguKAnGh0dHA6Ly93d3cudGFvYmFvLmNvbeKAnei/meagt+eahOacq+WwvuS4jeW4puKAnC/igJ3nmoTpk77mjqVcbiAgLy8g6L+Z56eN6ZO+5o6l5a+55bqU55qEZmlsZW5hbWXkuLrnqbpcbiAgYSA9IHF1ZXJ5X3NwbGl0WzBdLnNwbGl0KCcvLycpO1xuICBhID0gYVthLmxlbmd0aCAtIDFdLnNwbGl0KCcvJyk7XG4gIGZpbGVuYW1lID0gYS5sZW5ndGggPiAxID8gYS5wb3AoKSA6ICcnO1xuXG4gIGlmIChxdWVyeV9jb3VudCA+IDApIHtcbiAgICAvKipcbiAgICAgKiDnlLHkuo7lrZjlnKjnsbvkvLwgaHR0cDovL2p1LmF0cGFuZWwuY29tLz9zY209MTAwNS4xMC4xLjcwMyZ1cmw9aHR0cDovL3d3dy50bWFsbC5jb20vZ28vYWN0L3RtYWxsL215bXgteW0ucGhwP19zcmNfcG9zX2lkPTEuMTAwMDM4Ni4yMjIwMTcuMjAmYWRfaWQ9JmFtX2lkPSZjbV9pZD0mcG1faWQ9MTUwMTAwODI3MjYzMzY4MDg1ZjhcbiAgICAgKiDov5nmoLfnmoTpk77mjqXvvIzms6jmhI/lhbbkuK3mnInkuKTkuKrigJw/4oCd77yMXG4gICAgICog6L+Z5piv5LiA56eN6Lez6L2s6ZO+5o6l77yM5YW25LitIHNwbSDlj4LmlbDpnIDopoHliqDlnKjlkI7pnaLkuIDkuKogPyDkuYvlkI7vvIxcbiAgICAgKiDnu4/kuI7morXmmJPllYbph4/vvIgyMDEyLTAzLTMw77yJ77yM5Yaz5a6a57uf5LiA5bCGIHNwbSDlj4LmlbDliqDliLAgaHJlZiDnmoTmnIDlkI7kuIDkuKogPyDkuYvlkI5cbiAgICAgKi9cbiAgICBzZWFyY2ggPSBxdWVyeV9zcGxpdC5wb3AoKTsgLy8g5Y+W5pyA5ZCO5LiA5LiqID8g5ZCO55qE6YOo5YiGXG4gICAgaHJlZiA9IHF1ZXJ5X3NwbGl0LmpvaW4oJz8nKTsgLy8g5pyA5ZCO5LiA5LiqID8g5LmL5YmN55qE6YOo5YiGXG4gIH1cblxuICBpZiAoc2VhcmNoICYmXG4gICAgcXVlcnlfY291bnQgPiAxICYmIC8vICMg5Y+q5a+55Lik5Liq5Y+K5Lul5LiK55qE4oCcP+KAneeahCB1cmwg5omn6KGM6L+Z5qC355qE5qOA5rWLXG4gICAgc2VhcmNoLmluZGV4T2YoJyYnKSA9PSAtMSAmJlxuICAgIC8vIHNlYXJjaC5pbmRleE9mKCc9JykgPT0gLTEgJiZcbiAgICBzZWFyY2guaW5kZXhPZignJScpICE9PSAtMSkge1xuICAgIC8qKlxuICAgICAqIOacieS4gOS6m+mhtemdou+8jOWmgiBodHRwOi8vbG9naW4udGFvYmFvLmNvbS9tZW1iZXIvbG9nb3V0LmpodG1sP2Y9dG9wJnJlZGlyZWN0VVJMPWh0dHA6Ly9sb2dpbi50bWFsbC5jb20vP19zcmNfcG9zX2lkPTEwMDcuMTAwMzYxLjAuMTgwJTI2cmVkaXJlY3RfdXJsPWh0dHAlMjUzQSUyNTJGJTI1MkZ0ZW1haS50bWFsbC5jb20lMjUyRiUyNTNGc3BtJTI1M0QzLjEwMDA0NzMuMTk3NTYyLjIlMjUyNnBydCUyNTNEMTMzNjM2NzQyNTE5NiUyNTI2cHJjJTI1M0Q0XG4gICAgICogc3BtIOWPguaVsOWKoOWcqOesrOS6jOS4qiA/IOS5i+WQju+8jOS9huaYr+esrOS6jOS4qiA/IOS5i+WQjueahCAmIOmDveW3sue7j+WBmuS6huinhOiMg+eahOi9rOegge+8jOaJgOS7peaWsOa3u+WKoOeahCBzcG0g5ZCO6Z2i55qEICYg5Lmf6KaB6L+b6KGM6L2s56CBXG4gICAgICovXG4gICAgYW5kX2NoYXIgPSAnJTI2JztcbiAgfVxuXG4gIHZhciBzcG1fcHJlZml4ID0gJyc7IC8vIOWmguaenOW9k+WJjeWcqGlmcmFtZeS4re+8jOW5tuS4lGlmcmFtZeaciXNwbeWPguaVsO+8jOWImei/meS4quWJjee8gOS4jeS4uuepulxuICBocmVmID0gaHJlZiArICc/X3NyY19wb3NfaWQ9JyArIHNwbV9wcmVmaXggKyBzcG1faWRcbiAgICArIChzZWFyY2ggPyAoYW5kX2NoYXIgKyBzZWFyY2gpIDogJycpXG4gICAgKyAoaGFzaCA/ICgnIycgKyBoYXNoKSA6ICcnKVxuICA7XG5cbiAgLyoqXG4gICAqIOa3u+WKoOaWh+S7tuWQjemineWkluWPguaVsFxuICAgKiDnlLHkuo7lnKhJReS4i++8jOWmguaenOWKoOS6hnNwbeWPguaVsOWPr+iDveS8muW8lei1t+aWh+S7tuWQjue8gOWQjeiiq+S/ruaUue+8jFxuICAgKlxuICAgKiDmr5TlpoLvvJpcbiAgICog5Y6f5aeL5LiL6L296ZO+5o6l77yaXG4gICAqIGh0dHA6Ly9kb3dubG9hZC5hbGlwYXkuY29tL3NlYy9lZGl0L2FsaWVkaXQuZXhlXG4gICAqXG4gICAqIOWKoOS6hnNwbeWPguaVsOS5i+WQju+8mlxuICAgKiBodHRwOi8vZG93bmxvYWQuYWxpcGF5LmNvbS9zZWMvZWRpdC9hbGllZGl0LmV4ZT9fc3JjX3Bvc19pZD1hMjEwNy4xLjEwMDAzNDEuMTDvvIjmnInpl67popjvvIxJReS4i+WQjue8gOWQjeiiq+S/ruaUueS4uuKAnC4xMOKAne+8iVxuICAgKlxuICAgKiDliqDkuoZmaWxl5Y+C5pWw5LmL5ZCO77yaXG4gICAqIGh0dHA6Ly9kb3dubG9hZC5hbGlwYXkuY29tL3NlYy9lZGl0L2FsaWVkaXQuZXhlP19zcmNfcG9zX2lkPWEyMTA3LjEuMTAwMDM0MS4xMCZmaWxlPWFsaWVkaXQuZXhl77yI5rKh5pyJ6Zeu6aKY77yJXG4gICAqXG4gICAqIOWboOatpO+8jOi/meWEv+S8muWvueW9ouWmguaWh+S7tuS4i+i9veeahOmTvuaOpea3u+WKoOS4gOS4qumineWkluWPguaVsFxuICAgKi9cbiAgZmlsZV9leHQgPSB1dGlsRGFzaC5pc0NvbnRhaW4oZmlsZW5hbWUsICcuJykgPyBmaWxlbmFtZS5zcGxpdCgnLicpLnBvcCgpLnRvTG93ZXJDYXNlKCkgOiAnJztcbiAgaWYgKGZpbGVfZXh0KSB7XG4gICAgaWYgKCh7XG4gICAgICAncG5nJzogMSxcbiAgICAgICdqcGcnOiAxLFxuICAgICAgJ2pwZWcnOiAxLFxuICAgICAgJ2dpZic6IDEsXG4gICAgICAnYm1wJzogMSxcbiAgICAgICdzd2YnOiAxXG4gICAgfSkuaGFzT3duUHJvcGVydHkoZmlsZV9leHQpKSB7XG4gICAgICAvLyDku6Xlm77niYflkI7nvIDlkI3nu5PlsL7nmoTpk77mjqXkuI3liqAgc3BtIOWPguaVsFxuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgaWYgKCFzZWFyY2ggJiYgcXVlcnlfY291bnQgPD0gMSkge1xuICAgICAgaWYgKCFoYXNoICYmICEoe1xuICAgICAgICAnaHRtJzogMSxcbiAgICAgICAgJ2h0bWwnOiAxLFxuICAgICAgICAncGhwJzogMSxcbiAgICAgICAgJ2FzcHgnOiAxLFxuICAgICAgICAnc2h0bWwnOiAxLFxuICAgICAgICAneGh0bWwnOiAxXG4gICAgICB9KS5oYXNPd25Qcm9wZXJ0eShmaWxlX2V4dCkpIHtcbiAgICAgICAgLy8g6K6k5Li65b2T5YmN5paH5Lu25piv5LiA5Liq5LiL6L295paH5Lu277yM5re75Yqg6aKd5aSW5Y+C5pWwXG4gICAgICAgIGhyZWYgKz0gJyZmaWxlPScgKyBmaWxlbmFtZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gaHJlZjtcbn1cblxuZnVuY3Rpb24gYXBsdXNUcmFja2VyIChhcGx1c0FuY2hvciwgX3Bvc19pZCkge1xuICB2YXIgYWxpbmtzID0gYXBsdXNBbmNob3IuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2EnKTtcbiAgdmFyIGNsa0NvbmZpZyA9IGdldEFwbHVzQ2xrQ29uZmlnKF9wb3NfaWQpIHx8IHt9O1xuICB2YXIgY3VycmVudFBhZ2UgPSBjdXJyZW50UGFnZUNvbmZpZy5wYWdlIHx8IHt9O1xuICB2YXIgc3BtQiA9IGNsa0NvbmZpZy5zcG1CIHx8IGN1cnJlbnRQYWdlLnNwbUI7XG4gIGlmICghc3BtQikge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbXlpbmRleCA9IDE7XG4gIGVhY2goYWxpbmtzLCBmdW5jdGlvbiAoYWxpbmspIHtcbiAgICAvLyDkuI3og73nm7TmjqXnlKjnspfmmrTnmoRmaW5kQWxs55qEYWxpbmvvvIzkvY3nva7ntKLlvJXkvJrkubFcbiAgICAvLyDpnIDlkJHkuIrmn6Xmib7kuIDpgY3vvIzlpoLmnpzmr5TovoPmt7HnmoToioLngrnlhoXlj4jorr7nva7kuoblhbbku5bnmoRfcG9zX2lk77yM5YiZ5LiN6IO95aSE55CGXG4gICAgZmluZEFwbHVzQW5jaG9yQnlBbGlua0VsKGFsaW5rLCBmdW5jdGlvbiAoYWxpbmtFbCwgcmVhbF9wb3NfaWQpIHtcbiAgICAgIGlmIChfcG9zX2lkID09PSByZWFsX3Bvc19pZCkge1xuICAgICAgICB2YXIgc3BtID0gX3Bvc19pZCA9PT0gJ1BBR0UnID8gW3NwbUIsIG15aW5kZXgrK10uam9pbignLicpIDogW3NwbUIsIF9wb3NfaWQsIG15aW5kZXgrK10uam9pbignLicpO1xuICAgICAgICBhcGx1cy5fY3VycmVudF9zcG0gPSBzcG07XG4gICAgICAgIHZhciBxID0gKHdpbmRvdy5hcGx1c19xdWV1ZSB8fCAod2luZG93LmFwbHVzX3F1ZXVlID0gW10pKTtcbiAgICAgICAgcS5wdXNoKHtcbiAgICAgICAgICBhY3Rpb246ICdhcGx1cy5hcHBlbmRNZXRhSW5mbycsXG4gICAgICAgICAgYXJndW1lbnRzOiBbJ2FwbHVzLWNwdmRhdGEnLCB7XG4gICAgICAgICAgICBfc3JjX3Bvc19pZDogc3BtXG4gICAgICAgICAgfV1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoYWxpbmsgJiYgYWxpbmsuc2V0QXR0cmlidXRlKSB7XG4gICAgICAgICAgICBpZiAoIWFsaW5rLmdldEF0dHJpYnV0ZSgnYXBsdXMtYW5jaG9yLWlkJykpIHtcbiAgICAgICAgICAgICAgYWxpbmsuc2V0QXR0cmlidXRlKCdhcGx1cy1hbmNob3ItaWQnLCBzcG0pO1xuICAgICAgICAgICAgICBpZiAoYWxpbmsuaHJlZiAmJiBhbGluay5ocmVmICE9PSAnIycpIHtcbiAgICAgICAgICAgICAgICBhbGluay5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBzcG1fdXBkYXRlSHJlZldpdGhTUE1JZChhbGluay5ocmVmLCBzcG0pKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBjb25zb2xlLndhcm4oJ+afpeaJvuWIsOWMheWQq+WFs+ezu+eahF9wb3NfaWQgPSAnLCByZWFsX3Bvc19pZCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufVxuXG4vKipcbiAqIHRpbWVzdGFtcDog55So5oi354K55Ye755qE5pe26Ze05oizLCDlpJrmnaHorrDlvZXmjInml7bpl7Tpobrluo/lgJLmjpIsIOWNs+e6pui/keeahOS4i+agh+e6pumdoOWJjVxuICogdGFyZ2V0X2V4cHJlc3Npb25fdHlwZTog55uu5qCH6ZO+5o6l6KGo6L6+5byP57G75Z6LLCDlj5blgLzlj6/og73kuLogbnVsbCwg5oiW6ICFaHJlZuWxnuaAp+WAvCwg5oiW6ICF55So5oi36Ieq5a6a5LmJ55qE6Lef6Liq5Y+C5pWwXG4gKiB0YXJnZXRfZXhwcmVzc2lvbjogIOeCueWHu+S9jee9ruWvueW6lOeahOebruagh+mTvuaOpeihqOi+vuW8jywgdHlwZeS4umhyZWbml7bkuLrkuIDkuKp1cmwsIOexu+Wei+S4uuiHquWumuS5ieWPguaVsOaXtiwg5YiZ5Li65LiA5Liq5LiN5a6a6ZW/55qE5a2X56ym5LiyXG4gKiBzcG1faWQ6IOiiq+eCueWHu+eCueS9jeeahHNwbee8lueggVxuICogbG9nX2lkOiDlvZPliY3pobXpnaLnmoRwdmlkXG4gKiBjdXJyZW50X3VybDog5b2T5YmN6aG16Z2i55qEVVJMXG4gKiBjdXJyZW50X3JlZmVycmVyOiDlvZPliY3pobXpnaLnmoRyZWZlcnJlcl91cmxcbiAqIHRyYWNraW5nX3BhcmFtOiDpnIDopoHpop3lpJbkvKDpgJLkuIvljrvnmoTml6Xlv5flj4LmlbBcbiAqL1xuZnVuY3Rpb24gZG9UcmFjZShlLCBlbCkge1xuICBmaW5kQW5jaG9yRWxlbWVudChlbCwgZnVuY3Rpb24gKGFsaW5rRWwpIHtcbiAgICBpZiAoYWxpbmtFbCAmJiAhYWxpbmtFbC5nZXRBdHRyaWJ1dGUoJ2FwbHVzLWFuY2hvci1pZCcpKXtcbiAgICAgIGZpbmRBcGx1c0FuY2hvckJ5QWxpbmtFbChhbGlua0VsLCBhcGx1c1RyYWNrZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ2ZpbmRBcGx1c0FuY2hvckJ5QWxpbmtFbCBmYWlsdXJlLi4uJyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBpbml0UGFnZVNwbSAoc291cmNlX3Bvc19pZCkge1xuICB2YXIgcSA9ICh3aW5kb3cuYXBsdXNfcXVldWUgfHwgKHdpbmRvdy5hcGx1c19xdWV1ZSA9IFtdKSk7XG4gIHZhciBfc3JjX3Bvc19pZCA9IHNvdXJjZV9wb3NfaWQgfHwgdXRpbFVybC5nZXRQYXJhbUZyb21VcmwoJ19zcmNfcG9zX2lkJywgbG9jYXRpb24uaHJlZik7XG4gIHEucHVzaCh7XG4gICAgYWN0aW9uOiAnYXBsdXMuYXBwZW5kTWV0YUluZm8nLFxuICAgIGFyZ3VtZW50czogWydhcGx1cy1jcHZkYXRhJywge1xuICAgICAgX3NyY19wb3NfaWQ6IF9zcmNfcG9zX2lkXG4gICAgfV1cbiAgfSk7XG4gIHEucHVzaCh7XG4gICAgYWN0aW9uOiAnYXBsdXMuYXBwZW5kTWV0YUluZm8nLFxuICAgIGFyZ3VtZW50czogWydhcGx1cy1leGRhdGEnLCB7XG4gICAgICBfc3JjX3Bvc19pZDogX3NyY19wb3NfaWRcbiAgICB9XVxuICB9KTtcbiAgLy8g6aaW5qyhUFblkI7muIXnkIbmjonmnaXmupBwb3NfaWRcbiAgcS5wdXNoKHtcbiAgICBhY3Rpb246ICdhcGx1cy5hcGx1c19wdWJzdWIuc3Vic2NyaWJlJyxcbiAgICBhcmd1bWVudHM6IFthcGx1c1N0YXRpYy5NV19DSEFOR0VfUFYsIGZ1bmN0aW9uIChvcmlEYXRhcykge1xuICAgICAgaWYgKG9yaURhdGFzLnN0YXR1cyA9PT0gJ2NvbXBsZXRlJykge1xuICAgICAgICBhcGx1cy5hcHBlbmRNZXRhSW5mbygnYXBsdXMtY3B2ZGF0YScsIHtcbiAgICAgICAgICBfc3JjX3Bvc19pZDogJydcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfV1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHdhdGNoUGFnZUNvbmZpZyAoKSB7XG4gIC8vIHV0aWxHUS5wdXNoSW50b0dvbGRsb2dRdWV1ZShhcGx1c1N0YXRpYy5QVUJMSVNILCBbYXBsdXNTdGF0aWMuQ1VSUkVOVF9QQUdFX0NPTkZJRywgY3VycmVudFBhZ2VDb25maWddKTtcbiAgdXRpbEdRLnB1c2hJbnRvR29sZGxvZ1F1ZXVlKGFwbHVzU3RhdGljLlNVQlNDUklCRSwgW2FwbHVzU3RhdGljLkNVUlJFTlRfUEFHRV9DT05GSUcsIGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICBjdXJyZW50UGFnZUNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgfV0pO1xufVxuXG5mdW5jdGlvbiB3YXRjaEFwbHVzQXV0b0NsayAoKSB7XG4gIHZhciBxID0gKHdpbmRvdy5hcGx1c19xdWV1ZSB8fCAod2luZG93LmFwbHVzX3F1ZXVlID0gW10pKTtcbiAgcS5wdXNoKHtcbiAgICBhY3Rpb246ICdhcGx1cy5zZXRNZXRhSW5mbycsXG4gICAgYXJndW1lbnRzOiBbJ2FwbHVzLWF1dG8tY2xrLXVzZXJmbicsIGZ1bmN0aW9uIChlbCkge1xuICAgICAgdmFyIGFwbHVzQW5jaG9ySWQgPSBlbCA/IGVsLmdldEF0dHJpYnV0ZSgnYXBsdXMtYW5jaG9yLWlkJykgOiAnJztcbiAgICAgIGlmIChhcGx1c0FuY2hvcklkKSB7XG4gICAgICAgIHJldHVybiAnX3Bvc19pZD0nICsgYXBsdXNBbmNob3JJZDsgIFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIF9wb3NfaWQgPSBlbCA/IGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1hcGx1cy1wb3MtaWQnKSA6ICcnO1xuICAgICAgICB2YXIgY2xrQ29uZmlnID0gX3Bvc19pZCA/IGdldEFwbHVzQ2xrQ29uZmlnKF9wb3NfaWQpIDoge307XG4gICAgICAgIGlmIChjbGtDb25maWcuc3BtQiAmJiBjbGtDb25maWcuX3Bvc19pZCkge1xuICAgICAgICAgIHZhciBzcG0gPVtjbGtDb25maWcuc3BtQiwgX3Bvc19pZF0uam9pbignLicpO1xuICAgICAgICAgIHJldHVybiAnX3Bvc19pZD0nICsgc3BtOyAgXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9IFxuICAgICAgfVxuICAgIH1dXG4gIH0pO1xufVxuXG4vKipcbiAqIOebkeWQrHRhcOS6i+S7tu+8jOe7mei2hemTvuaOpeWKoHNwbeS/oeaBr++8jOe7memdnui2hemTvuaOpea3u+WKoGRhdGEtc3BtLWFuY2hvci1pZOWxnuaAp1xuICogQHBhcmFtcyB7b2JqZWN0fSBvYmoge1xuICogICBpc1RvdWNoRW5hYmxlZDogdHJ1ZXx8ZmFsc2VcbiAqIH1cbiAqL1xuZXhwb3J0cy5ydW4gPSBmdW5jdGlvbiAob2JqKSB7XG4gIHZhciBkb2MgPSBkb2N1bWVudDtcbiAgaW5pdFBhZ2VTcG0oKTtcbiAgd2F0Y2hQYWdlQ29uZmlnKCk7XG4gIHdhdGNoQXBsdXNBdXRvQ2xrKCk7XG4gIHdpbmRvdy5hcGx1cy5kb1RyYWNlID0gZG9UcmFjZTtcbiAgaWYgKG9iaiAmJiBvYmouaXNUb3VjaEVuYWJsZWQpIHtcbiAgICB1dGlsRXZlbnQub24oZG9jLCAndGFwU3BtJywgZG9UcmFjZSk7XG4gIH0gZWxzZSB7XG4gICAgdXRpbEV2ZW50Lm9uKGRvYywgJ21vdXNlZG93bicsIGRvVHJhY2UpO1xuICAgIHV0aWxFdmVudC5vbihkb2MsICdrZXlkb3duJywgZG9UcmFjZSk7XG4gIH1cbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9wbHVnaW5zX3dlYl9jbG91ZC9saWJfc3BtX2Nsb3VkL3dhdGNoU1BNLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBhbGlsb2cvcyAtIHNyYy9wbHVnaW5zL2xpYl9hcGkvbWFpbi5qc1xuICogQVBJ5o+S5Lu2XG4gKlxuICpcbiAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cbiAqXG4gKiBBdXRob3JzOlxuICogICBSaWNoYXJkfOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG4gKi9cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7XG4gICAgcnVuOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXF1aXJlKCcuL2xpYl9hcGkvbWFpbicpKHRoaXMub3B0aW9ucy5jb250ZXh0LmxvZ0NvbmZpZyk7XG4gICAgfVxuICB9O1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9wbHVnaW5zL2FwbHVzX2FwaS5qc1xuLy8gbW9kdWxlIGlkID0gMTA3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogYWxpbG9nL3MgLSBzcmMvcGx1Z2lucy9saWJfYXBpL21haW4uanNcbiAqIEFQSeaPkuS7tlxuICpcbiAqXG4gKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG4gKlxuICogQXV0aG9yczpcbiAqICAgUmljaGFyZHzosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlsUHVic3ViID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxQdWJzdWInKTtcbnZhciB1dGlsR29sZGxvZyA9IHJlcXVpcmUoJ0B1dGlscy91dGlsR29sZGxvZycpO1xuXG4vKipcbiAqIEBwYXJhbXMge09iamVjdH0gbG9nQ29uZmlnIHtcbiAqICAgIHB2OiB7XG4gKiAgICAgIHBsdWdpbnM6IHJlcXVpcmUoJy4vbGliX2xvZy9wbHVnaW5zX3B2JyksXG4gKiAgICAgIGNvbnRleHQ6IHJlcXVpcmUoJy4vbGliX2xvZy9jb25maWcvY29uZmlnX3UnKVxuICogICAgfSxcbiAqICAgIGhqbGo6IHtcbiAqICAgICAgcGx1Z2luczogcmVxdWlyZSgnLi9saWJfbG9nL3BsdWdpbnNfaGpsaicpLFxuICogICAgICBjb250ZXh0OiByZXF1aXJlKCcuL2xpYl9sb2cvY29uZmlnL2NvbmZpZ19oamxqX3UnKVxuICogICAgfVxuICogIH1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobG9nQ29uZmlnKSB7XG4gIHZhciBhcGx1cyA9IHV0aWxHb2xkbG9nLmdldEdsb2JhbFZhbHVlKCdhcGx1cycpO1xuICBpZiAoYXBsdXMuX2FwbHVzX2FwaSkge1xuICAgIHJldHVybjtcbiAgfSBlbHNlIHtcbiAgICBhcGx1cy5fYXBsdXNfYXBpID0ge1xuICAgICAgc3RhdHVzOiAnY29tcGxldGUnXG4gICAgfTtcbiAgfVxuXG4gIHZhciBhcGx1c09iaiA9IHJlcXVpcmUoJy4vYXBsdXMnKS5ydW4uY3JlYXRlKHtcbiAgICBsb2dDb25maWc6IGxvZ0NvbmZpZ1xuICB9KTtcbiAgZm9yICh2YXIgayBpbiBhcGx1c09iaikge1xuICAgIGFwbHVzW2tdID0gYXBsdXNPYmpba107XG4gIH1cblxuICAvLyDliJ3lp4vljJZwdmlkXG4gIHJlcXVpcmUoJ0B1dGlscy91dGlsUHZpZCcpLm1ha2VQVklkKCk7XG5cbiAgdmFyIG1zZ0FyciA9IFsnYXBsdXNSZWFkeScsICdjb21wbGV0ZSddO1xuICB1dGlsUHVic3ViLmRvUHViTXNnKG1zZ0Fycik7XG4gIHV0aWxQdWJzdWIuZG9DYWNoZVB1YnMobXNnQXJyKTtcblxufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL3BsdWdpbnMvbGliX2FwaS9tYWluLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBwcm9qZWN0IC0gZmlsZXBhdGhcbiAqIGRlc2NyaXB0aW9uXG4gKlxuICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuICpcbiAqIEF1dGhvcnM6XG4gKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG4gKi9cbid1c2Ugc3RyaWN0JztcblxuLy8gdmFyIGRvYyA9IGRvY3VtZW50O1xuXG52YXIgQmFzZSA9IHJlcXVpcmUoJ0Bjb3JlL0Jhc2UnKTtcbnZhciBjb29raWUgPSByZXF1aXJlKCdAdXRpbHMvY29va2llJyk7XG52YXIgdXRpbEV2ZW50ID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxFdmVudCcpO1xudmFyIHV0aWxMb2dnZXIgPSByZXF1aXJlKCdAdXRpbHMvdXRpbExvZ2dlcicpO1xudmFyIHV0aWxQdWJzdWIgPSByZXF1aXJlKCdAdXRpbHMvdXRpbFB1YnN1YicpO1xudmFyIHV0aWxEYXNoID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxEYXNoJyk7XG52YXIgdXRpbEdvbGRsb2cgPSByZXF1aXJlKCdAdXRpbHMvdXRpbEdvbGRsb2cnKTtcbnZhciBpc0Z1bmN0aW9uID0gcmVxdWlyZSgnQHV0aWxzL2lzRnVuY3Rpb24nKTtcbnZhciBhcGx1c1N0YXRpYyA9IHJlcXVpcmUoJ0B1dGlscy9hcGx1c1N0YXRpYycpO1xudmFyIHV0aWxHUSA9IHJlcXVpcmUoJ0B1dGlscy91dGlsR1EnKTtcbnZhciBSZWR1Y2VyID0gcmVxdWlyZSgnQGNvcmUvUmVkdWNlcicpO1xuXG52YXIgbWV0YUluZm8gPSByZXF1aXJlKCcuLi9saWJfbWV0YS9tZXRhSW5mb0FsaScpO1xudmFyIHJlcXVlc3QgPSByZXF1aXJlKCcuL3JlcXVlc3QnKTtcblxudmFyIGZuX2JlZm9yZV9wdiA9IFtdO1xudmFyIGZuX2FmdGVyX3B2ID0gW107XG52YXIgZm5fYmVmb3JlX3JlY29yZCA9IFtdO1xudmFyIGZuX2FmdGVyX3JlY29yZCA9IFtdO1xudmFyIGFwbHVzID0gdXRpbEdvbGRsb2cuZ2V0R2xvYmFsVmFsdWUoJ2FwbHVzJyk7XG52YXIgRU1QVFlfRk4gPSBmdW5jdGlvbiAoKSB7fTtcblxuZnVuY3Rpb24gZ2V0TW1zdGF0VGltZW91dCAoKSB7XG4gIHZhciB0aW1lID0gNTAwMDtcbiAgdHJ5IHtcbiAgICB2YXIgbG9uZ3RpbWUgPSBhcGx1cy5nZXRNZXRhSW5mbygnYXBsdXMtbW1zdGF0LXRpbWVvdXQnKTtcbiAgICBpZiAobG9uZ3RpbWUpIHtcbiAgICAgIHZhciB0aW1lSW50ID0gcGFyc2VJbnQobG9uZ3RpbWUpO1xuICAgICAgaWYgKHRpbWVJbnQgPj0gMTAwMCAmJiB0aW1lSW50IDw9IDEwMDAwKSB7XG4gICAgICAgIHRpbWUgID0gdGltZUludDtcbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHt9XG4gIHJldHVybiB0aW1lO1xufVxuXG5leHBvcnRzLnJ1biA9IEJhc2UuZXh0ZW5kKHtcbiAgLyoqXG4gICAqIOazqOWGjCBzZW5kUFYg5omn6KGM5LmL5YmN55qE5pa55rOVXG4gICAqIOi/meS6m+aWueazleWwhuWcqCBzZW5kUFYg5LmL5YmN5L6d5qyh5omn6KGM77yM5aaC5p6c5pyJ5LiA5Liq5pi+5byP6L+U5ZueIGZhbHNl77yM5YiZIHNlbmRQViDlsIbooqvlj5bmtohcbiAgICogQHBhcmFtIGZuIHtmdW5jdGlvbn1cbiAgICovXG4gIGJlZm9yZVNlbmRQVjogZnVuY3Rpb24gKGZuKSB7XG4gICAgZm5fYmVmb3JlX3B2LnB1c2goZm4pO1xuICB9LFxuXG4gIC8qKlxuICAgKiDms6jlhowgc2VuZFBWIOaJp+ihjOS5i+WQjueahOaWueazlVxuICAgKiDov5nkupvmlrnms5XlsIblnKggc2VuZFBWIOS5i+WQjuS+neasoeaJp+ihjFxuICAgKiBAcGFyYW0gZm4ge2Z1bmN0aW9ufVxuICAgKi9cbiAgYWZ0ZXJTZW5kUFY6IGZ1bmN0aW9uIChmbikge1xuICAgIGZuX2FmdGVyX3B2LnB1c2goZm4pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBHRVQg6K+35rGC5LiA5Liq5Zu+54mH5Zyw5Z2A77yM5ZCR5pyN5Yqh5Zmo5Y+R6YCB5omT54K5XG4gICAqXG4gICAqIEBwYXJhbSB1cmwge1N0cmluZ31cbiAgICogQHBhcmFtIFtkYXRhU3RyXSB7U3RyaW5nfVxuICAgKiBAcGFyYW0gW21ldGhvZF0ge1N0cmluZ30gIC8vIFBPU1QgT1IgR0VUXG4gICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICovXG4gIHNlbmQ6IGZ1bmN0aW9uICh1cmwsIGRhdGFTdHIsIG1ldGhvZCkge1xuICAgIHZhciBzcmM7XG4gICAgLy8g5aaC5p6cdXJs5rKh5pyJ5bim5Y2P6K6u77yM6L+Z6YeM6KGl5YWF5a6M5pW0XG4gICAgaWYgKHVybC5pbmRleE9mKCcvLycpID09PSAwKSB7XG4gICAgICB2YXIgcHJvdG9jYWwgPSBhcGx1c1N0YXRpYy5IVFRQUztcbiAgICAgIGlmICgvKFxcZCtcXC4pezMsfVxcZCsvLnRlc3QodXJsKSkge1xuICAgICAgICBwcm90b2NhbCA9ICdodHRwOic7XG4gICAgICB9XG4gICAgICB1cmwgPSBwcm90b2NhbCArIHVybDtcbiAgICB9XG4gICAgLy8g5oyH5a6a5LqGUE9TVOWImeS8mOWFiOaMiVBPU1Tlj5HpgIFcbiAgICBpZiAobWV0aG9kID09PSAnUE9TVCcgJiYgbmF2aWdhdG9yICYmIG5hdmlnYXRvci5zZW5kQmVhY29uKSB7XG4gICAgICBzcmMgPSByZXF1ZXN0LnBvc3REYXRhKHVybCwgZGF0YVN0cik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNyYyA9IHJlcXVlc3Quc2VuZEltZyh1cmwgKyAnPycgKyBkYXRhU3RyLCBnZXRNbXN0YXRUaW1lb3V0KCkpO1xuICAgIH1cbiAgICBhcGx1cy5yZXEgPSBzcmM7XG4gICAgcmV0dXJuIHNyYztcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIFtPYmplY3RdIGNvbmZpZzoge1xuICAgKiAgIGNoZWNrc3VtOiAxMTExMTExMSwgICAvLyDmoLnmja5zcG1hLHNwbWLoh6rliqjnlJ/miJDnmoTkuIDkuKrlrZfnrKbkuLJcbiAgICogICBpc19hdXRvOiB0cnVlL2ZhbHNl77yMIC8vIOagh+ivhuaYr+WQpuiHquWKqOaJk+eCue+8jOm7mOiupOS4unRydWXvvIzljZXpobXlupTnlKjpnIDopoHkvKBmYWxzZVxuICAgKiAgIHBhZ2VfaWQ6IDEyMywgICAgICAgICAvLyDlsIbkvJrkvZPnjrDlnKhzcG1i5L2N5LiKXG4gICAqICAgZ29rZXk6ICcnLCAgICAgICAgICAgIC8vIOeUqOaIt+iHquWumuS5ieWPguaVsO+8iOWQkeS4i+WFvOWuue+8jFRPRE/lkI7nu63kuIvmjonvvIlcbiAgICogfVxuICAgKiBAcGFyYW0gW09iamVjdF0gdXNlcmRhdGE6IHtcbiAgICogICByZWZlcnJlcjogJ2h0dHA6Ly93d3cudGFvYmFvLmNvbScgICAvLyDlsIbkvJrmm7/mjaJwduivt+axgueahHByZeWPguaVsFxuICAgKiAgIHh4eDE6ICd2dnYxJyxcbiAgICogICB4eHgyOiAndnZ2MicsXG4gICAqICAgeHh4TjogJ3Z2dk4nLFxuICAgKiB9ICAgLy8g5ZCE56eN6Ieq5a6a5LmJcHblj4LmlbBcbiAgICovXG4gIHNlbmRQVjogZnVuY3Rpb24gKGNvbmZpZywgdXNlcmRhdGEpIHtcbiAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gICAgLy8gMeOAgWJlZm9yZVNlbmRQVu+8jOWmguaenOS7u+aEj+S4gOS4quWHveaVsOi/lOWbnuWAvOS4uiBmYWxzZe+8jOWImeS4reaWreW5tumAgOWHuu+8jOS4jeWPkemAgSBQViDor7fmsYJcbiAgICBpZiAodXRpbERhc2guYW55KGZuX2JlZm9yZV9wdiwgZnVuY3Rpb24gKGZuKSB7XG4gICAgICByZXR1cm4gZm4oYXBsdXMsIGNvbmZpZykgPT09IGZhbHNlO1xuICAgIH0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8vIDLjgIHmiafooYwgc2VuZHB2IOaPkuS7tlxuICAgIHZhciByZWR1Y2VyID0gbmV3IFJlZHVjZXIoKTtcbiAgICBjb25maWcucmVjb3JkVHlwZSA9ICdQVic7IC8vIOWIpOaWreWNleWPjOWPkeeUqOeahO+8jOiAg+iZkeenu+mZpFxuXG4gICAgdmFyIHB2ID0gYXBsdXMubG9nQ29uZmlnLnB2O1xuICAgIHJlZHVjZXIucnVuKHtcbiAgICAgIHBsdWdpbnM6IHB2LnBsdWdpbnMsXG4gICAgICBjb250ZXh0OiB1dGlsRGFzaC5jbG9uZURlZXAocHYuY29udGV4dCkgLy8g6Ziy5q2i5rqQ6YWN572u6KKr5rGh5p+TXG4gICAgfSwge1xuICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICB1c2VyZGF0YTogdXNlcmRhdGEsXG4gICAgICBwdWJzdWJUeXBlOiAncHYnLFxuICAgICAgbWVzc2FnZUZuUXVldWU6IGZuX2FmdGVyX3B2LFxuICAgICAgbWlkZGxld2FyZU1lc3NhZ2VLZXk6ICdtd19jaGFuZ2VfcHYnXG4gICAgfSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbXMgY29uZmlnIHtcbiAgICogICBjb21wb25lbnRJZDogMTQ2MDA4XG4gICAqICAgcGFnZUlkOiDph4fpm4bnrqHnkIblubPlj7DkuIrnlJ/miJDnmoTllK/kuIDnmoRwYWdlSWQgaHR0cHM6Ly9sb2cyLWRhaWx5LmFsaWJhYmEubmV0L3RyYWNrL2RldmVsb3AvYXJlYS1tYW5hZ2VtZW50L2RldGFpbC8xNDYwMDMvODgwMDA0LzE0NjAwOFxuICAgKiB9XG4gICAqL1xuICBwYWdlRW50ZXI6IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICB1dGlsR1EucHVzaEludG9Hb2xkbG9nUXVldWUoYXBsdXNTdGF0aWMuUFVCTElTSCwgW2FwbHVzU3RhdGljLlBBR0VfRU5URVIsIGNvbmZpZ10pO1xuICAgIHV0aWxHUS5wdXNoSW50b0dvbGRsb2dRdWV1ZShhcGx1c1N0YXRpYy5DQUNIRV9QVUJTLCBbYXBsdXNTdGF0aWMuUEFHRV9FTlRFUiwgY29uZmlnXSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIOWFvOWuuXdlYnZpZXflhoXlm57osINnb2xkbG9nLmdldFBhcmFt5o6l5Y+j55qE5Z2RXG4gICAqL1xuICBnZXRQYXJhbTogZnVuY3Rpb24oc2lkKSB7XG4gICAgdmFyIHd2ID0gd2luZG93LldpbmRWYW5lIHx8IHt9O1xuICAgIHZhciB2YWx1ZSA9IHd2ICYmIHR5cGVvZiB3di5nZXRQYXJhbSA9PT0gJ2Z1bmN0aW9uJyA/IHd2LmdldFBhcmFtKHNpZCkgOiAnJztcbiAgICByZXR1cm4gdmFsdWU7XG4gIH0sXG5cbiAgYmVmb3JlUmVjb3JkOiBmdW5jdGlvbiAoZm4pIHtcbiAgICBmbl9iZWZvcmVfcmVjb3JkLnB1c2goZm4pO1xuICB9LFxuXG4gIGFmdGVyUmVjb3JkOiBmdW5jdGlvbiAoZm4pIHtcbiAgICBmbl9hZnRlcl9yZWNvcmQucHVzaChmbik7XG4gIH0sXG5cbiAgLyoqXG4gICAqIOWPkemAgem7hOmHkeS7pOeureaJk+eCuVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbG9na2V5XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBnbWtleVxuICAgKiBAcGFyYW0ge1N0cmluZ30gZ29rZXlcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZCDor7fmsYLmlrnms5XkuLogUE9TVCBvciBHRVRcbiAgICogQHBhcmFtIHtTdHJpbmd9IGNiXG4gICAqL1xuICByZWNvcmQ6IGZ1bmN0aW9uIChsb2drZXksIGdta2V5LCBnb2tleSwgbWV0aG9kLCBjYikge1xuICAgIC8vIG1ldGhvZCA9ICdHRVQnOyAvLyB1dGlsLmlzU3RyaW5nKG1ldGhvZCkgPyBtZXRob2QudG9VcHBlckNhc2UoKSA6ICdHRVQnO1xuICAgIC8vIGJlZm9yZVJlY29yZCDvvIzlpoLmnpzku7vmhI/kuIDkuKrlh73mlbDov5Tlm57lgLzkuLogZmFsc2XvvIzliJnkuK3mlq3lubbpgIDlh7rvvIzkuI3lj5HpgIEgcmVjb3JkIOivt+axglxuICAgIGlmIChsb2drZXkgJiYgbG9na2V5LmluZGV4T2YoJy8nKSAhPT0gMCAmJiBhcGx1cy5nbG9iYWxDb25maWcuaXNBbGkpIHtcbiAgICAgIGxvZ2tleSA9ICcvJyArIGxvZ2tleTtcbiAgICB9XG4gICAgaWYgKHV0aWxEYXNoLmFueShmbl9iZWZvcmVfcmVjb3JkLCBmdW5jdGlvbiAoZm4pIHtcbiAgICAgIHJldHVybiBmbihhcGx1cykgPT09IGZhbHNlO1xuICAgIH0pKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciByZWR1Y2VyID0gbmV3IFJlZHVjZXIoKTtcbiAgICB2YXIgaGpsaiA9IGFwbHVzLmxvZ0NvbmZpZy5oamxqO1xuICAgIHJlZHVjZXIucnVuKHtcbiAgICAgIHBsdWdpbnM6IGhqbGoucGx1Z2lucyxcbiAgICAgIGNvbnRleHQ6IHV0aWxEYXNoLmNsb25lRGVlcChoamxqLmNvbnRleHQpIC8vIOmYsuatoua6kOmFjee9ruiiq+axoeafk1xuICAgIH0sIHtcbiAgICAgIGNvbmZpZzoge1xuICAgICAgICByZWNvcmRUeXBlOiAnQ09NTU9OX0hKTEonLCAvLyDliKTmlq3ljZXlj4zlj5HnlKjnmoTvvIzogIPomZHnp7vpmaRcbiAgICAgICAgbWV0aG9kOiBtZXRob2RcbiAgICAgIH0sXG4gICAgICB1c2VyZGF0YToge1xuICAgICAgICBsb2drZXk6IGxvZ2tleSxcbiAgICAgICAgZ21rZXk6IGdta2V5LFxuICAgICAgICBnb2tleTogZ29rZXlcbiAgICAgIH0sXG4gICAgICBwdWJzdWJUeXBlOiAnaGpsaicsXG4gICAgICBtZXNzYWdlRm5RdWV1ZTogZm5fYWZ0ZXJfcmVjb3JkLFxuICAgICAgbWlkZGxld2FyZU1lc3NhZ2VLZXk6ICdtd19jaGFuZ2VfaGpsaidcbiAgICB9LCBmdW5jdGlvbigpe1xuICAgICAgaWYgKGlzRnVuY3Rpb24oY2IpKSB7XG4gICAgICAgIGNiKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcblxuICAvKipcbiAgICog5pq06Zyy57uZYXBsdXNfc3BtLmpzLCDlj5HpgIHlj6/op4bljJbpu4Tph5Hku6Tnrq1cbiAgICogQHBhcmFtIHtTdHJpbmd9IGxvZ2tleVxuICAgKiBAcGFyYW0ge1N0cmluZ30gZ21rZXlcbiAgICogQHBhcmFtIHtTdHJpbmd9IGdva2V5XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXRob2Qg6K+35rGC5pa55rOV5Li6IFBPU1Qgb3IgR0VUXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBjYlxuICAgKi9cbiAgcmVjb3JkVWRhdGE6IGZ1bmN0aW9uIChsb2drZXksIGdta2V5LCBnb2tleSwgbWV0aG9kLCBjYikge1xuICAgIHZhciByZWR1Y2VyID0gbmV3IFJlZHVjZXIoKTtcbiAgICB2YXIgaGpsaiA9IGFwbHVzLmxvZ0NvbmZpZy5oamxqO1xuICAgIHJlZHVjZXIucnVuKHtcbiAgICAgIHBsdWdpbnM6IGhqbGoucGx1Z2lucyxcbiAgICAgIGNvbnRleHQ6IHV0aWxEYXNoLmNsb25lRGVlcChoamxqLmNvbnRleHQpIC8vIOmYsuatoua6kOmFjee9ruiiq+axoeafk1xuICAgIH0sIHtcbiAgICAgIGNvbmZpZzoge1xuICAgICAgICByZWNvcmRUeXBlOiAnREFUQUNMSUNLX0hKTEonLCAvLyDliKTmlq3ljZXlj4zlj5HnlKjnmoTvvIzogIPomZHnp7vpmaRcbiAgICAgICAgbWV0aG9kOiBtZXRob2RcbiAgICAgIH0sXG4gICAgICB1c2VyZGF0YToge1xuICAgICAgICBsb2drZXk6IGxvZ2tleSxcbiAgICAgICAgZ21rZXk6IGdta2V5LFxuICAgICAgICBnb2tleTogZ29rZXlcbiAgICAgIH0sXG4gICAgICBwdWJzdWJUeXBlOiAnaGpsaicsXG4gICAgICBtZXNzYWdlRm5RdWV1ZTogZm5fYWZ0ZXJfcmVjb3JkLFxuICAgICAgbWlkZGxld2FyZU1lc3NhZ2VLZXk6ICdtd19jaGFuZ2VfaGpsaidcbiAgICB9LCBmdW5jdGlvbigpe1xuICAgICAgaWYgKGlzRnVuY3Rpb24oY2IpKSB7XG4gICAgICAgIGNiKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIOabtOaWsOmhtemdoueahCBh44CBYiDkvY1cbiAgICog6ZyA5rGC5Y+C6KeB77yaaHR0cDovL2dpdGxhYi5hbGliYWJhLWluYy5jb20vYWxpbG9nL2tiL2lzc3Vlcy8xMzdcbiAgICogQHBhcmFtIGEge1N0cmluZ31cbiAgICogQHBhcmFtIFtiXSB7U3RyaW5nfVxuICAgKiBAcGFyYW0gW2NiXSB7RnVuY3Rpb259XG4gICAqL1xuICBzZXRQYWdlU1BNOiBmdW5jdGlvbiAoYSwgYiwgY2IpIHtcbiAgICAvKlxuICAgICAqIFtzcG1GbGFnXSB7Ym9vbGVhbn0gMjAxOC8zLzEyLTQvMyDor6XmoIfor4bkuLp0cnVl77yM6KGo56S6c3BtLXByZeWSjHNwbS11cmzkuI3kvJrmlLnlj5hcbiAgICAgKiDor6bop4HvvJpodHRwczovL2xhcmsuYWxpcGF5LmNvbS9semR0cmFja2luZy92b3lhZ2VyYXBwL3BkcHYzI2FwbHVzLXRyYWNraW5nLWxpYlxuICAgICAqL1xuICAgIHZhciBzcG1GbGFnID0gYXBsdXMuZ2V0TWV0YUluZm8oJ2FwbHVzLXNwbS1maXhlZCcpO1xuICAgIHZhciBjYWxsYmFjayA9IHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJyA/IGNiIDogZnVuY3Rpb24gKCkge307XG4gICAgLy8g5pu05paw5YaF6YOo5Y+Y6YeP5YC8XG4gICAgYXBsdXMuc3BtX2FiID0gYXBsdXMuc3BtX2FiIHx8IFtdO1xuICAgIHZhciBvbGRfc3BtYWIgPSB1dGlsRGFzaC5jbG9uZURlZXAoYXBsdXMuc3BtX2FiKTtcblxuXG4gICAgaWYgKGEpIHtcbiAgICAgIGFwbHVzLnNwbV9hYlswXSA9ICcnICsgYTtcbiAgICAgIGFwbHVzLl8kLnNwbS5kYXRhLmEgPSAnJyArIGE7XG4gICAgfVxuICAgIGlmIChiKSB7XG4gICAgICBhcGx1cy5zcG1fYWJbMV0gPSAnJyArIGI7XG4gICAgICBhcGx1cy5fJC5zcG0uZGF0YS5iID0gJycgKyAgYjtcbiAgICB9XG5cbiAgICAvLyB2YXIgXyQgPSB1dGlsR29sZGxvZy5nZXRHb2xkbG9nVmFsKCdfJCcpIHx8IHt9O1xuICAgIHZhciBtZXRhX2luZm8gPSBtZXRhSW5mby5xR2V0KCk7XG4gICAgLy8g55Sf5oiQIFBWIOaJk+eCueeahOaVsOaNriBUT0RPXG4gICAgYXBsdXMuc3BtQVBJICYmIGFwbHVzLnNwbUFQSS5zcGFJbml0KGFwbHVzLCBtZXRhX2luZm8sIG9sZF9zcG1hYik7XG5cbiAgICBpZiAoc3BtRmxhZyAhPT0gJzEnKSB7XG4gICAgICB2YXIgX3NwbWFiX3ByZSA9IG9sZF9zcG1hYi5qb2luKCcuJyk7XG4gICAgICBhcGx1cy5zcG1hYl9wcmUgPSBfc3BtYWJfcHJlO1xuICAgIH1cbiAgICB2YXIgbXNncyA9IFsnc2V0UGFnZVNQTScsIHtcbiAgICAgIHNwbWFiX3ByZTogYXBsdXMuc3BtYWJfcHJlLFxuICAgICAgc3BtYWI6IGFwbHVzLnNwbV9hYi5qb2luKCcuJylcbiAgICB9XTtcbiAgICB1dGlsUHVic3ViLmRvUHViTXNnKG1zZ3MpO1xuICAgIHV0aWxQdWJzdWIuZG9DYWNoZVB1YnMobXNncyk7XG5cbiAgICAvLyByZXNldE1ldGFBbmRCb2R5KCk7XG4gICAgLy8gcmVzZXRNb2R1bGVzKCk7XG5cbiAgICBjYWxsYmFjaygpO1xuICB9LFxuXG4gIC8qKlxuICAgKiDliqjmgIHphY3nva5tZXRhXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBrXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB2XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIHtcbiAgICogICBmcm9tOiAnYXBwZW5kTWV0YUluZm8nXG4gICAqICAgcHJpb3JpdHk6IDEsIC8vIOiuvue9ruS6huS8mOWFiOe6pzHvvIzlkIzml7bmnIk8bWV0YSBuYW1lPVwiYXBsdXMteC1zZXR0aW5nc1wiIGNvbnRlbnQ9XCIke2FwbHVz5o+S5Lu25ZCNfSRcIj7vvIzov5nlj6rog73orr7nva7kuIDmrKFcbiAgICogfVxuICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgKi9cbiAgc2V0TWV0YUluZm86IGZ1bmN0aW9uKGFyZzEsIHZhbHVlLCBvcHRzKSB7XG4gICAgdmFyIGs7XG4gICAgdmFyIHY7XG4gICAgdmFyIGRlZmF1bHRNb2RlID0gJ09WRVJXUklURSc7XG4gICAgdmFyIG1vZGUgPSBkZWZhdWx0TW9kZTtcbiAgICBpZiAodHlwZW9mIGFyZzEgPT09ICdvYmplY3QnKSB7XG4gICAgICBrID0gYXJnMS5tZXRhTmFtZTtcbiAgICAgIHYgPSBhcmcxLm1ldGFWYWx1ZTtcbiAgICAgIG1vZGUgPSBhcmcxLm1vZGUgfHwgZGVmYXVsdE1vZGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGsgPSBhcmcxO1xuICAgICAgdiA9IHZhbHVlO1xuICAgIH1cbiAgICBpZiAobW9kZSA9PT0gZGVmYXVsdE1vZGUpIHtcbiAgICAgIGlmIChtZXRhSW5mby5zZXRNZXRhSW5mbyhrLCB2LCBvcHRzKSkge1xuICAgICAgICB2YXIgXyQgPSB1dGlsR29sZGxvZy5nZXRHb2xkbG9nVmFsKCdfJCcpIHx8IHt9O1xuICAgICAgICBfJC5tZXRhX2luZm8gPSBtZXRhSW5mby5xR2V0KCk7XG4gICAgICAgIHZhciBycyA9IHV0aWxHb2xkbG9nLnNldEdvbGRsb2dWYWwoJ18kJywgXyQpO1xuXG4gICAgICAgIHZhciBtc2dzID0gWydzZXRNZXRhSW5mbycsIGssIHYsIG9wdHNdO1xuICAgICAgICB1dGlsUHVic3ViLmRvUHViTXNnKG1zZ3MpO1xuICAgICAgICB1dGlsUHVic3ViLmRvQ2FjaGVQdWJzKG1zZ3MpO1xuICAgICAgICByZXR1cm4gcnM7XG4gICAgICB9IFxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5hcHBlbmRNZXRhSW5mbyhrLCB2KTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRvIGFwcGVuZCBgbWV0YWAgdGFnIGlmIHRoZXJlJ3Mgbm9uZSBhcGx1cyBtZXRhLlxuICAgKiBPdGhlcndpc2UsIG1lcmdlIGNvbnRlbnQgYXR0cmlidXRlczpcbiAgICogIC0gYEFycmF5LnByb3RvdHlwZS5jb25jYXRgIGNhbGxlZCBvbiBBcnJheSB2YWx1ZXMuXG4gICAqICAtIGBPYmplY3QuYXNzaWduYCBjYWxsZWQgb24gT2JqZWN0IHZhbHVlcy5cbiAgICogIEBwYXJhbSBrXG4gICAqICBAcGFyYW0gdlxuICAgKi9cbiAgYXBwZW5kTWV0YUluZm86IG1ldGFJbmZvLmFwcGVuZE1ldGFJbmZvLFxuXG4gIC8qKlxuICAgKiBodHRwczovL3l1cXVlLmFudGZpbi1pbmMuY29tL2FwbHVzanMvcHJvamVjdC9hcGx1c19jbG91ZCMzMzJkZTYyY1xuICAgKi9cbiAgdXBkYXRlUGFnZVByb3BlcnRpZXM6IGZ1bmN0aW9uIChwcm9wZXJ0aWVzKSB7XG4gICAgaWYgKHByb3BlcnRpZXMgJiYgdHlwZW9mIHByb3BlcnRpZXMgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAocHJvcGVydGllcy5fcGFnZSkge1xuICAgICAgICBwcm9wZXJ0aWVzLnBhZ2VOYW1lID0gcHJvcGVydGllcy5fcGFnZTtcbiAgICAgICAgYXBsdXMuc2V0TWV0YUluZm8oJ2FwbHVzLXBhZ2VuYW1lJywgcHJvcGVydGllcy5wYWdlTmFtZSk7XG4gICAgICAgIGRlbGV0ZSBwcm9wZXJ0aWVzLl9wYWdlO1xuICAgICAgfVxuICAgICAgYXBsdXMuYXBwZW5kTWV0YUluZm8oJ2FwbHVzLWNwdmRhdGEnLCBwcm9wZXJ0aWVzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdXRpbExvZ2dlci5sb2dnZXIoe1xuICAgICAgICBtc2c6ICd3YXJuaW5nOiB0eXBlb2YgdXBkYXRlUGFnZVByb3BlcnRpZXNcXCdzIHBhcmFtcyBtdXN0IGJlIG9iamVjdCdcbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogaHR0cHM6Ly95dXF1ZS5hbnRmaW4taW5jLmNvbS9hcGx1c2pzL3Byb2plY3QvYXBsdXNfY2xvdWQjNjAzNGMxZGFcbiAgICovXG4gIHVwZGF0ZU5leHRQYWdlUHJvcGVydGllczogZnVuY3Rpb24gKHByb3BlcnRpZXMpIHtcbiAgICBpZiAodHlwZW9mIHByb3BlcnRpZXMgPT09ICdvYmplY3QnKSB7XG4gICAgICBhcGx1cy5hcHBlbmRNZXRhSW5mbygnYXBsdXMtbmV4dHBhZ2UtcHJvcGVydGllcycsIHByb3BlcnRpZXMpOyAgXG4gICAgfSBlbHNlIHtcbiAgICAgIHV0aWxMb2dnZXIubG9nZ2VyKHtcbiAgICAgICAgbXNnOiAnd2FybmluZzogdHlwZW9mIHVwZGF0ZU5leHRQYWdlUHJvcGVydGllc1xcJ3MgcGFyYW1zIG11c3QgYmUgb2JqZWN0J1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8vIHZhciBxID0gKHdpbmRvdy5nb2xkbG9nX3F1ZXVlIHx8ICh3aW5kb3cuZ29sZGxvZ19xdWV1ZSA9IFtdKSk7XG4gICAgLy8gcS5wdXNoKHtcbiAgICAvLyAgIGFjdGlvbjogYXBsdXNTdGF0aWMuU1VCU0NSSUJFLFxuICAgIC8vICAgYXJndW1lbnRzOiBbJ05hdGl2ZTRBcGx1c0V4ZWNSZWFkeScsIGZ1bmN0aW9uKHN0YXR1cyl7XG4gICAgLy8gICAgIGlmIChzdGF0dXMgPT09ICdjb21wbGV0ZScpIHtcbiAgICAvLyAgICAgICAvLyDphY3nva5tZXRhXG4gICAgLy8gICAgICAgaWYgKHR5cGVvZiBwcm9wZXJ0aWVzID09PSAnb2JqZWN0Jykge1xuICAgIC8vICAgICAgICAgd2luZG93LkFwbHVzNFVULnVwZGF0ZU5leHRQYWdlUHJvcGVydGllcyhwcm9wZXJ0aWVzKTtcbiAgICAvLyAgICAgICB9IGVsc2Uge1xuICAgIC8vICAgICAgICAgdXRpbExvZ2dlci5sb2dnZXIoe1xuICAgIC8vICAgICAgICAgICBtc2c6ICd3YXJuaW5nOiB0eXBlb2YgdXBkYXRlUGFnZVByb3BlcnRpZXNcXCdzIHBhcmFtcyBtdXN0IGJlIG9iamVjdCdcbiAgICAvLyAgICAgICAgIH0pO1xuICAgIC8vICAgICAgIH1cbiAgICAvLyAgICAgfVxuICAgIC8vICAgfV1cbiAgICAvLyB9KTtcbiAgfSxcblxuICAvKipcbiAgICogZ2V0IG1ldGFJbmZvIGJ5IGtleVxuICAgKiBAcGFyYW0ge1N0cmluZ31cbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKi9cbiAgZ2V0TWV0YUluZm86IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gbWV0YUluZm8uZ2V0TWV0YUluZm8oayk7XG4gIH0sXG5cbiAgLy8g5LqL5Lu257uR5a6a5o6l5Y+j77yM5LuO5qC45b+D5bqT5pq06Zyy5Ye65Y675L6bYXBsdXNKU+aPkuS7tuS9v+eUqFxuICBvbjogdXRpbEV2ZW50Lm9uLFxuICAvLyDmt7HluqblhYvpmobvvIzku47moLjlv4PlupPmmrTpnLLlh7rljrvkvpthcGx1c0pT5o+S5Lu25L2/55SoXG4gIGNsb25lRGVlcDogdXRpbERhc2guY2xvbmVEZWVwLFxuICBzZXRDb29raWU6IGNvb2tpZS5zZXRDb29raWUsXG4gIGdldENvb2tpZTogY29va2llLmdldENvb2tpZSxcblxuICAvLyBXRULnq6/mmoLkuI3pnIDopoHlrp7njrBcbiAgcGFnZUFwcGVhcjogRU1QVFlfRk4sXG5cbiAgLy8gV0VC56uv5pqC5LiN6ZyA6KaB5a6e546wXG4gIHBhZ2VEaXNhcHBlYXI6IEVNUFRZX0ZOLFxuXG4gIHVwZGF0ZVBhZ2VVdHBhcmFtOiBFTVBUWV9GTixcblxuICB1cGRhdGVOZXh0UGFnZVV0cGFyYW06IEVNUFRZX0ZOLFxuXG4gIC8qKlxuICAgKiBAcGFyYW1zIHtPYmplY3R9IHByb3BlcnRpZXNcbiAgICogQHJldHVybiB7VW5kZWZpbmVkfVxuICAgKi9cbiAgdXBkYXRlU2Vzc2lvblByb3BlcnRpZXM6IGZ1bmN0aW9uIChwcm9wZXJ0aWVzKSB7XG4gICAgaWYgKHR5cGVvZiBwcm9wZXJ0aWVzID09PSAnb2JqZWN0Jykge1xuICAgICAgYXBsdXMuc2V0TWV0YUluZm8oJ19zZXNzaW9uX2FyZ3MnLCBwcm9wZXJ0aWVzKTtcbiAgICB9XG4gIH1cbn0pO1xuXG4vLyBleHBvcnRzLnJ1biA9IG9wZW5BUEkuaW5pdChydW4pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvcGx1Z2lucy9saWJfYXBpL2FwbHVzLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBwcm9qZWN0IC0gZmlsZXBhdGhcbiAqIGRlc2NyaXB0aW9uXG4gKlxuICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuICpcbiAqIEF1dGhvcnM6XG4gKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIGVhY2ggPSByZXF1aXJlKCdAdXRpbHMvZWFjaCcpO1xudmFyIHV0aWxHb2xkbG9nID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxHb2xkbG9nJyk7XG52YXIgaXNGdW5jdGlvbiA9IHJlcXVpcmUoJ0B1dGlscy9pc0Z1bmN0aW9uJyk7XG52YXIgdXRpbFB1YnN1YiA9IHJlcXVpcmUoJ0B1dGlscy91dGlsUHVic3ViJyk7XG52YXIgdXRpbExvZ2dlciA9IHJlcXVpcmUoJ0B1dGlscy91dGlsTG9nZ2VyJyk7XG52YXIgYXBsdXNTdGF0aWMgPSByZXF1aXJlKCdAdXRpbHMvYXBsdXNTdGF0aWMnKTtcbnZhciBDb21wb3NlID0gcmVxdWlyZSgnQGNvcmUvY29tcG9zZScpO1xudmFyIHBsdWdpbnNMb2FkZXIgPSByZXF1aXJlKCdAY29yZS9wbHVnaW5zTG9hZGVyJyk7XG5cbi8qKlxuICogc2VucHZcbiAqIEBwYXJhbSBbT2JqZWN0XSBjb25maWc6IHtcbiAqICAgY2hlY2tzdW06IDExMTExMTExLCAgIC8vIOagueaNrnNwbWEsc3BtYuiHquWKqOeUn+aIkOeahOS4gOS4quWtl+espuS4slxuICogICBpc19hdXRvOiB0cnVlL2ZhbHNl77yMIC8vIOagh+ivhuaYr+WQpuiHquWKqOaJk+eCue+8jOm7mOiupOS4unRydWXvvIzljZXpobXlupTnlKjpnIDopoHkvKBmYWxzZVxuICogICBwYWdlX2lkOiAxMjMsICAgICAgICAvLyDlsIbkvJrkvZPnjrDlnKhzcG1i5L2N5LiKXG4gKiAgIGdva2V5OiAnJywgICAgICAgICAgIC8vIOebruWJjeW3sue7j+WkseaViFxuICogICByZWZlcnJlcjogJ2h0dHA6Ly93d3cudGFvYmFvLmNvbScgICAvLyDlsIbkvJrmm7/mjaJwduivt+axgueahHByZeWPguaVsFxuICogfSAvLyDlkIwgYXBsdXMubGF1bmNo56ys5LqM5Liq5YWl5Y+C4oCcbWFudWFs4oCdXG4gKlxuICogQHBhcmFtIFtPYmplY3RdIHVzZXJkYXRhICAgLy8g5ZCE56eN6Ieq5a6a5LmJcHblj4LmlbBcbiAqXG4gKiBAcGFyYW0gW09iamVjdF0gb2JqIC0ge2ZuX2FmdGVyX3B2OiBmbl9hZnRlcl9wdiwgeHh4OiB4eHh9XG4gKlxuICogc3RlcDE6IGxvYWRlciBwbHVnaW5zICBtaWRkbGV3YXJlXG4gKiBzdGVwMjogbG9hZGVyIGRvU2VuZFB2IG1pZGRsZXdhcmVcbiAqIHN0ZXAzOiBydW4gbWlkZGxld2FyZXNcbiAqL1xuXG52YXIgUmVkdWNlciA9IGZ1bmN0aW9uKCkge1xufTtcblxuLyoqXG4gKiBAcGFyYW1zIE9iamVjdCBDT05GSUcge1xuICogICBjb250ZXh0OiB4eHgsXG4gKiAgIHBsdWdpbnM6IHh4eCBcbiAqIH1cbiAqIEBwYXJhbXMgT2JqZWN0IG9wdHMge1xuICogICBjb25maWc6IGNvbmZpZyxcbiAqICAgdXNlcmRhdGE6IHVzZXJkYXRhLFxuICogICBwdWJzdWJUeXBlOiAncHYnIHx8ICdoamxqJyB8fCAncHJlcHYnXG4gKiAgIG1pZGRsZXdhcmVNZXNzYWdlS2V5OiAnbXdfY2hhbmdlX3B2JyB8fCAnbXdfY2hhbmdlX2hqbGonIHx8ICdtd19jaGFuZ2VfcHJlcHYnXG4gKiAgIG1lc3NhZ2VGblF1ZXVlOiBbZm4xLCBmbjIgLi4uXVxuICogfVxuICovXG5SZWR1Y2VyLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoQ09ORklHLCBvcHRzLCBjYWxsYmFjaykge1xuICAvLyAx44CBaW5pdCBwbHVnaW5zXG4gIHZhciBwbCA9IG5ldyBwbHVnaW5zTG9hZGVyKCk7XG4gIHBsLmluaXQoe1xuICAgIG1pZGRsZXdhcmU6IFtdLFxuICAgIGNvbmZpZzogb3B0cy5jb25maWcsXG4gICAgcGx1Z2luczogQ09ORklHLnBsdWdpbnNcbiAgfSk7XG4gIHZhciBtaWRkbGV3YXJlID0gcGwucnVuKCk7XG5cbiAgLy8g5Yid5aeL5YyW5LiK5LiL5paH546v5aKD77yMY29udGV4dOWGheeahGRhdGHlsIbkvJrlnKjlkITkuKrmj5Lku7bkuK3ov5vooYzotYvlgLzmiJbogIXkv67mlLnvvIjph43opoHvvIlcbiAgdmFyIGNvbnRleHQgPSBpc0Z1bmN0aW9uKENPTkZJRy5jb250ZXh0KSA/IG5ldyBDT05GSUcuY29udGV4dCgpIDogQ09ORklHLmNvbnRleHQ7XG4gIGNvbnRleHQudXNlcmRhdGEgPSBvcHRzLnVzZXJkYXRhO1xuICBjb250ZXh0LmxvZ2dlciA9IHV0aWxMb2dnZXIubG9nZ2VyO1xuXG4gIHZhciBhcHAgPSB7XG4gICAgY29udGV4dDogY29udGV4dCxcbiAgICBwdWJzdWI6IHV0aWxHb2xkbG9nLmdldEdvbGRsb2dWYWwoJ2FwbHVzX3B1YnN1YicpLFxuICAgIHB1YnN1YlR5cGU6IG9wdHMgJiYgb3B0cy5wdWJzdWJUeXBlXG4gIH07XG5cbiAgdmFyIGNvbXBvc2UgPSBuZXcgQ29tcG9zZSgpO1xuICBjb21wb3NlLmNyZWF0ZShhcHApO1xuICAvLyDmiafooYzkuK3pl7Tku7ZcbiAgY29tcG9zZS53cmFwKG1pZGRsZXdhcmUsIGZ1bmN0aW9uKCkge1xuICAgIGFwcC5jb250ZXh0LnN0YXR1cyA9IGFwbHVzU3RhdGljLkNPTVBMRVRFO1xuICAgIGlmIChvcHRzKSB7XG4gICAgICBpZiAob3B0cy5taWRkbGV3YXJlTWVzc2FnZUtleSkge1xuICAgICAgICB1dGlsUHVic3ViLmRvUHViTXNnKFtvcHRzLm1pZGRsZXdhcmVNZXNzYWdlS2V5LCBhcHAuY29udGV4dF0pOyAgXG4gICAgICB9XG4gICAgICBpZiAob3B0cy5tZXNzYWdlRm5RdWV1ZSkge1xuICAgICAgICBlYWNoKG9wdHMubWVzc2FnZUZuUXVldWUsIGZ1bmN0aW9uIChmbikge1xuICAgICAgICAgIGZuKHV0aWxHb2xkbG9nLmdldEdsb2JhbFZhbHVlKGFwbHVzU3RhdGljLkFQTFVTKSwgQ09ORklHKTtcbiAgICAgICAgfSk7ICBcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRnVuY3Rpb24oY2FsbGJhY2spKSB7XG4gICAgICBjYWxsYmFjayhhcHAuY29udGV4dCk7XG4gICAgfVxuICB9KSgpO1xuXG59O1xubW9kdWxlLmV4cG9ydHMgPSBSZWR1Y2VyO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvbGliX3UvY29yZS9SZWR1Y2VyLmpzXG4vLyBtb2R1bGUgaWQgPSAxMTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBhbGlsb2cvcyAtIHNyYy9saWJfdS9jb25maWcvY29tcG9zZS5qc1xuICog5Ye95pWw6Zif5YiX5YyF6KOF5ZmoIEV4cG9zZSBjb21wb3NpdG9yXG4gKlxuICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuICpcbiAqIEF1dGhvcnM6XG4gKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIGlzRnVuY3Rpb24gPSByZXF1aXJlKCdAdXRpbHMvaXNGdW5jdGlvbicpO1xudmFyIHV0aWxBcnJheSA9IHJlcXVpcmUoJ0B1dGlscy91dGlsQXJyYXknKTtcbnZhciB1dGlsTG9nZ2VyID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxMb2dnZXInKTtcblxuZnVuY3Rpb24gY29tcG9zZSAoKSB7fTtcblxuY29tcG9zZS5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24ocHJvcHMpIHtcbiAgLyoqXG4gICAqIGNyZWF0ZeWunumZheS4iuaYr+WvuW5ld+eahOWwgeijhe+8m1xuICAgKiBjcmVhdGXov5Tlm57nmoTlrp7kvovlrp7pmYXkuIrlsLHmmK9uZXfmnoTpgKDlh7rnmoTlrp7kvovvvJtcbiAgICogdGhpc+WNs+aMh+WQkeiwg+eUqOW9k+WJjWNyZWF0ZeeahOaehOmAoOWHveaVsO+8m1xuICAgKi9cbiAgZm9yICh2YXIgbmFtZSBpbiBwcm9wcykge1xuICAgIGlmICh0eXBlb2YgdGhpc1tuYW1lXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRoaXNbbmFtZV0gPSBwcm9wc1tuYW1lXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5jb21wb3NlLnByb3RvdHlwZS5jYWxsZWRMaXN0ID0gW107XG5cbmNvbXBvc2UucHJvdG90eXBlLnNldENhbGxlZExpc3QgPSBmdW5jdGlvbihpKSB7XG4gIGlmICh1dGlsQXJyYXkuaW5kZXhvZih0aGlzLmNhbGxlZExpc3QsIGkpID09PSAtMSkge1xuICAgIHRoaXMuY2FsbGVkTGlzdC5wdXNoKGkpO1xuICB9XG59O1xuXG5jb21wb3NlLnByb3RvdHlwZS5yZXNldENhbGxlZExpc3QgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5jYWxsZWRMaXN0ID0gW107XG59O1xuXG5jb21wb3NlLnByb3RvdHlwZS53cmFwID0gZnVuY3Rpb24obXcsIGNhbGxiYWNrKSB7XG4gIHZhciBjb250ZXh0ID0gdGhpcztcbiAgdmFyIGN0eCA9IHRoaXMuY29udGV4dCB8fCB7fTtcbiAgdmFyIGNvbXBvc2UgPSBjdHguY29tcG9zZSB8fCB7fTtcbiAgdmFyIG1heFRpbWVvdXQgPSBjb21wb3NlLm1heFRpbWVvdXQgfHwgMTAgKiAxMDAwO1xuXG4gIHJldHVybiBmdW5jdGlvbiAoc3RhdGUpIHtcblxuICAgIHZhciBzaXplID0gbXcubGVuZ3RoOyAvLyDkuK3pl7Tku7bpmJ/liJfplb/luqZcbiAgICB2YXIgaSA9IDA7IC8vIOS4remXtOS7tue0ouW8lVxuICAgIHZhciBqID0gMDsgLy8g5LiA5Liq5qCH6K+G77yMMC3liJ3lp4vnirbmgIHvvIwxLeS4remXtOS7tuWbnuiwg+aJp+ihjOS6hlxuICAgIHZhciBzbGVlcEhhbmRlcjE7XG4gICAgdmFyIHJ1biA9IGZ1bmN0aW9uKGluZGV4LCBzdGF0dXMpIHtcbiAgICAgIC8vIGNvbnRleHQucHVic3ViSW5mbyhjb250ZXh0LCBtd1tpXSk7XG4gICAgICAvLyDkuK3pl7Tku7bpmJ/liJfmiafooYzlrozmr5XlkI7ov5Tlm55cbiAgICAgIGlmIChpID09PSBzaXplKSB7XG4gICAgICAgIHN0YXRlID0gJ2RvbmUnO1xuICAgICAgICBjb250ZXh0LnJlc2V0Q2FsbGVkTGlzdCgpOyAvLyDph43nva5jYWxsZWRMaXN05Y+Y6YePXG4gICAgICAgIC8vIHN0YXR1c+WmguaenOetieS6jmRvbmXvvIzor7TmmI7mmK/kuK3pgJTpgIDlh7rnmoTkuK3pl7Tku7bvvIzkuI3pnIDopoHmiafooYzlm57osINcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oY2FsbGJhY2spICYmIHN0YXR1cyAhPT0gc3RhdGUpIHtcbiAgICAgICAgICBjYWxsYmFjay5jYWxsKGNvbnRleHQsIHN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgICBjbGVhclRpbWVvdXQoc2xlZXBIYW5kZXIxKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gdmFyIGNiX3N0YXRlID0gbnVsbDtcbiAgICAgIC8vIOS/neivgeavj+S4quS4remXtOS7tuWPquS8muaJp+ihjOS4gOasoVxuICAgICAgaWYgKHV0aWxBcnJheS5pbmRleG9mKGNvbnRleHQuY2FsbGVkTGlzdCwgaSkgPT09IC0xKSB7XG4gICAgICAgIGNvbnRleHQuc2V0Q2FsbGVkTGlzdChpKTtcbiAgICAgICAgaWYgKG13W2ldICYmIGlzRnVuY3Rpb24obXdbaV1bMF0pKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQHBhcmFtcyB7QXJyYXl9IG1pZGRsZXdhcmVcbiAgICAgICAgICAgICAqIEBwYXJhbXMge0FycmF5fSBtc2dcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgc3RhdGUgPSBtd1tpXVswXS5jYWxsKGNvbnRleHQsIHN0YXRlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgaiA9IDE7ICAvLyAxLeS4remXtOS7tuWbnuiwg+aJp+ihjOS6hlxuICAgICAgICAgICAgICBydW4oaSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICB1dGlsTG9nZ2VyLmxvZ2dlcih7XG4gICAgICAgICAgICAgIG1zZzogZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8g54q25oCB5Li6cGF1c2XnrYnlvoUyMDBtc+i9ruivou+8jOeKtuaAgeS4um51bWJlcuexu+Wei+eahOaVsOWAvOetieW+hXN0YXRlbXPova7or6JcbiAgICAgIHZhciBpc051bWJlciA9IHR5cGVvZiBzdGF0ZSA9PT0gJ251bWJlcic7XG4gICAgICBpZiAoc3RhdGUgPT09ICdwYXVzZScgfHwgaXNOdW1iZXIpIHtcbiAgICAgICAgaiA9IDA7XG4gICAgICAgIC8vIOacgOWkp+etieW+heaXtumVv1xuICAgICAgICB2YXIgX3RpbWVfb3V0ID0gaXNOdW1iZXIgPyBzdGF0ZSA6IG1heFRpbWVvdXQ7XG4gICAgICAgIHZhciBfbXdfbmFtZSA9IG13W2ldID8gbXdbaV1bMV0gOiAnJztcbiAgICAgICAgc2xlZXBIYW5kZXIxID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoaiA9PT0gMCkge1xuICAgICAgICAgICAgdXRpbExvZ2dlci5sb2dnZXIoe1xuICAgICAgICAgICAgICBtc2c6ICdqdW1wIHRoZSBtaWRkbGV3YXJlIGFib3V0ICcgKyBfbXdfbmFtZSArICcsIGJlY2F1c2Ugd2FpdGluZyB0aW1lb3V0IG1heFRpbWVvdXQgPSAnICsgX3RpbWVfb3V0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHN0YXRlID0gbnVsbDtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgIHJ1bihpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIF90aW1lX291dCk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXRlID09PSAnZG9uZScpIHtcbiAgICAgICAgLy8g54q25oCB5Li6ZG9uZeihqOekuue7k+adn++8jOS4jeeuoeWQjumdoui/mOacieayoeacieS4remXtOS7tumDvee7k+adn1xuICAgICAgICBpID0gc2l6ZTtcbiAgICAgICAgcnVuKGksIHN0YXRlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIOm7mOiupOeKtuaAge+8jOWPqueuoeaJp+ihjOS4remXtOS7tumYn+WIl1xuICAgICAgICBpKys7XG4gICAgICAgIHJ1bihpKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGlmIChjb250ZXh0LmNhbGxlZExpc3QgJiYgY29udGV4dC5jYWxsZWRMaXN0Lmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnRleHQucmVzZXRDYWxsZWRMaXN0KCk7XG4gICAgfVxuICAgIHJldHVybiBydW4oaSk7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbXBvc2U7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvbGliX3UvY29yZS9jb21wb3NlLmpzXG4vLyBtb2R1bGUgaWQgPSAxMTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBhbGlsb2cvcyAtIHNyYy9saWJfdS9jb25maWcvcGx1Z2lucy9wbHVnaW5zTG9hZGVyLmpzXG4gKiDmj5Lku7bliqDovb3lmahcbiAqXG4gKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG4gKlxuICogQXV0aG9yczpcbiAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZSgnQHV0aWxzL2Fzc2lnbicpO1xudmFyIHV0aWxMb2dnZXIgPSByZXF1aXJlKCdAdXRpbHMvdXRpbExvZ2dlcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbXMgb3B0cyB7XG4gICAgICogICBtaWRkbGV3YXJlOiBbXSxcbiAgICAgKiAgIHBsdWdpbnM6IFtdLFxuICAgICAqICAgY29uZmlnOiB7fVxuICAgICAqIH1cbiAgICAgKi9cbiAgICBpbml0OiBmdW5jdGlvbihvcHRzKSB7XG4gICAgICB0aGlzLm9wdHMgPSBvcHRzO1xuICAgICAgaWYgKG9wdHMgJiYgdHlwZW9mIG9wdHMubWlkZGxld2FyZSA9PT0gJ29iamVjdCcgJiYgb3B0cy5taWRkbGV3YXJlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhpcy5taWRkbGV3YXJlID0gb3B0cy5taWRkbGV3YXJlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5taWRkbGV3YXJlID0gW107XG4gICAgICB9XG4gICAgICB0aGlzLnBsdWdpbnNfbmFtZSA9IFtdO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiDliIblj5HorqLpmIXlj5jljJZcbiAgICAgKiBAcGFyYW0gbyB7XG4gICAgICogICBwdWJzdWI6IHsuLi59LFxuICAgICAqICAgY29udGV4dDogey4uLn1cbiAgICAgKiB9LFxuICAgICAqIEBwYXJhbSBtdyDlvZPliY3miafooYznmoTkuK3pl7Tku7ZcbiAgICAgKi9cbiAgICBwdWJzdWJJbmZvOiBmdW5jdGlvbihjdHgsIG13KSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgcHVic3ViID0gY3R4LnB1YnN1YjtcbiAgICAgICAgaWYgKHB1YnN1Yikge1xuICAgICAgICAgIHB1YnN1Yi5wdWJsaXNoKCdwbHVnaW5zX2NoYW5nZV8nICsgY3R4LnB1YnN1YlR5cGUsIG13KTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB1dGlsTG9nZ2VyLmxvZ2dlcih7XG4gICAgICAgICAgbXNnOiBlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBydW46IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgaWYoIWluZGV4KSBpbmRleCA9IDA7XG4gICAgICB2YXIgX3NlbGYgPSB0aGlzO1xuICAgICAgdmFyIG1pZGRsZXdhcmUgPSB0aGlzLm1pZGRsZXdhcmU7XG4gICAgICB2YXIgb3B0cyA9IHRoaXMub3B0cyB8fCB7fTtcbiAgICAgIHZhciBwbHVnaW5zID0gb3B0cy5wbHVnaW5zO1xuICAgICAgaWYgKHBsdWdpbnMgJiYgdHlwZW9mIHBsdWdpbnMgPT09ICdvYmplY3QnICYmIHBsdWdpbnMubGVuZ3RoID4gMCkge1xuICAgICAgICB2YXIgcGx1Z2luID0gcGx1Z2luc1tpbmRleF07XG4gICAgICAgIHRoaXMucGx1Z2luc19uYW1lLnB1c2gocGx1Z2luLm5hbWUpO1xuICAgICAgICBtaWRkbGV3YXJlLnB1c2goW2Z1bmN0aW9uKHN0YXRlLCBjYil7XG4gICAgICAgICAgX3NlbGYucHVic3ViSW5mbyh0aGlzLCBwbHVnaW4pO1xuICAgICAgICAgIC8vIOiOt+WPluaPkuS7tuaooeWdl+i3r+W+hOW5tuWIneWni+WMllxuICAgICAgICAgIHZhciBtID0gbmV3IHBsdWdpbi5wYXRoKCk7XG5cbiAgICAgICAgICAvLyDkuLroioLnnIHku6PnoIHph4/vvIzpu5jorqTnmoTliJ3lp4vljJbmlrnms5XlnKjliqDovb3lmajlhoXlgZrlhZzlupXlpITnkIbvvIzljbPmj5Lku7blhoXml6Dnibnmrormg4XlhrXml6DpnIDlrp7njrBpbml05pa55rOVXG4gICAgICAgICAgaWYgKCFtLmluaXQpIHtcbiAgICAgICAgICAgIG0uaW5pdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyDlsIbkuIrkuIvmlofms6jlhaXliLDmj5Lku7blhoVcbiAgICAgICAgICBtLmluaXQoe1xuICAgICAgICAgICAgY29udGV4dDogdGhpcy5jb250ZXh0LFxuICAgICAgICAgICAgY29uZmlnOiBhc3NpZ24ocGx1Z2luLmNvbmZpZyB8fCB7fSwgb3B0cy5jb25maWcpXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIG0ucnVuKHN0YXRlLCBmdW5jdGlvbiAobXNnKSB7XG4gICAgICAgICAgICAvLyDov5nph4zkvb/nlKgx5q+r56eS5bu26L+f5omn6KGM77yM6Ziy5q2i5Lit6Ze05Lu25Li75L2T5YaF55qEY2FsbGJhY2vlhYjmiafooYzvvIzlr7zoh7TmoYbmnrbmi7/kuI3liLDkuK3pl7Tku7ZyZXR1cm7nmoTnrYnlvoXml7bplb/vvIzku47ogIzlr7zoh7Tnm5HmjqflvILluLhcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBjYihwbHVnaW4sIG1zZyk7XG4gICAgICAgICAgICB9LCAxKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSwgcGx1Z2luLm5hbWVdKTtcblxuICAgICAgICBpbmRleCsrO1xuICAgICAgICBpZihwbHVnaW5zW2luZGV4XSl7XG4gICAgICAgICAgcmV0dXJuIHRoaXMucnVuKGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG1pZGRsZXdhcmU7XG4gICAgfVxuICB9O1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9saWJfdS9jb3JlL3BsdWdpbnNMb2FkZXIuanNcbi8vIG1vZHVsZSBpZCA9IDExMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIGFsaWxvZy9zL3NyYy9hcGx1cy5qc1xuICogcmVxdWVzdFxuICpcbiAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cbiAqXG4gKiBBdXRob3JzOlxuICogICBqaXpoYS53eWpAYmxvZyBodHRwOi8vb2xkai5uZXRcbiAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vLyDlj5HpgIHlm77niYdHRVTor7fmsYJcbmV4cG9ydHMuc2VuZEltZyA9IGZ1bmN0aW9uKHNyYywgdGltZW91dCkge1xuICB2YXIgd2luID0gd2luZG93IHx8IHt9O1xuICB2YXIgaW1nID0gbmV3IEltYWdlKCk7XG4gIHZhciBybmRfaWQgPSBcIl9pbWdfXCIgKyBNYXRoLnJhbmRvbSgpO1xuXG4gIC8vIOWcqOWFqOWxgOWPmOmHj+S4reW8leeUqCBpbWfvvIzpmLLmraIgaW1nIOiiq+Weg+WcvuWbnuaUtuacuuWItui/h+aXqeWbnuaUtumAoOaIkOivt+axguWPkemAgeWksei0pVxuICAvLyDlj4LogIPvvJpodHRwOi8vb2xkai5uZXQvYXJ0aWNsZS9vbmUtdGhpbmctdG8tbm90aWNlLWFib3V0LW5ldy1pbWFnZS9cbiAgd2luW3JuZF9pZF0gPSBpbWc7XG5cbiAgdmFyIHJlbW92ZVJuZElkID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh3aW5bcm5kX2lkXSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGVsZXRlIHdpbltybmRfaWRdO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB3aW5bcm5kX2lkXSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgaW1nLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZW1vdmVSbmRJZCgpO1xuICB9O1xuICBpbWcub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICByZW1vdmVSbmRJZCgpO1xuICB9O1xuICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgaWYgKHdpbmRvd1tybmRfaWRdKSB7XG4gICAgICB3aW5kb3dbcm5kX2lkXS5zcmMgPSAnJztcbiAgICAgIHJlbW92ZVJuZElkKCk7XG4gICAgfVxuICB9LCB0aW1lb3V0IHx8IDUwMDApO1xuXG4gIGltZy5zcmMgPSBzcmM7XG4gIGltZyA9IG51bGw7IC8vIOWIoOmZpOS4tOaXtuWPmOmHj+eahOW8leeUqFxuICByZXR1cm4gc3JjO1xufTtcblxuLy8g5Y+R6YCBc2VuZEJlYWNvbiBwb3N06K+35rGCXG5leHBvcnRzLnBvc3REYXRhID0gZnVuY3Rpb24gKHVybCwgZGF0YSkge1xuICAvLyBmb3IgKHZhciBrIGluIGRhdGEpIHtcbiAgLy8gICBpZiAoayAhPT0gJ2NuYScpIHtcbiAgLy8gICAgIGRhdGFba10gPSBlbmNvZGVVUklDb21wb25lbnQoZGF0YVtrXSk7XG4gIC8vICAgfVxuICAvLyB9XG4gIG5hdmlnYXRvci5zZW5kQmVhY29uKHVybCwgZGF0YSk7XG4gIHJldHVybiB1cmw7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL3BsdWdpbnMvbGliX2FwaS9yZXF1ZXN0LmpzXG4vLyBtb2R1bGUgaWQgPSAxMTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBwcm9qZWN0IC0gZmlsZXBhdGhcbiAqIHB2aWRcbiAqXG4gKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG4gKlxuICogQXV0aG9yczpcbiAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbFB1YnN1YiA9IHJlcXVpcmUoJy4vdXRpbFB1YnN1YicpO1xudmFyIHV0aWxHb2xkbG9nID0gcmVxdWlyZSgnLi91dGlsR29sZGxvZycpO1xudmFyIGxvZ0lkID0gcmVxdWlyZSgnLi9sb2dJZCcpO1xuXG4vKipcbiAqIOWIpOaWreaYr+WQpuemgeeUqOS6hnB2aWRcbiAqIEByZXR1cm4gW0Jvb2xlYW5dXG4gKi9cbmZ1bmN0aW9uIGlzRGlzYWJsZVB2aWQgKCkge1xuICB2YXIgYXBsdXMgPSB1dGlsR29sZGxvZy5nZXRHbG9iYWxWYWx1ZSgnYXBsdXMnKTtcbiAgdmFyIGRpc2FibGVQdmlkO1xuICB0cnkge1xuICAgIHZhciBtZXRhX3ZhbHVlID0gYXBsdXMuZ2V0TWV0YUluZm8oJ2FwbHVzLWRpc2FibGUtcHZpZCcpICsgJyc7XG4gICAgaWYgKG1ldGFfdmFsdWUgPT09ICd0cnVlJykge1xuICAgICAgZGlzYWJsZVB2aWQgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAobWV0YV92YWx1ZSA9PT0gJ2ZhbHNlJykge1xuICAgICAgZGlzYWJsZVB2aWQgPSBmYWxzZTtcbiAgICB9XG4gIH0gY2F0Y2goZXJyKXtcbiAgfVxuICByZXR1cm4gZGlzYWJsZVB2aWQ7XG59O1xuZXhwb3J0cy5pc0Rpc2FibGVQdmlkID0gaXNEaXNhYmxlUHZpZDtcblxuLyoqXG4gKiDlpITnkIbpobXpnaLkuIrnmoQgcHYgaWRcbiAqL1xuZXhwb3J0cy5tYWtlUFZJZCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGFwbHVzID0gdXRpbEdvbGRsb2cuZ2V0R2xvYmFsVmFsdWUoJ2FwbHVzJyk7XG4gIHZhciBwcmVfcHZpZCA9IGFwbHVzLnB2aWQ7XG4gIHZhciB1cmwgPSBsb2NhdGlvbiAmJiBsb2NhdGlvbi5ocmVmO1xuICB2YXIgdGl0bGUgPSBkb2N1bWVudCAmJiBkb2N1bWVudC50aXRsZTtcbiAgYXBsdXMucHZpZCA9IGxvZ0lkLmdldExvZ0lkKHVybCwgdGl0bGUpO1xuICB2YXIgbXNncyA9IFsncHZpZENoYW5nZScsIHtcbiAgICBwcmVfcHZpZDogcHJlX3B2aWQsXG4gICAgcHZpZDogYXBsdXMucHZpZFxuICB9XTtcbiAgdXRpbFB1YnN1Yi5kb1B1Yk1zZyhtc2dzKTtcbiAgdXRpbFB1YnN1Yi5kb0NhY2hlUHVicyhtc2dzKTtcbiAgcmV0dXJuIGlzRGlzYWJsZVB2aWQoKSA/ICcnIDogYXBsdXMucHZpZDtcbn07XG5cbmV4cG9ydHMuZ2V0UHZJZCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGFwbHVzID0gdXRpbEdvbGRsb2cuZ2V0R2xvYmFsVmFsdWUoJ2FwbHVzJyk7XG4gIHJldHVybiBpc0Rpc2FibGVQdmlkKCkgPyAnJyA6IGFwbHVzLnB2aWQ7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvbGliX3UvdXRpbHMvdXRpbFB2aWQuanNcbi8vIG1vZHVsZSBpZCA9IDExNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIGFsaWxvZy9zIC0gc3JjL2xpYl91L2NvbmZpZy9pbml0L2luaXRMb2FkX2Jhc2UuanNcbiAqIOWIneWni+WMluWfuuehgOaooeWdl++8jOS4jeiDveebtOaOpeS9v+eUqO+8jOmcgOimgemAmui/h2luaXRMb2FkX3BjLmpz5oiWaW5pdExvYWRfd2FwLmpz562J5YW35L2T55qE5Zy65pmv5qih5Z2X6LCD55SoXG4gKlxuICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuICpcbiAqIEF1dGhvcnM6XG4gKiAgIEBhdXRob3Igaml6aGEud3lqIEBibG9nIGh0dHA6Ly9vbGRqLm5ldFxuICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBhY3Rpb24gPSByZXF1aXJlKCcuL2FjdGlvbicpO1xudmFyIHV0aWxHb2xkbG9nID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxHb2xkbG9nJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4ge1xuICAgIHJ1bjogIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBhcGx1c19jb25maWcgPSB0aGlzLm9wdGlvbnMuY29udGV4dC5hcGx1c19jb25maWc7XG4gICAgICB2YXIgQVBMVVNfUVVFVUUgPSBhcGx1c19jb25maWcuZ2xvYmFsQ29uZmlnLkFQTFVTX1FVRVVFO1xuXG4gICAgICB2YXIgY29udGV4dCA9IHV0aWxHb2xkbG9nLmdldENvbnRleHQoKTtcbiAgICAgIHZhciBxdWUgPSBjb250ZXh0W0FQTFVTX1FVRVVFXSB8fCBbXTtcbiAgICAgIHZhciBycyA9IGFjdGlvbi5nZXRGb3JtYXRRdWV1ZShxdWUsICdtZXRhUXVldWUnKTtcbiAgICAgIGNvbnRleHRbQVBMVVNfUVVFVUVdID0gcnMucXVldWU7XG4gICAgICBhY3Rpb24ucHJvY2Vzc0dvbGRsb2dRdWV1ZShycy5mb3JtYXRRdWV1ZSwgdGhpcy5vcHRpb25zLmNvbmZpZyk7XG4gICAgfVxuICB9O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL3BsdWdpbnMvbGliX3F1ZXVlL21ldGFfcXVldWUuanNcbi8vIG1vZHVsZSBpZCA9IDExNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcbnZhciB1dGlsR29sZGxvZyA9IHJlcXVpcmUoJ0B1dGlscy91dGlsR29sZGxvZycpO1xudmFyIHV0aWxBcnJheSA9IHJlcXVpcmUoJ0B1dGlscy91dGlsQXJyYXknKTtcbnZhciBpc0Z1bmN0aW9uID0gcmVxdWlyZSgnQHV0aWxzL2lzRnVuY3Rpb24nKTtcbnZhciB1dGlsTG9nZ2VyID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxMb2dnZXInKTtcbnZhciBhcGx1c1N0YXRpYyA9IHJlcXVpcmUoJ0B1dGlscy9hcGx1c1N0YXRpYycpO1xuXG4vKipcbiAqIEBwYXJhbXMge0FycmF5fSBRVUVVRVxuICogQHBhcmFtcyB7T2JqZWN0fSBvcHRzIHtcbiAqICAgaXNPcGVuQXBpOiB0cnVlIHx8IGZhbHNlIFxuICogfVxuICovXG52YXIgcHJvY2Vzc0dvbGRsb2dRdWV1ZSA9IGZ1bmN0aW9uIChRVUVVRSwgb3B0cykge1xuICBmdW5jdGlvbiBmKCkge1xuICAgIGlmICghUVVFVUUgfHwgIXV0aWxBcnJheS5pc0FycmF5KFFVRVVFKSB8fCAhUVVFVUUubGVuZ3RoKSByZXR1cm47XG4gICAgLy8g5o6S5bqPXG4gICAgdmFyIHF1ZSA9IGdldEZvcm1hdFF1ZXVlKFFVRVVFKS5xdWV1ZTtcbiAgICB2YXIgdGFzayA9IHt9O1xuICAgIHZhciBkZWxheVRhc2tzID0gW107XG4gICAgd2hpbGUgKHRhc2sgPSBxdWUuc2hpZnQoKSkgeyAvLyDkvp3mrKHmiafooYwgd2luZG93LmFwbHVzX3F1ZXVlIOS4reeahOS7u+WKoVxuICAgICAgcHJvY2Vzc1Rhc2sodGFzaywgb3B0cywgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgZGVsYXlUYXNrcy5wdXNoKHQpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChkZWxheVRhc2tzLmxlbmd0aCA+IDApIHtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICB3aGlsZSAodGFzayA9IGRlbGF5VGFza3Muc2hpZnQoKSkge1xuICAgICAgICAgIHByb2Nlc3NUYXNrKHRhc2ssIG9wdHMpO1xuICAgICAgICB9XG4gICAgICB9LCAxMDApO1xuICAgIH1cbiAgfTtcbiAgdHJ5IHtcbiAgICBmKCk7XG4gIH0gY2F0Y2goZSkge1xuICAgIHV0aWxMb2dnZXIubG9nZ2VyKHtcbiAgICAgIG1zZzogZVxuICAgIH0pO1xuICB9XG59O1xuZXhwb3J0cy5wcm9jZXNzR29sZGxvZ1F1ZXVlID0gcHJvY2Vzc0dvbGRsb2dRdWV1ZTtcblxuZnVuY3Rpb24gZ2V0TWV0YUluZm8oKSB7XG4gIHZhciBfJCA9IHV0aWxHb2xkbG9nLmdldEdvbGRsb2dWYWwoJ18kJykgfHwge307XG4gIHZhciBtZXRhX2luZm8gPSBfJC5tZXRhX2luZm87IC8vIHx8IG1ldGFJbmZvLmdldEluZm8oKTtcbiAgcmV0dXJuIG1ldGFfaW5mbztcbn1cblxuZnVuY3Rpb24gZ2V0QXBsdXNIb2xkVHlwZSAoKSB7XG4gIHZhciBtZXRhX2luZm8gPSBnZXRNZXRhSW5mbygpIHx8IHt9O1xuICB2YXIgdWFpZCA9IG1ldGFfaW5mby51YWlkO1xuICBpZiAodWFpZCAmJiAhbWV0YV9pbmZvLl9hbm9ueV9pZCkge1xuICAgIHJldHVybiAnQkxPQ0snO1xuICB9XG4gIHJldHVybiBtZXRhX2luZm9bJ19ob2xkJ10gfHwgbWV0YV9pbmZvWydhcGx1cy13YWl0aW5nJ107XG59XG5cbnZhciBBUExVU19IT0xEX1VTRVJJRF9RVUVVRSA9IFtdO1xudmFyIEFQTFVTX0hPTERfQU5PTllfUVVFVUUgPSBbXTtcbnZhciBBUExVU19IT0xEX1FVRVVFID0gW107XG5cbmZ1bmN0aW9uIGZpbHRlclRhc2sgKHRhc2spIHtcbiAgdmFyIGhvbGRUeXBlID0gZ2V0QXBsdXNIb2xkVHlwZSgpO1xuICAvLyBjb25zb2xlLmxvZygnaG9sZFR5cGUgPT09ICcsIGhvbGRUeXBlKTtcbiAgdmFyIG1ldGFfaW5mbyA9IGdldE1ldGFJbmZvKCkgfHwge307XG4gIHZhciBmbGFnID0gdHJ1ZTtcblxuICAvLyAwOiBcIl9ob2xkXCJcbiAgLy8gMTogXCJTVEFSVFwiXG4gIHZhciBhcmdzID0gdGFzay5hcmd1bWVudHMgfHwgW107XG4gIHZhciBtZXRhS2V5ID0gYXJnc1swXTtcbiAgdmFyIG1ldGFWYWx1ZSA9IGFyZ3NbMV07XG4gIHZhciBTVEFSVCA9ICdTVEFSVCc7XG4gIGlmIChtZXRhS2V5ID09PSAnX2hvbGQnICYmIG1ldGFWYWx1ZSA9PT0gU1RBUlQpIHtcbiAgICByZXR1cm4gU1RBUlQ7XG4gIH1cbiAgaWYgKG1ldGFLZXkgPT09ICdfYW5vbnlfaWQnICYmIG1ldGFWYWx1ZSkge1xuICAgIHJldHVybiBTVEFSVDtcbiAgfVxuICBpZiAodGFzayAmJiAvc2VuZFBWfHJlY29yZHxzZXRQYWdlU1BNfHNldE1ldGFJbmZvfGFwcGVuZE1ldGFJbmZvJC8udGVzdCh0YXNrLmFjdGlvbikpIHtcbiAgICBzd2l0Y2ggKGhvbGRUeXBlKSB7XG4gICAgY2FzZSAnQkxPQ0snOlxuICAgICAgaWYgKCFtZXRhX2luZm9baG9sZFR5cGVdKSB7XG4gICAgICAgIEFQTFVTX0hPTERfUVVFVUUucHVzaCh0YXNrKTtcbiAgICAgICAgZmxhZyA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmxhZztcbn1cblxuXG4vLyB2YXIgcHJvY2Vzc2VkID0gZmFsc2U7XG5mdW5jdGlvbiBwcm9jZXNzSG9sZEdvbGRsb2dRdWV1ZSAob3B0cykge1xuICAvLyBpZiAoIXByb2Nlc3NlZCkge1xuICAvLyAgIHByb2Nlc3NlZCA9IHRydWU7XG4gIHByb2Nlc3NHb2xkbG9nUXVldWUoQVBMVVNfSE9MRF9VU0VSSURfUVVFVUUsIG9wdHMpO1xuICBwcm9jZXNzR29sZGxvZ1F1ZXVlKEFQTFVTX0hPTERfQU5PTllfUVVFVUUsIG9wdHMpO1xuICBwcm9jZXNzR29sZGxvZ1F1ZXVlKEFQTFVTX0hPTERfUVVFVUUsIG9wdHMpOyAgXG4gIC8vIH1cbn1cblxuLyoqXG4gKiBAcGFyYW1zIHtPYmplY3R9IHF1ZXVlTmFtZTogYXBsdXNfcXVldWUgfHwgZ29sZGxvZ19xdWV1ZVxuICogQHBhcmFtcyB7T2JqZWN0fSBvcHRzIHtcbiAqICAgaXNPcGVuQXBpOiB0cnVlIHx8IGZhbHNlIFxuICogfVxuICovXG5leHBvcnRzLnN1YnNjcmliZUFuZFByb2Nlc3NRdWV1ZSA9IGZ1bmN0aW9uIChxdWV1ZU5hbWUsIG9wdHMpIHtcbiAgdmFyIHF1ZSA9IHV0aWxHb2xkbG9nLmdldEdsb2JhbFZhbHVlKHF1ZXVlTmFtZSk7XG4gIHF1ZS5wdXNoKHtcbiAgICBhY3Rpb246IGFwbHVzU3RhdGljLlNVQlNDUklCRSxcbiAgICBhcmd1bWVudHM6IFthcGx1c1N0YXRpYy5TRVRfTUVUQV9JTkZPLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKGtleSA9PT0gYXBsdXNTdGF0aWMuX1VTRVJfSUQgJiYgdmFsdWUpIHtcbiAgICAgICAgcHJvY2Vzc0dvbGRsb2dRdWV1ZShBUExVU19IT0xEX1VTRVJJRF9RVUVVRSwgb3B0cyk7XG4gICAgICB9IGVsc2UgaWYgKGtleSA9PT0gYXBsdXNTdGF0aWMuX0FOT05ZX0lEICYmIHZhbHVlKSB7XG4gICAgICAgIHByb2Nlc3NHb2xkbG9nUXVldWUoQVBMVVNfSE9MRF9BTk9OWV9RVUVVRSwgb3B0cyk7XG4gICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ19ob2xkJyAmJiB2YWx1ZSA9PT0gJ1NUQVJUJykge1xuICAgICAgICBwcm9jZXNzSG9sZEdvbGRsb2dRdWV1ZShvcHRzKTtcbiAgICAgIH1cbiAgICB9XVxuICB9KTtcbn07XG5cbmZ1bmN0aW9uIGdldE1ldGhvZE5hbWUgKGtleSwgaXNPcGVuQXBpKSB7XG4gIGlmIChpc09wZW5BcGkgJiYgYXBsdXNTdGF0aWMub3BlbkFQSXMuaW5kZXhPZihrZXkpID4gLTEpIHtcbiAgICBrZXkgPSAnXycgKyBrZXk7XG4gIH1cbiAgcmV0dXJuIGtleTtcbn1cblxuLyoqXG4gKiBAcGFyYW1zIHtPYmplY3R9IHRhc2tcbiAqIEBwYXJhbXMge09iamVjdH0gb3B0cyB7XG4gKiAgIGlzT3BlbkFwaTogdHJ1ZSB8fCBmYWxzZSBcbiAqIH1cbiAqL1xudmFyIHByb2Nlc3NUYXNrID0gZnVuY3Rpb24odGFzaywgb3B0cywgY2FsbGJhY2spIHtcbiAgdmFyIGlzT3BlbkFwaSA9ICEhb3B0cy5pc09wZW5BcGk7XG4gIHZhciBhY3Rpb24gPSB0YXNrID8gdGFzay5hY3Rpb24gOiAnJztcbiAgdmFyIGFyZ3MgPSB0YXNrID8gdGFzay5hcmd1bWVudHMgOiAnJztcblxuICB2YXIgcmVzdWx0ID0gZmlsdGVyVGFzayh0YXNrKTtcbiAgaWYgKCFyZXN1bHQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGNvbnRleHQgPSB1dGlsR29sZGxvZy5nZXRDb250ZXh0KCk7XG4gIHRyeSB7IC8vIOehruS/neafkOS4quS7u+WKoeaJp+ihjOWksei0peS4jeS8muW9seWTjeWFtuWug+S7u+WKoVxuICAgIGlmIChhY3Rpb24gJiYgYXJncyAmJiB1dGlsQXJyYXkuaXNBcnJheShhcmdzKSkge1xuICAgICAgdmFyIGEgPSBhY3Rpb24uc3BsaXQoJy4nKTtcbiAgICAgIHZhciBvYmogPSBjb250ZXh0O1xuICAgICAgdmFyIF9mbiA9IGNvbnRleHQ7XG4gICAgICB2YXIgbWV0aG9kTmFtZTtcbiAgICAgIGlmIChhLmxlbmd0aCA9PT0gMykge1xuICAgICAgICBvYmogPSBjb250ZXh0W2FbMF1dW2FbMV1dIHx8IHt9O1xuICAgICAgICBtZXRob2ROYW1lID0gZ2V0TWV0aG9kTmFtZShhWzJdLCBpc09wZW5BcGkpO1xuICAgICAgICBfZm4gPSBvYmpbbWV0aG9kTmFtZV0gPyBvYmpbbWV0aG9kTmFtZV0gOiAnJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdoaWxlIChhLmxlbmd0aCkge1xuICAgICAgICAgIG1ldGhvZE5hbWUgPSBnZXRNZXRob2ROYW1lKGEuc2hpZnQoKSwgaXNPcGVuQXBpKTtcbiAgICAgICAgICBfZm4gPSBvYmogPSBvYmpbbWV0aG9kTmFtZV07XG4gICAgICAgICAgaWYgKCFvYmopIHsgLy8g6Z2e5rOVIGFjdGlvblxuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24oY2FsbGJhY2spKSB7XG4gICAgICAgICAgICAgIGNhbGxiYWNrKHRhc2spO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlzRnVuY3Rpb24oX2ZuKSkge1xuICAgICAgICBfZm4uYXBwbHkob2JqLCBhcmdzKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQgPT09ICdTVEFSVCcpIHtcbiAgICAgICAgcHJvY2Vzc0hvbGRHb2xkbG9nUXVldWUob3B0cyk7XG4gICAgICB9XG4gICAgfVxuICB9IGNhdGNoKGUpIHtcbiAgICB1dGlsTG9nZ2VyLmxvZ2dlcih7XG4gICAgICBtc2c6IGVcbiAgICB9KTtcbiAgfVxufTtcbmV4cG9ydHMucHJvY2Vzc1Rhc2sgPSBwcm9jZXNzVGFzaztcblxudmFyIGdldEZvcm1hdFF1ZXVlID0gZnVuY3Rpb24gKHF1ZXVlLCB0eXBlKSB7XG4gIHZhciBxdWV1ZU1hcCA9IHtcbiAgICBzdWJzY3JpYmVNd0NoYW5nZVF1ZXVlOiBbXSxcbiAgICBzdWJzY3JpYmVNZXRhUXVldWU6IFtdLFxuICAgIHN1YnNjcmliZVF1ZXVlOiBbXSxcbiAgICBtZXRhUXVldWU6IFtdLFxuICAgIG90aGVyc1F1ZXVlOiBbXVxuICB9O1xuXG4gIHZhciBxID0gW107XG4gIHZhciB0YXNrID0ge307XG4gIHdoaWxlICh0YXNrID0gcXVldWUuc2hpZnQoKSkgeyAvLyDkvp3mrKHmiafooYwgd2luZG93LmFwbHVzX3F1ZXVlIOS4reeahOS7u+WKoVxuICAgIHRyeSB7XG4gICAgICB2YXIgYWMgPSB0YXNrLmFjdGlvbjtcbiAgICAgIHZhciBrZXkgPSB0YXNrLmFyZ3VtZW50c1swXTtcbiAgICAgIGlmICgvc3Vic2NyaWJlLy50ZXN0KGFjKSkge1xuICAgICAgICBpZiAoa2V5ID09PSAnc2V0TWV0YUluZm8nKSB7XG4gICAgICAgICAgcXVldWVNYXAuc3Vic2NyaWJlTWV0YVF1ZXVlLnB1c2godGFzayk7XG4gICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSBhcGx1c1N0YXRpYy5NV19DSEFOR0VfUFYgfHwga2V5ID09PSBhcGx1c1N0YXRpYy5NV19DSEFOR0VfSEpMSikge1xuICAgICAgICAgIHF1ZXVlTWFwLnN1YnNjcmliZU13Q2hhbmdlUXVldWUucHVzaCh0YXNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBxdWV1ZU1hcC5zdWJzY3JpYmVRdWV1ZS5wdXNoKHRhc2spO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKC9NZXRhSW5mby8udGVzdChhYykpIHtcbiAgICAgICAgcXVldWVNYXAubWV0YVF1ZXVlLnB1c2godGFzayk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZU1hcC5vdGhlcnNRdWV1ZS5wdXNoKHRhc2spO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHV0aWxMb2dnZXIubG9nZ2VyKHtcbiAgICAgICAgbXNnOiBlXG4gICAgICB9KTtcbiAgICAgIHF1ZXVlTWFwLm90aGVyc1F1ZXVlLnB1c2godGFzayk7XG4gICAgfVxuICB9XG4gIHZhciBmb3JtYXRRdWV1ZTtcbiAgaWYgKHR5cGUgJiYgcXVldWVNYXBbdHlwZV0pIHtcbiAgICBmb3JtYXRRdWV1ZSA9IHF1ZXVlTWFwW3R5cGVdO1xuICAgIHF1ZXVlTWFwW3R5cGVdID0gW107XG4gIH1cbiAgcSA9IHF1ZXVlTWFwLnN1YnNjcmliZU13Q2hhbmdlUXVldWUuY29uY2F0KHF1ZXVlTWFwLm1ldGFRdWV1ZSk7XG4gIHEgPSBxLmNvbmNhdChxdWV1ZU1hcC5zdWJzY3JpYmVRdWV1ZSk7XG4gIHEgPSBxLmNvbmNhdChxdWV1ZU1hcC5zdWJzY3JpYmVNZXRhUXVldWUsIHF1ZXVlTWFwLm90aGVyc1F1ZXVlKTtcbiAgcmV0dXJuIHtcbiAgICBxdWV1ZTogcSxcbiAgICBmb3JtYXRRdWV1ZTogZm9ybWF0UXVldWVcbiAgfTtcbn07XG5leHBvcnRzLmdldEZvcm1hdFF1ZXVlID0gZ2V0Rm9ybWF0UXVldWU7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9wbHVnaW5zL2xpYl9xdWV1ZS9hY3Rpb24uanNcbi8vIG1vZHVsZSBpZCA9IDExNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIHByb2plY3QgLSBmaWxlcGF0aFxuICogZGVzY3JpcHRpb25cbiAqXG4gKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG4gKlxuICogQXV0aG9yczpcbiAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbERhdGEgPSByZXF1aXJlKCdAdXRpbHMvdXRpbERhdGEnKTtcbnZhciB1dGlsRG9tID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxEb20nKTtcbnZhciB1dGlsRXRhZyA9IHJlcXVpcmUoJ0B1dGlscy91dGlsRXRhZycpO1xudmFyIHV0aWxTdG9yZSA9IHJlcXVpcmUoJ0B1dGlscy91dGlsU3RvcmUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICAvKipcbiAgICAgKiBwduWPkemAgeWIsOWTqumHjOWOu1xuICAgICAqIOi/lOWbnlwiZG9uZVwi57uI5q2i5Lit6Ze05Lu25omn6KGMXG4gICAgICogQHBhcmFtIFtTdHJpbmddIHN0YXRlIOeKtuaAgVxuICAgICAqIEBwYXJhbSBbRnVuY3Rpb25dIGNiICDlm57osINcbiAgICAgKiBAcmV0dXJuIFwiZG9uZVwiIHwgdW5kZWZpbmVkXG4gICAgICovXG4gICAgcnVuOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBfc2VsZiA9IHRoaXM7XG4gICAgICB2YXIgYXBsdXNfY29uZmlnID0gdGhpcy5vcHRpb25zLmNvbnRleHQuYXBsdXNfY29uZmlnO1xuICAgICAgaWYgKHV0aWxTdG9yZS50ZXN0KCkpIHtcbiAgICAgICAgdmFyIF9jbmEgPSB1dGlsRGF0YS5nZXRMc0NuYShhcGx1c19jb25maWcuZ2xvYmFsQ29uZmlnLkVUQUdfU1RPUkFHRV9LRVksIF9zZWxmLnRvZGF5KTtcbiAgICAgICAgaWYgKCFfY25hKSB7XG4gICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgdmFyIGFwbHVzX3Job3N0X3YgPSBhcGx1cy5fJC5tZXRhX2luZm9bJ2FwbHVzLXJob3N0LXYnXTtcbiAgICAgICAgICAgIGlmIChhcGx1c19yaG9zdF92KSB7XG4gICAgICAgICAgICAgIF9zZWxmLm9wdGlvbnMuY29udGV4dC5ldGFnLmVnVXJsID0gYXBsdXNfcmhvc3RfdiArICcvZWcuanMnO1xuICAgICAgICAgICAgICB2YXIgZWdVcmwgPSB1dGlsRXRhZy5nZXRVcmwoX3NlbGYub3B0aW9ucy5jb250ZXh0LmV0YWcgfHwge30pO1xuICAgICAgICAgICAgICB1dGlsRG9tLmxvYWRTY3JpcHQoZWdVcmwsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICAvLyB2YXIgRXRhZyA9IHV0aWxHb2xkbG9nLmdldEdvbGRsb2dWYWwoJ0V0YWcnKTtcbiAgICAgICAgICAgICAgICBpZiAoZXJyICYmIGVyci50eXBlICE9PSAnZXJyb3InKSB7XG4gICAgICAgICAgICAgICAgICB1dGlsRGF0YS5zZXRMc0NuYShhcGx1c19jb25maWcuZ2xvYmFsQ29uZmlnLkVUQUdfU1RPUkFHRV9LRVksIF9zZWxmLnRvZGF5LCBhcGx1cy5FdGFnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIDEwMDApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL3BsdWdpbnMvbGliX2xvZy9taWRkbGV3YXJlL2NvbW1vbi9ldGFnX3dlYl9zeW5jLmpzXG4vLyBtb2R1bGUgaWQgPSAxMTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLypcbiAqIEZpbGU6IEF0bUJyaWRnZS5qc1xuICogUHJvamVjdDogQGFsaS9hcGx1c1xuICogICAgICBcbiAqIEF1dGhvcjog6ZKw5pitIChjaGFuZ2xpYW5nLmxjbEB1bWVuZy5jb20pXG4gKiAgICAgIFxuICogQ29weXJpZ2h0IC0gMjAyMSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cbiAqL1xuXG5cblxuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgdXRpbExvZ2dlciA9IHJlcXVpcmUoJ0B1dGlscy91dGlsTG9nZ2VyJyk7XG5cblxuZnVuY3Rpb24gaW5pdEpTQnJpZGdlKHdpbikge1xuICB2YXIgUHJvbWlzZSA9IHdpbi5Qcm9taXNlOyAvL+S9nOeUqOaYr+WVpe+8n1xuICB2YXIgZG9jID0gd2luLmRvY3VtZW50O1xuICB2YXIgdWEgPSB3aW4ubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgdmFyIGlzV2luID0gKC9XaW5kb3dzXFxzUGhvbmVcXHMoPzpPU1xccyk/W1xcZFxcLl0rL2kpLnRlc3QodWEpIHx8ICgvV2luZG93c1xcc05UXFxzW1xcZFxcLl0rL2kpLnRlc3QodWEpO1xuICB2YXIgaXNJT1MgPSAoL2lQaG9uZXxpUGFkfGlQb2QvaSkudGVzdCh1YSk7XG4gIHZhciBpc0FuZHJvaWQgPSAoL0FuZHJvaWQvaSkudGVzdCh1YSk7XG4gIHZhciBzaWRCYXNlID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKDEgPDwgMTYpKTsgLy9zaWQg55qE5L2c55So5piv5ZWl77yfXG4gIHZhciBpbmMgPSAxO1xuICB2YXIgaWZyYW1lUG9vbCA9IFtdO1xuICB2YXIgaWZyYW1lTGltaXQgPSAzO1xuXG4gIHZhciBJRlJBTUVfUFJFRklYID0gJ2lmcmFtZV8nO1xuICB2YXIgUEFSQU1fUFJFRklYID0gJ3BhcmFtXyc7XG5cbiAgdmFyIENBTExfR0NfVElNRSA9IDYwICogMTAwMCAqIDEwO1xuICB2YXIgUEFSQU1fR0NfVElNRSA9IDYwICogMTAwMDtcblxuICB2YXIgSlNCcmlkZ2VfQ29yZSA9IHtcbiAgICB0cmFjZTogZnVuY3Rpb24obmFtZSwgcGFyYW1zLCBzdWNjZXNzQ2FsbCwgZmFpbENhbGwsIHRpbWVvdXQpIHtcbiAgICAgIHJldHVybiBKU0JyaWRnZV9Db3JlLmNhbGwobmFtZSwgcGFyYW1zLCBzdWNjZXNzQ2FsbCwgZmFpbENhbGwsIHRpbWVvdXQpO1xuICAgIH0sXG5cbiAgICBjYWxsOiBmdW5jdGlvbihtZXRob2QsIHBhcmFtcywgc3VjY2VzcywgZmFpbHVyZSwgdGltZW91dCkge1xuICAgICAgdmFyIHNpZCwgcHJvbWlzZTtcbiAgICAgIGlmICh0eXBlb2YgYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgdGltZW91dCA9IGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoIC0gMV07XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2Ygc3VjY2VzcyAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBzdWNjZXNzID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgaWYgKFByb21pc2UgJiYgIXN1Y2Nlc3MgJiYgIWZhaWx1cmUpIHtcbiAgICAgICAgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIHN1Y2Nlc3MgPSByZXNvbHZlO1xuICAgICAgICAgIGZhaWx1cmUgPSByZWplY3Q7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBzaWQgPSBKU0JyaWRnZV9Qcml2YXRlLmdldFNpZCgpO1xuICAgICAgdmFyIGNhbGxJbmZvID0ge1xuICAgICAgICBzdWNjZXNzOiBzdWNjZXNzLFxuICAgICAgICBmYWlsdXJlOiBmYWlsdXJlXG4gICAgICB9O1xuICAgICAgaWYgKHRpbWVvdXQgPiAwKXtcbiAgICAgICAgY2FsbEluZm8udGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICBKU0JyaWRnZV9Db3JlLm9uRmFpbHVyZShzaWQsIHtyZXQ6IFwiSFlfVElNRU9VVFwifSk7XG4gICAgICAgIH0sIHRpbWVvdXQpO1xuICAgICAgfVxuXG4gICAgICBKU0JyaWRnZV9Qcml2YXRlLnJlZ2lzdGVyQ2FsbChzaWQsIGNhbGxJbmZvKTtcbiAgICAgIEpTQnJpZGdlX1ByaXZhdGUucmVnaXN0ZXJHQyhzaWQsIHRpbWVvdXQpO1xuXG4gICAgICBKU0JyaWRnZV9Qcml2YXRlLmV2b2tlTmF0aXZlKG1ldGhvZCwgcGFyYW1zLCBzaWQpO1xuXG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9LFxuICAgIC8vIOmcgOimgW5hdGl2Zeerr+mAmuefpWpz55qE5pe25YCZ77yI6YCa5L+h77yJ77yM55So6Kem5Y+R5LqL5Lu255qE5pa55byP6L+b6KGMXG4gICAgZmlyZUV2ZW50OiBmdW5jdGlvbihldmVudG5hbWUsIGV2ZW50ZGF0YSkge1xuICAgICAgdmFyIGV2ID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ0hUTUxFdmVudHMnKTtcbiAgICAgIGV2LmluaXRFdmVudChldmVudG5hbWUsIGZhbHNlLCB0cnVlKTtcbiAgICAgIGV2LnBhcmFtID0gSlNCcmlkZ2VfUHJpdmF0ZS5wYXJzZURhdGEoZXZlbnRkYXRhKTtcblxuICAgICAgZG9jLmRpc3BhdGNoRXZlbnQoZXYpO1xuICAgIH0sXG5cbiAgICBnZXRQYXJhbTogZnVuY3Rpb24oc2lkKSB7XG4gICAgICByZXR1cm4gSlNCcmlkZ2VfUHJpdmF0ZS5nZXRQYXJhbShzaWQpO1xuICAgIH0sXG5cbiAgICBzZXREYXRhOiBmdW5jdGlvbigpIHt9LFxuXG4gICAgZmluZDogZnVuY3Rpb24gKHJlcUlkLCBrZWVwQWxpdmUpIHtcbiAgICAgIGlmICgha2VlcEFsaXZlKSB7XG4gICAgICAgIEpTQnJpZGdlX1ByaXZhdGUudW5yZWdpc3RlckNhbGwocmVxSWQsIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgb25TdWNjZXNzOiBmdW5jdGlvbihzaWQsIGRhdGEsIGtlZXBBbGl2ZSkge1xuICAgICAgLy8gbmF0aXZl5Luj56CB5aSE55CG5oiQ5Yqf5ZCO77yM6LCD55So6K+l5pa55rOV5p2l6YCa55+lanNcbiAgICAgIEpTQnJpZGdlX1ByaXZhdGUub25Db21wbGV0ZShzaWQsIGRhdGEsICdzdWNjZXNzJywga2VlcEFsaXZlKTtcbiAgICB9LFxuXG4gICAgb25GYWlsdXJlOiBmdW5jdGlvbihzaWQsIGRhdGEpIHtcbiAgICAgIC8vIG5hdGl2ZeS7o+eggeWkhOeQhuWksei0peWQju+8jOiwg+eUqOivpeaWueazleadpemAmuefpWpzXG4gICAgICBKU0JyaWRnZV9Qcml2YXRlLm9uQ29tcGxldGUoc2lkLCBkYXRhLCAnZmFpbHVyZScpO1xuICAgIH1cblxuICB9O1xuXG4gIHZhciBKU0JyaWRnZV9Qcml2YXRlID0ge1xuICAgIHBhcmFtczoge30sXG4gICAgY2FsbHM6IHt9LFxuXG4gICAgZ2V0U2lkOiBmdW5jdGlvbigpIHtcbiAgICAgIC8vIGlPUyAxMC4zIOWQjuerr+WPo+S4jeiDvei2hei/hyA2NTUzNi5cbiAgICAgIHJldHVybiAoKHNpZEJhc2UgKyBpbmMrKykgJSA2NTUzNikgKyAnJztcbiAgICB9LFxuXG4gICAgYnVpbGRQYXJhbTogZnVuY3Rpb24ob2JqKSB7XG4gICAgICBpZiAob2JqICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShvYmopO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG9iaiB8fCAnJztcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZ2V0UGFyYW06IGZ1bmN0aW9uKHNpZCkge1xuICAgICAgLy8g5Zug5Li6aW9z5LiLaWZyYW1l5Y2P6K6u77yM5a+55LqOdXJs6ZW/5bqm5pyJ6ZmQ5Yi277yM5omA5Lul5aKe5Yqg5LiA5Liq5Y+C5pWw55qEbWFw44CCXG4gICAgICByZXR1cm4gdGhpcy5wYXJhbXNbUEFSQU1fUFJFRklYICsgc2lkXSB8fCAnJztcbiAgICB9LFxuXG4gICAgc2V0UGFyYW06IGZ1bmN0aW9uKHNpZCwgcGFyYW1zKSB7XG4gICAgICB0aGlzLnBhcmFtc1tQQVJBTV9QUkVGSVggKyBzaWRdID0gcGFyYW1zO1xuICAgIH0sXG5cbiAgICBwYXJzZURhdGE6IGZ1bmN0aW9uKHN0cikge1xuICAgICAgdmFyIHJzdDtcbiAgICAgIGlmIChzdHIgJiYgdHlwZW9mIHN0ciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByc3QgPSBKU09OLnBhcnNlKHN0cik7XG4gICAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICAgIHJzdCA9IHtyZXQ6J0hZX1JFU1VMVF9QQVJTRV9FUlJPUicsIG9yaWdpblZhbHVlOiBzdHJ9O1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByc3QgPSBzdHIgfHwge307XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByc3Q7XG4gICAgfSxcblxuICAgIHJlZ2lzdGVyQ2FsbDogZnVuY3Rpb24oc2lkLCBjYWxsSW5mbykge1xuICAgICAgdGhpcy5jYWxsc1tzaWRdID0gY2FsbEluZm87XG4gICAgfSxcblxuICAgIHVucmVnaXN0ZXJDYWxsOiBmdW5jdGlvbihzaWQsIGtlZXBBbGl2ZSkge1xuICAgICAgdmFyIGNhbGxJbmZvID0gdGhpcy5jYWxsc1tzaWRdIHx8IHt9O1xuXG4gICAgICB2YXIgdGltZW91dCA9IGNhbGxJbmZvLnRpbWVvdXQ7XG4gICAgICBpZiAodGltZW91dCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICB9XG5cbiAgICAgIGlmICgha2VlcEFsaXZlKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmNhbGxzW3NpZF07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjYWxsSW5mbztcbiAgICB9LFxuXG4gICAgdXNlSWZyYW1lOiBmdW5jdGlvbihzaWQsIHVybCkge1xuICAgICAgdmFyIGlmcmFtZWlkID0gSUZSQU1FX1BSRUZJWCArIHNpZDtcbiAgICAgIHZhciBpZnJhbWUgPSBpZnJhbWVQb29sLnBvcCgpO1xuXG4gICAgICBpZiAoIWlmcmFtZSkge1xuICAgICAgICBpZnJhbWUgPSBkb2MuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gICAgICAgIGlmcmFtZS5zZXRBdHRyaWJ1dGUoJ2ZyYW1lYm9yZGVyJywgJzAnKTtcbiAgICAgICAgaWZyYW1lLnN0eWxlLmNzc1RleHQgPSAnd2lkdGg6MDtoZWlnaHQ6MDtib3JkZXI6MDtkaXNwbGF5Om5vbmU7JztcbiAgICAgIH1cblxuICAgICAgaWZyYW1lLnNldEF0dHJpYnV0ZSgnaWQnLCBpZnJhbWVpZCk7XG4gICAgICBpZnJhbWUuc2V0QXR0cmlidXRlKCdzcmMnLCB1cmwpO1xuXG4gICAgICBpZiAoIWlmcmFtZS5wYXJlbnROb2RlKSB7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZG9jLmJvZHkuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgICAgICAgfSw1KTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgcmV0cmlldmVJZnJhbWUgOiBmdW5jdGlvbihzaWQpIHtcbiAgICAgIHZhciBpZnJhbWVpZCA9IElGUkFNRV9QUkVGSVggKyBzaWQ7XG4gICAgICB2YXIgaWZyYW1lID0gZG9jLnF1ZXJ5U2VsZWN0b3IoJyMnICsgaWZyYW1laWQpO1xuXG4gICAgICBpZiAoaWZyYW1lKSB7XG4gICAgICAgIGlmIChpZnJhbWVQb29sLmxlbmd0aCA+PSBpZnJhbWVMaW1pdCkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBkb2MuYm9keS5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIOacieaXtiBpZnJhbWUg55qEIHBhcmVudCDlubbkuI3mmK8gYm9kee+8jOaIluiAheeKtuaAgeS4jeato+ehru+8jOS8muWvvOiHtOaKm+W8guW4uFxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyDpgb/lhY3lkIzkuIDkuKogaWZyYW1lIOmHjeWkjeaPkuWFpeS4pOasoSBpZnJhbWVQb2xsXG4gICAgICAgICAgaWYgKGlmcmFtZVBvb2wuaW5kZXhPZihpZnJhbWUpIDwgMCkge1xuICAgICAgICAgICAgaWZyYW1lUG9vbC5wdXNoKGlmcmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGV2b2tlTmF0aXZlOiBmdW5jdGlvbihtZXRob2QsIHBhcmFtcywgc2lkKSB7XG4gICAgICB2YXIgY21kID0ge1xuICAgICAgICBjbGFzc05hbWUgOiBcIlVtZW5nNEFwbHVzXCIsXG4gICAgICAgIG1ldGhvZE5hbWUgOiBtZXRob2QsXG4gICAgICAgIHNpZDogc2lkLFxuICAgICAgICBjYWxsYmFjazogJycsXG4gICAgICAgIHBhcmFtcyA6IHBhcmFtc1xuICAgICAgfTtcbiAgICAgIHZhciBqc29uU3RyID0gSlNPTi5zdHJpbmdpZnkoY21kKTtcbiAgICAgIGNvbnNvbGUubG9nKCd5ei0tLS0tbWV0aG9kOiAnLCBtZXRob2QsIGpzb25TdHIpO1xuICAgICAgaWYgKGlzV2luKSB7XG4gICAgICAgIHRoaXMub25Db21wbGV0ZShzaWQsIHtyZXQ6ICdIWV9OT19IQU5ETEVSX09OX1dQJ30sICdmYWlsdXJlJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNJT1MpIHtcbiAgICAgICAgICB3aW5kb3cud2Via2l0Lm1lc3NhZ2VIYW5kbGVycy5VbWVuZzRBcGx1cy5wb3N0TWVzc2FnZShqc29uU3RyKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0FuZHJvaWQpIHtcbiAgICAgICAgICB3aW5kb3cuVW1lbmc0QXBsdXMuQ0FMTChqc29uU3RyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLm9uQ29tcGxldGUoc2lkLCB7cmV0OiAnSFlfTk9UX1NVUFBPUlRfREVWSUNFJ30sICdmYWlsdXJlJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVnaXN0ZXJHQzogZnVuY3Rpb24oc2lkLCB0aW1lb3V0KSB7XG4gICAgICAvLyDlnoPlnL7lm57mlLZcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBjYWxsR0NUaW1lID0gTWF0aC5tYXgodGltZW91dCB8fCAwLCBDQUxMX0dDX1RJTUUpO1xuICAgICAgdmFyIHBhcmFtR0NUaW1lID0gTWF0aC5tYXgodGltZW91dCB8fCAwLCBQQVJBTV9HQ19USU1FKTtcblxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICB0aGF0LnVucmVnaXN0ZXJDYWxsKHNpZCk7XG4gICAgICB9LCBjYWxsR0NUaW1lKTtcblxuICAgICAgaWYgKGlzSU9TKSB7XG4gICAgICAgIC8vIGlvc+S4i+WkhOeQhnBhcmFtc+eahOWbnuaUtlxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgaWYgKHRoYXQucGFyYW1zW1BBUkFNX1BSRUZJWCArIHNpZF0pIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGF0LnBhcmFtc1tQQVJBTV9QUkVGSVggKyBzaWRdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgcGFyYW1HQ1RpbWUpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBvbkNvbXBsZXRlOiBmdW5jdGlvbihzaWQsIGRhdGEsIHR5cGUsIGtlZXBBbGl2ZSkge1xuICAgICAgdmFyIGNhbGwgPSB0aGlzLnVucmVnaXN0ZXJDYWxsKHNpZCwga2VlcEFsaXZlKTtcbiAgICAgIHZhciBzdWNjZXNzID0gY2FsbC5zdWNjZXNzO1xuICAgICAgdmFyIGZhaWx1cmUgPSBjYWxsLmZhaWx1cmU7XG5cbiAgICAgIGRhdGEgPSB0aGlzLnBhcnNlRGF0YShkYXRhKTtcblxuICAgICAgdmFyIHJldCA9IGRhdGEucmV0O1xuICAgICAgaWYgKHR5cGVvZiByZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGRhdGEgPSBkYXRhLnZhbHVlIHx8IGRhdGE7XG4gICAgICAgIGlmICghZGF0YS5yZXQpIHtcbiAgICAgICAgICBkYXRhLnJldCA9IFtyZXRdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlID09PSAnc3VjY2VzcycpIHtcbiAgICAgICAgc3VjY2VzcyAmJiBzdWNjZXNzKGRhdGEpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnZmFpbHVyZScpIHtcbiAgICAgICAgZmFpbHVyZSAmJiBmYWlsdXJlKGRhdGEpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNJT1MpIHsgICAgLy9pT1PkuIvlm57mlLZpZnJhbWVcbiAgICAgICAgdGhpcy5yZXRyaWV2ZUlmcmFtZShzaWQpO1xuICAgICAgICBpZiAodGhpcy5wYXJhbXNbUEFSQU1fUFJFRklYICsgc2lkXSkge1xuICAgICAgICAgIGRlbGV0ZSB0aGlzLnBhcmFtc1tQQVJBTV9QUkVGSVggKyBzaWRdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBKU0JyaWRnZV9Db3JlO1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4geyAgXG4gICAgc3Vic2NyaWJlTG9nczogZnVuY3Rpb24gKGFjdGlvbiwgY2FsbGJhY2spIHtcbiAgICAgIGFwbHVzLmFwbHVzX3B1YnN1Yi5zdWJzY3JpYmUoYWN0aW9uLCBmdW5jdGlvbiAob3JpRGF0YXMpIHtcbiAgICAgICAgaWYgKG9yaURhdGFzLnN0YXR1cyA9PT0gJ2NvbXBsZXRlJykge1xuICAgICAgICAgIGNhbGxiYWNrKG9yaURhdGFzKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcblxuICAgIGNhbGxVVDogZnVuY3Rpb24gKGFjdGlvbiwgcGFyYW1zKSB7XG4gICAgICBwYXJhbXMuX2JyaWRnZU5hbWUgPSB0aGlzLm9wdGlvbnMuYnJpZGdlTmFtZSB8fCAnQXRtQnJpZGdlJztcbiAgICAgIHBhcmFtcy5fYnJpZGdlVmVyc2lvbiA9IHRoaXMub3B0aW9ucy5icmlkZ2VWZXJzaW9uIHx8ICcxLjAuMCc7XG4gICAgICBjb25zb2xlLmxvZygneXotLS0tcGFyYW1zJywgYWN0aW9uLCBKU09OLnN0cmluZ2lmeShwYXJhbXMpKTtcbiAgICAgIGlmIChhcGx1cyAmJiBhcGx1cy5hcGx1c0RlYnVnICYmIGNvbnNvbGUpIHtcbiAgICAgICAgdXRpbExvZ2dlci5sb2dnZXIoe1xuICAgICAgICAgIG1zZzogJ+W9k+WJjemAj+S8oOa2iOaBr+S9kzogJytKU09OLnN0cmluZ2lmeShwYXJhbXMpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgd2luZG93LkF0bUJyaWRnZS50cmFjZShcbiAgICAgICAgICBhY3Rpb24sIHBhcmFtcywgZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdTVUNDRVNTOicsIG8pO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdGQUlMVVJFOicsIGVycik7XG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgY2FsbE1lcmdlVG9OYXRpdmVHUDogZnVuY3Rpb24oYWN0aW9uLCB2YWx1ZSkge1xuICAgICAgaWYgKGFwbHVzICYmIGFwbHVzLmFwbHVzRGVidWcgJiYgY29uc29sZSkge1xuICAgICAgICB1dGlsTG9nZ2VyLmxvZ2dlcih7XG4gICAgICAgICAgbXNnOiAn5b2T5YmN6YCP5Lyg5YWo5bGA5bGe5oCnOiAnKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSlcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHdpbmRvdy5BdG1CcmlkZ2UudHJhY2UoYWN0aW9uLCB2YWx1ZSwgZnVuY3Rpb24obyl7XG4gICAgICAgICAgY29uc29sZS5sb2coJ1NVQ0NFU1M6ICcsIG8pO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnIpe1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdGQUlMVVJFOicsIGVycik7XG4gICAgICAgIH0pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgd2F0Y2hMT0c6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfc2VsZiA9IHRoaXM7XG4gICAgICBfc2VsZi5zdWJzY3JpYmVMb2dzKCdtd19jaGFuZ2VfcHYnLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICB2YXIgd2hhdF90b19zZW5kID0gZGF0YS53aGF0X3RvX3NlbmQgfHwge307XG4gICAgICAgIHZhciBwYXJhbXMgPSB3aGF0X3RvX3NlbmQucHZkYXRhVG9VbU5hdGl2ZSB8fCB7fTtcbiAgICAgICAgX3NlbGYuY2FsbFVUKCdzZW5kUFYnLCBwYXJhbXMpO1xuICAgICAgfSk7XG4gICAgICBfc2VsZi5zdWJzY3JpYmVMb2dzKCdtd19jaGFuZ2VfaGpsaicsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHZhciB3aGF0X3RvX3NlbmQgPSBkYXRhLndoYXRfdG9fc2VuZCB8fCB7fTtcbiAgICAgICAgdmFyIHBhcmFtcyA9IHdoYXRfdG9fc2VuZC5oamxqZGF0YVRvVW1OYXRpdmUgfHwge307XG4gICAgICAgIF9zZWxmLmNhbGxVVCgnc2VuZEV2ZW50JywgcGFyYW1zKTtcbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICB3YXRjaE1ldGFJbmZvOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBfc2VsZiA9IHRoaXM7XG4gICAgICBhcGx1cy5hcGx1c19wdWJzdWIuc3Vic2NyaWJlKCdzZXRNZXRhSW5mbycsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmIChrZXkgPT09ICdnbG9iYWxQcm9wZXJ0eScgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgIF9zZWxmLmNhbGxNZXJnZVRvTmF0aXZlR1AoJ3JlZ2lzdGVyR2xvYmFsUHJvcGVydGllcycsIC9BbmRyb2lkLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpPyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgOiB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBydW46IGZ1bmN0aW9uKCl7XG4gICAgICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgICAgIHZhciBpc1VtZW5nU2RrID0gKC9VbWVuZzRBcGx1cy9pKS50ZXN0KHVhKTtcbiAgICAgIGlmIChpc1VtZW5nU2RrICYmICF3aW5kb3cuQXRtQnJpZGdlKSB7XG4gICAgICAgIHZhciBBdG1CcmlkZ2UgPSBpbml0SlNCcmlkZ2Uod2luZG93KTtcbiAgICAgICAgd2luZG93LkF0bUJyaWRnZSA9IEF0bUJyaWRnZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHdpbmRvdy5BdG1CcmlkZ2UpIHtcbiAgICAgICAgdGhpcy53YXRjaExPRygpO1xuICAgICAgICB0aGlzLndhdGNoTWV0YUluZm8oKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvcGx1Z2luc193ZWIvbGliX2pzQnJpZGdlL0F0bUJyaWRnZS5qc1xuLy8gbW9kdWxlIGlkID0gMTE4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICog5Y+v6KeG5YyW5Z+L54K5IHwgV2ViIFZpc3VhbGl6YXRpb24gVHJhY2tlcmluZyBTREtcbiAqIHRoaXMgaXMgYW4gZW50cmFuY2Ugb2Ygd2ViVlRcbiAqIEFQSTogaHR0cHM6Ly95dXF1ZS5hbnRmaW4taW5jLmNvbS9kYXRhLWNvbGxlY3QvdnQvdWI4bG1tXG4gKlxuICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuICogQXV0aG9yczpcbiAqICAgUmljaGFyZHzosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBCYXNlID0gcmVxdWlyZSgnQGNvcmUvQmFzZScpO1xudmFyIHV0aWxTdG9yZSA9IHJlcXVpcmUoJ0B1dGlscy91dGlsU3RvcmUnKTtcbnZhciB1dGlsR1EgPSByZXF1aXJlKCdAdXRpbHMvdXRpbEdRJyk7XG52YXIgZWFjaCA9IHJlcXVpcmUoJ0B1dGlscy9lYWNoJyk7XG52YXIgYXBsdXNTdGF0aWMgPSByZXF1aXJlKCdAdXRpbHMvYXBsdXNTdGF0aWMnKTtcbnZhciBmZXRjaERhdGEgPSByZXF1aXJlKCdAdXRpbHMvZmV0Y2hEYXRhJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gQmFzZS5leHRlbmQoe1xuXG4gIGluaXQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMuUEFHRV9DT05GSUdfS0VZID0gJ0FQTFVTX1BBR0VfQ09ORklHJztcbiAgICB0aGlzLmNkbnBhdGg7XG4gICAgdGhpcy5pc1N0YXJ0VHJhY2tlciA9IGZhbHNlO1xuICAgIHRoaXMubGF0ZXN0Q29tcG9uZW50SWQ7XG4gICAgdGhpcy5sYXRlc3RQYWdlSWQ7XG4gICAgdGhpcy5hcGx1c193ZWJfcGFnZWNvbmZpZztcbiAgfSxcblxuICBnZXRDZG5QYXRoOiBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgaWYgKCF0aGlzLmNkbnBhdGgpIHtcbiAgICAgIHZhciBfcGF0aCA9IGFwbHVzICYmIGFwbHVzLmFwbHVzRGVidWcgPyAnL2RhaWx5JyA6ICcnO1xuICAgICAgdGhpcy5jZG5wYXRoID0gY29uZmlnLmNkblBhdGggKyBfcGF0aCArICcvJyArIGNvbmZpZy5jb21wb25lbnRJZCArICcuanNvbic7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNkbnBhdGg7XG4gICAgXG4gIH0sXG5cbiAgZmV0Y2hGcm9tTFM6IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIEpTT04ucGFyc2UoZGVjb2RlVVJJQ29tcG9uZW50KHV0aWxTdG9yZS5nZXQodGhpcy5QQUdFX0NPTkZJR19LRVkgKyAnLScgKyB0aGlzLmdldENkblBhdGgoY29uZmlnKSkpIHx8IHt9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH0sXG5cbiAgc2V0Q29uZmlnSW50b0xTOiBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgdXRpbFN0b3JlLnNldCh0aGlzLlBBR0VfQ09ORklHX0tFWSArICctJyArIHRoaXMuZ2V0Q2RuUGF0aChjb25maWcpLCBlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY29uZmlnKSkpO1xuICB9LFxuXG4gIGZldGNoRnJvbUNkbjogZnVuY3Rpb24gKGNvbmZpZywgY2FsbGJhY2spIHtcbiAgICAvLyB2YXIgX3NlbGYgPSB0aGlzO1xuICAgIHZhciBfcGF0aCA9IGFwbHVzICYmIGFwbHVzLmFwbHVzRGVidWcgPyAnL2RhaWx5JyA6ICcnO1xuICAgIHZhciBwYXRoID0gY29uZmlnLmNkblBhdGggKyBfcGF0aCArICcvJyArIGNvbmZpZy5jb21wb25lbnRJZCArICcuanNvbic7XG4gICAgZmV0Y2hEYXRhLnJlcXVlc3QocGF0aCwgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIGNhbGxiYWNrKGRhdGEpO1xuICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgaWYgKGFwbHVzICYmIGFwbHVzLmFwbHVzRGVidWcpIHdpbmRvdy5jb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICBjYWxsYmFjayhudWxsKTtcbiAgICB9LCB7XG4gICAgICB0aW1lb3V0OiA1MDAwXG4gICAgfSk7XG4gIH0sXG5cbiAgZ2V0Q3VycmVudFBhZ2VDb25maWc6IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICB2YXIgX3NlbGYgPSB0aGlzO1xuICAgIHZhciBjdXJyZW50UGFnZUNvbmZpZyA9IHt9O1xuICAgIGlmIChfc2VsZi5hcGx1c193ZWJfcGFnZWNvbmZpZyAmJiBfc2VsZi5hcGx1c193ZWJfcGFnZWNvbmZpZy5wYWdlcykge1xuICAgICAgZWFjaChfc2VsZi5hcGx1c193ZWJfcGFnZWNvbmZpZy5wYWdlcywgZnVuY3Rpb24gKHBhZ2UpIHtcbiAgICAgICAgaWYgKHBhZ2Uuc3BtQiA9PT0gKGNvbmZpZy5wYWdlSWQgKyAnJykpIHtcbiAgICAgICAgICBjdXJyZW50UGFnZUNvbmZpZy5wYWdlID0gcGFnZTtcbiAgICAgICAgICB2YXIgcG9pbnRzID0gW107XG4gICAgICAgICAgZWFjaChfc2VsZi5hcGx1c193ZWJfcGFnZWNvbmZpZy5wb2ludHMsIGZ1bmN0aW9uIChwb2ludCkge1xuICAgICAgICAgICAgaWYgKHBvaW50LnNwbUIgPT09IHBhZ2Uuc3BtQikge1xuICAgICAgICAgICAgICBwb2ludHMucHVzaChwb2ludCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgY3VycmVudFBhZ2VDb25maWcucG9pbnRzID0gcG9pbnRzO1xuICAgICAgICAgIHJldHVybiAnYnJlYWsnO1xuICAgICAgICB9XG4gICAgICB9KTsgIFxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gY3VycmVudFBhZ2VDb25maWc7XG4gIH0sXG5cbiAgZ2V0UGFnZUNvbmZpZzogZnVuY3Rpb24gKGNvbmZpZywgY2FsbGJhY2spIHtcbiAgICB2YXIgX3NlbGYgPSB0aGlzO1xuICAgIHZhciBsb2NhbERhdGEgPSB0aGlzLmZldGNoRnJvbUxTKGNvbmZpZyk7XG4gICAgaWYgKGxvY2FsRGF0YSkge1xuICAgICAgX3NlbGYubGF0ZXN0Q29tcG9uZW50SWQgPSBjb25maWcuY29tcG9uZW50SWQ7XG4gICAgICBfc2VsZi5hcGx1c193ZWJfcGFnZWNvbmZpZyA9IGxvY2FsRGF0YTtcbiAgICAgIGNhbGxiYWNrKCdMUycpO1xuICAgIH1cblxuICAgIF9zZWxmLmZldGNoRnJvbUNkbihjb25maWcsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICBpZiAoZGF0YSkge1xuICAgICAgICBfc2VsZi5zZXRDb25maWdJbnRvTFMoZGF0YSk7XG4gICAgICAgIF9zZWxmLmxhdGVzdENvbXBvbmVudElkID0gY29uZmlnLmNvbXBvbmVudElkO1xuICAgICAgICBpZiAoIV9zZWxmLmlzU3RhcnRUcmFja2VyKSB7XG4gICAgICAgICAgX3NlbGYuYXBsdXNfd2ViX3BhZ2Vjb25maWcgPSBkYXRhO1xuICAgICAgICAgIGNhbGxiYWNrKCdDTkEnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG4gIHRyYWNrZXJQYWdlVmlld0V2ZW50OiBmdW5jdGlvbiAocGFnZSkge1xuICAgIGFwbHVzLnNlbmRQVih7XG4gICAgICBpc0F1dG86IGZhbHNlLFxuICAgICAgdHJhY2tlckV2ZW50Q29kZTogcGFnZS5ldmVudENvZGUsXG4gICAgfSwge1xuICAgICAgX3Bvc19pZDogcGFnZS5zcG1CLFxuICAgIH0pO1xuICB9LFxuXG4gIHRyYWNrZXJDb21tb25FdmVudDogZnVuY3Rpb24gKHBvaW50cykge1xuICAgIC8vIHZhciBleHBFdmVudHMgPSBbXTsgLy8gVE9ETyDmnKzmnJ/kuI3mlK/mjIFcbiAgICB2YXIgY2xrRXZlbnRzID0gW107XG4gICAgZWFjaChwb2ludHMsIGZ1bmN0aW9uIChwb2ludCkge1xuICAgICAgLy8gdmFyIGlzUmVjb3JkQ2xpY2tFdmVudCA9IHBvaW50LmxvZ2tleSAmJiBwb2ludC5zZWxlY3RvciAmJiBwb2ludC50cmFja2VyVHlwZSAmJiBwb2ludC50cmFja2VyVHlwZS5pbmRleE9mKCdjbGljaycpID4gLTE7XG4gICAgICAvLyBpZiAocG9pbnQubG9na2V5ICYmIHBvaW50LnNlbGVjdG9yICYmIHBvaW50LnRyYWNrZXJUeXBlKSB7XG4gICAgICAvLyAgIGlmIChwb2ludC50cmFja2VyVHlwZS5pbmRleE9mKCdjbGljaycpID4gLTEpIHtcbiAgICAgIHZhciBjc3NTZWxlY3RvcjtcbiAgICAgIHN3aXRjaCAocG9pbnQuc2VsZWN0b3JUeXBlKSB7XG4gICAgICBjYXNlICdJRCc6XG4gICAgICAgIGNzc1NlbGVjdG9yID0gJyMnICsgcG9pbnQuc2VsZWN0b3I7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnQ0xBU1MnOlxuICAgICAgICBjc3NTZWxlY3RvciA9ICcuJyArIHBvaW50LnNlbGVjdG9yO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ0RBVEFfVFJBQ0tFUic6XG4gICAgICAgIGNzc1NlbGVjdG9yID0gJ1tkYXRhLXRyYWNrZXI9XCInICsgcG9pbnQuc2VsZWN0b3IgKyAnXCJdJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmIChjc3NTZWxlY3Rvcikge1xuICAgICAgICBjbGtFdmVudHMucHVzaCh7XG4gICAgICAgICAgY3NzU2VsZWN0b3I6IGNzc1NlbGVjdG9yLFxuICAgICAgICAgIGxvZ2tleTogcG9pbnQubG9na2V5IHx8ICckJF9BUExVUycsXG4gICAgICAgICAgc3BtQjogcG9pbnQuc3BtQixcbiAgICAgICAgICBfcG9zX2lkOiBwb2ludC5zcG1DLFxuICAgICAgICAgIHByb3BzOiBbXSAvLyBUT0RPIOacrOacn+S4jeaUr+aMgVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIC8vICAgfVxuICAgICAgLy8gfVxuICAgIH0pO1xuICAgIGlmIChjbGtFdmVudHMubGVuZ3RoID4gMCkge1xuICAgICAgYXBsdXMuc2V0TWV0YUluZm8oJ2FwbHVzLWF1dG8tY2xrJywgY2xrRXZlbnRzKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbXMge09iamVjdH0gY3VycmVudFBhZ2VDb25maWcgIHtcbiAgICogICBwYWdlOiB7fSxcbiAgICogICBwb2ludHM6IFtdLFxuICAgKiB9XG4gICAqIEBwYXJhbXMge09iamVjdH0gb3B0aW9ucyB7XG4gICAqICAgZGF0YVNvdXJjZVR5cGU6IExPQ0FML0xTL0NETlxuICAgKiAgIHBhZ2VJZDogMTYwMDEzXG4gICAqIH1cbiAgICovXG4gIHN0YXJ0VHJhY2tlcjogZnVuY3Rpb24gKGN1cnJlbnRQYWdlQ29uZmlnLCBvcHRpb25zKSB7XG4gICAgaWYgKGFwbHVzLmFwbHVzRGVidWcpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdvcHRpb25zID09PSAnLCBvcHRpb25zKTtcbiAgICB9XG4gICAgY3VycmVudFBhZ2VDb25maWcuY29tcG9uZW50SWQgPSB0aGlzLmxhdGVzdENvbXBvbmVudElkO1xuICAgIHV0aWxHUS5wdXNoSW50b0dvbGRsb2dRdWV1ZShhcGx1c1N0YXRpYy5QVUJMSVNILCBbYXBsdXNTdGF0aWMuQ1VSUkVOVF9QQUdFX0NPTkZJRywgY3VycmVudFBhZ2VDb25maWddKTtcbiAgICB1dGlsR1EucHVzaEludG9Hb2xkbG9nUXVldWUoYXBsdXNTdGF0aWMuQ0FDSEVfUFVCUywgW2FwbHVzU3RhdGljLkNVUlJFTlRfUEFHRV9DT05GSUcsIGN1cnJlbnRQYWdlQ29uZmlnXSk7XG5cbiAgICB2YXIgcGFnZSA9IGN1cnJlbnRQYWdlQ29uZmlnLnBhZ2UgfHwge307XG4gICAgaWYgKHBhZ2Uuc3BtQiAmJiB0aGlzLmxhdGVzdFBhZ2VJZCAhPT0gcGFnZS5zcG1CKSB7XG4gICAgICB0aGlzLmxhdGVzdFBhZ2VJZCA9IHBhZ2Uuc3BtQjtcbiAgICAgIHRoaXMuaXNTdGFydFRyYWNrZXIgPSB0cnVlO1xuICAgICAgdGhpcy50cmFja2VyUGFnZVZpZXdFdmVudChwYWdlKTtcbiAgICAgIHRoaXMudHJhY2tlckNvbW1vbkV2ZW50KGN1cnJlbnRQYWdlQ29uZmlnLnBvaW50cyB8fCBbXSk7XG4gICAgfVxuICB9LFxuXG4gIC8vIGFwbHVzX3F1ZXVlLnB1c2goe1xuICAvLyAgICdhY3Rpb24nOidhcGx1cy5wYWdlRW50ZXInLFxuICAvLyAgICdhcmd1bWVudHMnOlt7XG4gIC8vICAgICBjb21wb25lbnRJZDogMTYwMDEyLFxuICAvLyAgICAgcGFnZUlkOiAxNjAwMTMsXG4gIC8vICAgICBjZG5QYXRoOiBcImh0dHBzOi8vYWxpZHQuYWxpY2RuLmNvbS9hbGlsb2cvYW13YXlcIiwgLy8gL2RhaWx5LzE0NjAwOC5qc29uXG4gIC8vICAgfV1cbiAgLy8gfSlcbiAgcnVuOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9zZWxmID0gdGhpcztcbiAgICB1dGlsR1EucHVzaEludG9Hb2xkbG9nUXVldWUoYXBsdXNTdGF0aWMuU1VCU0NSSUJFLCBbYXBsdXNTdGF0aWMuUEFHRV9FTlRFUiwgZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgaWYgKF9zZWxmLmxhdGVzdENvbXBvbmVudElkID09PSBjb25maWcuY29tcG9uZW50SWQgJiYgX3NlbGYuYXBsdXNfd2ViX3BhZ2Vjb25maWcpIHtcbiAgICAgICAgX3NlbGYuc3RhcnRUcmFja2VyKF9zZWxmLmdldEN1cnJlbnRQYWdlQ29uZmlnKGNvbmZpZyksIHtcbiAgICAgICAgICBzb3VyY2U6ICdMT0NBTCdcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfc2VsZi5nZXRQYWdlQ29uZmlnKGNvbmZpZywgZnVuY3Rpb24gKGRhdGFTb3VyY2VUeXBlKSB7XG4gICAgICAgICAgX3NlbGYuc3RhcnRUcmFja2VyKF9zZWxmLmdldEN1cnJlbnRQYWdlQ29uZmlnKGNvbmZpZyksIHtcbiAgICAgICAgICAgIHNvdXJjZTogZGF0YVNvdXJjZVR5cGVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfV0pO1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL3BsdWdpbnNfd2ViX2Nsb3VkL2FwbHVzX3dlYl9wYWdlY29uZmlnLmpzXG4vLyBtb2R1bGUgaWQgPSAxMTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBhbGlsb2cvcy91dGlsL2ZldGNoRGF0YS5qc1xuICog5bel5YW357G7XG4gKlxuICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuICpcbiAqIEF1dGhvcnM6XG4gKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIGFwbHVzU3RhdGljID0gcmVxdWlyZSgnQHV0aWxzL2FwbHVzU3RhdGljLmpzJyk7XG5cbi8qKlxuICogQHR5cGUge09iamVjdH1cbiAqIOmFjee9rumhueWMheaLrO+8mlxuICogYmFzZTog6buY6K6k54Gw5bqm5Z+65pWwMTAwMDBcbiAqIHRpbWVvdXQ6IENPUlPotoXml7bml7bpl7RcbiAqL1xudmFyIF9jb25maWcgPSB7XG4gIGJhc2U6IDEwMDAwLFxuICAvLyDpu5jorqQxMHNcbiAgdGltZW91dDogMTAwMDBcbn07XG5cbnZhciBmZXRjaCA9IGZ1bmN0aW9uICh1cmwsIHJlc29sdmUsIHJlamVjdCwgb3B0cykge1xuICBpZiAoL15cXC9cXC8vLnRlc3QodXJsKSkge1xuICAgIHVybCA9IGFwbHVzU3RhdGljLkhUVFBTICsgdXJsO1xuICB9XG4gIHZhciBwZW5kaW5nID0gdHJ1ZTtcbiAgdmFyIHRpbWVvdXQgPSAob3B0cyAmJiBvcHRzLnRpbWVvdXQpID8gb3B0cy50aW1lb3V0IDogX2NvbmZpZy50aW1lb3V0O1xuICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgaWYgKHBlbmRpbmcpIHtcbiAgICAgIHBlbmRpbmcgPSBmYWxzZTtcbiAgICAgIHJlamVjdCh7XG4gICAgICAgIHRpbWVvdXQ6IHRpbWVvdXRcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgdGltZW91dCk7XG4gIHdpbmRvdy5mZXRjaCh1cmwpXG4gICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgIGlmKC9hcHBsaWNhdGlvblxcL2pzb24vLnRlc3QocmVzcG9uc2UuaGVhZGVycy5nZXQoJ2NvbnRlbnQtdHlwZScpKSkge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnRleHQoKTtcbiAgICAgIH1cbiAgICB9KVxuICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIGlmIChwZW5kaW5nKSB7XG4gICAgICAgIHJlc29sdmUoZGF0YSk7XG4gICAgICAgIHBlbmRpbmcgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9KVxuICAgIC5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuICAgICAgcGVuZGluZyAmJiByZWplY3QoZXJyb3IpO1xuICAgIH0pO1xufTtcblxudmFyIGFqYXggPSBmdW5jdGlvbiAodXJsLCByZXNvbHZlLCByZWplY3QsIG9wdHMpIHtcbiAgdmFyIHhocjtcbiAgdmFyIG1ldGhvZCA9ICdHRVQnO1xuICB2YXIgb25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh4aHIucmVzcG9uc2VUZXh0KSB7XG4gICAgICByZXNvbHZlKHhoci5yZXNwb25zZVRleHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZWplY3QoKTtcbiAgICB9XG4gIH07XG4gIHZhciBDT1JTID0gd2luZG93LlhNTEh0dHBSZXF1ZXN0ICYmICd3aXRoQ3JlZGVudGlhbHMnIGluIG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICBpZiAoQ09SUykge1xuICAgIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIHhoci5vcGVuKG1ldGhvZCwgdXJsLCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICB4aHIgPSBuZXcgd2luZG93LlhEb21haW5SZXF1ZXN0KCk7XG4gICAgeGhyLm9wZW4obWV0aG9kLCB1cmwpO1xuICB9XG4gIC8vIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlXG4gIHZhciB0aW1lb3V0ID0gKG9wdHMgJiYgb3B0cy50aW1lb3V0KSA/IG9wdHMudGltZW91dCA6IF9jb25maWcudGltZW91dDtcbiAgeGhyLnRpbWVvdXQgPSB0aW1lb3V0O1xuICB4aHIub25sb2FkID0gb25sb2FkO1xuICB4aHIub25lcnJvciA9IHJlamVjdDtcbiAgeGhyLm9udGltZW91dCA9IHJlamVjdDtcbiAgeGhyLnNlbmQoKTtcbn07XG5cbnZhciByZXF1ZXN0ID0gZnVuY3Rpb24gKHVybCwgcmVzb2x2ZSwgcmVqZWN0LCBvcHRzKSB7XG4gIGlmICh3aW5kb3cuZmV0Y2gpIHtcbiAgICBmZXRjaCh1cmwsIHJlc29sdmUsIHJlamVjdCwgb3B0cyk7XG4gIH0gZWxzZSB7XG4gICAgYWpheCh1cmwsIHJlc29sdmUsIHJlamVjdCwgb3B0cyk7XG4gIH1cbn07XG5cbmV4cG9ydHMucmVxdWVzdCA9IHJlcXVlc3Q7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9saWJfdS91dGlscy9mZXRjaERhdGEuanNcbi8vIG1vZHVsZSBpZCA9IDEyMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIGFsaWxvZy9zIC0gc3JjL2xpYl91L2NvbmZpZy9pbml0L2luaXRMb2FkX2Jhc2UuanNcbiAqIOWIneWni+WMluWfuuehgOaooeWdl++8jOS4jeiDveebtOaOpeS9v+eUqO+8jOmcgOimgemAmui/h2luaXRMb2FkX3BjLmpz5oiWaW5pdExvYWRfd2FwLmpz562J5YW35L2T55qE5Zy65pmv5qih5Z2X6LCD55SoXG4gKlxuICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuICpcbiAqIEF1dGhvcnM6XG4gKiAgIEBhdXRob3Igaml6aGEud3lqIEBibG9nIGh0dHA6Ly9vbGRqLm5ldFxuICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBCYXNlID0gcmVxdWlyZSgnQGNvcmUvQmFzZScpO1xudmFyIHV0aWxHb2xkbG9nID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxHb2xkbG9nJyk7XG52YXIgYWN0aW9uID0gcmVxdWlyZSgnLi9hY3Rpb24nKTtcblxudmFyIFF1ZXVlID0gQmFzZS5leHRlbmQoe1xuICBwdXNoOiBmdW5jdGlvbih0YXNrKSB7XG4gICAgdGhpcy5sZW5ndGgrKztcbiAgICBhY3Rpb24ucHJvY2Vzc1Rhc2sodGFzaywgdGhpcy5vcHRzKTsgIFxuICB9LFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4ge1xuICAgIHByb2Nlc3NBcGx1c1F1ZXVlOiBmdW5jdGlvbiAocXVldWVOYW1lKSB7XG4gICAgICB2YXIgb3B0cyA9IHRoaXMub3B0aW9ucy5jb25maWcgfHwge307XG4gICAgICB2YXIgcXVlID0gdXRpbEdvbGRsb2cuZ2V0R2xvYmFsVmFsdWUocXVldWVOYW1lKTtcbiAgICAgIGFjdGlvbi5wcm9jZXNzR29sZGxvZ1F1ZXVlKHF1ZSwgb3B0cyk7XG4gICAgICB1dGlsR29sZGxvZy5zZXRHbG9iYWxWYWx1ZShxdWV1ZU5hbWUsIFF1ZXVlLmNyZWF0ZSh7XG4gICAgICAgIG9wdHM6IG9wdHMsIFxuICAgICAgICBzdGFydExlbmd0aDogcXVlLmxlbmd0aCxcbiAgICAgICAgbGVuZ3RoOiAwXG4gICAgICB9KSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbXMge1N0cmluZ30gdHlwZVxuICAgICAqL1xuICAgIHJ1bjogIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBhcGx1c19jb25maWcgPSB0aGlzLm9wdGlvbnMuY29udGV4dC5hcGx1c19jb25maWc7XG4gICAgICB2YXIgQVBMVVNfUVVFVUUgPSBhcGx1c19jb25maWcuZ2xvYmFsQ29uZmlnLkFQTFVTX1FVRVVFO1xuXG4gICAgICB0aGlzLnByb2Nlc3NBcGx1c1F1ZXVlKEFQTFVTX1FVRVVFKTtcblxuICAgICAgaWYgKEFQTFVTX1FVRVVFID09PSAnYXBsdXNfcXVldWUnKSB7XG4gICAgICAgIHRoaXMucHJvY2Vzc0FwbHVzUXVldWUoJ2dvbGRsb2dfcXVldWUnKTtcbiAgICAgIH1cbiAgICAgIGFjdGlvbi5zdWJzY3JpYmVBbmRQcm9jZXNzUXVldWUoQVBMVVNfUVVFVUUsIHRoaXMub3B0aW9ucy5jb25maWcpO1xuICAgIH1cbiAgfTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9wbHVnaW5zL2xpYl9xdWV1ZS9hcGx1c19xdWV1ZS5qc1xuLy8gbW9kdWxlIGlkID0gMTIxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogcHJvamVjdCAtIGZpbGVwYXRoXG4gKiDov5nmmK/kuIDkuKrliqDovb3lmajvvIznlKjkuo7ng63liqDovb1KU+aPkuS7tlxuICpcbiAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cbiAqXG4gKiBBdXRob3JzOlxuICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBlYWNoID0gcmVxdWlyZSgnQHV0aWxzL2VhY2gnKTtcbnZhciB1dGlsRG9tID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxEb20nKTtcbnZhciB1dGlsQXJyYXkgPSByZXF1aXJlKCdAdXRpbHMvdXRpbEFycmF5Jyk7XG4vLyB2YXIgcGx1Z2luTG9hZGVyTWFwID0ge307XG4vKipcbiAqIERPTVJlYWR55ZCO5byA5aeL5omn6KGM5Yqg6L29YXBsdXNKU+aPkuS7tueahOWKqOS9nFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW1zIHtPYmplY3R9IG9wdGlvbnMge1xuICAgICAqICAgbG9nQ29uZmlnOiB7bG9nQ29uZmlnfVxuICAgICAqIH1cbiAgICAgKi9cbiAgICBpbml0OiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH0sXG5cbiAgICAvLyAvKipcbiAgICAvLyAgKiDliqDovb3oh6rliqjmm53lhYlcXOiHquWKqOeCueWHu+eahGpzXG4gICAgLy8gICogQHBhcmFtcyB7U3RyaW5nfSBtZXRhS2V5ICdhcGx1cy1hdXRvLWV4cCcgfCAnYXBsdXMtYXV0by1jbGsnXG4gICAgLy8gICogQHBhcmFtcyB7U3RyaW5nfSBtZXRhVmFsdWVcbiAgICAvLyAgKi9cbiAgICAvLyBsb2FkQXBsdXNQbHVnaW46IGZ1bmN0aW9uIChtZXRhS2V5KSB7XG4gICAgLy8gICB2YXIgY29uZmlnID0gdGhpcy5vcHRpb25zLmNvbmZpZyB8fCB7fTtcbiAgICAvLyAgIHZhciBjZG5QYXRoID0gY29uZmlnW21ldGFLZXldO1xuICAgIC8vICAgdmFyIHBsdWdpbl9wYXRocyA9IGFwbHVzLmdldENkblBhdGgoKSArIGNkblBhdGg7XG4gICAgLy8gICBpZiAoY2RuUGF0aCAmJiAhYXBsdXNbY29uZmlnLmdsb2JhbE5hbWVdICYmICFwbHVnaW5Mb2FkZXJNYXBbY2RuUGF0aF0pIHtcbiAgICAvLyAgICAgdXRpbERvbS5hZGRTY3JpcHQocGx1Z2luX3BhdGhzKTtcbiAgICAvLyAgICAgcGx1Z2luTG9hZGVyTWFwW2NkblBhdGhdID0gdHJ1ZTtcbiAgICAvLyAgIH1cbiAgICAvLyB9LFxuXG4gICAgYWRkU3R5bGU6IGZ1bmN0aW9uIChpZCwgc3R5bGVVcmwpIHtcbiAgICAgIHZhciBzdHlsZUlkID0gaWQgKyAnX3N0eWxlJztcbiAgICAgIHZhciBzdHlsZU5vZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChzdHlsZUlkKTtcbiAgICAgIGlmICghc3R5bGVOb2RlKSB7XG4gICAgICAgIHN0eWxlTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKTtcbiAgICAgICAgc3R5bGVOb2RlLmlkID0gc3R5bGVJZDtcbiAgICAgICAgc3R5bGVOb2RlLmhyZWYgPSBzdHlsZVVybDtcbiAgICAgICAgc3R5bGVOb2RlLnJlbCA9ICdzdHlsZXNoZWV0JztcbiAgICAgICAgc3R5bGVOb2RlLnR5cGUgPSAndGV4dC9jc3MnO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpLml0ZW0oMCkuYXBwZW5kQ2hpbGQoc3R5bGVOb2RlKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgcnVuOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBfc2VsZiA9IHRoaXM7XG4gICAgICB2YXIgaXNfaW5faWZyYW1lID0gcGFyZW50ICE9PSBzZWxmOyAgLy8g5b2T5YmN6aG16Z2i5piv5ZCm5ZyoIGlmcmFtZSDkuK1cbiAgICAgIHZhciBjb25maWcgPSB0aGlzLm9wdGlvbnMuY29uZmlnIHx8IHt9O1xuICAgICAgaWYgKCFpc19pbl9pZnJhbWUgJiYgY29uZmlnLnVybFJ1bGVzKSB7XG4gICAgICAgIGVhY2goY29uZmlnLnVybFJ1bGVzLCBmdW5jdGlvbiAodikge1xuICAgICAgICAgIHZhciByZWcgPSBuZXcgUmVnRXhwKHYucnVsZSk7XG4gICAgICAgICAgdmFyIG1hdGNoZWRJbkxTO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBtYXRjaGVkSW5MUyA9IHYuaWQgPyB3aW5kb3cuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSh2LmlkKSA6ICcnO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgaWYgKHJlZy50ZXN0KGxvY2F0aW9uLmhyZWYpIHx8IG1hdGNoZWRJbkxTKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICB3aW5kb3cuc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSh2LmlkLCB0cnVlKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgICBpZiAodXRpbEFycmF5LmlzQXJyYXkodi5jZG5QYXRoKSkge1xuICAgICAgICAgICAgICBlYWNoKHYuY2RuUGF0aCwgZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgICAgICAgICAgICBpZiAoL1xcLmNzcyQvLnRlc3QocGF0aCkpIHtcbiAgICAgICAgICAgICAgICAgIF9zZWxmLmFkZFN0eWxlKHYuaWQsIHBhdGgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoL1xcLmpzLy50ZXN0KHBhdGgpKSB7XG4gICAgICAgICAgICAgICAgICB1dGlsRG9tLmFkZFNjcmlwdChwYXRoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdXRpbERvbS5hZGRTY3JpcHQodi5jZG5QYXRoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgLy8gYXBsdXMuYXBsdXNfcHVic3ViLnN1YnNjcmliZSgnc2V0TWV0YUluZm8nLCBmdW5jdGlvbiAobWV0YUtleSwgbWV0YVZhdWUpIHtcbiAgICAgIC8vICAgX3NlbGYubG9hZEFwbHVzUGx1Z2luKG1ldGFLZXksIG1ldGFWYXVlKTtcbiAgICAgIC8vIH0pO1xuICAgICAgLy8gaWYgKC9hcGx1c193ZWJ2dF9tZXNzYWdlci8udGVzdChsb2NhdGlvbi5ocmVmKSkge1xuICAgICAgLy8gICB1dGlsRG9tLmFkZFNjcmlwdChwbHVnaW5fcGF0aHMpO1xuICAgICAgLy8gfVxuICAgIH1cbiAgfTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9wbHVnaW5zX3dlYi9saWJfaG90L2hvdF9sb2FkZXIuanNcbi8vIG1vZHVsZSBpZCA9IDEyMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIHByb2plY3QgLSBmaWxlcGF0aFxuICog5Y+v6KeG5YyW5YiG5p6Q5o+S5Lu25Yqg6L295ZmoXG4gKlxuICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuICpcbiAqIEF1dGhvcnM6XG4gKiAgIOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxEb20gPSByZXF1aXJlKCdAdXRpbHMvdXRpbERvbScpO1xudmFyIHV0aWxVcmwgPSByZXF1aXJlKCdAdXRpbHMvdXRpbFVybCcpO1xudmFyIHV0aWxIb3RMb2FkZXIgPSByZXF1aXJlKCcuL3V0aWxIb3RMb2FkZXIuanMnKTtcblxuLyoqXG4gKiBET01SZWFkeeWQjuW8gOWni+aJp+ihjOWKoOi9vWFwbHVzSlPmj5Lku7bnmoTliqjkvZxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtcyB7T2JqZWN0fSBvcHRpb25zIHtcbiAgICAgKiAgIGxvZ0NvbmZpZzoge2xvZ0NvbmZpZ31cbiAgICAgKiB9XG4gICAgICovXG4gICAgaW5pdDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9LFxuXG4gICAgcnVuOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBpc19pbl9pZnJhbWUgPSBwYXJlbnQgIT09IHNlbGY7ICAvLyDlvZPliY3pobXpnaLmmK/lkKblnKggaWZyYW1lIOS4rVxuICAgICAgdmFyIGNvbmZpZyA9IHRoaXMub3B0aW9ucy5jb25maWcgfHwge307XG4gICAgICB2YXIgc2Vzc2lvbktleSA9IGNvbmZpZy5zZXNzaW9uS2V5O1xuICAgICAgdmFyIGZsYWcgPSB1dGlsVXJsLmdldFBhcmFtRnJvbVVybChzZXNzaW9uS2V5LCBsb2NhdGlvbi5ocmVmKTtcbiAgICAgIGlmICghaXNfaW5faWZyYW1lICYmIChmbGFnID09PSAncHJlJyB8fCBmbGFnID09PSAndHJ1ZScpKSB7XG4gICAgICAgIHZhciBKU1BBVEggPSBjb25maWcuSlNQQVRIO1xuICAgICAgICB2YXIgQ1NTUEFUSCA9IGNvbmZpZy5DU1NQQVRIO1xuICAgICAgICBpZiAoZmxhZyA9PT0gJ3ByZScpIHtcbiAgICAgICAgICB2YXIgZGV2Q2RuID0gJ2Rldi5nLmFsaWNkbi5jb20nO1xuICAgICAgICAgIEpTUEFUSCA9IEpTUEFUSC5yZXBsYWNlKC9nXFwuYWxpY2RuXFwuY29tLywgZGV2Q2RuKTtcbiAgICAgICAgICBDU1NQQVRIID0gQ1NTUEFUSC5yZXBsYWNlKC9nXFwuYWxpY2RuXFwuY29tLywgZGV2Q2RuKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBqc0lkID0gc2Vzc2lvbktleSArICdKUyc7XG4gICAgICAgIHZhciBtYXRjaGVkSW5MUztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBtYXRjaGVkSW5MUyA9IHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKGpzSWQpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICBpZiAobWF0Y2hlZEluTFMgfHwgSlNQQVRIKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5zZXRJdGVtKGpzSWQsIHRydWUpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgdXRpbERvbS5hZGRTY3JpcHQoSlNQQVRIKTtcbiAgICAgICAgICBpZiAoQ1NTUEFUSCkge1xuICAgICAgICAgICAgdmFyIGNzc0lkID0gc2Vzc2lvbktleSArICdDU1MnO1xuICAgICAgICAgICAgdXRpbEhvdExvYWRlci5hZGRTdHlsZShjc3NJZCwgQ1NTUEFUSCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL3BsdWdpbnNfd2ViL2xpYl9ob3QvYXBsdXNfYW5hbHl0aWNzLmpzXG4vLyBtb2R1bGUgaWQgPSAxMjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiDliKTmlq3mmK/lkKbmlK/mjIF0b3VjaOS6i+S7tlxuICogQHJldHVybiBbQm9vbGVhbl1cbiAqL1xuZXhwb3J0cy5hZGRTdHlsZSA9IGZ1bmN0aW9uIChpZCwgc3R5bGVVcmwpIHtcbiAgdmFyIHN0eWxlSWQgPSBpZCArICdfc3R5bGUnO1xuICB2YXIgc3R5bGVOb2RlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoc3R5bGVJZCk7XG4gIGlmICghc3R5bGVOb2RlKSB7XG4gICAgc3R5bGVOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGluaycpO1xuICAgIHN0eWxlTm9kZS5pZCA9IHN0eWxlSWQ7XG4gICAgc3R5bGVOb2RlLmhyZWYgPSBzdHlsZVVybDtcbiAgICBzdHlsZU5vZGUucmVsID0gJ3N0eWxlc2hlZXQnO1xuICAgIHN0eWxlTm9kZS50eXBlID0gJ3RleHQvY3NzJztcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpLml0ZW0oMCkuYXBwZW5kQ2hpbGQoc3R5bGVOb2RlKTtcbiAgfVxufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL3BsdWdpbnNfd2ViL2xpYl9ob3QvdXRpbEhvdExvYWRlci5qc1xuLy8gbW9kdWxlIGlkID0gMTI0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogYWxpbG9nL3MgLSBzcmMvcGx1Z2lucy9saWJfYXB2L21haW4uanNcbiAqIOiHquWKqFBW5o+S5Lu2XG4gKlxuICpcbiAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cbiAqXG4gKiBBdXRob3JzOlxuICogICBSaWNoYXJkfOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG4gKi9cbid1c2Ugc3RyaWN0JztcbnZhciB1dGlsTG9nZ2VyID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxMb2dnZXInKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7XG4gICAgcnVuOiBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyDmnInlj6/op4bljJbln4vngrnnmoTmg4XlhrXkuIvml6DpnIDoh6rliqjmiZNwduaXpeW/l1xuICAgICAgaWYgKGFwbHVzLl9hcGx1c19jcGx1Z2luX3dlYnZ0KSB7XG4gICAgICAgIHV0aWxMb2dnZXIubG9nZ2VyKHtcbiAgICAgICAgICBtc2c6ICflvZPliY3pm4bmiJDkuoblj6/op4bljJbln4vngrnliIbmnpDmj5Lku7bvvIzpnIDopoHmgqjlgZrlj6/op4bljJbln4vngrnphY3nva7vvIzmiY3kvJrmnInoh6rliqhwduWKn+iDvSdcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlcXVpcmUoJy4vbGliX2Fwdi9tYWluJykoKTsgIFxuICAgICAgfVxuICAgIH1cbiAgfTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvcGx1Z2luc193ZWIvYXBsdXNfYXB2X2luamVjdC5qc1xuLy8gbW9kdWxlIGlkID0gMTI1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogYWxpbG9nL3MgLSBzcmMvcGx1Z2lucy9saWJfYXB2L21haW4uanNcbiAqIOiHquWKqFBW5o+S5Lu2XG4gKlxuICpcbiAqIENvcHlyaWdodChjKSBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cbiAqXG4gKiBBdXRob3JzOlxuICogICBSaWNoYXJkfOiwi+WjqyA8cWluZ2xpYW5nLmhxbEBhbGliYWJhLWluYy5jb20+XG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxHb2xkbG9nID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxHb2xkbG9nJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYXBsdXMgPSB1dGlsR29sZGxvZy5nZXRHbG9iYWxWYWx1ZSgnYXBsdXMnKTtcbiAgdmFyIGFwbHVzX3F1ZXVlID0gdXRpbEdvbGRsb2cuZ2V0R2xvYmFsVmFsdWUoJ2FwbHVzX3F1ZXVlJyk7XG4gIGlmIChhcGx1cy5fYXBsdXNfYXB2KSB7XG4gICAgcmV0dXJuO1xuICB9IGVsc2Uge1xuICAgIGFwbHVzLl9hcGx1c19hcHYgPSB7XG4gICAgICBzdGF0dXM6ICdjb21wbGV0ZSdcbiAgICB9O1xuICB9XG4gIGFwbHVzX3F1ZXVlLnB1c2goe1xuICAgIGFjdGlvbjogJ2FwbHVzLnNlbmRQVicsXG4gICAgYXJndW1lbnRzOiBbe1xuICAgICAgaXNfYXV0bzogdHJ1ZVxuICAgIH1dXG4gIH0pO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL3BsdWdpbnNfd2ViL2xpYl9hcHYvbWFpbi5qc1xuLy8gbW9kdWxlIGlkID0gMTI2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogYWxpbG9nL3Mvc3JjL2FwbHVzLmpzXG4gKiDmqKHlnZfljJbnmoRhcGx1c0pz5YWl5Y+jXG4gKlxuICogQ29weXJpZ2h0KGMpIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuICpcbiAqIEF1dGhvcnM6XG4gKiAgIGppemhhLnd5akBibG9nIGh0dHA6Ly9vbGRqLm5ldFxuICogICDosIvlo6sgPHFpbmdsaWFuZy5ocWxAYWxpYmFiYS1pbmMuY29tPlxuICovXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFwbHVzX2NvbmZpZykge1xuICB2YXIgd2luID0gd2luZG93O1xuICB2YXIgX2sgPSAnZ190Yl9hcGx1c19sb2FkZWQnO1xuICBpZiAod2luW19rXSkgcmV0dXJuO1xuICB3aW5bX2tdID0gMTtcbiAgcmVxdWlyZSgnQHV0aWxzL2RlYnVnJykuaXNEZWJ1Z0FwbHVzKCk7XG4gIHZhciB1dGlsTG9nZ2VyID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxMb2dnZXInKTtcbiAgdmFyIHV0aWxQdWJzdWIgPSByZXF1aXJlKCdAdXRpbHMvdXRpbFB1YnN1YicpO1xuICB2YXIgdXRpbERhc2ggPSByZXF1aXJlKCdAdXRpbHMvdXRpbERhc2gnKTtcbiAgdmFyIGVhY2ggPSByZXF1aXJlKCdAdXRpbHMvZWFjaCcpO1xuICB2YXIgYXBsdXNpbml0ID0gcmVxdWlyZSgnQGNvcmUvYXBsdXNpbml0Jyk7XG5cbiAgdmFyIFJVTk5JTkcgPSAncnVubmluZyc7XG4gIC8vIHZhciBDT01QTEVURSA9ICdjb21wbGV0ZSc7XG4gIHZhciBhcGx1c1N0YXR1cyA9IFsnYXBsdXNSZWFkeScsIFJVTk5JTkddO1xuICB1dGlsUHVic3ViLmRvUHViTXNnKGFwbHVzU3RhdHVzKTtcblxuICBhcGx1c2luaXQucnVuKHtcbiAgICBwbHVnaW5zOiBhcGx1c19jb25maWcucGx1Z2lucyxcbiAgICBjb250ZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY29uZmlnX3B2X2NvbnRleHQgPSB7XG4gICAgICAgIFBBR0VfTE9BRF9USU1FOiBuZXcgRGF0ZSgpXG4gICAgICB9O1xuICAgICAgdmFyIFBMVUdJTlNfUFYgPSBbXTtcbiAgICAgIGVhY2goYXBsdXNfY29uZmlnLnBsdWdpbnMsIGZ1bmN0aW9uICh2KSB7XG4gICAgICAgIGNvbmZpZ19wdl9jb250ZXh0W3YubmFtZV0gPSB2LmNvbmZpZyB8fCB7fTtcbiAgICAgICAgaWYgKHYubmFtZSA9PT0gJ2FwbHVzX2xvZ19pbmplY3QnICYmIHYuY29uZmlnICYmIHYuY29uZmlnLnBsdWdpbnMpIHtcbiAgICAgICAgICBQTFVHSU5TX1BWID0gdi5jb25maWcucGx1Z2lucy5wdjtcbiAgICAgICAgICBlYWNoKFBMVUdJTlNfUFYsIGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgICBjb25maWdfcHZfY29udGV4dFt2Lm5hbWVdID0gdi5jb25maWc7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHV0aWxEYXNoLmFzc2lnbihjb25maWdfcHZfY29udGV4dCwge1xuICAgICAgICBhcGx1c19jb25maWc6IGFwbHVzX2NvbmZpZ1xuICAgICAgfSk7XG4gICAgfVxuICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgdXRpbExvZ2dlci5sb2dnZXIoe1xuICAgICAgbXNnOiAnQVBMVVPliJ3lp4vljJblrozmiJAnXG4gICAgfSk7XG4gIH0pO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2FwbHVzX3dlYl9iYXNpYy5qc1xuLy8gbW9kdWxlIGlkID0gMTI3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogcHJvamVjdCAtIGZpbGVwYXRoXG4gKiBhcGx1cyBBUElcbiAqXG4gKiBDb3B5cmlnaHQoYykgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG4gKlxuICogQXV0aG9yczpcbiAqICAg6LCL5aOrIDxxaW5nbGlhbmcuaHFsQGFsaWJhYmEtaW5jLmNvbT5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVkdWNlciA9IHJlcXVpcmUoJ0Bjb3JlL1JlZHVjZXInKTtcbnZhciBpc0Z1bmN0aW9uID0gcmVxdWlyZSgnQHV0aWxzL2lzRnVuY3Rpb24nKTtcbnZhciB1dGlsUHVic3ViID0gcmVxdWlyZSgnQHV0aWxzL3V0aWxQdWJzdWInKTtcblxuLyoqXG4gKiDlsIblkI7nu63nmoRpbml05Yqo5L2c6YO95YGa5oiQ5o+S5Lu277yM55uu5YmN5Y+q5pyJd2hlcmVfdG9fc2VuZHB25LiA6aG5XG4gKlxuICogQHBhcmFtcyB7T2JqZWN0fSBvcHRzIHtcbiAqICAgcGx1Z2luc1xuICogICBjb250ZXh0XG4gKiB9XG4gKiBAcGFyYW1zIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqXG4gKi9cbmV4cG9ydHMucnVuID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gIHZhciByZWR1Y2VyID0gbmV3IFJlZHVjZXIoKTtcbiAgcmVkdWNlci5ydW4oe1xuICAgIHBsdWdpbnM6IG9wdHMucGx1Z2lucyxcbiAgICBjb250ZXh0OiBvcHRzLmNvbnRleHRcbiAgfSwge1xuICAgIGNvbmZpZzoge30sXG4gICAgdXNlcmRhdGE6IHt9LFxuICAgIHB1YnN1YlR5cGU6ICdhcGx1c2luaXQnLFxuICAgIG1lc3NhZ2VGblF1ZXVlOiBbXSxcbiAgICBtaWRkbGV3YXJlTWVzc2FnZUtleTogJ213X2NoYW5nZV9hcGx1c2luaXQnXG4gIH0sIGZ1bmN0aW9uIChjdHgpIHtcbiAgICB2YXIgbXNncyA9IFsnYXBsdXNJbml0Q29udGV4dCcsIGN0eF07XG4gICAgdXRpbFB1YnN1Yi5kb1B1Yk1zZyhtc2dzKTtcbiAgICB1dGlsUHVic3ViLmRvQ2FjaGVQdWJzKG1zZ3MpO1xuICAgIGlmIChpc0Z1bmN0aW9uKGNhbGxiYWNrKSkge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG4gIH0pO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2xpYl91L2NvcmUvYXBsdXNpbml0LmpzXG4vLyBtb2R1bGUgaWQgPSAxMjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==